#pragma once
#include "stdafx.h"
#include "Features.h"
#include "shellapi.h"
#include "Authh.h"
#include <fstream>
#include <string>
#include <iostream>
//#include "Version.h"
//#include "status.h"
//#include "build.h"
#include "willkommen.h"
#include "status.h"
#include "build.h"
int menyooX = 17;
int menyooY = 4;
int armor;
int engine;
int brakes;
int horn;
int plate;
int windowtint;
int transmission;
int suspension;
int turbo;
int widthkek = 24;
int Join = 0;
bool Joiner;
int spoiler;
int fbumper;
int bbumper;
int skirt;
int exhaust;
int frame;
int grille;
int hood;
int fender;
int rightfender;
int roof;
std::vector<char*> gender = { "Male", "Female" };
int genderPos;
int Face_ = 0;
int Glasses_ = 0;
int Ears_ = 0;
int Torso_ = 0;
int Torso2_ = 0;
int Legs_ = 0;
int Hands_ = 0;
int Watches_ = 0;
int Special1_ = 0;
int Special2_ = 0;
int Special3_ = 0;
int Texture_ = 0;

int FaceTex_ = 0;
int GlassesTex_ = 0;
int EarsTex_ = 0;
int TorsoTex_ = 0;
int Torso2Tex_ = 0;
int LegsTex_ = 0;
int HandsTex_ = 0;
int WatchesTex_ = 0;
int Special1Tex_ = 0;
int Special2Tex_ = 0;
int Special3Tex_ = 0;


void SetPedMovementClipset(char* clipset) {
	STREAMING::REQUEST_ANIM_SET(clipset);
	while (!STREAMING::HAS_ANIM_SET_LOADED(clipset)) WAIT(0);
	PED::SET_PED_MOVEMENT_CLIPSET(PLAYER::PLAYER_PED_ID(), clipset, 1.0f);
}

bool isPlayerFriend(Player player, bool result)
{
	int NETWORK_HANDLE[76];
	NETWORK::NETWORK_HANDLE_FROM_PLAYER(player, &NETWORK_HANDLE[0], 13);
	if (NETWORK::NETWORK_IS_HANDLE_VALID(&NETWORK_HANDLE[0], 13))
	{
		result = NETWORK::NETWORK_IS_FRIEND(&NETWORK_HANDLE[0]);
		return true;
	}
	return false;
}

int NumberKeyboard() {
	GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(1, "", "", "", "", "", "", 10);
	while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
	if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return 0;
	return atof(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT());
}

char* CharKeyboard(char* windowName = "", int maxInput = 21, char* defaultText = "") {
	GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(0, "", "", defaultText, "", "", "", maxInput);
	while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
	if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return "";
	return GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
}
class trains {
protected:
	const std::vector<const char*> Trains = { "cablecar", "metrotrain", "freight", "freightcar", "freightgrain", "freightcont1", "freightcont2", "freighttrailer" };
	int vTrain;
	int speed;
	bool controlled;
public:
	const void spawn_train() {
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY(const_cast<char*>(Trains[0])));
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY(const_cast<char*>(Trains[1])));
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY(const_cast<char*>(Trains[2])));
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY(const_cast<char*>(Trains[3])));
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY(const_cast<char*>(Trains[4])));
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY(const_cast<char*>(Trains[5])));
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY(const_cast<char*>(Trains[6])));
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY(const_cast<char*>(Trains[7])));

		while (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY(const_cast<char*>(Trains[0]))))
			WAIT(0);
		while (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY(const_cast<char*>(Trains[1]))))
			WAIT(0);
		while (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY(const_cast<char*>(Trains[2]))))
			WAIT(0);
		while (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY(const_cast<char*>(Trains[3]))))
			WAIT(0);
		while (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY(const_cast<char*>(Trains[4]))))
			WAIT(0);
		while (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY(const_cast<char*>(Trains[5]))))
			WAIT(0);
		while (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY(const_cast<char*>(Trains[6]))))
			WAIT(0);
		while (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY(const_cast<char*>(Trains[7]))))
			WAIT(0);

		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), TRUE);
		vTrain = VEHICLE::CREATE_MISSION_TRAIN(15, coords.x, coords.y, coords.z, 1);
		VEHICLE::SET_VEHICLE_UNDRIVEABLE(vTrain, false);
		PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), vTrain, -1);
		notifyBottom("~g~Spawned!");
	}
	const bool control_train_b(bool toggle) {
		return controlled = toggle;
	}
	const void control_train() {
		if (controlled) {
			if (ENTITY::DOES_ENTITY_EXIST(vTrain)) {
				if (PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false) == vTrain) {
					bool forward = false, backward = false;
					if (CONTROLS::IS_CONTROL_PRESSED(2, eControl::ControlMoveUpOnly)) //forward
					{
						forward = true;
						backward = false;
					}
					else if (CONTROLS::IS_CONTROL_PRESSED(2, eControl::ControlMoveDownOnly))
					{
						backward = true;
						forward = false;
					}
					if (backward)
						VEHICLE::SET_TRAIN_SPEED(vTrain, -speed);
					else if (forward)
						VEHICLE::SET_TRAIN_SPEED(vTrain, speed);
					else
						VEHICLE::SET_TRAIN_SPEED(vTrain, speed);
				}
			}
		}
	}
	const int change_speed(const int _speed) {
		speed = _speed;
		VEHICLE::SET_TRAIN_SPEED(vTrain, speed);
	}
	const void delete_train() {
		VEHICLE::DELETE_MISSION_TRAIN(&vTrain);
	}
}; const std::unique_ptr<trains> train = std::make_unique<trains>();


bool control_veh = false;
int speed_train = 25;
void Featuress()
{
	train->change_speed(speed_train);
	train->control_train();
	train->control_train_b(control_veh);
}


std::vector<std::string> stream_AfterHours = { "lgm_dlc_battle", "", "candc_battle", "candc_battle", "candc_battle", "sssa_dlc_battle", "sssa_dlc_battle", "candc_battle", "candc_battle", "", "lgm_dlc_battle", "candc_battle", "lgm_dlc_battle", "" };
std::vector<std::string> stream_Assault = { "candc_assault", "sssa_dlc_assault", "sssa_dlc_assault", "sssa_dlc_assault", "lgm_dlc_assault", "sssa_dlc_assault", "sssa_dlc_assault", "sssa_dlc_assault", "lgm_dlc_assault", "lgm_dlc_assault", "lgm_dlc_assault", "sssa_dlc_assault", "elt_dlc_assault", "lgm_dlc_assault", "lgm_dlc_assault", "lgm_dlc_assault", };
std::vector<std::string> stream_Smugglers = { "elt_dlc_smuggler", "candc_smuggler", "lgm_dlc_smuggler", "elt_dlc_smuggler", "elt_dlc_smuggler", "candc_smuggler", "elt_dlc_smuggler", "candc_smuggler", "candc_smuggler", "candc_smuggler", "candc_smuggler", "lgm_dlc_smuggler", "sssa_dlc_smuggler", "candc_smuggler", "elt_dlc_smuggler", "candc_smuggler", "candc_smuggler", "candc_smuggler", "lgm_dlc_smuggler" };
std::vector<std::string> stream_Supper = { "lgm_default", "lsc_jan2016", "lgm_default", "lgm_default", "lgm_default", "lgm_dlc_executive1", "lgm_dlc_stunt", "lgm_default", "lsc_dlc_import_export", "lsc_dlc_import_export", "lgm_dlc_luxe", "lgm_dlc_stunt", "lsc_dlc_import_export", "lsc_dlc_import_export", "lgm_dlc_executive1", "lgm_dlc_executive1", "lgm_dlc_executive1", "lsc_jan2016", "lgm_dlc_luxe", "lgm_dlc_importexport", "lgm_dlc_business", "lgm_dlc_stunt", "lgm_default", "lgm_dlc_apartments", "lgm_dlc_business2", "lgm_default", "lgm_dlc_importexport", "lgm_dlc_specialraces", };
std::vector<std::string> stream_Service = { "candc_default", "candc_executive1", "candc_default", "candc_default", "sssa_dlc_stunt", "candc_apartments", "lgm_dlc_heist", "candc_default", "candc_default", "candc_default","lsc_dlcimportexport" };
std::vector<std::string> stream_Sports = { "lgm_dlc_business", "sssa_default", "lgm_dlc_executive1", "sssa_dlc_mp_to_sp", "sssa_dlc_mp_to_sp",
"sssa_dlc_hipster", "sssa_dlc_hipster", "sssa_dlc_mp_to_sp", "lgm_default", "lgm_default",
"lgm_default", "lsc_dlcimportexport", "lgm_default", "lgm_default", "lgm_dlc_lts_creator", "sssa_dlc_business",
"sssa_dlc_business", "lgm_dlc_business", "sssa_dlc_christmas_2", "lgm_default", "sssa_dlc_heist",
"sssa_dlc_heist", "lgm_dlc_stunt", "lgm_dlc_business2", "sssa_dlc_christmas_2", "lgm_default",
"lgm_default", "sssa_dlc_stunt", "sssa_dlc_business", "lgm_default", "lgm_default",
"lgm_dlc_biker", "lgm_dlc_apartments", "lgm_dlc_apartments", "sssa_default", "lgm_dlc_executive1",
"lsc_jan2016", "sssa_default", "lsc_dlcimportexport", "lsc_dlcimportexport", "sssa_dlc_stunt", "sssa_dlc_stunt", "lgm_dlc_apartments",
"candc_importexport", "candc_importexport", "lgm_dlc_smuggler" };
std::vector<std::string> stream_Militär = { "candc_apartments", "candc_apartments", "candc_apartments", "candc_apartments", "candc_apartments" };

std::vector<std::string> AfterHours = { "freecrawler", "", "menacer", "mule4", "oppressor2", "patriot2", "pbus2", "pounder2", "scramjet", "", "stafford", "strikeforce", "swinger", "" };
std::vector<std::string> Assault = { "caracara", "cheburek", "dominator3", "ellie", "entity2", "fagaloa", "flashgt", "gb200", "hotring", "issi3", "jester3", "michelli", "sparrow", "taipan", "tezeract", "tyrant" };
std::vector<std::string> Smugglers = { "alphaz1", "bombushka", "cyclone", "havok", "howard", "hunter", "microlight", "mogul", "molotok", "nokota", "pyro", "rapidgt3", "retinue", "rogue", "seabreeze", "starling", "tula", "vigilante", "visione" };
std::vector<std::string> Supper = { "ADDER", "BANSHEE2", "BULLET", "CHEETAH", "ENTITYXF",
"FMJ", "SHEAVA", "INFERNUS", "NERO", "NERO2","OSIRIS", "LE7B",
"ITALIGTB", "ITALIGTB2", "PFISTER811", "PROTOTIPO", "REAPER", "SULTANRS", "T20",
"TEMPESTA", "TURISMOR", "TYRUS", "VACCA", "VOLTIC", "ZENTORNO", "VOLTIC2", "PENETRATOR", "GP1" };

std::vector<std::string> Sports = { "ALPHA", "BANSHEE", "BESTIAGTS", "BLISTA2", "BLISTA3",
"BUFFALO", "BUFFALO2", "BUFFALO3", "CARBONIZZARE", "COMET2",
"COQUETTE", "ELEGY", "ELEGY2", "FELTZER2", "FUROREGT", "FUSILADE",
"FUTO", "JESTER", "JESTER2", "KHAMELION", "KURUMA",
"KURUMA2", "LYNX", "MASSACRO", "MASSACRO2", "NINEF",
"NINEF2", "OMNIS", "PENUMBRA", "RAPIDGT", "RAPIDGT2",
"RAPTOR", "SCHAFTER3", "SCHAFTER4", "SCHWARTZER", "SEVEN70",
"SULTAN", "SURANO", "SPECTER", "SPECTER2", "TAMPA2", "TROPOS", "VERLIERER2",
"RUINER2", "PHANTOM2", "RUSTON" };

std::vector<std::string> Militär = { "BARRACKS", "BARRACKS2", "BARRACKS3", "CRUSADER", "RHINO" };




bool RequestNetControl(uint vehID)
{
	int Tries = 0;
	bool
		hasControl = false,
		giveUp = false;
	do
	{
		hasControl = NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(vehID);
		Tries++;
		if (Tries > 300)
			giveUp = true;
	} while (!hasControl && !giveUp);

	return !giveUp;
}

int clone[1000];
int gcount = 1;

void KEEEk(Ped ped, char* model) {
	Hash modelName = GAMEPLAY::GET_HASH_KEY(model);
	if (STREAMING::IS_MODEL_VALID(modelName)) {
		STREAMING::REQUEST_MODEL(modelName);

		while (!STREAMING::HAS_MODEL_LOADED(modelName))
			WAIT(0);
		Vector3 c = ENTITY::GET_ENTITY_COORDS(ped, false);
		Vehicle veh = VEHICLE::erstelle_fahr(modelName, c.x, c.y, c.z, 0.f, true, true);

		ENTITY::ATTACH_ENTITY_TO_ENTITY(veh, ped, 0, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0, 1, 0, 0, 2, 1);
	}
}



void changeModel(char* Model)
{
	int ModelHash = GAMEPLAY::GET_HASH_KEY(Model);
	if (STREAMING::IS_MODEL_IN_CDIMAGE(ModelHash))
	{
		if (STREAMING::IS_MODEL_VALID(ModelHash))
		{
			STREAMING::REQUEST_MODEL(ModelHash);
			if (STREAMING::HAS_MODEL_LOADED(ModelHash))
			{
				PLAYER::SET_PLAYER_MODEL(PLAYER::PLAYER_ID(), ModelHash);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(ModelHash);
			}
		}
	}
}

bool antiFreeze;
bool antiTP;

bool protecc3;
bool AntiKick;
bool AntiKick2;
bool protecc2;
bool noRemoveWeps;
bool noGiveWeps;

bool ev = false;
bool rpe = false;
bool fe = false;
bool ak = false;
bool md22 = false;
bool md = false;
bool protecc1 = false;
bool proteccIdle = false;
bool vehGravity = false;
bool MoonGravity = false;
bool selecArrow = true;


int HUD_COLOUR_PAUSE_BG = 117;
int HUD_COLOUR_PAUSE_BGR = 255;
int HUD_COLOUR_PAUSE_BGG = 0;
int HUD_COLOUR_PAUSE_BGB = 0;
int offradardpl = 22;
int r1 = 0;
int g1 = 255;
int b1 = 255;
int HUD_COLOUR_PAUSE_BGA = 255;
int HUD_COLOUR_WAYPOINT = 142;
int rpvalue;
int HUD_COLOUR_WAYPOINTR = 255;
int HUD_COLOUR_WAYPOINTG = 0;
int HUD_COLOUR_WAYPOINTB = 0;
int HUD_COLOUR_WAYPOINTA = 255;
int HUD_COLOUR_MICHAEL = 143;
int HUD_COLOUR_MICHAELR = 255;
int HUD_COLOUR_MICHAELG = 0;
int HUD_COLOUR_MICHAELB = 0;
int HUD_COLOUR_MICHAELA = 255;
int HUD_COLOUR_FRANKLIN = 144;
int HUD_COLOUR_FRANKLINR = 255;
int HUD_COLOUR_FRANKLING = 0;
int HUD_COLOUR_FRANKLINB = 0;
int HUD_COLOUR_FRANKLINA = 255;
int HUD_COLOUR_TREVOR = 145;
int HUD_COLOUR_TREVORR = 255;
int HUD_COLOUR_TREVORG = 0;
int HUD_COLOUR_TREVORB = 0;
int HUD_COLOUR_TREVORA = 255;
int HUD_COLOUR_FREEMODE = 116;
int HUD_COLOUR_FREEMODER = 255;
int HUD_COLOUR_FREEMODEG = 0;
int HUD_COLOUR_FREEMODEB = 0;
int HUD_COLOUR_FREEMODEA = 255;

void dropModelsSelect() {
	if (Menu::Option("Plastic Bag (2.5k)")) { Features::bagHash = 0x9CA6F755; }
	if (Menu::Option("Money Bag")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_money_bag_01"); }
	if (Menu::Option("Alien Egg")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_alien_egg_01"); }
	if (Menu::Option("Dildo")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_cs_dildo_01"); }
	if (Menu::Option("Xmas Tree")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_xmas_tree_int"); }
	if (Menu::Option("Armor")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_armour_pickup"); }
	if (Menu::Option("Med Bag")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_med_bag_01"); }
	if (Menu::Option("Gun Case")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_gun_case_01"); }
	if (Menu::Option("Golf Bag")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_golf_bag_01"); }
	if (Menu::Option("Plane")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_dummy_plane"); }
	if (Menu::Option("Guitar")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_acc_guitar_01"); }
	if (Menu::Option("Safe")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_ld_int_safe_01"); }
	if (Menu::Option("Number block1")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_mp_num_1"); }
	if (Menu::Option("Number block2")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_mp_num_2"); }
	if (Menu::Option("Number block3")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_mp_num_3"); }
	if (Menu::Option("Number block4")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_mp_num_4"); }
	if (Menu::Option("Number block5")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_mp_num_5"); }
	if (Menu::Option("Number block6")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_mp_num_6"); }
	if (Menu::Option("Number block7")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_mp_num_7"); }
	if (Menu::Option("Number block8")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_mp_num_8"); }
	if (Menu::Option("Number block9")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_mp_num_9"); }


}

#pragma region long bois

int StuntlistPos = 0;
std::vector<char*> Stuntlist = {
	"stt_prop_c4_stack",
	"stt_prop_corner_sign_01",
	"stt_prop_corner_sign_02",
	"stt_prop_corner_sign_03",
	"stt_prop_corner_sign_04",
	"stt_prop_corner_sign_05",
	"stt_prop_corner_sign_06",
	"stt_prop_corner_sign_07",
	"stt_prop_corner_sign_08",
	"stt_prop_corner_sign_09",
	"stt_prop_corner_sign_10",
	"stt_prop_corner_sign_11",
	"stt_prop_corner_sign_12",
	"stt_prop_corner_sign_13",
	"stt_prop_corner_sign_14",
	"stt_prop_flagpole_1a",
	"stt_prop_flagpole_1b",
	"stt_prop_flagpole_1c",
	"stt_prop_flagpole_1d",
	"stt_prop_flagpole_1e",
	"stt_prop_flagpole_1f",
	"stt_prop_flagpole_2a",
	"stt_prop_flagpole_2b",
	"stt_prop_flagpole_2c",
	"stt_prop_flagpole_2d",
	"stt_prop_flagpole_2e",
	"stt_prop_flagpole_2f",
	"stt_prop_hoop_constraction_01a",
	"stt_prop_hoop_small_01",
	"stt_prop_hoop_tyre_01a",
	"stt_prop_lives_bottle",
	"stt_prop_race_gantry_01",
	"stt_prop_race_start_line_01",
	"stt_prop_race_start_line_01b",
	"stt_prop_race_start_line_02",
	"stt_prop_race_start_line_02b",
	"stt_prop_race_start_line_03",
	"stt_prop_race_start_line_03b",
	"stt_prop_race_tannoy",
	"stt_prop_ramp_adj_flip_m",
	"stt_prop_ramp_adj_flip_mb",
	"stt_prop_ramp_adj_flip_s",
	"stt_prop_ramp_adj_flip_sb",
	"stt_prop_ramp_adj_hloop",
	"stt_prop_ramp_adj_loop",
	"stt_prop_ramp_jump_l",
	"stt_prop_ramp_jump_m",
	"stt_prop_ramp_jump_s",
	"stt_prop_ramp_jump_xl",
	"stt_prop_ramp_jump_xs",
	"stt_prop_ramp_jump_xxl",
	"stt_prop_ramp_multi_loop_rb",
	"stt_prop_ramp_spiral_l",
	"stt_prop_ramp_spiral_l_l",
	"stt_prop_ramp_spiral_l_m",
	"stt_prop_ramp_spiral_l_s",
	"stt_prop_ramp_spiral_l_xxl",
	"stt_prop_ramp_spiral_m",
	"stt_prop_ramp_spiral_s",
	"stt_prop_ramp_spiral_xxl",
	"stt_prop_sign_circuit_01",
	"stt_prop_sign_circuit_02",
	"stt_prop_sign_circuit_03",
	"stt_prop_sign_circuit_04",
	"stt_prop_sign_circuit_05",
	"stt_prop_sign_circuit_06",
	"stt_prop_sign_circuit_07",
	"stt_prop_sign_circuit_08",
	"stt_prop_sign_circuit_09",
	"stt_prop_sign_circuit_10",
	"stt_prop_sign_circuit_11",
	"stt_prop_sign_circuit_11b",
	"stt_prop_sign_circuit_12",
	"stt_prop_sign_circuit_13",
	"stt_prop_sign_circuit_13b",
	"stt_prop_sign_circuit_14",
	"stt_prop_sign_circuit_14b",
	"stt_prop_sign_circuit_15",
	"stt_prop_slow_down",
	"stt_prop_speakerstack_01a",
	"stt_prop_startline_gantry",
	"stt_prop_stunt_bblock_huge_01",
	"stt_prop_stunt_bblock_huge_02",
	"stt_prop_stunt_bblock_huge_03",
	"stt_prop_stunt_bblock_huge_04",
	"stt_prop_stunt_bblock_huge_05",
	"stt_prop_stunt_bblock_hump_01",
	"stt_prop_stunt_bblock_hump_02",
	"stt_prop_stunt_bblock_lrg1",
	"stt_prop_stunt_bblock_lrg2",
	"stt_prop_stunt_bblock_lrg3",
	"stt_prop_stunt_bblock_mdm1",
	"stt_prop_stunt_bblock_mdm2",
	"stt_prop_stunt_bblock_mdm3",
	"stt_prop_stunt_bblock_qp",
	"stt_prop_stunt_bblock_qp2",
	"stt_prop_stunt_bblock_qp3",
	"stt_prop_stunt_bblock_sml1",
	"stt_prop_stunt_bblock_sml2",
	"stt_prop_stunt_bblock_sml3",
	"stt_prop_stunt_bblock_xl1",
	"stt_prop_stunt_bblock_xl2",
	"stt_prop_stunt_bblock_xl3",
	"stt_prop_stunt_bowling_ball",
	"stt_prop_stunt_bowling_pin",
	"stt_prop_stunt_bowlpin_stand",
	"stt_prop_stunt_domino",
	"stt_prop_stunt_jump15",
	"stt_prop_stunt_jump30",
	"stt_prop_stunt_jump45",
	"stt_prop_stunt_jump_l",
	"stt_prop_stunt_jump_lb",
	"stt_prop_stunt_jump_loop",
	"stt_prop_stunt_jump_m",
	"stt_prop_stunt_jump_mb",
	"stt_prop_stunt_jump_s",
	"stt_prop_stunt_jump_sb",
	"stt_prop_stunt_landing_zone_01",
	"stt_prop_stunt_ramp",
	"stt_prop_stunt_soccer_ball",
	"stt_prop_stunt_soccer_goal",
	"stt_prop_stunt_soccer_lball",
	"stt_prop_stunt_soccer_sball",
	"stt_prop_stunt_target",
	"stt_prop_stunt_target_small",
	"stt_prop_stunt_track_bumps",
	"stt_prop_stunt_track_cutout",
	"stt_prop_stunt_track_dwlink",
	"stt_prop_stunt_track_dwlink_02",
	"stt_prop_stunt_track_dwsh15",
	"stt_prop_stunt_track_dwshort",
	"stt_prop_stunt_track_dwslope15",
	"stt_prop_stunt_track_dwslope30",
	"stt_prop_stunt_track_dwslope45",
	"stt_prop_stunt_track_dwturn",
	"stt_prop_stunt_track_dwuturn",
	"stt_prop_stunt_track_exshort",
	"stt_prop_stunt_track_fork",
	"stt_prop_stunt_track_funlng",
	"stt_prop_stunt_track_funnel",
	"stt_prop_stunt_track_hill",
	"stt_prop_stunt_track_hill2",
	"stt_prop_stunt_track_jump",
	"stt_prop_stunt_track_link",
	"stt_prop_stunt_track_otake",
	"stt_prop_stunt_track_sh15",
	"stt_prop_stunt_track_sh30",
	"stt_prop_stunt_track_sh45",
	"stt_prop_stunt_track_sh45_a",
	"stt_prop_stunt_track_short",
	"stt_prop_stunt_track_slope15",
	"stt_prop_stunt_track_slope30",
	"stt_prop_stunt_track_slope45",
	"stt_prop_stunt_track_start",
	"stt_prop_stunt_track_start_02",
	"stt_prop_stunt_track_straight",
	"stt_prop_stunt_track_straightice",
	"stt_prop_stunt_track_st_01",
	"stt_prop_stunt_track_st_02",
	"stt_prop_stunt_track_turn",
	"stt_prop_stunt_track_turnice",
	"stt_prop_stunt_track_uturn",
	"stt_prop_stunt_tube_crn",
	"stt_prop_stunt_tube_crn2",
	"stt_prop_stunt_tube_crn_15d",
	"stt_prop_stunt_tube_crn_30d",
	"stt_prop_stunt_tube_crn_5d",
	"stt_prop_stunt_tube_cross",
	"stt_prop_stunt_tube_end",
	"stt_prop_stunt_tube_ent",
	"stt_prop_stunt_tube_fn_01",
	"stt_prop_stunt_tube_fn_02",
	"stt_prop_stunt_tube_fn_03",
	"stt_prop_stunt_tube_fn_04",
	"stt_prop_stunt_tube_fn_05",
	"stt_prop_stunt_tube_fork",
	"stt_prop_stunt_tube_gap_01",
	"stt_prop_stunt_tube_gap_02",
	"stt_prop_stunt_tube_gap_03",
	"stt_prop_stunt_tube_hg",
	"stt_prop_stunt_tube_jmp",
	"stt_prop_stunt_tube_jmp2",
	"stt_prop_stunt_tube_l",
	"stt_prop_stunt_tube_m",
	"stt_prop_stunt_tube_qg",
	"stt_prop_stunt_tube_s",
	"stt_prop_stunt_tube_speed",
	"stt_prop_stunt_tube_speeda",
	"stt_prop_stunt_tube_speedb",
	"stt_prop_stunt_tube_xs",
	"stt_prop_stunt_tube_xxs",
	"stt_prop_stunt_wideramp",
	"stt_prop_track_bend2_bar_l",
	"stt_prop_track_bend2_bar_l_b",
	"stt_prop_track_bend2_l",
	"stt_prop_track_bend2_l_b",
	"stt_prop_track_bend_15d",
	"stt_prop_track_bend_15d_bar",
	"stt_prop_track_bend_180d",
	"stt_prop_track_bend_180d_bar",
	"stt_prop_track_bend_30d",
	"stt_prop_track_bend_30d_bar",
	"stt_prop_track_bend_5d",
	"stt_prop_track_bend_5d_bar",
	"stt_prop_track_bend_bar_l",
	"stt_prop_track_bend_bar_l_b",
	"stt_prop_track_bend_bar_m",
	"stt_prop_track_bend_l",
	"stt_prop_track_bend_l_b",
	"stt_prop_track_bend_m",
	"stt_prop_track_block_01",
	"stt_prop_track_block_02",
	"stt_prop_track_block_03",
	"stt_prop_track_chicane_l",
	"stt_prop_track_chicane_l_02",
	"stt_prop_track_chicane_r",
	"stt_prop_track_chicane_r_02",
	"stt_prop_track_cross",
	"stt_prop_track_cross_bar",
	"stt_prop_track_fork",
	"stt_prop_track_fork_bar",
	"stt_prop_track_funnel",
	"stt_prop_track_funnel_ads_01a",
	"stt_prop_track_funnel_ads_01b",
	"stt_prop_track_funnel_ads_01c",
	"stt_prop_track_jump_01a",
	"stt_prop_track_jump_01b",
	"stt_prop_track_jump_01c",
	"stt_prop_track_jump_02a",
	"stt_prop_track_jump_02b",
	"stt_prop_track_jump_02c",
	"stt_prop_track_link",
	"stt_prop_track_slowdown",
	"stt_prop_track_slowdown",
	"stt_prop_track_slowdown_t1",
	"stt_prop_track_slowdown_t2",
	"stt_prop_track_speedup",
	"stt_prop_track_speedup_t1",
	"stt_prop_track_speedup_t2",
	"stt_prop_track_start",
	"stt_prop_track_start_02",
	"stt_prop_track_stop_sign",
	"stt_prop_track_straight_bar_l",
	"stt_prop_track_straight_bar_m",
	"stt_prop_track_straight_bar_s",
	"stt_prop_track_straight_l",
	"stt_prop_track_straight_lm",
	"stt_prop_track_straight_lm_bar",
	"stt_prop_track_straight_m",
	"stt_prop_track_straight_s",
	"stt_prop_track_tube_01",
	"stt_prop_track_tube_02",
	"stt_prop_tyre_wall_01",
	"stt_prop_tyre_wall_010",
	"stt_prop_tyre_wall_011",
	"stt_prop_tyre_wall_012",
	"stt_prop_tyre_wall_013",
	"stt_prop_tyre_wall_01",
	"stt_prop_tyre_wall_015",
	"stt_prop_tyre_wall_02",
	"stt_prop_tyre_wall_03",
	"stt_prop_tyre_wall_04",
	"stt_prop_tyre_wall_05",
	"stt_prop_tyre_wall_06",
	"stt_prop_tyre_wall_07",
	"stt_prop_tyre_wall_08",
	"stt_prop_tyre_wall_09",
	"stt_prop_tyre_wall_0l010",
	"stt_prop_tyre_wall_0l012",
	"stt_prop_tyre_wall_0l013",
	"stt_prop_tyre_wall_0l014",
	"stt_prop_tyre_wall_0l015",
	"stt_prop_tyre_wall_0l018",
	"stt_prop_tyre_wall_0l019",
	"stt_prop_tyre_wall_0l020",
	"stt_prop_tyre_wall_0l04",
	"stt_prop_tyre_wall_0l05",
	"stt_prop_tyre_wall_0l06",
	"stt_prop_tyre_wall_0l07",
	"stt_prop_tyre_wall_0l08",
	"stt_prop_tyre_wall_0l1",
	"stt_prop_tyre_wall_0l16",
	"stt_prop_tyre_wall_0l17",
	"stt_prop_tyre_wall_0l2",
	"stt_prop_tyre_wall_0l3",
	"stt_prop_tyre_wall_0r010",
	"stt_prop_tyre_wall_0r011",
	"stt_prop_tyre_wall_0r012",
	"stt_prop_tyre_wall_0r013",
	"stt_prop_tyre_wall_0r014,"
	"stt_prop_tyre_wall_0r015,"
	"stt_prop_tyre_wall_0r016",
	"stt_prop_tyre_wall_0r017",
	"stt_prop_tyre_wall_0r018",
	"stt_prop_tyre_wall_0r019",
	"stt_prop_tyre_wall_0r04",
	"stt_prop_tyre_wall_0r05",
	"stt_prop_tyre_wall_0r06",
	"stt_prop_tyre_wall_0r07",
	"stt_prop_tyre_wall_0r08",
	"stt_prop_tyre_wall_0r09",
	"stt_prop_tyre_wall_0r1",
	"stt_prop_tyre_wall_0r2",
	"stt_prop_tyre_wall_0r3",
	"stt_prop_wallride_01",
	"stt_prop_wallride_01b",
	"stt_prop_wallride_02",
	"stt_prop_wallride_02b",
	"stt_prop_wallride_04",
	"stt_prop_wallride_05",
	"stt_prop_wallride_05b",
	"stt_prop_wallride_45l",
	"stt_prop_wallride_45la",
	"stt_prop_wallride_45r",
	"stt_prop_wallride_45ra",
	"stt_prop_wallride_90l",
	"stt_prop_wallride_90lb",
	"stt_prop_wallride_90r",
	"stt_prop_wallride_90rb",
};


int propListPos23w = 0;
std::vector<char*> propList23 = {

	"ba_mp_battle_tubes",
	"ba_mp_race_track",
	"ba_props_battle_light_mast",
	"ba_prop_batle_crates_mule",
	"ba_prop_batle_crates_pounder",
	"ba_prop_batle_crates_vehicle",
	"ba_prop_battle_barrier_01",
	"ba_prop_battle_barrier_01a",
	"ba_prop_battle_barrier_01b",
	"ba_prop_battle_barrier_01c",
	"ba_prop_battle_barrier_02a",
	"ba_prop_battle_bomb",
	"ba_prop_battle_cctv_cam_01a",
	"ba_prop_battle_cctv_cam_01b",
	"ba_prop_battle_hinge",
	"ba_prop_battle_latch",
	"ba_prop_battle_mast_01a",
	"ba_prop_battle_pbus_screen",
	"ba_prop_battle_policet_seats",
	"ba_prop_battle_stunt_track",
	"ba_prop_battle_track_exshort",
	"ba_prop_battle_track_short",
	"ba_prop_battle_tube_fn_01",
	"ba_prop_battle_tube_fn_02",
	"ba_prop_battle_tube_fn_03",
	"ba_prop_battle_tube_fn_04",
	"ba_prop_battle_tube_fn_05",
	"ba_prop_club_dressing",
	"ba_prop_club_dressing_board_01",
	"ba_prop_club_dressing_board_02",
	"ba_prop_club_dressing_board_03",
	"ba_prop_club_dressing_board_04",
	"ba_prop_club_dressing_board_05",
	"ba_prop_club_dressing_posters_01",
	"ba_prop_club_dressing_posters_02",
	"ba_prop_club_dressing_posters_03",
	"ba_prop_club_dressing_poster_01",
	"ba_prop_club_dressing_poster_02",
	"ba_prop_club_dressing_poster_03",
	"ba_prop_club_dressing_sign_01",
	"ba_prop_club_dressing_sign_02",
	"ba_prop_club_dressing_sign_03",
	"ba_prop_track_bend_l_b",
	"ba_prop_track_straight_lm",
	"ba_prop_battle_amb_phone",
	"ba_prop_battle_antique_box",
	"ba_prop_battle_bag_01",
	"ba_prop_battle_bag_01a",
	"ba_prop_battle_bag_01b",
	"ba_prop_battle_case_sm_03",
	"ba_prop_battle_champ_01",
	"ba_prop_battle_chest_closed",
	"ba_prop_battle_coke_block_01a",
	"ba_prop_battle_coke_doll_bigbox",
	"ba_prop_battle_crates.ytyp",
	"ba_prop_battle_crates_pistols_01a",
	"ba_prop_battle_crates_rifles_01a",
	"ba_prop_battle_crates_rifles_02a",
	"ba_prop_battle_crates_rifles_03a",
	"ba_prop_battle_crates_rifles_04a",
	"ba_prop_battle_crates_sam_01a",
	"ba_prop_battle_crates_weapons",
	"ba_prop_battle_crates_wpn_mix_01a",
	"ba_prop_battle_crate_art_02_bc",
	"ba_prop_battle_crate_beer",
	"ba_prop_battle_crate_beer_01",
	"ba_prop_battle_crate_beer_02",
	"ba_prop_battle_crate_beer_03",
	"ba_prop_battle_crate_beer_04",
	"ba_prop_battle_crate_beer_double",
	"ba_prop_battle_crate_biohazard_bc",
	"ba_prop_battle_crate_closed_bc",
	"ba_prop_battle_crate_gems_bc",
	"ba_prop_battle_crate_med_bc",
	"ba_prop_battle_crate_m_antiques",
	"ba_prop_battle_crate_m_bones",
	"ba_prop_battle_crate_m_hazard",
	"ba_prop_battle_crate_m_jewellery",
	"ba_prop_battle_crate_m_medical",
	"ba_prop_battle_crate_m_tobacco",
	"ba_prop_battle_crate_tob_bc",
	"ba_prop_battle_crate_wlife_bc",
	"ba_prop_battle_drug_package_02",
	"ba_prop_battle_fakeid_boxdl_01a",
	"ba_prop_battle_fakeid_boxpp_01a",
	"ba_prop_battle_handbag",
	"ba_prop_battle_laptop_dj",
	"ba_prop_battle_meth_bigbag_01a",
	"ba_prop_battle_moneypack_02a",
	"ba_prop_battle_ps_box_01",
	"ba_prop_battle_rsply_crate_02a",
	"ba_prop_battle_rsply_crate_gr_02a",
	"ba_prop_battle_vinyl_case",
	"ba_prop_battle_wallet_pickup",
	"ba_prop_battle_weed_bigbag_01a",
	"ba_prop_battle_bar_beerfridge_01",
	"ba_prop_battle_bar_fridge",
	"ba_prop_battle_bar_fridge_01",
	"ba_prop_battle_bar_fridge_02",
	"ba_prop_battle_champ_closed",
	"ba_prop_battle_champ_closed_02",
	"ba_prop_battle_champ_closed_03",
	"ba_prop_battle_champ_open",
	"ba_prop_battle_champ_open_02",
	"ba_prop_battle_champ_open_03",
	"ba_prop_battle_club_chair_01",
	"ba_prop_battle_club_chair_02",
	"ba_prop_battle_club_chair_03",
	"ba_prop_battle_club_computer_01",
	"ba_prop_battle_club_computer_02",
	"ba_prop_battle_club_doors",
	"ba_prop_battle_club_door_edgy",
	"ba_prop_battle_club_door_glam",
	"ba_prop_battle_club_door_trad",
	"ba_prop_battle_club_projector",
	"ba_prop_battle_club_screen.",
	"ba_prop_battle_club_screen",
	"ba_prop_battle_club_screen_02",
	"ba_prop_battle_club_screen_03",
	"ba_prop_battle_club_speaker",
	"ba_prop_battle_club_speaker_array",
	"ba_prop_battle_club_speaker_dj",
	"ba_prop_battle_club_speaker_large",
	"ba_prop_battle_club_speaker_med",
	"ba_prop_battle_club_speaker_small",
	"ba_prop_battle_cuffs",
	"ba_prop_battle_decanter_01_s",
	"ba_prop_battle_decanter_02_s",
	"ba_prop_battle_decanter_03_s",
	"ba_prop_battle_dj",
	"ba_prop_battle_dj",
	"ba_prop_battle_dj_decks",
	"ba_prop_battle_dj_deck_01a",
	"ba_prop_battle_dj_kit",
	"ba_prop_battle_dj_kit_mixer",
	"ba_prop_battle_dj_kit_speaker",
	"ba_prop_battle_dj_mixer_01a",
	"ba_prop_battle_dj_mixer_01b",
	"ba_prop_battle_dj_mixer_01c",
	"ba_prop_battle_dj_mixer_01d",
	"ba_prop_battle_dj_mixer_01e",
	"ba_prop_battle_dj_stand",
	"ba_prop_battle_dj_wires_dixon",
	"ba_prop_battle_dj_wires_madonna",
	"ba_prop_battle_dj_wires_solomon",
	"ba_prop_battle_dj_wires_tale",
	"ba_prop_battle_fan",
	"ba_prop_battle_glowstick_01",
	"ba_prop_battle_headphones_dj",
	"ba_prop_battle_hobby_horse",
	"ba_prop_battle_ice_bucket",
	"ba_prop_battle_mic",
	"ba_prop_battle_nightclub_champ",
	"ba_prop_battle_poster_promo_01",
	"ba_prop_battle_poster_promo_02",
	"ba_prop_battle_poster_promo_03",
	"ba_prop_battle_poster_promo_04",
	"ba_prop_battle_poster_skin_01",
	"ba_prop_battle_poster_skin_02",
	"ba_prop_battle_poster_skin_03",
	"ba_prop_battle_poster_skin_04.ydr",
	"ba_prop_battle_security_pad",
	"ba_prop_battle_shot_glass_01",
	"ba_prop_battle_sniffing_pipe",
	"ba_prop_battle_sports_helmet",
	"ba_prop_battle_trophies",
	"ba_prop_battle_trophy_battler",
	"ba_prop_battle_trophy_dancer",
	"ba_prop_battle_trophy_no1",
	"ba_prop_battle_vape_01",
	"ba_prop_battle_whiskey_bottle_2_s",
	"ba_prop_battle_whiskey_bottle_s",
	"ba_prop_battle_whiskey_opaque_s.ydr",
	"ba_prop_club_champset",
	"ba_prop_club_dimmer",
	"ba_prop_club_glass_opaque",
	"ba_prop_club_glass_trans",
	"ba_prop_club_laptop_dj",
	"ba_prop_club_laptop_dj_02",
	"ba_prop_club_posters_promo",
	"ba_prop_club_screens_01",
	"ba_prop_club_screens_02.ydr",
	"ba_prop_club_smoke_machine",
	"ba_prop_club_tonic_bottle",
	"ba_prop_club_tonic_can",
	"ba_prop_club_water_bottle",
	"ba_prop_door_club_edgy_generic",
	"ba_prop_door_club_edgy_wc",
	"ba_prop_door_club_entrance",
	"ba_prop_door_club_generic_vip",
	"ba_prop_door_club_glam_generic",
	"ba_prop_door_club_glam_wc",
	"ba_prop_door_club_glass",
	"ba_prop_door_club_glass_opaque",
	"ba_prop_door_club_trad_generic",
	"ba_prop_door_club_trad_wc",
	"ba_prop_door_elevator_1l",
	"ba_prop_door_elevator_1r",
	"ba_prop_door_gun_safe",
	"ba_prop_door_safe",
	"ba_prop_door_safe_02",
	"ba_prop_glass_front_office",
	"ba_prop_glass_front_office_opaque",
	"ba_prop_glass_garage",
	"ba_prop_glass_garage_opaque",
	"ba_prop_glass_rear_office",
	"ba_prop_glass_rear_opaque",
	"ba_prop_int_edgy_stool.ydr",
	"ba_prop_int_edgy_table_01",
	"ba_prop_int_edgy_table_02",
	"ba_prop_int_glam_stool",
	"ba_prop_int_glam_table",
	"ba_prop_int_glass",
	"ba_prop_int_stool_low",
	"ba_prop_int_trad_table",
	"ba_prop_sign_galaxy",
	"ba_prop_sign_gefangnis",
	"ba_prop_sign_maison",
	"ba_prop_sign_omega",
	"ba_prop_sign_omega_02",
	"ba_prop_sign_palace",
	"ba_prop_sign_paradise",
	"ba_prop_sign_studio",
	"ba_prop_sign_technologie",
	"ba_prop_sign_tonys",
	"ba_prop_battle_bikechock",
	"ba_prop_battle_cameradrone",
	"ba_prop_battle_control_console",
	"ba_prop_battle_control_seat",
	"ba_prop_battle_drones",
	"ba_prop_battle_drones",
	"ba_prop_battle_drone_hornet",
	"ba_prop_battle_drone_quad",
	"ba_prop_battle_drone_quad",
	"ba_prop_battle_drone_quad_static",
	"ba_prop_battle_hacker_screen",
	"ba_prop_battle_secpanel",
	"ba_prop_battle_secpanel_dam",
	"ba_prop_hei_secpanel",
	"ba_prop_battle_lights",
	"ba_prop_battle_lights",
	"ba_prop_battle_lights_01_bright",
	"ba_prop_battle_lights_01_dim",
	"ba_prop_battle_lights_02_bright",
	"ba_prop_battle_lights_02_dim",
	"ba_prop_battle_lights_03_bright",
	"ba_prop_battle_lights_03_dim",
	"ba_prop_battle_lights_ceiling_l_a",
	"ba_prop_battle_lights_ceiling_l_b",
	"ba_prop_battle_lights_ceiling_l_c",
	"ba_prop_battle_lights_ceiling_l_d",
	"ba_prop_battle_lights_ceiling_l_e",
	"ba_prop_battle_lights_ceiling_l_f",
	"ba_prop_battle_lights_ceiling_l_g",
	"ba_prop_battle_lights_ceiling_l_h",
	"ba_prop_battle_lights_club_dancefloor",
	"ba_prop_battle_lights_floor",
	"ba_prop_battle_lights_floorblue",
	"ba_prop_battle_lights_floorred",
	"ba_prop_battle_lights_floor_l_a",
	"ba_prop_battle_lights_floor_l_b",
	"ba_prop_battle_lights_fx_lamp",
	"ba_prop_battle_lights_fx_riga",
	"ba_prop_battle_lights_fx_rigb",
	"ba_prop_battle_lights_fx_rigc",
	"ba_prop_battle_lights_fx_rigd",
	"ba_prop_battle_lights_fx_rige",
	"ba_prop_battle_lights_fx_rigf",
	"ba_prop_battle_lights_fx_rigg",
	"ba_prop_battle_lights_fx_righ",
	"ba_prop_battle_lights_fx_rotator",
	"ba_prop_battle_lights_fx_support",
	"ba_prop_battle_lights_int_03_lr1",
	"ba_prop_battle_lights_int_03_lr2",
	"ba_prop_battle_lights_int_03_lr3",
	"ba_prop_battle_lights_int_03_lr4",
	"ba_prop_battle_lights_int_03_lr5",
	"ba_prop_battle_lights_int_03_lr6",
	"ba_prop_battle_lights_int_03_lr7.ydr",
	"ba_prop_battle_lights_int_03_lr8.ydr",
	"ba_prop_battle_lights_int_03_lr9",
	"ba_prop_battle_lights_stairs",
	"ba_prop_battle_lights_support",
	"ba_prop_battle_lights_tube_l_a",
	"ba_prop_battle_lights_tube_l_b",
	"ba_prop_battle_lights_wall_l_a",
	"ba_prop_battle_lights_wall_l_b",
	"ba_prop_battle_lights_wall_l_c",
	"ba_prop_battle_lights_wall_l_d",
	"ba_prop_battle_lights_wall_l_e",
	"ba_prop_battle_lights_wall_l_f",
	"ba_prop_battle_lights_workbench",
	"ba_prop_battle_emis_rig_01",
	"ba_prop_battle_emis_rig_10.ytd",
	"ba_prop_battle_lights_02.ycd",
	"ba_prop_battle_lights_02",
	"ba_prop_ba_dj1_emis_rig_01",
	"ba_prop_ba_dj2_emis_rig_01",
	"ba_prop_ba_dj3_emis_rig_01",
	"ba_prop_ba_dj4_emis_rig_01",
	"ba_prop_club_emis_rig_01",
	"ba_prop_club_emis_rig_02",
	"ba_prop_club_emis_rig_02b",
	"ba_prop_club_emis_rig_02c",
	"ba_prop_club_emis_rig_02d",
	"ba_prop_club_emis_rig_03",
	"ba_prop_club_emis_rig_04",
	"ba_prop_club_emis_rig_04b",
	"ba_prop_club_emis_rig_04c",
	"ba_prop_club_emis_rig_05",
	"ba_prop_club_emis_rig_06",
	"ba_prop_club_emis_rig_07",
	"ba_prop_club_emis_rig_08",
	"ba_prop_club_emis_rig_09",
	"ba_prop_club_emis_rig_10",
	"ba_prop_club_emis_rig_10_shad",
	"ba_rig_dj_01_lights_01_a",
	"ba_rig_dj_01_lights_01_b",
	"ba_rig_dj_01_lights_01_c",
	"ba_rig_dj_02_lights_01_a",
	"ba_rig_dj_02_lights_01_b",
	"ba_rig_dj_02_lights_01_c",
	"ba_rig_dj_03_lights_01_a",
	"ba_rig_dj_03_lights_01_b",
	"ba_rig_dj_03_lights_01_c",
	"ba_rig_dj_04_lights_01_a",
	"ba_rig_dj_04_lights_01_b",
	"ba_rig_dj_04_lights_01_c",
	"ba_rig_dj_all_lights_01_off",
	"ba_prop_battle_lights_03",
	"ba_prop_battle_lights_03",
	"ba_prop_ba_dj1_emis_rig_02",
	"ba_prop_ba_dj2_emis_rig_02",
	"ba_prop_ba_dj3_emis_rig_02",
	"ba_prop_ba_dj4_emis_rig_02",
	"ba_rig_dj_01_lights_02_a",
	"ba_rig_dj_01_lights_02_b"
	"ba_rig_dj_01_lights_02_c",
	"ba_rig_dj_02_lights_02_a",
	"ba_rig_dj_02_lights_02_b",
	"ba_rig_dj_02_lights_02_c",
	"ba_rig_dj_03_lights_02_a",
	"ba_rig_dj_03_lights_02_b",
	"ba_rig_dj_03_lights_02_c",
	"ba_rig_dj_04_lights_02_a",
	"ba_rig_dj_04_lights_02_b",
	"ba_rig_dj_04_lights_02_c",
	"ba_rig_dj_all_lights_02_off",
	"ba_prop_battle_lights_04",
	"ba_prop_battle_lights_04",
	"ba_prop_ba_dj1_emis_rig_03",
	"ba_prop_ba_dj2_emis_rig_03",
	"ba_prop_ba_dj3_emis_rig_03",
	"ba_prop_ba_dj4_emis_rig_03.ytd",
	"ba_rig_dj_01_lights_03_a.ydr",
	"ba_rig_dj_01_lights_03_b",
	"ba_rig_dj_01_lights_03_c",
	"ba_rig_dj_02_lights_03_a",
	"ba_rig_dj_02_lights_03_b",
	"ba_rig_dj_02_lights_03_c",
	"ba_rig_dj_03_lights_03_a",
	"ba_rig_dj_03_lights_03_b",
	"ba_rig_dj_03_lights_03_c",
	"ba_rig_dj_04_lights_03_a",
	"ba_rig_dj_04_lights_03_b",
	"ba_rig_dj_04_lights_03_c",
	"ba_rig_dj_all_lights_03_off",
	"ba_prop_battle_lights_05",
	"ba_prop_battle_lights_05",
	"ba_prop_ba_dj1_emis_rig_04",
	"ba_prop_ba_dj2_emis_rig_04",
	"ba_prop_ba_dj3_emis_rig_04",
	"ba_prop_ba_dj4_emis_rig_04",
	"ba_rig_dj_01_lights_04_a",
	"ba_rig_dj_01_lights_04_a_scr",
	"ba_rig_dj_01_lights_04_b",
	"ba_rig_dj_01_lights_04_b_scr",
	"ba_rig_dj_01_lights_04_c",
	"ba_rig_dj_01_lights_04_c_scr",
	"ba_rig_dj_02_lights_04_a",
	"ba_rig_dj_02_lights_04_a_scr",
	"ba_rig_dj_02_lights_04_b",
	"ba_rig_dj_02_lights_04_b_scr",
	"ba_rig_dj_02_lights_04_c",
	"ba_rig_dj_02_lights_04_c_scr",
	"ba_rig_dj_03_lights_04_a",
	"ba_rig_dj_03_lights_04_a_scr",
	"ba_rig_dj_03_lights_04_b",
	"ba_rig_dj_03_lights_04_b_scr",
	"ba_rig_dj_03_lights_04_c",
	"ba_rig_dj_03_lights_04_c_scr",
	"ba_rig_dj_04_lights_04_a",
	"ba_rig_dj_04_lights_04_a_scr",
	"ba_rig_dj_04_lights_04_b",
	"ba_rig_dj_04_lights_04_b_scr",
	"ba_rig_dj_04_lights_04_c",
	"ba_rig_dj_04_lights_04_c_scr",
	"ba_rig_dj_all_lights_04_off",
	"ba_prop_battle_emis_rig_01",
	"ba_prop_battle_emis_rig_02",
	"ba_prop_battle_emis_rig_03",
	"ba_prop_battle_emis_rig_04",
	"ba_prop_battle_lights_content",
	"ba_prop_battle_lights_content",
	"ba_prop_battle_rigs_content",
	"ba_prop_battle_tents",
	"ba_prop_battle_tent",
	"ba_prop_battle_tent_01",
	"ba_prop_battle_tent_02",

};

int namedPedListPos = 0;
std::vector<char*> namedPedList =
{
	"CSB_Alan","CSB_Bryony","IG_Sacha","MP_F_BennyMech_01","mp_m_freemode_01","player_zero","player_one","player_two","s_m_m_movalien_01","u_m_y_zombie_01","u_m_y_imporage","s_m_y_fireman_01","a_f_y_topless_01","u_f_y_poppymich","a_m_y_acult_01","ig_lamardavis","ig_jimmydisanto","ig_tracydisanto",
	"ig_johnnyklebitz","ig_wade","a_f_y_juggalo_01","A_C_Boar","A_C_Chickenhawk","A_C_Chimp","A_C_Chop","A_C_Cormorant","A_C_Cow","A_C_Coyote","A_C_Crow","A_C_Deer","A_C_Fish","A_C_Hen","A_C_Husky","A_C_MtLion","A_C_Pig","A_C_Pigeon","A_C_Rat","A_C_Retriever",
	"A_C_Rhesus","A_C_Rottweiler","A_C_Seagull","A_C_SharkTiger","A_C_shepherd","A_F_M_Beach_01","A_F_M_BevHills_01","A_F_M_BevHills_02","A_F_M_BodyBuild_01","A_F_M_Business_02","A_F_M_Downtown_01","A_F_M_EastSA_01",
	"A_F_M_EastSA_02","A_F_M_FatBla_01","A_F_M_FatCult_01","A_F_M_FatWhite_01","A_F_M_KTown_01","A_F_M_KTown_02","A_F_M_ProlHost_01","A_F_M_Salton_01","A_F_M_SkidRow_01","A_F_M_SouCentMC_01","A_F_M_SouCent_01","A_F_M_SouCent_02",
	"A_F_M_Tourist_01","A_F_M_TrampBeac_01","A_F_M_Tramp_01","A_F_O_GenStreet_01","A_F_O_Indian_01","A_F_O_KTown_01","A_F_O_Salton_01","A_F_O_SouCent_01","A_F_O_SouCent_02","A_F_Y_Beach_01","A_F_Y_BevHills_01","A_F_Y_BevHills_02",
	"A_F_Y_BevHills_03","A_F_Y_BevHills_04","A_F_Y_Business_01","A_F_Y_Business_02","A_F_Y_Business_03","A_F_Y_Business_04","A_F_Y_EastSA_01","A_F_Y_EastSA_02","A_F_Y_EastSA_03","A_F_Y_Epsilon_01","A_F_Y_Fitness_01",
	"A_F_Y_Fitness_02","A_F_Y_GenHot_01","A_F_Y_Golfer_01","A_F_Y_Hiker_01","A_F_Y_Hippie_01","A_F_Y_Hipster_01","A_F_Y_Hipster_02","A_F_Y_Hipster_03","A_F_Y_Hipster_04","A_F_Y_Indian_01","A_F_Y_Juggalo_01","A_F_Y_Runner_01",
	"A_F_Y_RurMeth_01","A_F_Y_SCDressy_01","A_F_Y_Skater_01","A_F_Y_SouCent_01","A_F_Y_SouCent_02","A_F_Y_SouCent_03","A_F_Y_Tennis_01","A_F_Y_Topless_01","A_F_Y_Tourist_01","A_F_Y_Tourist_02","A_F_Y_Vinewood_01",
	"A_F_Y_Vinewood_02","A_F_Y_Vinewood_03","A_F_Y_Vinewood_04","A_F_Y_Yoga_01","A_M_M_ACult_01","A_M_M_AfriAmer_01","A_M_M_Beach_01","A_M_M_Beach_02","A_M_M_BevHills_01","A_M_M_BevHills_02","A_M_M_Business_01",
	"A_M_M_EastSA_01","A_M_M_EastSA_02","A_M_M_Farmer_01","A_M_M_FatLatin_01","A_M_M_GenFat_01","A_M_M_GenFat_02","A_M_M_Golfer_01","A_M_M_HasJew_01","A_M_M_Hillbilly_01","A_M_M_Hillbilly_02","A_M_M_Indian_01",
	"A_M_M_KTown_01","A_M_M_Malibu_01","A_M_M_MexCntry_01","A_M_M_MexLabor_01","A_M_M_OG_Boss_01","A_M_M_Paparazzi_01","A_M_M_Polynesian_01","A_M_M_ProlHost_01","A_M_M_RurMeth_01","A_M_M_Salton_01","A_M_M_Salton_02",
	"A_M_M_Salton_03","A_M_M_Salton_04","A_M_M_Skater_01","A_M_M_Skidrow_01","A_M_M_SoCenLat_01","A_M_M_SouCent_01","A_M_M_SouCent_02","A_M_M_SouCent_03","A_M_M_SouCent_04","A_M_M_StLat_02","A_M_M_Tennis_01",
	"A_M_M_Tourist_01","A_M_M_TrampBeac_01","A_M_M_Tramp_01","A_M_M_TranVest_01","A_M_M_TranVest_02","A_M_O_ACult_01","A_M_O_ACult_02","A_M_O_Beach_01","A_M_O_GenStreet_01","A_M_O_KTown_01","A_M_O_Salton_01",
	"A_M_O_SouCent_01","A_M_O_SouCent_02","A_M_O_SouCent_03","A_M_O_Tramp_01","A_M_Y_ACult_01","A_M_Y_ACult_02","A_M_Y_BeachVesp_01","A_M_Y_BeachVesp_02","A_M_Y_Beach_01","A_M_Y_Beach_02","A_M_Y_Beach_03","A_M_Y_BevHills_01",
	"A_M_Y_BevHills_02","A_M_Y_BreakDance_01","A_M_Y_BusiCas_01","A_M_Y_Business_01","A_M_Y_Business_02","A_M_Y_Business_03","A_M_Y_Cyclist_01","A_M_Y_DHill_01","A_M_Y_Downtown_01","A_M_Y_EastSA_01","A_M_Y_EastSA_02",
	"A_M_Y_Epsilon_01","A_M_Y_Epsilon_02","A_M_Y_Gay_01","A_M_Y_Gay_02","A_M_Y_GenStreet_01","A_M_Y_GenStreet_02","A_M_Y_Golfer_01","A_M_Y_HasJew_01","A_M_Y_Hiker_01","A_M_Y_Hippy_01","A_M_Y_Hipster_01","A_M_Y_Hipster_02",
	"A_M_Y_Hipster_03","A_M_Y_Indian_01","A_M_Y_Jetski_01","A_M_Y_Juggalo_01","A_M_Y_KTown_01","A_M_Y_KTown_02","A_M_Y_Latino_01","A_M_Y_MethHead_01","A_M_Y_MexThug_01","A_M_Y_MotoX_01","A_M_Y_MotoX_02","A_M_Y_MusclBeac_01",
	"A_M_Y_MusclBeac_02","A_M_Y_Polynesian_01","A_M_Y_RoadCyc_01","A_M_Y_Runner_01","A_M_Y_Runner_02","A_M_Y_Salton_01","A_M_Y_Skater_01","A_M_Y_Skater_02","A_M_Y_SouCent_01","A_M_Y_SouCent_02","A_M_Y_SouCent_03","A_M_Y_SouCent_04",
	"A_M_Y_StBla_01","A_M_Y_StBla_02","A_M_Y_StLat_01","A_M_Y_StWhi_01","A_M_Y_StWhi_02","A_M_Y_Sunbathe_01","A_M_Y_Surfer_01","A_M_Y_VinDouche_01","A_M_Y_Vinewood_01","A_M_Y_Vinewood_02","A_M_Y_Vinewood_03","A_M_Y_Vinewood_04",
	"A_M_Y_Yoga_01","CSB_Abigail","CSB_Anita","CSB_Anton","CSB_BallasOG","CSB_Bride","CSB_BurgerDrug","CSB_Car3guy1","CSB_Car3guy2","CSB_Chef","CSB_Chin_goon","CSB_Cletus","CSB_Cop","CSB_Customer","CSB_Denise_friend",
	"CSB_FOS_rep","CSB_G","CSB_Groom","CSB_Grove_str_dlr","CSB_Hao","CSB_Hugh","CSB_Imran","CSB_Janitor","CSB_Maude","CSB_MWeather","CSB_Ortega","CSB_Oscar","CSB_PornDudes","CSB_PrologueDriver","CSB_ProlSec","CSB_Ramp_gang",
	"CSB_Ramp_hic","CSB_Ramp_hipster","CSB_Ramp_marine","CSB_Ramp_mex","CSB_Reporter","CSB_RoccoPelosi","CSB_Screen_Writer","CSB_Stripper_01","CSB_Stripper_02","CSB_Tonya","CSB_TrafficWarden","CS_AmandaTownley","CS_Andreas",
	"cs_ashley","CS_Bankman","CS_Barry","CS_Beverly","CS_Brad","CS_BradCadaver","CS_Carbuyer","CS_Casey","CS_ChengSr","CS_ChrisFormage","CS_Clay","CS_Dale","CS_DaveNorton","cs_debra","cs_denise","CS_Devin","CS_Dom","CS_Dreyfuss",
	"CS_DrFriedlander","CS_Fabien","CS_FBISuit_01","CS_Floyd","CS_Guadalope","cs_gurk","CS_Hunter","CS_Janet","CS_JewelAss","CS_JimmyBoston","CS_JimmyDiSanto","CS_JoeMinuteMan","CS_JohnnyKlebitz","CS_Josef","CS_Josh","CS_LamarDavis",
	"CS_Lazlow","CS_LesterCrest","CS_LifeInvad_01","CS_Magenta","CS_Manuel","CS_Marnie","CS_MartinMadrazo","CS_MaryAnn","CS_Michelle","CS_Milton","CS_Molly","CS_MovPremF_01","CS_MovPremMale","CS_MRK","CS_MrsPhillips","CS_MRS_Thornhill",
	"CS_Natalia","CS_NervousRon","CS_Nigel","CS_Old_Man1A","CS_Old_Man2","CS_Omega","CS_Orleans","CS_Paper","CS_Patricia","CS_Priest","CS_ProlSec_02","CS_RussianDrunk","CS_SiemonYetarian","CS_Solomon","CS_SteveHains","CS_Stretch",
	"CS_Tanisha","CS_TaoCheng","CS_TaosTranslator","CS_TennisCoach","CS_Terry","CS_Tom","CS_TomEpsilon","CS_TracyDiSanto","CS_Wade","CS_Zimbor","G_F_Y_ballas_01","G_F_Y_Families_01","G_F_Y_Lost_01","G_F_Y_Vagos_01","G_M_M_ArmBoss_01",
	"G_M_M_ArmGoon_01","G_M_M_ArmLieut_01","G_M_M_ChemWork_01","G_M_M_ChiBoss_01","G_M_M_ChiCold_01","G_M_M_ChiGoon_01","G_M_M_ChiGoon_02","G_M_M_KorBoss_01","G_M_M_MexBoss_01","G_M_M_MexBoss_02","G_M_Y_ArmGoon_02","G_M_Y_Azteca_01",
	"G_M_Y_BallaEast_01","G_M_Y_BallaOrig_01","G_M_Y_BallaSout_01","G_M_Y_FamCA_01","G_M_Y_FamDNF_01","G_M_Y_FamFor_01","G_M_Y_Korean_01","G_M_Y_Korean_02","G_M_Y_KorLieut_01","G_M_Y_Lost_01","G_M_Y_Lost_02","G_M_Y_Lost_03",
	"G_M_Y_MexGang_01","G_M_Y_MexGoon_01","G_M_Y_MexGoon_02","G_M_Y_MexGoon_03","G_M_Y_PoloGoon_01","G_M_Y_PoloGoon_02","G_M_Y_SalvaBoss_01","G_M_Y_SalvaGoon_01","G_M_Y_SalvaGoon_02","G_M_Y_SalvaGoon_03","G_M_Y_StrPunk_01","G_M_Y_StrPunk_02",
	"HC_Driver","HC_Gunman","HC_Hacker","IG_Abigail","IG_AmandaTownley","IG_Andreas","IG_Ashley","IG_BallasOG","IG_Bankman","IG_Barry","IG_BestMen","IG_Beverly","IG_Brad","IG_Bride","IG_Car3guy1","IG_Car3guy2","IG_Casey",
	"IG_Chef","IG_ChengSr","IG_ChrisFormage","IG_Clay","IG_ClayPain","IG_Cletus","IG_Dale","IG_DaveNorton","IG_Denise","IG_Devin","IG_Dom","IG_Dreyfuss","IG_DrFriedlander","IG_Fabien","IG_FBISuit_01","IG_Floyd","IG_Groom",
	"IG_Hao","IG_Hunter","IG_Janet","ig_JAY_Norris","IG_JewelAss","IG_JimmyBoston","IG_JimmyDiSanto","IG_JoeMinuteMan","ig_JohnnyKlebitz","IG_Josef","IG_Josh","IG_KerryMcIntosh","IG_LamarDavis","IG_Lazlow","IG_LesterCrest",
	"IG_LifeInvad_01","IG_LifeInvad_02","IG_Magenta","IG_Manuel","IG_Marnie","IG_MaryAnn","IG_Maude","IG_Michelle","IG_Milton","IG_Molly","IG_MRK","IG_MrsPhillips","IG_MRS_Thornhill","IG_Natalia","IG_NervousRon","IG_Nigel",
	"IG_Old_Man1A","IG_Old_Man2","IG_Omega","IG_ONeil","IG_Orleans","IG_Ortega","IG_Paper","IG_Patricia","IG_Priest","IG_ProlSec_02","IG_Ramp_Gang","IG_Ramp_Hic","IG_Ramp_Hipster","IG_Ramp_Mex","IG_RoccoPelosi","IG_RussianDrunk",
	"IG_Screen_Writer","IG_SiemonYetarian","IG_Solomon","IG_SteveHains","IG_Stretch","IG_Talina","IG_Tanisha","IG_TaoCheng","IG_TaosTranslator","ig_TennisCoach","IG_Terry","IG_TomEpsilon","IG_Tonya","IG_TracyDiSanto","IG_TrafficWarden",
	"IG_TylerDix","IG_Wade","IG_Zimbor","MP_F_DeadHooker","MP_F_Freemode_01","MP_F_Misty_01","MP_F_StripperLite","MP_G_M_Pros_01","MP_HeadTargets","MP_M_Claude_01","MP_M_ExArmy_01","MP_M_FamDD_01","MP_M_FIBSec_01","MP_M_Freemode_01",
	"MP_M_Marston_01","MP_M_Niko_01","MP_M_ShopKeep_01","MP_S_M_Armoured_01","Player_One","Player_Two","Player_Zero","slod_human","slod_large_quadped","slod_small_quadped","S_F_M_Fembarber","S_F_M_Maid_01","S_F_M_Shop_HIGH",
	"S_F_M_SweatShop_01","S_F_Y_AirHostess_01","S_F_Y_Bartender_01","S_F_Y_Baywatch_01","S_F_Y_Cop_01","S_F_Y_Factory_01","S_F_Y_Hooker_01","S_F_Y_Hooker_02","S_F_Y_Hooker_03","S_F_Y_Migrant_01","S_F_Y_MovPrem_01","S_F_Y_Ranger_01",
	"S_F_Y_Scrubs_01","S_F_Y_Sheriff_01","S_F_Y_Shop_LOW","S_F_Y_Shop_MID","S_F_Y_StripperLite","S_F_Y_Stripper_01","S_F_Y_Stripper_02","S_F_Y_SweatShop_01","S_M_M_AmmuCountry","S_M_M_Armoured_01","S_M_M_Armoured_02","S_M_M_AutoShop_01",
	"S_M_M_AutoShop_02","S_M_M_Bouncer_01","S_M_M_ChemSec_01","S_M_M_CIASec_01","S_M_M_CntryBar_01","S_M_M_DockWork_01","S_M_M_Doctor_01","S_M_M_FIBOffice_01","S_M_M_FIBOffice_02","S_M_M_Gaffer_01","S_M_M_Gardener_01","S_M_M_GenTransport",
	"S_M_M_HairDress_01","S_M_M_HighSec_01","S_M_M_HighSec_02","S_M_M_Janitor","S_M_M_LatHandy_01","S_M_M_LifeInvad_01","S_M_M_Linecook","S_M_M_LSMetro_01","S_M_M_Mariachi_01","S_M_M_Marine_01","S_M_M_Marine_02","S_M_M_Migrant_01",
	"S_M_M_MovAlien_01","S_M_M_MovPrem_01","S_M_M_MovSpace_01","S_M_M_Paramedic_01","S_M_M_Pilot_01","S_M_M_Pilot_02","S_M_M_Postal_01","S_M_M_Postal_02","S_M_M_PrisGuard_01","S_M_M_Scientist_01","S_M_M_Security_01","S_M_M_SnowCop_01",
	"S_M_M_StrPerf_01","S_M_M_StrPreach_01","S_M_M_StrVend_01","S_M_M_Trucker_01","S_M_M_UPS_01","S_M_M_UPS_02","S_M_O_Busker_01","S_M_Y_AirWorker","S_M_Y_AmmuCity_01","S_M_Y_ArmyMech_01","S_M_Y_Autopsy_01","S_M_Y_Barman_01","S_M_Y_BayWatch_01",
	"S_M_Y_BlackOps_01","S_M_Y_BlackOps_02","S_M_Y_BlackOps_03","S_M_Y_BusBoy_01","S_M_Y_Chef_01","S_M_Y_Clown_01","S_M_Y_Construct_01","S_M_Y_Construct_02","S_M_Y_Cop_01","S_M_Y_Dealer_01","S_M_Y_DevinSec_01","S_M_Y_DockWork_01","S_M_Y_Doorman_01",
	"S_M_Y_DWService_01","S_M_Y_DWService_02","S_M_Y_Factory_01","S_M_Y_Fireman_01","S_M_Y_Garbage","S_M_Y_Grip_01","S_M_Y_HwayCop_01","S_M_Y_Marine_01","S_M_Y_Marine_02","S_M_Y_Marine_03","S_M_Y_Mime","S_M_Y_PestCont_01",
	"S_M_Y_Pilot_01","S_M_Y_PrisMuscl_01","S_M_Y_Prisoner_01","S_M_Y_Ranger_01","S_M_Y_Robber_01","S_M_Y_Sheriff_01","S_M_Y_Shop_MASK","S_M_Y_StrVend_01","S_M_Y_Swat_01","S_M_Y_USCG_01","S_M_Y_Valet_01","S_M_Y_Waiter_01",
	"S_M_Y_WinClean_01","S_M_Y_XMech_01","S_M_Y_XMech_02","U_F_M_Corpse_01","U_F_M_Miranda","U_F_M_ProMourn_01","U_F_O_MovieStar","U_F_O_ProlHost_01","U_F_Y_BikerChic","U_F_Y_COMJane","U_F_Y_corpse_01","U_F_Y_corpse_02",
	"U_F_Y_HotPosh_01","U_F_Y_JewelAss_01","U_F_Y_Mistress","U_F_Y_PoppyMich","U_F_Y_Princess","U_F_Y_SpyActress","U_M_M_Aldinapoli","U_M_M_BankMan","U_M_M_BikeHire_01","U_M_M_FIBArchitect","U_M_M_FilmDirector","U_M_M_GlenStank_01",
	"U_M_M_Griff_01","U_M_M_Jesus_01","U_M_M_JewelSec_01","U_M_M_JewelThief","U_M_M_MarkFost","U_M_M_PartyTarget","U_M_M_ProlSec_01","U_M_M_ProMourn_01","U_M_M_RivalPap","U_M_M_SpyActor","U_M_M_WillyFist","U_M_O_FinGuru_01",
	"U_M_O_TapHillBilly","U_M_O_Tramp_01","U_M_Y_Abner","U_M_Y_AntonB",	"U_M_Y_BabyD","U_M_Y_Baygor","U_M_Y_BurgerDrug_01","U_M_Y_Chip","U_M_Y_Cyclist_01","U_M_Y_FIBMugger_01","U_M_Y_Guido_01","U_M_Y_GunVend_01","U_M_Y_Hippie_01",
	"U_M_Y_ImpoRage","U_M_Y_Justin","U_M_Y_Mani","U_M_Y_MilitaryBum","U_M_Y_Paparazzi","U_M_Y_Party_01","U_M_Y_Pogo_01","U_M_Y_Prisoner_01","U_M_Y_ProlDriver_01","U_M_Y_RSRanger_01","U_M_Y_SBike","U_M_Y_StagGrm_01","U_M_Y_Tattoo_01",
	"U_M_Y_Zombie_01",
};

int shoop = 0;
std::vector<char*> walkDicts{
	"move_m@generic",
	"move_f@generic",
	"move_cop@action",
	"move_m@gangster@generic",
	"move_m@hipster@a",
	"move_m@hobo@a",
	"move_m@fat@a",
	"move_lester_CaneUp",
	"move_m@drunk@a",
	"move_m@drunk@moderatedrunk",
	"move_m@drunk@verydrunk",
	"move_f@sexy@a",
	"move_m@alien",
	"move_m@business@a",
	"move_m@casual@a",
	"move_m@clipboard",
	"move_m@coward",
	"move_m@fire",
	"move_m@flee@a",
	"move_m@hiking",
	"move_m@hurry@a",
	"move_injured_generic",
	"move_m@intimidation@1h",
	"move_m@muscle@a",
	"move_m@quick",
	"move_m@sad@a",
	"move_m@shadyped@a",
	"move_m@shocked@a",
	"move_f@arrogant@a",
	"move_f@handbag",
	"move_f@heels@c",
	"move_p_m_one",
};

int walk_style_choose = 0;
std::vector<char*> walkNames{
	"Generic Male",
	"Generic Female",
	"Cop",
	"Gangster",
	"Hipster",
	"Hobo",
	"Obese",
	"Lester",
	"Drunk",
	"Moderate Drunk",
	"Very Drunk",
	"Sexy",
	"Alien",
	"Buisness",
	"Casual",
	"Clipboard",
	"Coward",
	"Burning",
	"Flee",
	"Hiking",
	"Hurry",
	"Injured",
	"Intimidation",
	"Muscular",
	"Quick",
	"Sad",
	"Shady",
	"Shocked",
	"Arrogant",
	"Handbag Walk",
	"Heels",
	"Thug",
};

char*  objs2[] = {
	"prop_a4_pile_01",
	"prop_a4_sheet_01",
	"prop_a4_sheet_02",
	"prop_a4_sheet_03",
	"prop_a4_sheet_04",
	"prop_a4_sheet_05",
	"prop_abat_roller_static",
	"prop_abat_slide",
	"prop_acc_guitar_01",
	"prop_acc_guitar_01_d1",
	"prop_aerial_01a",
	"prop_aerial_01b",
	"prop_aerial_01c",
	"prop_aerial_01d",
	"prop_afsign_amun",
	"prop_afsign_vbike",
	"prop_agave_01",
	"prop_agave_02",
	"prop_aiprort_sign_01",
	"prop_aiprort_sign_02",
	"prop_aircon_l_01",
	"prop_aircon_l_02",
	"prop_aircon_l_03",
	"prop_aircon_l_04",
	"prop_aircon_m_09",
	"prop_aircon_s_01a",
	"prop_aircon_s_02a",
	"prop_aircon_s_02b",
	"prop_aircon_s_03a",
	"prop_aircon_s_03b",
	"prop_aircon_s_04a",
	"prop_aircon_s_05a",
	"prop_aircon_s_06a",
	"prop_aircon_s_07a",
	"prop_aircon_s_07b",
	"prop_airhockey_01",
	"prop_air_bagloader",
	"prop_air_bagloader2",
	"prop_air_barrier",
	"prop_air_bench_01",
	"prop_air_bench_02",
	"prop_air_bigradar_l1",
	"prop_air_bigradar_l2",
	"prop_air_bigradar_slod",
	"prop_air_blastfence_01",
	"prop_air_blastfence_02",
	"prop_air_bridge01",
	"prop_air_bridge02",
	"prop_air_cargoloader_01",
	"prop_air_cargo_01a",
	"prop_air_cargo_01b",
	"prop_air_cargo_01c",
	"prop_air_cargo_02a",
	"prop_air_cargo_02b",
	"prop_air_cargo_03a",
	"prop_air_cargo_04a",
	"prop_air_cargo_04b",
	"prop_air_cargo_04c",
	"prop_air_chock_01",
	"prop_air_chock_03",
	"prop_air_chock_04",
	"prop_air_fueltrail1",
	"prop_air_fueltrail2",
	"prop_air_gasbogey_01",
	"prop_air_generator_01",
	"prop_air_generator_03",
	"prop_air_hoc_paddle_01",
	"prop_air_hoc_paddle_02",
	"prop_air_lights_01a",
	"prop_air_lights_01b",
	"prop_air_lights_03a",
	"prop_air_luggtrolley",
	"prop_air_mast_01",
	"prop_air_mast_02",
	"prop_air_monhut_01",
	"prop_air_monhut_02",
	"prop_air_monhut_03",
	"prop_air_propeller01",
	"prop_air_radar_01",
	"prop_air_stair_01",
	"prop_air_stair_02",
	"prop_air_stair_03",
	"prop_air_stair_04a",
	"prop_air_stair_04b",
	"prop_air_towbar_01",
	"prop_air_towbar_02",
	"prop_air_towbar_03",
	"prop_air_trailer_4a",
	"prop_air_trailer_4b",
	"prop_air_trailer_4c",
	"prop_air_watertank1",
	"prop_air_watertank2",
	"prop_air_windsock_base",
	"prop_air_woodsteps",
	"prop_alarm_01",
	"prop_alarm_02",
	"prop_alien_egg_01",
	"prop_aloevera_01",
	"prop_amanda_note_01",
	"prop_amanda_note_01b",
	"prop_amb_40oz_02",
	"prop_amb_40oz_03",
	"prop_amb_beer_bottle",
	"prop_amb_ciggy_01",
	"prop_amb_donut",
	"prop_amb_handbag_01",
	"prop_amb_phone",
	"prop_amp_01",
	"prop_am_box_wood_01",
	"prop_anim_cash_note",
	"prop_anim_cash_note_b",
	"prop_anim_cash_pile_01",
	"prop_anim_cash_pile_02",
	"prop_apple_box_01",
	"prop_apple_box_02",
	"prop_arcade_01",
	"prop_arcade_02",
	"prop_arc_blueprints_01",
	"prop_armchair_01",
	"prop_armenian_gate",
	"prop_armour_pickup",
	"prop_arm_gate_l",
	"prop_arm_wrestle_01",
	"prop_artgallery_02_dl",
	"prop_artgallery_02_dr",
	"prop_artgallery_dl",
	"prop_artgallery_dr",
	"prop_artifact_01",
	"prop_ashtray_01",
	"prop_asteroid_01",
	"prop_atm_02",
	"prop_atm_03",
	"prop_attache_case_01",
	"prop_aviators_01",
	"prop_a_base_bars_01",
	"prop_a_trailer_door_01",
	"prop_bahammenu",
	"prop_ballistic_shield",
	"prop_ballistic_shield_lod1",
	"prop_bandsaw_01",
	"prop_bank_shutter",
	"prop_bank_vaultdoor",
	"prop_barbell_01",
	"prop_barbell_02",
	"prop_barbell_100kg",
	"prop_barbell_10kg",
	"prop_barbell_20kg",
	"prop_barbell_30kg",
	"prop_barbell_40kg",
	"prop_barbell_50kg",
	"prop_barbell_60kg",
	"prop_barbell_80kg",
	"prop_barier_conc_01b",
	"prop_barier_conc_01c",
	"prop_barier_conc_02b",
	"prop_barier_conc_02c",
	"prop_barier_conc_03a",
	"prop_barier_conc_04a",
	"prop_barier_conc_05a",
	"prop_barier_conc_05b",
	"prop_barn_door_l",
	"prop_barn_door_r",
	"prop_barrachneon",
	"prop_barrel_01a",
	"prop_barrel_02a",
	"prop_barrel_02b",
	"prop_barrel_03a",
	"prop_barrel_03d",
	"prop_barrel_float_1",
	"prop_barrel_float_2",
	"prop_barriercrash_03",
	"prop_barriercrash_04",
	"prop_barrier_wat_01a",
	"prop_barrier_wat_03b",
	"prop_barrier_work01c",
	"prop_barry_table_detail",
	"prop_bar_coastbarr",
	"prop_bar_coastchamp",
	"prop_bar_coastdusc",
	"prop_bar_coastmount",
	"prop_bar_cooler_01",
	"prop_bar_cooler_03",
	"prop_bar_fridge_01",
	"prop_bar_fridge_02",
	"prop_bar_fridge_03",
	"prop_bar_fridge_04",
	"prop_bar_ice_01",
	"prop_bar_napkindisp",
	"prop_bar_pump_01",
	"prop_bar_pump_04",
	"prop_bar_pump_05",
	"prop_bar_pump_06",
	"prop_bar_pump_07",
	"prop_bar_pump_08",
	"prop_bar_pump_09",
	"prop_bar_pump_10",
	"prop_bar_sink_01",
	"prop_bar_stool_01",
	"prop_basejump_target_01",
	"prop_basketball_net",
	"prop_bath_dirt_01",
	"prop_battery_01",
	"prop_battery_02",
	"prop_bball_arcade_01",
	"prop_bbq_2",
	"prop_bbq_3",
	"prop_beachbag_01",
	"prop_beachbag_02",
	"prop_beachbag_03",
	"prop_beachbag_04",
	"prop_beachbag_05",
	"prop_beachbag_06",
	"prop_beachbag_combo_01",
	"prop_beachbag_combo_02",
	"prop_beachball_02",
	"prop_beachflag_le",
	"prop_beach_bars_01",
	"prop_beach_bars_02",
	"prop_beach_bbq",
	"prop_beach_dip_bars_01",
	"prop_beach_dip_bars_02",
	"prop_beach_fire",
	"prop_beach_lg_float",
	"prop_beach_lg_stretch",
	"prop_beach_lg_surf",
	"prop_beach_lotion_01",
	"prop_beach_lotion_02",
	"prop_beach_lotion_03",
	"prop_beach_punchbag",
	"prop_beach_rings_01",
	"prop_beach_sculp_01",
	"prop_beach_towel_02",
	"prop_beach_volball01",
	"prop_beach_volball02",
	"prop_beerneon",
	"prop_beer_bison",
	"prop_beer_box_01",
	"prop_beer_neon_01",
	"prop_beer_neon_02",
	"prop_beer_neon_03",
	"prop_beer_neon_04",
	"prop_beggers_sign_01",
	"prop_beggers_sign_02",
	"prop_beggers_sign_03",
	"prop_beggers_sign_04",
	"prop_bench_01b",
	"prop_bench_01c",
	"prop_bench_04",
	"prop_bench_05",
	"prop_bench_09",
	"prop_beta_tape",
	"prop_beware_dog_sign",
	"prop_bh1_03_gate_l",
	"prop_bh1_03_gate_r",
	"prop_bh1_08_mp_gar",
	"prop_bh1_09_mp_gar",
	"prop_bh1_09_mp_l",
	"prop_bh1_09_mp_r",
	"prop_bh1_16_display",
	"prop_bh1_44_door_01l",
	"prop_bh1_44_door_01r",
	"prop_bh1_48_backdoor_l",
	"prop_bh1_48_backdoor_r",
	"prop_bh1_48_gate_1",
	"prop_bhhotel_door_l",
	"prop_bhhotel_door_r",
	"prop_big_bag_01",
	"prop_big_clock_01",
	"prop_big_shit_01",
	"prop_big_shit_02",
	"prop_bikerack_2",
	"prop_bikini_disp_01",
	"prop_bikini_disp_02",
	"prop_bikini_disp_03",
	"prop_bikini_disp_04",
	"prop_bikini_disp_05",
	"prop_bikini_disp_06",
	"prop_billboard_01",
	"prop_billboard_02",
	"prop_billboard_03",
	"prop_billboard_04",
	"prop_billboard_05",
	"prop_billboard_06",
	"prop_billboard_07",
	"prop_billboard_08",
	"prop_billboard_09",
	"prop_billboard_09wall",
	"prop_billboard_10",
	"prop_billboard_11",
	"prop_billboard_12",
	"prop_billboard_13",
	"prop_billboard_14",
	"prop_billboard_15",
	"prop_billboard_16",
	"prop_billb_frame01a",
	"prop_billb_frame01b",
	"prop_billb_frame02a",
	"prop_billb_frame02b",
	"prop_billb_frame03a",
	"prop_billb_frame03b",
	"prop_billb_frame03c",
	"prop_billb_frame04a",
	"prop_billb_frame04b",
	"prop_binoc_01",
	"prop_bin_04a",
	"prop_bin_10a",
	"prop_bin_10b",
	"prop_bin_11a",
	"prop_bin_11b",
	"prop_bin_12a",
	"prop_bin_13a",
	"prop_bin_14a",
	"prop_bin_14b",
	"prop_bin_beach_01d",
	"prop_bin_delpiero",
	"prop_bin_delpiero_b",
	"prop_biolab_g_door",
	"prop_biotech_store",
	"prop_bison_winch",
	"prop_blackjack_01",
	"prop_bleachers_01",
	"prop_bleachers_02",
	"prop_bleachers_03",
	"prop_bleachers_04",
	"prop_bleachers_05",
	"prop_blox_spray",
	"prop_bmu_01",
	"prop_bmu_01_b",
	"prop_bmu_02",
	"prop_bmu_02_ld",
	"prop_bmu_02_ld_cab",
	"prop_bmu_02_ld_sup",
	"prop_bmu_track01",
	"prop_bmu_track02",
	"prop_bmu_track03",
	"prop_bodyarmour_02",
	"prop_bodyarmour_03",
	"prop_bodyarmour_04",
	"prop_bodyarmour_05",
	"prop_bodyarmour_06",
	"prop_bollard_01a",
	"prop_bollard_01b",
	"prop_bollard_01c",
	"prop_bollard_03a",
	"prop_bomb_01",
	"prop_bomb_01_s",
	"prop_bonesaw",
	"prop_bongos_01",
	"prop_bong_01",
	"prop_boogbd_stack_01",
	"prop_boogbd_stack_02",
	"prop_boogieboard_01",
	"prop_boogieboard_02",
	"prop_boogieboard_03",
	"prop_boogieboard_04",
	"prop_boogieboard_05",
	"prop_boogieboard_06",
	"prop_boogieboard_07",
	"prop_boogieboard_08",
	"prop_boogieboard_09",
	"prop_boogieboard_10",
	"prop_boombox_01",
	"prop_bottle_cap_01",
	"prop_bowling_ball",
	"prop_bowling_pin",
	"prop_bowl_crisps",
	"prop_boxcar5_handle",
	"prop_boxing_glove_01",
	"prop_boxpile_10a",
	"prop_boxpile_10b",
	"prop_box_ammo01a",
	"prop_box_ammo02a",
	"prop_box_ammo03a_set",
	"prop_box_ammo03a_set2",
	"prop_box_ammo04a",
	"prop_box_ammo05b",
	"prop_box_ammo07a",
	"prop_box_ammo07b",
	"prop_box_guncase_01a",
	"prop_box_guncase_02a",
	"prop_box_guncase_03a",
	"prop_box_tea01a",
	"prop_box_wood05a",
	"prop_box_wood05b",
	"prop_box_wood08a",
	"prop_breadbin_01",
	"prop_bread_rack_01",
	"prop_bread_rack_02",
	"prop_broken_cboard_p1",
	"prop_broken_cboard_p2",
	"prop_broken_cell_gate_01",
	"prop_broom_unit_01",
	"prop_bskball_01",
	"prop_bs_map_door_01",
	"prop_buckets_02",
	"prop_bucket_01a",
	"prop_bucket_01b",
	"prop_bucket_02a",
	"prop_buck_spade_01",
	"prop_buck_spade_02",
	"prop_buck_spade_03",
	"prop_buck_spade_04",
	"prop_buck_spade_05",
	"prop_buck_spade_06",
	"prop_buck_spade_07",
	"prop_buck_spade_08",
	"prop_buck_spade_09",
	"prop_buck_spade_10",
	"prop_bumper_01",
	"prop_bumper_02",
	"prop_bumper_03",
	"prop_bumper_04",
	"prop_bumper_05",
	"prop_bumper_06",
	"prop_bumper_car_01",
	"prop_burto_gate_01",
	"prop_bush_dead_02",
	"prop_bush_grape_01",
	"prop_bush_ivy_01_1m",
	"prop_bush_ivy_01_2m",
	"prop_bush_ivy_01_bk",
	"prop_bush_ivy_01_l",
	"prop_bush_ivy_01_pot",
	"prop_bush_ivy_01_r",
	"prop_bush_ivy_01_top",
	"prop_bush_ivy_02_1m",
	"prop_bush_ivy_02_2m",
	"prop_bush_ivy_02_l",
	"prop_bush_ivy_02_pot",
	"prop_bush_ivy_02_r",
	"prop_bush_ivy_02_top",
	"prop_bush_lrg_01",
	"prop_bush_lrg_01b",
	"prop_bush_lrg_01c",
	"prop_bush_lrg_01d",
	"prop_bush_lrg_01e",
	"prop_bush_lrg_02",
	"prop_bush_lrg_02b",
	"prop_bush_lrg_03",
	"prop_bush_lrg_03b",
	"prop_bush_lrg_04b",
	"prop_bush_lrg_04c",
	"prop_bush_lrg_04d",
	"prop_bush_med_01",
	"prop_bush_med_02",
	"prop_bush_med_03",
	"prop_bush_med_05",
	"prop_bush_med_06",
	"prop_bush_med_07",
	"prop_bush_neat_01",
	"prop_bush_neat_02",
	"prop_bush_neat_03",
	"prop_bush_neat_04",
	"prop_bush_neat_05",
	"prop_bush_neat_06",
	"prop_bush_neat_07",
	"prop_bush_neat_08",
	"prop_bush_ornament_01",
	"prop_bush_ornament_02",
	"prop_bush_ornament_03",
	"prop_bush_ornament_04",
	"prop_busker_hat_01",
	"prop_byard_bench01",
	"prop_byard_bench02",
	"prop_byard_block_01",
	"prop_byard_boat01",
	"prop_byard_boat02",
	"prop_byard_chains01",
	"prop_byard_dingy",
	"prop_byard_elecbox01",
	"prop_byard_elecbox02",
	"prop_byard_elecbox03",
	"prop_byard_elecbox04",
	"prop_byard_floatpile",
	"prop_byard_float_01",
	"prop_byard_float_01b",
	"prop_byard_float_02",
	"prop_byard_float_02b",
	"prop_byard_hoist",
	"prop_byard_hoist_2",
	"prop_byard_hoses01",
	"prop_byard_hoses02",
	"prop_byard_ladder01",
	"prop_byard_machine01",
	"prop_byard_machine02",
	"prop_byard_machine03",
	"prop_byard_motor_01",
	"prop_byard_motor_02",
	"prop_byard_motor_03",
	"prop_byard_net02",
	"prop_byard_phone",
	"prop_byard_pipes01",
	"prop_byard_pipe_01",
	"prop_byard_planks01",
	"prop_byard_pulley01",
	"prop_byard_rack",
	"prop_byard_ramp",
	"prop_byard_rampold",
	"prop_byard_rowboat1",
	"prop_byard_rowboat2",
	"prop_byard_rowboat3",
	"prop_byard_rowboat4",
	"prop_byard_rowboat5",
	"prop_byard_scfhold01",
	"prop_byard_sleeper01",
	"prop_byard_sleeper02",
	"prop_byard_steps_01",
	"prop_byard_tank_01",
	"prop_byard_trailer01",
	"prop_byard_trailer02",
	"prop_b_board_blank",
	"prop_c4_final",
	"prop_c4_final_green",
	"prop_cabinet_01",
	"prop_cabinet_01b",
	"prop_cabinet_02b",
	"prop_cablespool_01a",
	"prop_cablespool_01b",
	"prop_cablespool_02",
	"prop_cablespool_03",
	"prop_cablespool_04",
	"prop_cablespool_05",
	"prop_cablespool_06",
	"prop_cable_hook_01",
	"prop_camera_strap",
	"prop_candy_pqs",
	"prop_can_canoe",
	"prop_cap_01",
	"prop_cap_01b",
	"prop_cap_row_01",
	"prop_cap_row_01b",
	"prop_cap_row_02",
	"prop_cap_row_02b",
	"prop_carcreeper",
	"prop_cargo_int",
	"prop_carjack",
	"prop_carjack_l2",
	"prop_carrier_bag_01",
	"prop_carrier_bag_01_lod",
	"prop_cartwheel_01",
	"prop_carwash_roller_horz",
	"prop_carwash_roller_vert",
	"prop_car_battery_01",
	"prop_car_bonnet_01",
	"prop_car_bonnet_02",
	"prop_car_door_01",
	"prop_car_door_02",
	"prop_car_door_03",
	"prop_car_door_04",
	"prop_car_engine_01",
	"prop_car_exhaust_01",
	"prop_car_ignition",
	"prop_car_seat",
	"prop_casey_sec_id",
	"prop_cash_case_01",
	"prop_cash_case_02",
	"prop_cash_crate_01",
	"prop_cash_dep_bag_01",
	"prop_cash_envelope_01",
	"prop_cash_note_01",
	"prop_cash_pile_01",
	"prop_cash_pile_02",
	"prop_cash_trolly",
	"prop_casino_door_01l",
	"prop_casino_door_01r",
	"prop_cattlecrush",
	"prop_cat_tail_01",
	"prop_cctv_02_sm",
	"prop_cctv_cont_01",
	"prop_cctv_cont_03",
	"prop_cctv_cont_04",
	"prop_cctv_cont_05",
	"prop_cctv_cont_06",
	"prop_cctv_unit_01",
	"prop_cctv_unit_02",
	"prop_cctv_unit_05",
	"prop_cementmixer_01a",
	"prop_cementmixer_02a",
	"prop_ceramic_jug_01",
	"prop_ceramic_jug_cork",
	"prop_ch1_07_door_01l",
	"prop_ch1_07_door_01r",
	"prop_ch1_07_door_02l",
	"prop_ch1_07_door_02r",
	"prop_ch2_05d_g_door",
	"prop_ch2_07b_20_g_door",
	"prop_ch2_09b_door",
	"prop_ch2_09c_garage_door",
	"prop_ch3_01_trlrdoor_l",
	"prop_ch3_01_trlrdoor_r",
	"prop_ch3_04_door_01l",
	"prop_ch3_04_door_01r",
	"prop_ch3_04_door_02",
	"prop_chair_01a",
	"prop_chair_01b",
	"prop_chair_02",
	"prop_chair_03",
	"prop_chair_04a",
	"prop_chair_04b",
	"prop_chair_05",
	"prop_chair_06",
	"prop_chair_07",
	"prop_chair_08",
	"prop_chair_09",
	"prop_chair_10",
	"prop_chair_pile_01",
	"prop_chall_lamp_01",
	"prop_chall_lamp_01n",
	"prop_chall_lamp_02",
	"prop_chateau_chair_01",
	"prop_cheetah_covered",
	"prop_chem_grill",
	"prop_chem_grill_bit",
	"prop_chem_vial_02",
	"prop_chem_vial_02b",
	"prop_cherenneon",
	"prop_chickencoop_a",
	"prop_chip_fryer",
	"prop_choc_ego",
	"prop_choc_meto",
	"prop_choc_pq",
	"prop_ch_025c_g_door_01",
	"prop_cigar_01",
	"prop_cigar_02",
	"prop_cigar_03",
	"prop_cigar_pack_01",
	"prop_cigar_pack_02",
	"prop_clapper_brd_01",
	"prop_cleaver",
	"prop_cliff_paper",
	"prop_clippers_01",
	"prop_clothes_rail_02",
	"prop_clothes_rail_03",
	"prop_clothes_rail_2b",
	"prop_clothes_tub_01",
	"prop_clown_chair",
	"prop_cntrdoor_ld_l",
	"prop_cntrdoor_ld_r",
	"prop_coathook_01",
	"prop_cockneon",
	"prop_coffee_cup_trailer",
	"prop_coffee_mac_02",
	"prop_coffin_02",
	"prop_coffin_02b",
	"prop_coke_block_01",
	"prop_coke_block_half_a",
	"prop_coke_block_half_b",
	"prop_compressor_01",
	"prop_compressor_02",
	"prop_compressor_03",
	"prop_com_gar_door_01",
	"prop_com_ls_door_01",
	"prop_conc_sacks_02a",
	"prop_cone_float_1",
	"prop_conschute",
	"prop_consign_01c",
	"prop_consign_02a",
	"prop_conslift_base",
	"prop_conslift_brace",
	"prop_conslift_cage",
	"prop_conslift_door",
	"prop_conslift_lift",
	"prop_conslift_rail",
	"prop_conslift_rail2",
	"prop_conslift_steps",
	"prop_console_01",
	"prop_construcionlamp_01",
	"prop_const_fence01a",
	"prop_const_fence01b",
	"prop_const_fence02a",
	"prop_const_fence02b",
	"prop_const_fence03b",
	"prop_cons_crate",
	"prop_cons_plank",
	"prop_cons_ply01",
	"prop_cons_ply02",
	"prop_container_01a",
	"prop_container_01b",
	"prop_container_01c",
	"prop_container_01d",
	"prop_container_01e",
	"prop_container_01f",
	"prop_container_01g",
	"prop_container_01h",
	"prop_container_01mb",
	"prop_container_02a",
	"prop_container_03a",
	"prop_container_03b",
	"prop_container_03mb",
	"prop_container_03_ld",
	"prop_container_04a",
	"prop_container_04mb",
	"prop_container_05mb",
	"prop_container_door_mb_l",
	"prop_container_door_mb_r",
	"prop_container_hole",
	"prop_container_ld",
	"prop_container_ld2",
	"prop_container_old1",
	"prop_contnr_pile_01a",
	"prop_controller_01",
	"prop_control_rm_door_01",
	"prop_cont_chiller_01",
	"prop_cooker_03",
	"prop_copier_01",
	"prop_copper_pan",
	"prop_coral_bush_01",
	"prop_coral_flat_01",
	"prop_coral_flat_01_l1",
	"prop_coral_flat_02",
	"prop_coral_flat_brainy",
	"prop_coral_flat_clam",
	"prop_coral_grass_01",
	"prop_coral_grass_02",
	"prop_coral_kelp_01",
	"prop_coral_kelp_01_l1",
	"prop_coral_kelp_02",
	"prop_coral_kelp_02_l1",
	"prop_coral_kelp_03",
	"prop_coral_kelp_03a",
	"prop_coral_kelp_03b",
	"prop_coral_kelp_03c",
	"prop_coral_kelp_03d",
	"prop_coral_kelp_03_l1",
	"prop_coral_kelp_04",
	"prop_coral_kelp_04_l1",
	"prop_coral_pillar_01",
	"prop_coral_pillar_02",
	"prop_coral_spikey_01",
	"prop_coral_stone_03",
	"prop_coral_stone_04",
	"prop_coral_sweed_01",
	"prop_coral_sweed_02",
	"prop_coral_sweed_03",
	"prop_coral_sweed_04",
	"prop_cora_clam_01",
	"prop_cork_board",
	"prop_couch_01",
	"prop_couch_03",
	"prop_couch_04",
	"prop_couch_lg_02",
	"prop_couch_lg_05",
	"prop_couch_lg_06",
	"prop_couch_lg_07",
	"prop_couch_lg_08",
	"prop_couch_sm1_07",
	"prop_couch_sm2_07",
	"prop_couch_sm_02",
	"prop_couch_sm_05",
	"prop_couch_sm_06",
	"prop_couch_sm_07",
	"prop_crane_01_truck1",
	"prop_crane_01_truck2",
	"prop_cranial_saw",
	"prop_crashed_heli",
	"prop_cratepile_07a_l1",
	"prop_crate_01a",
	"prop_crate_02a",
	"prop_crate_08a",
	"prop_crate_09a",
	"prop_crate_10a",
	"prop_crate_11a",
	"prop_crate_11b",
	"prop_crate_11c",
	"prop_crate_11d",
	"prop_crate_float_1",
	"prop_creosote_b_01",
	"prop_crisp",
	"prop_crisp_small",
	"prop_crosssaw_01",
	"prop_cs1_14b_traind",
	"prop_cs1_14b_traind_dam",
	"prop_cs4_05_tdoor",
	"prop_cs4_10_tr_gd_01",
	"prop_cs4_11_door",
	"prop_cs6_03_door_l",
	"prop_cs6_03_door_r",
	"prop_cs_20m_rope",
	"prop_cs_30m_rope",
	"prop_cs_abattoir_switch",
	"prop_cs_aircon_01",
	"prop_cs_aircon_fan",
	"prop_cs_amanda_shoe",
	"prop_cs_ashtray",
	"prop_cs_bandana",
	"prop_cs_bar",
	"prop_cs_beachtowel_01",
	"prop_cs_beer_bot_01",
	"prop_cs_beer_bot_01b",
	"prop_cs_beer_bot_01lod",
	"prop_cs_beer_bot_02",
	"prop_cs_beer_bot_03",
	"prop_cs_beer_bot_40oz",
	"prop_cs_beer_bot_40oz_02",
	"prop_cs_beer_bot_40oz_03",
	"prop_cs_beer_bot_test",
	"prop_cs_binder_01",
	"prop_cs_bin_01",
	"prop_cs_bin_01_lid",
	"prop_cs_bin_01_skinned",
	"prop_cs_bin_02",
	"prop_cs_bin_03",
	"prop_cs_book_01",
	"prop_cs_bottle_opener",
	"prop_cs_bowie_knife",
	"prop_cs_bowl_01",
	"prop_cs_bowl_01b",
	"prop_cs_box_clothes",
	"prop_cs_box_step",
	"prop_cs_brain_chunk",
	"prop_cs_bs_cup",
	"prop_cs_bucket_s",
	"prop_cs_bucket_s_lod",
	"prop_cs_burger_01",
	"prop_cs_business_card",
	"prop_cs_cardbox_01",
	"prop_cs_cash_note_01",
	"prop_cs_cctv",
	"prop_cs_champ_flute",
	"prop_cs_ciggy_01",
	"prop_cs_ciggy_01b",
	"prop_cs_clothes_box",
	"prop_cs_coke_line",
	"prop_cs_cont_latch",
	"prop_cs_crackpipe",
	"prop_cs_credit_card",
	"prop_cs_creeper_01",
	"prop_cs_crisps_01",
	"prop_cs_cuffs_01",
	"prop_cs_diaphram",
	"prop_cs_dildo_01",
	"prop_cs_documents_01",
	"prop_cs_dog_lead_2a",
	"prop_cs_dog_lead_2b",
	"prop_cs_dog_lead_2c",
	"prop_cs_dog_lead_3a",
	"prop_cs_dog_lead_3b",
	"prop_cs_dog_lead_a",
	"prop_cs_dog_lead_b",
	"prop_cs_dog_lead_c",
	"prop_cs_duffel_01",
	"prop_cs_duffel_01b",
	"prop_cs_dumpster_01a",
	"prop_cs_dumpster_lidl",
	"prop_cs_dumpster_lidr",
	"prop_cs_dvd",
	"prop_cs_dvd_case",
	"prop_cs_dvd_player",
	"prop_cs_envolope_01",
	"prop_cs_fertilizer",
	"prop_cs_film_reel_01",
	"prop_cs_folding_chair_01",
	"prop_cs_fork",
	"prop_cs_frank_photo",
	"prop_cs_freightdoor_l1",
	"prop_cs_freightdoor_r1",
	"prop_cs_fridge",
	"prop_cs_fridge_door",
	"prop_cs_fuel_hose",
	"prop_cs_fuel_nozle",
	"prop_cs_gascutter_1",
	"prop_cs_gascutter_2",
	"prop_cs_glass_scrap",
	"prop_cs_gravyard_gate_l",
	"prop_cs_gravyard_gate_r",
	"prop_cs_gunrack",
	"prop_cs_hand_radio",
	"prop_cs_heist_bag_01",
	"prop_cs_heist_bag_02",
	"prop_cs_heist_bag_strap_01",
	"prop_cs_heist_rope",
	"prop_cs_heist_rope_b",
	"prop_cs_hotdog_01",
	"prop_cs_hotdog_02",
	"prop_cs_h_bag_strap_01",
	"prop_cs_ice_locker",
	"prop_cs_ice_locker_door_l",
	"prop_cs_ice_locker_door_r",
	"prop_cs_ilev_blind_01",
	"prop_cs_ironing_board",
	"prop_cs_katana_01",
	"prop_cs_kettle_01",
	"prop_cs_keyboard_01",
	"prop_cs_keys_01",
	"prop_cs_kitchen_cab_l2",
	"prop_cs_kitchen_cab_ld",
	"prop_cs_kitchen_cab_rd",
	"prop_cs_lazlow_ponytail",
	"prop_cs_lazlow_shirt_01",
	"prop_cs_lazlow_shirt_01b",
	"prop_cs_leaf",
	"prop_cs_leg_chain_01",
	"prop_cs_lester_crate",
	"prop_cs_lipstick",
	"prop_cs_magazine",
	"prop_cs_marker_01",
	"prop_cs_meth_pipe",
	"prop_cs_milk_01",
	"prop_cs_mini_tv",
	"prop_cs_mopbucket_01",
	"prop_cs_mop_s",
	"prop_cs_mouse_01",
	"prop_cs_nail_file",
	"prop_cs_newspaper",
	"prop_cs_office_chair",
	"prop_cs_overalls_01",
	"prop_cs_package_01",
	"prop_cs_padlock",
	"prop_cs_pamphlet_01",
	"prop_cs_panel_01",
	"prop_cs_panties",
	"prop_cs_panties_02",
	"prop_cs_panties_03",
	"prop_cs_paper_cup",
	"prop_cs_para_ropebit",
	"prop_cs_para_ropes",
	"prop_cs_pebble",
	"prop_cs_pebble_02",
	"prop_cs_petrol_can",
	"prop_cs_phone_01",
	"prop_cs_photoframe_01",
	"prop_cs_pills",
	"prop_cs_plane_int_01",
	"prop_cs_planning_photo",
	"prop_cs_plant_01",
	"prop_cs_plate_01",
	"prop_cs_polaroid",
	"prop_cs_police_torch",
	"prop_cs_pour_tube",
	"prop_cs_power_cell",
	"prop_cs_power_cord",
	"prop_cs_protest_sign_01",
	"prop_cs_protest_sign_02",
	"prop_cs_protest_sign_02b",
	"prop_cs_protest_sign_03",
	"prop_cs_protest_sign_04a",
	"prop_cs_protest_sign_04b",
	"prop_cs_rage_statue_p1",
	"prop_cs_rage_statue_p2",
	"prop_cs_remote_01",
	"prop_cs_rolled_paper",
	"prop_cs_rope_tie_01",
	"prop_cs_rub_binbag_01",
	"prop_cs_rub_box_01",
	"prop_cs_rub_box_02",
	"prop_cs_r_business_card",
	"prop_cs_sack_01",
	"prop_cs_saucer_01",
	"prop_cs_sc1_11_gate",
	"prop_cs_scissors",
	"prop_cs_script_bottle",
	"prop_cs_script_bottle_01",
	"prop_cs_server_drive",
	"prop_cs_sheers",
	"prop_cs_shirt_01",
	"prop_cs_shopping_bag",
	"prop_cs_shot_glass",
	"prop_cs_silver_tray",
	"prop_cs_sink_filler",
	"prop_cs_sink_filler_02",
	"prop_cs_sink_filler_03",
	"prop_cs_sm_27_gate",
	"prop_cs_sol_glasses",
	"prop_cs_spray_can",
	"prop_cs_steak",
	"prop_cs_stock_book",
	"prop_cs_street_binbag_01",
	"prop_cs_street_card_01",
	"prop_cs_street_card_02",
	"prop_cs_sub_hook_01",
	"prop_cs_sub_rope_01",
	"prop_cs_swipe_card",
	"prop_cs_tablet",
	"prop_cs_tablet_02",
	"prop_cs_toaster",
	"prop_cs_trolley_01",
	"prop_cs_trowel",
	"prop_cs_truck_ladder",
	"prop_cs_tshirt_ball_01",
	"prop_cs_tv_stand",
	"prop_cs_t_shirt_pile",
	"prop_cs_valve",
	"prop_cs_vent_cover",
	"prop_cs_vial_01",
	"prop_cs_walkie_talkie",
	"prop_cs_walking_stick",
	"prop_cs_whiskey_bottle",
	"prop_cs_whiskey_bot_stop",
	"prop_cs_wrench",
	"prop_cub_door_lifeblurb",
	"prop_cub_lifeblurb",
	"prop_cuff_keys_01",
	"prop_cup_saucer_01",
	"prop_curl_bar_01",
	"prop_damdoor_01",
	"prop_dart_1",
	"prop_dart_2",
	"prop_dart_bd_01",
	"prop_dart_bd_cab_01",
	"prop_defilied_ragdoll_01",
	"prop_desert_iron_01",
	"prop_detergent_01a",
	"prop_detergent_01b",
	"prop_devin_box_01",
	"prop_devin_rope_01",
	"prop_diggerbkt_01",
	"prop_direct_chair_01",
	"prop_direct_chair_02",
	"prop_display_unit_01",
	"prop_display_unit_02",
	"prop_disp_cabinet_002",
	"prop_disp_cabinet_01",
	"prop_disp_razor_01",
	"prop_distantcar_day",
	"prop_distantcar_night",
	"prop_distantcar_truck",
	"prop_dj_deck_01",
	"prop_dj_deck_02",
	"prop_dock_bouy_1",
	"prop_dock_bouy_2",
	"prop_dock_bouy_3",
	"prop_dock_bouy_5",
	"prop_dock_crane_01",
	"prop_dock_crane_02",
	"prop_dock_crane_02_cab",
	"prop_dock_crane_02_hook",
	"prop_dock_crane_02_ld",
	"prop_dock_crane_04",
	"prop_dock_crane_lift",
	"prop_dock_float_1",
	"prop_dock_float_1b",
	"prop_dock_moor_01",
	"prop_dock_moor_04",
	"prop_dock_moor_05",
	"prop_dock_moor_06",
	"prop_dock_moor_07",
	"prop_dock_ropefloat",
	"prop_dock_ropetyre1",
	"prop_dock_ropetyre2",
	"prop_dock_ropetyre3",
	"prop_dock_rtg_01",
	"prop_dock_rtg_ld",
	"prop_dock_shippad",
	"prop_dock_sign_01",
	"prop_dock_woodpole1",
	"prop_dock_woodpole2",
	"prop_dock_woodpole3",
	"prop_dock_woodpole4",
	"prop_dock_woodpole5",
	"prop_dog_cage_01",
	"prop_dog_cage_02",
	"prop_dolly_01",
	"prop_dolly_02",
	"prop_donut_01",
	"prop_donut_02",
	"prop_donut_02b",
	"prop_door_01",
	"prop_door_balcony_frame",
	"prop_door_balcony_left",
	"prop_door_balcony_right",
	"prop_door_bell_01",
	"prop_double_grid_line",
	"prop_dress_disp_01",
	"prop_dress_disp_02",
	"prop_dress_disp_03",
	"prop_dress_disp_04",
	"prop_drop_armscrate_01",
	"prop_drop_armscrate_01b",
	"prop_drop_crate_01",
	"prop_drop_crate_01_set",
	"prop_drop_crate_01_set2",
	"prop_drug_burner",
	"prop_drug_package",
	"prop_drug_package_02",
	"prop_drywallpile_01",
	"prop_drywallpile_02",
	"prop_dt1_13_groundlight",
	"prop_dt1_13_walllightsource",
	"prop_dt1_20_mp_door_l",
	"prop_dt1_20_mp_door_r",
	"prop_dt1_20_mp_gar",
	"prop_ducktape_01",
	"prop_dummy_01",
	"prop_dummy_car",
	"prop_dummy_light",
	"prop_dummy_plane",
	"prop_dumpster_3a",
	"prop_dumpster_3step",
	"prop_dumpster_4a",
	"prop_dumpster_4b",
	"prop_d_balcony_l_light",
	"prop_d_balcony_r_light",
	"prop_ear_defenders_01",
	"prop_ecg_01",
	"prop_ecg_01_cable_01",
	"prop_ecg_01_cable_02",
	"prop_ecola_can",
	"prop_egg_clock_01",
	"prop_ejector_seat_01",
	"prop_elecbox_03a",
	"prop_elecbox_10",
	"prop_elecbox_12",
	"prop_elecbox_13",
	"prop_elecbox_14",
	"prop_elecbox_15",
	"prop_elecbox_16",
	"prop_elecbox_17",
	"prop_elecbox_18",
	"prop_elecbox_19",
	"prop_elecbox_20",
	"prop_elecbox_21",
	"prop_elecbox_22",
	"prop_elecbox_23",
	"prop_elecbox_24",
	"prop_elecbox_24b",
	"prop_elecbox_25",
	"prop_el_guitar_01",
	"prop_el_guitar_02",
	"prop_el_guitar_03",
	"prop_employee_month_01",
	"prop_employee_month_02",
	"prop_energy_drink",
	"prop_entityxf_covered",
	"prop_epsilon_door_l",
	"prop_epsilon_door_r",
	"prop_etricmotor_01",
	"prop_exer_bike_01",
	"prop_faceoffice_door_l",
	"prop_faceoffice_door_r",
	"prop_face_rag_01",
	"prop_facgate_01",
	"prop_facgate_01b",
	"prop_facgate_02pole",
	"prop_facgate_02_l",
	"prop_facgate_03post",
	"prop_facgate_03_l",
	"prop_facgate_03_ld_l",
	"prop_facgate_03_ld_r",
	"prop_facgate_03_r",
	"prop_facgate_04_l",
	"prop_facgate_04_r",
	"prop_facgate_05_r",
	"prop_facgate_05_r_dam_l1",
	"prop_facgate_05_r_l1",
	"prop_facgate_06_l",
	"prop_facgate_06_r",
	"prop_facgate_07",
	"prop_facgate_07b",
	"prop_facgate_08",
	"prop_facgate_08_frame",
	"prop_facgate_08_ld2",
	"prop_facgate_id1_27",
	"prop_fac_machine_02",
	"prop_fag_packet_01",
	"prop_fan_01",
	"prop_fan_palm_01a",
	"prop_fax_01",
	"prop_fbi3_coffee_table",
	"prop_fbibombbin",
	"prop_fbibombcupbrd",
	"prop_fbibombfile",
	"prop_fbibombplant",
	"prop_feeder1",
	"prop_feed_sack_01",
	"prop_feed_sack_02",
	"prop_fence_log_01",
	"prop_fence_log_02",
	"prop_ferris_car_01",
	"prop_ferris_car_01_lod1",
	"prop_ff_counter_01",
	"prop_ff_counter_02",
	"prop_ff_counter_03",
	"prop_ff_noodle_01",
	"prop_ff_noodle_02",
	"prop_ff_shelves_01",
	"prop_ff_sink_01",
	"prop_ff_sink_02",
	"prop_fib_badge",
	"prop_fib_broken_window",
	"prop_fib_skylight_piece",
	"prop_film_cam_01",
	"prop_fireescape_01a",
	"prop_fireescape_01b",
	"prop_fireescape_02a",
	"prop_fireescape_02b",
	"prop_fire_driser_1a",
	"prop_fire_driser_1b",
	"prop_fire_driser_2b",
	"prop_fire_driser_3b",
	"prop_fire_driser_4a",
	"prop_fire_driser_4b",
	"prop_fire_hosereel",
	"prop_fishing_rod_01",
	"prop_fishing_rod_02",
	"prop_fish_slice_01",
	"prop_flagpole_1a",
	"prop_flagpole_2a",
	"prop_flagpole_3a",
	"prop_flare_01",
	"prop_flare_01b",
	"prop_flash_unit",
	"prop_flatbed_strap",
	"prop_flatbed_strap_b",
	"prop_flatscreen_overlay",
	"prop_flattrailer_01a",
	"prop_flattruck_01a",
	"prop_fleeca_atm",
	"prop_flight_box_01",
	"prop_flight_box_insert",
	"prop_flight_box_insert2",
	"prop_flipchair_01",
	"prop_floor_duster_01",
	"prop_fncconstruc_02a",
	"prop_fnccorgm_05a",
	"prop_fnccorgm_05b",
	"prop_fnccorgm_06a",
	"prop_fnccorgm_06b",
	"prop_fnclink_01gate1",
	"prop_fnclink_02gate1",
	"prop_fnclink_02gate2",
	"prop_fnclink_02gate5",
	"prop_fnclink_02gate6_l",
	"prop_fnclink_02gate6_r",
	"prop_fnclink_02gate7",
	"prop_fnclink_03gate1",
	"prop_fnclink_03gate2",
	"prop_fnclink_03gate4",
	"prop_fnclink_03gate5",
	"prop_fnclink_04gate1",
	"prop_fnclink_04h_l2",
	"prop_fnclink_06gate2",
	"prop_fnclink_06gate3",
	"prop_fnclink_06gatepost",
	"prop_fnclink_07gate1",
	"prop_fnclink_07gate2",
	"prop_fnclink_07gate3",
	"prop_fnclink_09gate1",
	"prop_fnclink_10a",
	"prop_fnclink_10b",
	"prop_fnclink_10c",
	"prop_fnclink_10d",
	"prop_fnclink_10e",
	"prop_fnclog_01a",
	"prop_fnclog_01b",
	"prop_fncpeir_03a",
	"prop_fncres_02a",
	"prop_fncres_02b",
	"prop_fncres_02c",
	"prop_fncres_02d",
	"prop_fncres_02_gate1",
	"prop_fncres_03gate1",
	"prop_fncres_05c_l1",
	"prop_fncsec_01a",
	"prop_fncsec_01b",
	"prop_fncsec_01crnr",
	"prop_fncsec_01gate",
	"prop_fncsec_01pole",
	"prop_fncsec_02a",
	"prop_fncsec_02pole",
	"prop_fncsec_04a",
	"prop_fncwood_07gate1",
	"prop_fncwood_11a_l1",
	"prop_fncwood_16a",
	"prop_fncwood_16b",
	"prop_fncwood_16c",
	"prop_fncwood_18a",
	"prop_folded_polo_shirt",
	"prop_folder_01",
	"prop_folder_02",
	"prop_food_bin_01",
	"prop_food_bin_02",
	"prop_food_bs_bshelf",
	"prop_food_bs_cups01",
	"prop_food_bs_cups03",
	"prop_food_bs_soda_01",
	"prop_food_bs_soda_02",
	"prop_food_bs_tray_01",
	"prop_food_bs_tray_06",
	"prop_food_burg1",
	"prop_food_burg2",
	"prop_food_cb_bshelf",
	"prop_food_cb_burg01",
	"prop_food_cb_cups01",
	"prop_food_cb_donuts",
	"prop_food_cb_nugets",
	"prop_food_cb_soda_01",
	"prop_food_cb_soda_02",
	"prop_food_cb_tray_01",
	"prop_food_cups1",
	"prop_food_napkin_01",
	"prop_food_napkin_02",
	"prop_food_tray_01",
	"prop_food_van_01",
	"prop_food_van_02",
	"prop_forsalejr2",
	"prop_forsalejr3",
	"prop_forsalejr4",
	"prop_foundation_sponge",
	"prop_fountain1",
	"prop_fountain2",
	"prop_franklin_dl",
	"prop_freeweight_01",
	"prop_freeweight_02",
	"prop_fridge_01",
	"prop_fridge_03",
	"prop_front_seat_01",
	"prop_front_seat_02",
	"prop_front_seat_03",
	"prop_front_seat_04",
	"prop_front_seat_05",
	"prop_front_seat_06",
	"prop_front_seat_07",
	"prop_front_seat_row_01",
	"prop_fruitstand_b_nite",
	"prop_fruit_basket",
	"prop_ftowel_01",
	"prop_ftowel_07",
	"prop_ftowel_08",
	"prop_ftowel_10",
	"prop_f_b_insert_broken",
	"prop_f_duster_01_s",
	"prop_f_duster_02",
	"prop_gaffer_arm_bind",
	"prop_gaffer_arm_bind_cut",
	"prop_gaffer_leg_bind",
	"prop_gaffer_leg_bind_cut",
	"prop_gaffer_tape",
	"prop_gaffer_tape_strip",
	"prop_game_clock_01",
	"prop_game_clock_02",
	"prop_garden_dreamcatch_01",
	"prop_garden_edging_01",
	"prop_garden_edging_02",
	"prop_garden_zapper_01",
	"prop_gardnght_01",
	"prop_gar_door_01",
	"prop_gar_door_02",
	"prop_gar_door_03",
	"prop_gar_door_03_ld",
	"prop_gar_door_04",
	"prop_gar_door_05",
	"prop_gar_door_05_l",
	"prop_gar_door_05_r",
	"prop_gar_door_a_01",
	"prop_gar_door_plug",
	"prop_gascage01",
	"prop_gascyl_ramp_01",
	"prop_gascyl_ramp_door_01",
	"prop_gas_01",
	"prop_gas_02",
	"prop_gas_03",
	"prop_gas_04",
	"prop_gas_05",
	"prop_gas_grenade",
	"prop_gas_mask_hang_01",
	"prop_gatecom_02",
	"prop_gate_airport_01",
	"prop_gate_bridge_ld",
	"prop_gate_cult_01_l",
	"prop_gate_cult_01_r",
	"prop_gate_docks_ld",
	"prop_gate_farm_01a",
	"prop_gate_farm_post",
	"prop_gate_frame_01",
	"prop_gate_frame_02",
	"prop_gate_frame_04",
	"prop_gate_frame_05",
	"prop_gate_frame_06",
	"prop_gate_military_01",
	"prop_gate_prison_01",
	"prop_gate_tep_01_l",
	"prop_gate_tep_01_r",
	"prop_gazebo_03",
	"prop_gd_ch2_08",
	"prop_generator_02a",
	"prop_generator_03a",
	"prop_generator_04",
	"prop_ghettoblast_02",
	"prop_girder_01a",
	"prop_glasscutter_01",
	"prop_glass_suck_holder",
	"prop_glf_roller",
	"prop_glf_spreader",
	"prop_gold_bar",
	"prop_gold_cont_01",
	"prop_gold_cont_01b",
	"prop_gold_trolly",
	"prop_gold_trolly_full",
	"prop_gold_trolly_strap_01",
	"prop_golf_bag_01",
	"prop_golf_bag_01b",
	"prop_golf_bag_01c",
	"prop_golf_ball",
	"prop_golf_ball_p2",
	"prop_golf_ball_p3",
	"prop_golf_ball_p4",
	"prop_golf_ball_tee",
	"prop_golf_driver",
	"prop_golf_iron_01",
	"prop_golf_marker_01",
	"prop_golf_pitcher_01",
	"prop_golf_putter_01",
	"prop_golf_tee",
	"prop_golf_wood_01",
	"prop_grain_hopper",
	"prop_grapes_01",
	"prop_grapes_02",
	"prop_grass_dry_02",
	"prop_grass_dry_03",
	"prop_gravestones_01a",
	"prop_gravestones_02a",
	"prop_gravestones_03a",
	"prop_gravestones_04a",
	"prop_gravestones_05a",
	"prop_gravestones_06a",
	"prop_gravestones_07a",
	"prop_gravestones_08a",
	"prop_gravestones_09a",
	"prop_gravestones_10a",
	"prop_gravetomb_01a",
	"prop_gravetomb_02a",
	"prop_griddle_01",
	"prop_griddle_02",
	"prop_grumandoor_l",
	"prop_grumandoor_r",
	"prop_gshotsensor_01",
	"prop_gun_case_01",
	"prop_gun_case_02",
	"prop_gun_frame",
	"prop_hacky_sack_01",
	"prop_handdry_01",
	"prop_handdry_02",
	"prop_handrake",
	"prop_handtowels",
	"prop_hand_toilet",
	"prop_hanger_door_1",
	"prop_hard_hat_01",
	"prop_hat_box_01",
	"prop_hat_box_02",
	"prop_hat_box_03",
	"prop_hat_box_04",
	"prop_hat_box_05",
	"prop_hat_box_06",
	"prop_haybailer_01",
	"prop_haybale_01",
	"prop_haybale_02",
	"prop_haybale_stack_01",
	"prop_hd_seats_01",
	"prop_headphones_01",
	"prop_headset_01",
	"prop_hedge_trimmer_01",
	"prop_helipad_01",
	"prop_helipad_02",
	"prop_henna_disp_01",
	"prop_henna_disp_02",
	"prop_henna_disp_03",
	"prop_hifi_01",
	"prop_hobo_stove_01",
	"prop_hockey_bag_01",
	"prop_hole_plug_01",
	"prop_holster_01",
	"prop_homeless_matress_01",
	"prop_homeless_matress_02",
	"prop_hose_1",
	"prop_hose_2",
	"prop_hose_3",
	"prop_hose_nozzle",
	"prop_hospitaldoors_start",
	"prop_hospital_door_l",
	"prop_hospital_door_r",
	"prop_hotel_clock_01",
	"prop_hotel_trolley",
	"prop_hottub2",
	"prop_huf_rag_01",
	"prop_huge_display_01",
	"prop_huge_display_02",
	"prop_hunterhide",
	"prop_hw1_03_gardoor_01",
	"prop_hw1_04_door_l1",
	"prop_hw1_04_door_r1",
	"prop_hw1_23_door",
	"prop_hwbowl_pseat_6x1",
	"prop_hwbowl_seat_01",
	"prop_hwbowl_seat_02",
	"prop_hwbowl_seat_03",
	"prop_hwbowl_seat_03b",
	"prop_hwbowl_seat_6x6",
	"prop_hydro_platform_01",
	"prop_ice_box_01",
	"prop_ice_box_01_l1",
	"prop_ice_cube_01",
	"prop_ice_cube_02",
	"prop_ice_cube_03",
	"prop_id2_11_gdoor",
	"prop_id2_20_clock",
	"prop_idol_01",
	"prop_idol_01_error",
	"prop_idol_case",
	"prop_idol_case_01",
	"prop_idol_case_02",
	"prop_id_21_gardoor_01",
	"prop_id_21_gardoor_02",
	"prop_indus_meet_door_l",
	"prop_indus_meet_door_r",
	"prop_ind_barge_01",
	"prop_ind_barge_02",
	"prop_ind_coalcar_01",
	"prop_ind_coalcar_02",
	"prop_ind_coalcar_03",
	"prop_ind_conveyor_01",
	"prop_ind_conveyor_02",
	"prop_ind_conveyor_04",
	"prop_ind_crusher",
	"prop_ind_deiseltank",
	"prop_ind_light_01a",
	"prop_ind_light_01b",
	"prop_ind_light_01c",
	"prop_ind_mech_01c",
	"prop_ind_mech_02a",
	"prop_ind_mech_02b",
	"prop_ind_mech_03a",
	"prop_ind_mech_04a",
	"prop_ind_oldcrane",
	"prop_ind_washer_02",
	"prop_inflatearch_01",
	"prop_inflategate_01",
	"prop_ing_camera_01",
	"prop_ing_crowbar",
	"prop_inhaler_01",
	"prop_int_gate01",
	"prop_in_tray_01",
	"prop_irish_sign_01",
	"prop_irish_sign_02",
	"prop_irish_sign_03",
	"prop_irish_sign_04",
	"prop_irish_sign_05",
	"prop_irish_sign_06",
	"prop_irish_sign_07",
	"prop_irish_sign_08",
	"prop_irish_sign_09",
	"prop_irish_sign_10",
	"prop_irish_sign_11",
	"prop_irish_sign_12",
	"prop_irish_sign_13",
	"prop_iron_01",
	"prop_jb700_covered",
	"prop_jeans_01",
	"prop_jetski_ramp_01",
	"prop_jet_bloodsplat_01",
	"prop_jewel_02a",
	"prop_jewel_02b",
	"prop_jewel_02c",
	"prop_jewel_03a",
	"prop_jewel_03b",
	"prop_jewel_04a",
	"prop_jewel_04b",
	"prop_jewel_pickup_new_01",
	"prop_juice_dispenser",
	"prop_juice_pool_01",
	"prop_jukebox_01",
	"prop_jukebox_02",
	"prop_jyard_block_01a",
	"prop_j_disptray_01",
	"prop_j_disptray_01b",
	"prop_j_disptray_01_dam",
	"prop_j_disptray_02",
	"prop_j_disptray_02_dam",
	"prop_j_disptray_03",
	"prop_j_disptray_03_dam",
	"prop_j_disptray_04",
	"prop_j_disptray_04b",
	"prop_j_disptray_05",
	"prop_j_disptray_05b",
	"prop_j_heist_pic_01",
	"prop_j_heist_pic_02",
	"prop_j_heist_pic_03",
	"prop_j_heist_pic_04",
	"prop_j_neck_disp_01",
	"prop_j_neck_disp_02",
	"prop_j_neck_disp_03",
	"prop_kayak_01",
	"prop_kayak_01b",
	"prop_kebab_grill",
	"prop_keg_01",
	"prop_kettle",
	"prop_kettle_01",
	"prop_keyboard_01a",
	"prop_keyboard_01b",
	"prop_kino_light_01",
	"prop_kino_light_03",
	"prop_kitch_juicer",
	"prop_kitch_pot_fry",
	"prop_kitch_pot_huge",
	"prop_kitch_pot_lrg",
	"prop_kitch_pot_lrg2",
	"prop_kitch_pot_med",
	"prop_kitch_pot_sm",
	"prop_knife",
	"prop_knife_stand",
	"prop_kt1_06_door_l",
	"prop_kt1_06_door_r",
	"prop_kt1_10_mpdoor_l",
	"prop_kt1_10_mpdoor_r",
	"prop_ladel",
	"prop_laptop_02_closed",
	"prop_laptop_jimmy",
	"prop_laptop_lester",
	"prop_laptop_lester2",
	"prop_large_gold",
	"prop_large_gold_alt_a",
	"prop_large_gold_alt_b",
	"prop_large_gold_alt_c",
	"prop_large_gold_empty",
	"prop_lawnmower_01",
	"prop_ld_alarm_01",
	"prop_ld_alarm_01_dam",
	"prop_ld_alarm_alert",
	"prop_ld_ammo_pack_01",
	"prop_ld_ammo_pack_02",
	"prop_ld_ammo_pack_03",
	"prop_ld_armour",
	"prop_ld_balcfnc_01a",
	"prop_ld_balcfnc_02a",
	"prop_ld_balcfnc_02c",
	"prop_ld_bankdoors_02",
	"prop_ld_barrier_01",
	"prop_ld_binbag_01",
	"prop_ld_bomb",
	"prop_ld_bomb_01",
	"prop_ld_bomb_01_open",
	"prop_ld_bomb_anim",
	"prop_ld_cable",
	"prop_ld_cable_tie_01",
	"prop_ld_can_01",
	"prop_ld_case_01",
	"prop_ld_case_01_lod",
	"prop_ld_case_01_s",
	"prop_ld_contact_card",
	"prop_ld_container",
	"prop_ld_contain_dl",
	"prop_ld_contain_dl2",
	"prop_ld_contain_dr",
	"prop_ld_contain_dr2",
	"prop_ld_crate_01",
	"prop_ld_crate_lid_01",
	"prop_ld_crocclips01",
	"prop_ld_crocclips02",
	"prop_ld_dummy_rope",
	"prop_ld_fags_01",
	"prop_ld_fags_02",
	"prop_ld_fan_01",
	"prop_ld_fan_01_old",
	"prop_ld_faucet",
	"prop_ld_ferris_wheel",
	"prop_ld_fireaxe",
	"prop_ld_flow_bottle",
	"prop_ld_fragwall_01a",
	"prop_ld_garaged_01",
	"prop_ld_gold_tooth",
	"prop_ld_greenscreen_01",
	"prop_ld_handbag",
	"prop_ld_handbag_s",
	"prop_ld_hat_01",
	"prop_ld_haybail",
	"prop_ld_hdd_01",
	"prop_ld_health_pack",
	"prop_ld_hook",
	"prop_ld_int_safe_01",
	"prop_ld_jail_door",
	"prop_ld_jeans_01",
	"prop_ld_jeans_02",
	"prop_ld_jerrycan_01",
	"prop_ld_keypad_01",
	"prop_ld_keypad_01b",
	"prop_ld_keypad_01b_lod",
	"prop_ld_lap_top",
	"prop_ld_monitor_01",
	"prop_ld_peep_slider",
	"prop_ld_pipe_single_01",
	"prop_ld_planning_pin_01",
	"prop_ld_planning_pin_02",
	"prop_ld_planning_pin_03",
	"prop_ld_purse_01",
	"prop_ld_purse_01_lod",
	"prop_ld_rail_01",
	"prop_ld_rail_02",
	"prop_ld_rope_t",
	"prop_ld_rubble_01",
	"prop_ld_rubble_02",
	"prop_ld_rubble_03",
	"prop_ld_rubble_04",
	"prop_ld_rub_binbag_01",
	"prop_ld_scrap",
	"prop_ld_shirt_01",
	"prop_ld_shoe_01",
	"prop_ld_shoe_02",
	"prop_ld_shovel",
	"prop_ld_shovel_dirt",
	"prop_ld_snack_01",
	"prop_ld_suitcase_01",
	"prop_ld_suitcase_02",
	"prop_ld_test_01",
	"prop_ld_toilet_01",
	"prop_ld_tooth",
	"prop_ld_tshirt_01",
	"prop_ld_tshirt_02",
	"prop_ld_vault_door",
	"prop_ld_wallet_01",
	"prop_ld_wallet_01_s",
	"prop_ld_wallet_02",
	"prop_ld_wallet_pickup",
	"prop_ld_w_me_machette",
	"prop_leaf_blower_01",
	"prop_lectern_01",
	"prop_letterbox_04",
	"prop_lev_crate_01",
	"prop_lev_des_barge_01",
	"prop_lev_des_barge_02",
	"prop_lifeblurb_01",
	"prop_lifeblurb_01b",
	"prop_lifeblurb_02",
	"prop_lifeblurb_02b",
	"prop_life_ring_02",
	"prop_lift_overlay_01",
	"prop_lift_overlay_02",
	"prop_litter_picker",
	"prop_loggneon",
	"prop_logpile_05",
	"prop_logpile_06",
	"prop_logpile_06b",
	"prop_logpile_07",
	"prop_logpile_07b",
	"prop_log_01",
	"prop_log_02",
	"prop_log_03",
	"prop_loose_rag_01",
	"prop_lrggate_01c_l",
	"prop_lrggate_01c_r",
	"prop_lrggate_01_l",
	"prop_lrggate_01_pst",
	"prop_lrggate_01_r",
	"prop_lrggate_02_ld",
	"prop_lrggate_03a",
	"prop_lrggate_03b",
	"prop_lrggate_03b_ld",
	"prop_lrggate_04a",
	"prop_lrggate_05a",
	"prop_lrggate_06a",
	"prop_luggage_01a",
	"prop_luggage_02a",
	"prop_luggage_03a",
	"prop_luggage_04a",
	"prop_luggage_05a",
	"prop_luggage_06a",
	"prop_luggage_07a",
	"prop_luggage_08a",
	"prop_luggage_09a",
	"prop_magenta_door",
	"prop_makeup_trail_01",
	"prop_makeup_trail_02",
	"prop_map_door_01",
	"prop_mast_01",
	"prop_mat_box",
	"prop_mb_cargo_01a",
	"prop_mb_cargo_02a",
	"prop_mb_cargo_03a",
	"prop_mb_cargo_04a",
	"prop_mb_cargo_04b",
	"prop_mb_crate_01a",
	"prop_mb_crate_01a_set",
	"prop_mb_crate_01b",
	"prop_mb_hesco_06",
	"prop_mb_ordnance_01",
	"prop_mb_ordnance_03",
	"prop_mb_sandblock_01",
	"prop_mb_sandblock_02",
	"prop_mb_sandblock_03",
	"prop_mb_sandblock_04",
	"prop_mb_sandblock_05",
	"prop_medal_01",
	"prop_medstation_02",
	"prop_medstation_03",
	"prop_medstation_04",
	"prop_med_bag_01",
	"prop_med_bag_01b",
	"prop_med_jet_01",
	"prop_megaphone_01",
	"prop_mem_candle_04",
	"prop_mem_candle_05",
	"prop_mem_candle_06",
	"prop_mem_reef_01",
	"prop_mem_reef_02",
	"prop_mem_reef_03",
	"prop_mem_teddy_01",
	"prop_mem_teddy_02",
	"prop_metalfoodjar_01",
	"prop_metal_plates01",
	"prop_metal_plates02",
	"prop_meth_bag_01",
	"prop_michaels_credit_tv",
	"prop_michael_backpack",
	"prop_michael_balaclava",
	"prop_michael_door",
	"prop_michael_sec_id",
	"prop_microphone_02",
	"prop_microwave_1",
	"prop_micro_01",
	"prop_micro_02",
	"prop_micro_cs_01",
	"prop_micro_cs_01_door",
	"prop_military_pickup_01",
	"prop_mil_crate_01",
	"prop_mil_crate_02",
	"prop_minigun_01",
	"prop_mobile_mast_1",
	"prop_mobile_mast_2",
	"prop_money_bag_01",
	"prop_monitor_01c",
	"prop_monitor_01d",
	"prop_monitor_02",
	"prop_monitor_03b",
	"prop_motel_door_09",
	"prop_mouse_01",
	"prop_mouse_01a",
	"prop_mouse_01b",
	"prop_mouse_02",
	"prop_movie_rack",
	"prop_mp3_dock",
	"prop_mp_arrow_barrier_01",
	"prop_mp_barrier_01",
	"prop_mp_barrier_01b",
	"prop_mp_barrier_02",
	"prop_mp_barrier_02b",
	"prop_mp_base_marker",
	"prop_mp_boost_01",
	"prop_mp_cant_place_lrg",
	"prop_mp_cant_place_med",
	"prop_mp_cant_place_sm",
	"prop_mp_cone_01",
	"prop_mp_cone_02",
	"prop_mp_cone_03",
	"prop_mp_cone_04",
	"prop_mp_drug_package",
	"prop_mp_drug_pack_blue",
	"prop_mp_drug_pack_red",
	"prop_mp_icon_shad_lrg",
	"prop_mp_icon_shad_med",
	"prop_mp_icon_shad_sm",
	"prop_mp_max_out_lrg",
	"prop_mp_max_out_med",
	"prop_mp_max_out_sm",
	"prop_mp_num_0",
	"prop_mp_num_1",
	"prop_mp_num_2",
	"prop_mp_num_3",
	"prop_mp_num_4",
	"prop_mp_num_5",
	"prop_mp_num_6",
	"prop_mp_num_7",
	"prop_mp_num_8",
	"prop_mp_num_9",
	"prop_mp_placement",
	"prop_mp_placement_lrg",
	"prop_mp_placement_maxd",
	"prop_mp_placement_med",
	"prop_mp_placement_red",
	"prop_mp_placement_sm",
	"prop_mp_ramp_01",
	"prop_mp_ramp_02",
	"prop_mp_ramp_03",
	"prop_mp_repair",
	"prop_mp_repair_01",
	"prop_mp_respawn_02",
	"prop_mp_rocket_01",
	"prop_mp_spike_01",
	"prop_mr_rasberryclean",
	"prop_mr_raspberry_01",
	"prop_muscle_bench_01",
	"prop_muscle_bench_02",
	"prop_muscle_bench_03",
	"prop_muscle_bench_04",
	"prop_muscle_bench_05",
	"prop_muscle_bench_06",
	"prop_muster_wboard_01",
	"prop_muster_wboard_02",
	"prop_m_pack_int_01",
	"prop_necklace_board",
	"prop_news_disp_02a_s",
	"prop_new_drug_pack_01",
	"prop_nigel_bag_pickup",
	"prop_night_safe_01",
	"prop_notepad_01",
	"prop_notepad_02",
	"prop_novel_01",
	"prop_npc_phone",
	"prop_npc_phone_02",
	"prop_office_alarm_01",
	"prop_office_desk_01",
	"prop_offroad_bale01",
	"prop_offroad_bale02_l1_frag_",
	"prop_offroad_barrel01",
	"prop_offroad_tyres01",
	"prop_off_chair_01",
	"prop_off_chair_03",
	"prop_off_chair_04",
	"prop_off_chair_04b",
	"prop_off_chair_04_s",
	"prop_off_chair_05",
	"prop_off_phone_01",
	"prop_oiltub_01",
	"prop_oiltub_02",
	"prop_oiltub_03",
	"prop_oiltub_05",
	"prop_oiltub_06",
	"prop_oil_derrick_01",
	"prop_oil_guage_01",
	"prop_oil_spool_02",
	"prop_oil_valve_01",
	"prop_oil_valve_02",
	"prop_oil_wellhead_01",
	"prop_oil_wellhead_03",
	"prop_oil_wellhead_04",
	"prop_oil_wellhead_05",
	"prop_oil_wellhead_06",
	"prop_oldplough1",
	"prop_old_boot",
	"prop_old_churn_01",
	"prop_old_churn_02",
	"prop_old_deck_chair",
	"prop_old_deck_chair_02",
	"prop_old_farm_01",
	"prop_old_farm_02",
	"prop_old_wood_chair",
	"prop_old_wood_chair_lod",
	"prop_orang_can_01",
	"prop_outdoor_fan_01",
	"prop_out_door_speaker",
	"prop_overalls_01",
	"prop_owl_totem_01",
	"prop_paints_can01",
	"prop_paints_can02",
	"prop_paints_can03",
	"prop_paints_can04",
	"prop_paints_can05",
	"prop_paints_can06",
	"prop_paints_can07",
	"prop_paint_brush01",
	"prop_paint_brush02",
	"prop_paint_brush03",
	"prop_paint_brush04",
	"prop_paint_brush05",
	"prop_paint_roller",
	"prop_paint_spray01a",
	"prop_paint_spray01b",
	"prop_paint_stepl01",
	"prop_paint_stepl01b",
	"prop_paint_stepl02",
	"prop_paint_tray",
	"prop_paint_wpaper01",
	"prop_pallettruck_01",
	"prop_palm_fan_02_a",
	"prop_palm_fan_02_b",
	"prop_palm_fan_03_a",
	"prop_palm_fan_03_b",
	"prop_palm_fan_03_c",
	"prop_palm_fan_03_d",
	"prop_palm_fan_04_a",
	"prop_palm_fan_04_b",
	"prop_palm_fan_04_c",
	"prop_palm_fan_04_d",
	"prop_palm_huge_01a",
	"prop_palm_huge_01b",
	"prop_palm_med_01a",
	"prop_palm_med_01b",
	"prop_palm_med_01c",
	"prop_palm_med_01d",
	"prop_palm_sm_01a",
	"prop_palm_sm_01d",
	"prop_palm_sm_01e",
	"prop_palm_sm_01f",
	"prop_paper_bag_01",
	"prop_paper_bag_small",
	"prop_paper_ball",
	"prop_paper_box_01",
	"prop_paper_box_02",
	"prop_paper_box_03",
	"prop_paper_box_04",
	"prop_paper_box_05",
	"prop_pap_camera_01",
	"prop_parachute",
	"prop_parapack_01",
	"prop_parasol_01",
	"prop_parasol_01_b",
	"prop_parasol_01_c",
	"prop_parasol_01_down",
	"prop_parasol_02",
	"prop_parasol_02_b",
	"prop_parasol_02_c",
	"prop_parasol_03",
	"prop_parasol_03_b",
	"prop_parasol_03_c",
	"prop_parasol_04e",
	"prop_parasol_04e_lod1",
	"prop_parasol_bh_48",
	"prop_parking_sign_06",
	"prop_parking_sign_07",
	"prop_parking_sign_1",
	"prop_parking_sign_2",
	"prop_parking_wand_01",
	"prop_park_ticket_01",
	"prop_partsbox_01",
	"prop_passport_01",
	"prop_patio_heater_01",
	"prop_patio_lounger1",
	"prop_patio_lounger1b",
	"prop_patio_lounger1_table",
	"prop_patio_lounger_2",
	"prop_patio_lounger_3",
	"prop_patriotneon",
	"prop_paynspray_door_l",
	"prop_paynspray_door_r",
	"prop_pc_01a",
	"prop_pc_02a",
	"prop_peanut_bowl_01",
	"prop_ped_pic_01",
	"prop_ped_pic_01_sm",
	"prop_ped_pic_02",
	"prop_ped_pic_02_sm",
	"prop_ped_pic_03",
	"prop_ped_pic_03_sm",
	"prop_ped_pic_04",
	"prop_ped_pic_04_sm",
	"prop_ped_pic_05",
	"prop_ped_pic_05_sm",
	"prop_ped_pic_06",
	"prop_ped_pic_06_sm",
	"prop_ped_pic_07",
	"prop_ped_pic_07_sm",
	"prop_ped_pic_08",
	"prop_ped_pic_08_sm",
	"prop_pencil_01",
	"prop_pharm_sign_01",
	"prop_phonebox_05a",
	"prop_phone_ing",
	"prop_phone_ing_02",
	"prop_phone_ing_03",
	"prop_phone_overlay_01",
	"prop_phone_overlay_02",
	"prop_phone_overlay_anim",
	"prop_phone_proto",
	"prop_phone_proto_back",
	"prop_phone_proto_battery",
	"prop_picnictable_02",
	"prop_piercing_gun",
	"prop_pier_kiosk_01",
	"prop_pier_kiosk_02",
	"prop_pier_kiosk_03",
	"prop_pile_dirt_01",
	"prop_pile_dirt_02",
	"prop_pile_dirt_03",
	"prop_pile_dirt_04",
	"prop_pile_dirt_06",
	"prop_pile_dirt_07",
	"prop_ping_pong",
	"prop_pipes_01a",
	"prop_pipes_01b",
	"prop_pipes_03b",
	"prop_pipes_04a",
	"prop_pipes_05a",
	"prop_pipes_conc_01",
	"prop_pipes_conc_02",
	"prop_pipe_single_01",
	"prop_pistol_holster",
	"prop_pitcher_01_cs",
	"prop_pizza_box_01",
	"prop_pizza_box_02",
	"prop_pizza_oven_01",
	"prop_planer_01",
	"prop_plant_01a",
	"prop_plant_01b",
	"prop_plant_base_01",
	"prop_plant_base_02",
	"prop_plant_base_03",
	"prop_plant_cane_01a",
	"prop_plant_cane_01b",
	"prop_plant_cane_02a",
	"prop_plant_cane_02b",
	"prop_plant_clover_01",
	"prop_plant_clover_02",
	"prop_plant_fern_01a",
	"prop_plant_fern_01b",
	"prop_plant_fern_02a",
	"prop_plant_fern_02b",
	"prop_plant_fern_02c",
	"prop_plant_flower_01",
	"prop_plant_flower_02",
	"prop_plant_flower_03",
	"prop_plant_flower_04",
	"prop_plant_group_01",
	"prop_plant_group_02",
	"prop_plant_group_03",
	"prop_plant_group_04",
	"prop_plant_group_05",
	"prop_plant_group_05b",
	"prop_plant_group_05c",
	"prop_plant_group_05d",
	"prop_plant_group_06a",
	"prop_plant_group_06b",
	"prop_plant_group_06c",
	"prop_plant_int_02a",
	"prop_plant_int_02b",
	"prop_plant_int_05a",
	"prop_plant_int_05b",
	"prop_plant_int_06a",
	"prop_plant_int_06b",
	"prop_plant_int_06c",
	"prop_plant_paradise",
	"prop_plant_paradise_b",
	"prop_plastic_cup_02",
	"prop_plas_barier_01a",
	"prop_plate_04",
	"prop_plate_stand_01",
	"prop_plate_warmer",
	"prop_player_gasmask",
	"prop_player_phone_01",
	"prop_player_phone_02",
	"prop_pliers_01",
	"prop_plywoodpile_01a",
	"prop_plywoodpile_01b",
	"prop_podium_mic",
	"prop_police_door_l",
	"prop_police_door_l_dam",
	"prop_police_door_r",
	"prop_police_door_r_dam",
	"prop_police_door_surround",
	"prop_police_phone",
	"prop_police_radio_handset",
	"prop_police_radio_main",
	"prop_poly_bag_01",
	"prop_poly_bag_money",
	"prop_poolball_1",
	"prop_poolball_10",
	"prop_poolball_11",
	"prop_poolball_12",
	"prop_poolball_13",
	"prop_poolball_14",
	"prop_poolball_15",
	"prop_poolball_2",
	"prop_poolball_3",
	"prop_poolball_4",
	"prop_poolball_5",
	"prop_poolball_6",
	"prop_poolball_7",
	"prop_poolball_8",
	"prop_poolball_9",
	"prop_poolball_cue",
	"prop_poolskimmer",
	"prop_pooltable_02",
	"prop_pooltable_3b",
	"prop_pool_ball_01",
	"prop_pool_cue",
	"prop_pool_rack_01",
	"prop_pool_rack_02",
	"prop_pool_tri",
	"prop_porn_mag_01",
	"prop_porn_mag_02",
	"prop_porn_mag_03",
	"prop_porn_mag_04",
	"prop_portable_hifi_01",
	"prop_portacabin01",
	"prop_portasteps_01",
	"prop_portasteps_02",
	"prop_postcard_rack",
	"prop_poster_tube_01",
	"prop_poster_tube_02",
	"prop_postit_drive",
	"prop_postit_gun",
	"prop_postit_it",
	"prop_postit_lock",
	"prop_potatodigger",
	"prop_pot_01",
	"prop_pot_02",
	"prop_pot_03",
	"prop_pot_04",
	"prop_pot_05",
	"prop_pot_06",
	"prop_pot_plant_02a",
	"prop_pot_plant_02b",
	"prop_pot_plant_02c",
	"prop_pot_plant_02d",
	"prop_pot_plant_03a",
	"prop_pot_plant_04a",
	"prop_pot_plant_05d_l1",
	"prop_pot_plant_bh1",
	"prop_pot_rack",
	"prop_power_cell",
	"prop_power_cord_01",
	"prop_premier_fence_01",
	"prop_premier_fence_02",
	"prop_printer_01",
	"prop_printer_02",
	"prop_pris_bars_01",
	"prop_pris_bench_01",
	"prop_pris_door_01_l",
	"prop_pris_door_01_r",
	"prop_pris_door_02",
	"prop_pris_door_03",
	"prop_prlg_gravestone_05a_l1",
	"prop_prlg_gravestone_06a",
	"prop_projector_overlay",
	"prop_prologue_phone",
	"prop_prop_tree_01",
	"prop_prop_tree_02",
	"prop_protest_sign_01",
	"prop_protest_table_01",
	"prop_prototype_minibomb",
	"prop_proxy_chateau_table",
	"prop_punch_bag_l",
	"prop_pylon_01",
	"prop_pylon_02",
	"prop_pylon_03",
	"prop_pylon_04",
	"prop_p_jack_03_col",
	"prop_p_spider_01a",
	"prop_p_spider_01c",
	"prop_p_spider_01d",
	"prop_ql_revolving_door",
	"prop_quad_grid_line",
	"prop_radiomast01",
	"prop_radiomast02",
	"prop_rad_waste_barrel_01",
	"prop_ragganeon",
	"prop_rag_01",
	"prop_railsleepers01",
	"prop_railsleepers02",
	"prop_railstack01",
	"prop_railstack02",
	"prop_railstack03",
	"prop_railstack04",
	"prop_railstack05",
	"prop_rail_boxcar",
	"prop_rail_boxcar2",
	"prop_rail_boxcar3",
	"prop_rail_boxcar4",
	"prop_rail_boxcar5",
	"prop_rail_boxcar5_d",
	"prop_rail_buffer_01",
	"prop_rail_buffer_02",
	"prop_rail_controller",
	"prop_rail_crane_01",
	"prop_rail_points01",
	"prop_rail_points02",
	"prop_rail_sigbox01",
	"prop_rail_sigbox02",
	"prop_rail_signals02",
	"prop_rail_tankcar",
	"prop_rail_tankcar2",
	"prop_rail_tankcar3",
	"prop_rail_wellcar",
	"prop_rail_wellcar2",
	"prop_range_target_01",
	"prop_range_target_02",
	"prop_range_target_03",
	"prop_rebar_pile01",
	"prop_recyclebin_02a",
	"prop_recyclebin_02b",
	"prop_recyclebin_02_c",
	"prop_recyclebin_02_d",
	"prop_recyclebin_03_a",
	"prop_recyclebin_04_a",
	"prop_recyclebin_04_b",
	"prop_recyclebin_05_a",
	"prop_ret_door",
	"prop_ret_door_02",
	"prop_ret_door_03",
	"prop_ret_door_04",
	"prop_rf_conc_pillar",
	"prop_riding_crop_01",
	"prop_riot_shield",
	"prop_rio_del_01",
	"prop_roadcone01a",
	"prop_roadcone01b",
	"prop_roadcone01c",
	"prop_roadcone02a",
	"prop_roadcone02b",
	"prop_roadcone02c",
	"prop_roadheader_01",
	"prop_rock_1_a",
	"prop_rock_1_b",
	"prop_rock_1_c",
	"prop_rock_1_d",
	"prop_rock_1_e",
	"prop_rock_1_f",
	"prop_rock_1_g",
	"prop_rock_1_h",
	"prop_rock_1_i",
	"prop_rock_2_a",
	"prop_rock_2_c",
	"prop_rock_2_d",
	"prop_rock_2_f",
	"prop_rock_2_g",
	"prop_rock_3_a",
	"prop_rock_3_b",
	"prop_rock_3_c",
	"prop_rock_3_d",
	"prop_rock_3_e",
	"prop_rock_3_f",
	"prop_rock_3_g",
	"prop_rock_3_h",
	"prop_rock_3_i",
	"prop_rock_3_j",
	"prop_rock_4_c",
	"prop_rock_4_d",
	"prop_rock_chair_01",
	"prop_rolled_sock_01",
	"prop_rolled_sock_02",
	"prop_rolled_yoga_mat",
	"prop_roller_car_01",
	"prop_roller_car_02",
	"prop_ron_door_01",
	"prop_roofpipe_01",
	"prop_roofpipe_02",
	"prop_roofpipe_03",
	"prop_roofpipe_04",
	"prop_roofpipe_05",
	"prop_roofpipe_06",
	"prop_roofvent_011a",
	"prop_roofvent_01a",
	"prop_roofvent_01b",
	"prop_roofvent_02a",
	"prop_roofvent_02b",
	"prop_roofvent_03a",
	"prop_roofvent_04a",
	"prop_roofvent_05a",
	"prop_roofvent_05b",
	"prop_roofvent_07a",
	"prop_roofvent_08a",
	"prop_roofvent_09a",
	"prop_roofvent_10a",
	"prop_roofvent_10b",
	"prop_roofvent_11b",
	"prop_roofvent_11c",
	"prop_roofvent_12a",
	"prop_roofvent_13a",
	"prop_roofvent_15a",
	"prop_roofvent_16a",
	"prop_rope_family_3",
	"prop_rope_hook_01",
	"prop_roundbailer01",
	"prop_roundbailer02",
	"prop_rub_bike_01",
	"prop_rub_bike_02",
	"prop_rub_bike_03",
	"prop_rub_binbag_sd_01",
	"prop_rub_binbag_sd_02",
	"prop_rub_busdoor_01",
	"prop_rub_busdoor_02",
	"prop_rub_buswreck_01",
	"prop_rub_buswreck_03",
	"prop_rub_buswreck_06",
	"prop_rub_cabinet",
	"prop_rub_cabinet01",
	"prop_rub_cabinet02",
	"prop_rub_cabinet03",
	"prop_rub_cage01a",
	"prop_rub_carpart_02",
	"prop_rub_carpart_03",
	"prop_rub_carpart_04",
	"prop_rub_chassis_01",
	"prop_rub_chassis_02",
	"prop_rub_chassis_03",
	"prop_rub_cont_01a",
	"prop_rub_cont_01b",
	"prop_rub_cont_01c",
	"prop_rub_flotsam_01",
	"prop_rub_flotsam_02",
	"prop_rub_flotsam_03",
	"prop_rub_frklft",
	"prop_rub_litter_01",
	"prop_rub_litter_02",
	"prop_rub_litter_03",
	"prop_rub_litter_03b",
	"prop_rub_litter_03c",
	"prop_rub_litter_04",
	"prop_rub_litter_04b",
	"prop_rub_litter_05",
	"prop_rub_litter_06",
	"prop_rub_litter_07",
	"prop_rub_litter_09",
	"prop_rub_litter_8",
	"prop_rub_matress_01",
	"prop_rub_matress_02",
	"prop_rub_matress_03",
	"prop_rub_matress_04",
	"prop_rub_monitor",
	"prop_rub_pile_01",
	"prop_rub_pile_02",
	"prop_rub_planks_01",
	"prop_rub_planks_02",
	"prop_rub_planks_03",
	"prop_rub_planks_04",
	"prop_rub_railwreck_1",
	"prop_rub_railwreck_2",
	"prop_rub_railwreck_3",
	"prop_rub_scrap_02",
	"prop_rub_scrap_03",
	"prop_rub_scrap_04",
	"prop_rub_scrap_05",
	"prop_rub_scrap_06",
	"prop_rub_scrap_07",
	"prop_rub_stool",
	"prop_rub_sunktyre",
	"prop_rub_t34",
	"prop_rub_trainers_01",
	"prop_rub_trolley01a",
	"prop_rub_trolley02a",
	"prop_rub_trolley03a",
	"prop_rub_trukwreck_1",
	"prop_rub_trukwreck_2",
	"prop_rub_tyre_01",
	"prop_rub_tyre_02",
	"prop_rub_tyre_03",
	"prop_rub_tyre_dam1",
	"prop_rub_tyre_dam2",
	"prop_rub_tyre_dam3",
	"prop_rub_washer_01",
	"prop_rub_wheel_01",
	"prop_rub_wheel_02",
	"prop_rub_wreckage_3",
	"prop_rub_wreckage_4",
	"prop_rub_wreckage_5",
	"prop_rub_wreckage_6",
	"prop_rub_wreckage_7",
	"prop_rub_wreckage_8",
	"prop_rub_wreckage_9",
	"prop_rural_windmill_l1",
	"prop_rural_windmill_l2",
	"prop_rus_olive",
	"prop_rus_olive_wint",
	"prop_sacktruck_01",
	"prop_sacktruck_02a",
	"prop_safety_glasses",
	"prop_sam_01",
	"prop_sandwich_01",
	"prop_satdish_2_a",
	"prop_satdish_2_f",
	"prop_satdish_2_g",
	"prop_satdish_3_b",
	"prop_satdish_3_c",
	"prop_satdish_3_d",
	"prop_satdish_l_01",
	"prop_satdish_s_03",
	"prop_satdish_s_05a",
	"prop_satdish_s_05b",
	"prop_sc1_06_gate_l",
	"prop_sc1_06_gate_r",
	"prop_sc1_12_door",
	"prop_sc1_21_g_door_01",
	"prop_scaffold_pole",
	"prop_scafold_01a",
	"prop_scafold_01c",
	"prop_scafold_01f",
	"prop_scafold_02a",
	"prop_scafold_02c",
	"prop_scafold_03a",
	"prop_scafold_03b",
	"prop_scafold_03c",
	"prop_scafold_03f",
	"prop_scafold_04a",
	"prop_scafold_05a",
	"prop_scafold_06a",
	"prop_scafold_06b",
	"prop_scafold_06c",
	"prop_scafold_07a",
	"prop_scafold_08a",
	"prop_scafold_09a",
	"prop_scafold_frame1a",
	"prop_scafold_frame1b",
	"prop_scafold_frame1c",
	"prop_scafold_frame1f",
	"prop_scafold_frame2a",
	"prop_scafold_frame2b",
	"prop_scafold_frame2c",
	"prop_scafold_frame3a",
	"prop_scafold_frame3c",
	"prop_scafold_rail_01",
	"prop_scafold_rail_02",
	"prop_scafold_rail_03",
	"prop_scafold_xbrace",
	"prop_scalpel",
	"prop_scn_police_torch",
	"prop_scourer_01",
	"prop_scrap_2_crate",
	"prop_scrap_win_01",
	"prop_scrim_01",
	"prop_scythemower",
	"prop_section_garage_01",
	"prop_securityvan_lightrig",
	"prop_security_case_01",
	"prop_security_case_02",
	"prop_sec_gate_01b",
	"prop_sec_gate_01c",
	"prop_sec_gate_01d",
	"prop_set_generator_01",
	"prop_sewing_fabric",
	"prop_sewing_machine",
	"prop_sglasses_stand_01",
	"prop_sglasses_stand_02",
	"prop_sglasses_stand_02b",
	"prop_sglasses_stand_03",
	"prop_sglasss_1b_lod",
	"prop_sglasss_1_lod",
	"prop_shamal_crash",
	"prop_shelves_01",
	"prop_shelves_02",
	"prop_shelves_03",
	"prop_shopping_bags01",
	"prop_shopping_bags02",
	"prop_shop_front_door_l",
	"prop_shop_front_door_r",
	"prop_shots_glass_cs",
	"prop_shower_01",
	"prop_shower_rack_01",
	"prop_shower_towel",
	"prop_showroom_door_l",
	"prop_showroom_door_r",
	"prop_showroom_glass_1b",
	"prop_shredder_01",
	"prop_shrub_rake",
	"prop_shuttering01",
	"prop_shuttering02",
	"prop_shuttering03",
	"prop_shuttering04",
	"prop_sh_beer_pissh_01",
	"prop_sh_bong_01",
	"prop_sh_cigar_01",
	"prop_sh_joint_01",
	"prop_sh_mr_rasp_01",
	"prop_sh_shot_glass",
	"prop_sh_tall_glass",
	"prop_sh_tt_fridgedoor",
	"prop_sh_wine_glass",
	"prop_side_lights",
	"prop_side_spreader",
	"prop_sign_airp_01a",
	"prop_sign_airp_02a",
	"prop_sign_airp_02b",
	"prop_sign_big_01",
	"prop_sign_mallet",
	"prop_sign_road_04g_l1",
	"prop_single_grid_line",
	"prop_single_rose",
	"prop_sink_01",
	"prop_sink_02",
	"prop_sink_03",
	"prop_sink_04",
	"prop_sink_05",
	"prop_sink_06",
	"prop_skate_flatramp",
	"prop_skate_funbox",
	"prop_skate_halfpipe",
	"prop_skate_kickers",
	"prop_skate_quartpipe",
	"prop_skate_rail",
	"prop_skate_spiner",
	"prop_skid_chair_01",
	"prop_skid_chair_02",
	"prop_skid_chair_03",
	"prop_skid_sleepbag_1",
	"prop_skid_tent_01",
	"prop_skid_tent_01b",
	"prop_skid_tent_03",
	"prop_skip_01a",
	"prop_skip_02a",
	"prop_skip_03",
	"prop_skip_04",
	"prop_skip_05a",
	"prop_skip_05b",
	"prop_skip_06a",
	"prop_skip_08a",
	"prop_skip_08b",
	"prop_skip_10a",
	"prop_skip_rope_01",
	"prop_skunk_bush_01",
	"prop_skylight_01",
	"prop_skylight_02",
	"prop_skylight_03",
	"prop_skylight_04",
	"prop_skylight_05",
	"prop_skylight_06a",
	"prop_skylight_06b",
	"prop_skylight_06c",
	"prop_sky_cover_01",
	"prop_slacks_01",
	"prop_slacks_02",
	"prop_sluicegate",
	"prop_sluicegatel",
	"prop_sluicegater",
	"prop_slush_dispenser",
	"prop_sm1_11_doorl",
	"prop_sm1_11_doorr",
	"prop_sm1_11_garaged",
	"prop_smg_holster_01",
	"prop_sm_10_mp_door",
	"prop_sm_14_mp_gar",
	"prop_sm_19_clock",
	"prop_sm_27_door",
	"prop_sm_27_gate",
	"prop_sm_27_gate_02",
	"prop_sm_27_gate_03",
	"prop_sm_27_gate_04",
	"prop_sm_locker_door",
	"prop_snow_bailer_01",
	"prop_snow_barrel_pile_03",
	"prop_snow_bench_01",
	"prop_snow_bin_01",
	"prop_snow_bin_02",
	"prop_snow_bush_01_a",
	"prop_snow_bush_02_a",
	"prop_snow_bush_02_b",
	"prop_snow_bush_03",
	"prop_snow_bush_04",
	"prop_snow_bush_04b",
	"prop_snow_cam_03",
	"prop_snow_cam_03a",
	"prop_snow_diggerbkt_01",
	"prop_snow_dumpster_01",
	"prop_snow_elecbox_16",
	"prop_snow_facgate_01",
	"prop_snow_field_01",
	"prop_snow_field_02",
	"prop_snow_field_03",
	"prop_snow_field_04",
	"prop_snow_flower_01",
	"prop_snow_flower_02",
	"prop_snow_fnclink_03crnr2",
	"prop_snow_fnclink_03h",
	"prop_snow_fnclink_03i",
	"prop_snow_fncwood_14a",
	"prop_snow_fncwood_14b",
	"prop_snow_fncwood_14c",
	"prop_snow_fncwood_14d",
	"prop_snow_fncwood_14e",
	"prop_snow_fnc_01",
	"prop_snow_gate_farm_03",
	"prop_snow_grain_01",
	"prop_snow_grass_01",
	"prop_snow_light_01",
	"prop_snow_oldlight_01b",
	"prop_snow_rail_signals02",
	"prop_snow_rub_trukwreck_2",
	"prop_snow_side_spreader_01",
	"prop_snow_streetlight01",
	"prop_snow_streetlight_01_frag_",
	"prop_snow_sub_frame_01a",
	"prop_snow_sub_frame_04b",
	"prop_snow_telegraph_01a",
	"prop_snow_telegraph_02a",
	"prop_snow_telegraph_03",
	"prop_snow_traffic_rail_1a",
	"prop_snow_traffic_rail_1b",
	"prop_snow_trailer01",
	"prop_snow_tree_03_e",
	"prop_snow_tree_03_h",
	"prop_snow_tree_03_i",
	"prop_snow_tree_04_d",
	"prop_snow_tree_04_f",
	"prop_snow_truktrailer_01a",
	"prop_snow_tyre_01",
	"prop_snow_t_ml_01",
	"prop_snow_t_ml_02",
	"prop_snow_t_ml_03",
	"prop_snow_wall_light_15a",
	"prop_snow_watertower01",
	"prop_snow_watertower01_l2",
	"prop_snow_watertower03",
	"prop_snow_woodpile_04a",
	"prop_soap_disp_01",
	"prop_soap_disp_02",
	"prop_solarpanel_01",
	"prop_solarpanel_02",
	"prop_solarpanel_03",
	"prop_sol_chair",
	"prop_space_pistol",
	"prop_space_rifle",
	"prop_speaker_01",
	"prop_speaker_02",
	"prop_speaker_03",
	"prop_speaker_05",
	"prop_speaker_06",
	"prop_speaker_07",
	"prop_speaker_08",
	"prop_speedball_01",
	"prop_sponge_01",
	"prop_sports_clock_01",
	"prop_spot_01",
	"prop_spot_clamp",
	"prop_spot_clamp_02",
	"prop_sprayer",
	"prop_spraygun_01",
	"prop_spray_backpack_01",
	"prop_spray_jackframe",
	"prop_spray_jackleg",
	"prop_sprink_crop_01",
	"prop_sprink_golf_01",
	"prop_sprink_park_01",
	"prop_spycam",
	"prop_squeegee",
	"prop_ss1_05_mp_door",
	"prop_ss1_08_mp_door_l",
	"prop_ss1_08_mp_door_r",
	"prop_ss1_10_door_l",
	"prop_ss1_10_door_r",
	"prop_ss1_14_garage_door",
	"prop_ss1_mpint_door_l",
	"prop_ss1_mpint_door_r",
	"prop_ss1_mpint_garage",
	"prop_ss1_mpint_garage_cl",
	"prop_stag_do_rope",
	"prop_start_finish_line_01",
	"prop_start_grid_01",
	"prop_staticmixer_01",
	"prop_stat_pack_01",
	"prop_steam_basket_01",
	"prop_steam_basket_02",
	"prop_steps_big_01",
	"prop_stickbfly",
	"prop_stickhbird",
	"prop_still",
	"prop_stockade_wheel",
	"prop_stockade_wheel_flat",
	"prop_stool_01",
	"prop_storagetank_01",
	"prop_storagetank_02",
	"prop_storagetank_03",
	"prop_storagetank_03a",
	"prop_storagetank_03b",
	"prop_storagetank_04",
	"prop_storagetank_05",
	"prop_storagetank_06",
	"prop_storagetank_07a",
	"prop_stripmenu",
	"prop_strip_door_01",
	"prop_strip_pole_01",
	"prop_studio_light_02",
	"prop_studio_light_03",
	"prop_sub_chunk_01",
	"prop_sub_cover_01",
	"prop_sub_crane_hook",
	"prop_sub_frame_01a",
	"prop_sub_frame_01b",
	"prop_sub_frame_01c",
	"prop_sub_frame_02a",
	"prop_sub_frame_03a",
	"prop_sub_frame_04a",
	"prop_sub_frame_04b",
	"prop_sub_gantry",
	"prop_sub_release",
	"prop_sub_trans_01a",
	"prop_sub_trans_02a",
	"prop_sub_trans_03a",
	"prop_sub_trans_04a",
	"prop_sub_trans_05b",
	"prop_sub_trans_06b",
	"prop_suitcase_01",
	"prop_suitcase_01b",
	"prop_suitcase_01c",
	"prop_suitcase_01d",
	"prop_suitcase_02",
	"prop_suitcase_03",
	"prop_suitcase_03b",
	"prop_surf_board_ldn_01",
	"prop_surf_board_ldn_02",
	"prop_surf_board_ldn_03",
	"prop_surf_board_ldn_04",
	"prop_syringe_01",
	"prop_s_pine_dead_01",
	"prop_tablesaw_01",
	"prop_tablesmall_01",
	"prop_table_02",
	"prop_table_03b_cs",
	"prop_table_04",
	"prop_table_04_chr",
	"prop_table_05",
	"prop_table_05_chr",
	"prop_table_06",
	"prop_table_06_chr",
	"prop_table_07",
	"prop_table_07_l1",
	"prop_table_08",
	"prop_table_08_chr",
	"prop_table_08_side",
	"prop_table_mic_01",
	"prop_table_para_comb_04",
	"prop_table_tennis",
	"prop_table_ten_bat",
	"prop_taco_01",
	"prop_taco_02",
	"prop_tail_gate_col",
	"prop_tapeplayer_01",
	"prop_target_arm",
	"prop_target_arm_b",
	"prop_target_arm_long",
	"prop_target_arm_sm",
	"prop_target_backboard",
	"prop_target_backboard_b",
	"prop_target_blue",
	"prop_target_blue_arrow",
	"prop_target_bull",
	"prop_target_bull_b",
	"prop_target_comp_metal",
	"prop_target_comp_wood",
	"prop_target_frame_01",
	"prop_target_inner1",
	"prop_target_inner2",
	"prop_target_inner2_b",
	"prop_target_inner3",
	"prop_target_inner3_b",
	"prop_target_inner_b",
	"prop_target_orange_arrow",
	"prop_target_oran_cross",
	"prop_target_ora_purp_01",
	"prop_target_purp_arrow",
	"prop_target_purp_cross",
	"prop_target_red",
	"prop_target_red_arrow",
	"prop_target_red_blue_01",
	"prop_target_red_cross",
	"prop_tarp_strap",
	"prop_taxi_meter_1",
	"prop_taxi_meter_2",
	"prop_tea_trolly",
	"prop_tea_urn",
	"prop_telegraph_01a",
	"prop_telegraph_01b",
	"prop_telegraph_01c",
	"prop_telegraph_01d",
	"prop_telegraph_01e",
	"prop_telegraph_01f",
	"prop_telegraph_01g",
	"prop_telegraph_02a",
	"prop_telegraph_02b",
	"prop_telegraph_03",
	"prop_telegraph_04a",
	"prop_telegraph_04b",
	"prop_telegraph_05a",
	"prop_telegraph_05b",
	"prop_telegraph_05c",
	"prop_telegraph_06a",
	"prop_telegraph_06b",
	"prop_telegraph_06c",
	"prop_telegwall_01a",
	"prop_telegwall_01b",
	"prop_telegwall_02a",
	"prop_telegwall_03a",
	"prop_telegwall_03b",
	"prop_telegwall_04a",
	"prop_telescope",
	"prop_telescope_01",
	"prop_temp_block_blocker",
	"prop_tennis_bag_01",
	"prop_tennis_ball",
	"prop_tennis_ball_lobber",
	"prop_tennis_rack_01",
	"prop_tennis_rack_01b",
	"prop_test_boulder_01",
	"prop_test_boulder_02",
	"prop_test_boulder_03",
	"prop_test_boulder_04",
	"prop_test_elevator",
	"prop_test_elevator_dl",
	"prop_test_elevator_dr",
	"prop_tick",
	"prop_tick_02",
	"prop_till_01_dam",
	"prop_till_02",
	"prop_till_03",
	"prop_time_capsule_01",
	"prop_tint_towel",
	"prop_tint_towels_01",
	"prop_tint_towels_01b",
	"prop_toaster_01",
	"prop_toaster_02",
	"prop_toiletfoot_static",
	"prop_toilet_01",
	"prop_toilet_02",
	"prop_toilet_03",
	"prop_toilet_brush_01",
	"prop_toilet_cube_01",
	"prop_toilet_cube_02",
	"prop_toilet_roll_01",
	"prop_toilet_roll_02",
	"prop_toilet_roll_03",
	"prop_toilet_roll_04",
	"prop_toilet_roll_05",
	"prop_toilet_shamp_01",
	"prop_toilet_shamp_02",
	"prop_toilet_soap_01",
	"prop_toilet_soap_02",
	"prop_toilet_soap_03",
	"prop_toilet_soap_04",
	"prop_toolchest_01",
	"prop_toolchest_02",
	"prop_toolchest_03",
	"prop_toolchest_04",
	"prop_toolchest_05",
	"prop_tool_adjspanner",
	"prop_tool_bench01",
	"prop_tool_bluepnt",
	"prop_tool_box_01",
	"prop_tool_box_02",
	"prop_tool_box_03",
	"prop_tool_box_04",
	"prop_tool_box_05",
	"prop_tool_box_06",
	"prop_tool_box_07",
	"prop_tool_broom",
	"prop_tool_broom2",
	"prop_tool_broom2_l1",
	"prop_tool_cable01",
	"prop_tool_cable02",
	"prop_tool_consaw",
	"prop_tool_drill",
	"prop_tool_fireaxe",
	"prop_tool_hammer",
	"prop_tool_hardhat",
	"prop_tool_jackham",
	"prop_tool_mallet",
	"prop_tool_mopbucket",
	"prop_tool_nailgun",
	"prop_tool_pickaxe",
	"prop_tool_pliers",
	"prop_tool_rake",
	"prop_tool_rake_l1",
	"prop_tool_sawhorse",
	"prop_tool_screwdvr01",
	"prop_tool_screwdvr02",
	"prop_tool_screwdvr03",
	"prop_tool_shovel",
	"prop_tool_shovel006",
	"prop_tool_shovel2",
	"prop_tool_shovel3",
	"prop_tool_shovel4",
	"prop_tool_shovel5",
	"prop_tool_sledgeham",
	"prop_tool_spanner01",
	"prop_tool_spanner02",
	"prop_tool_spanner03",
	"prop_tool_torch",
	"prop_tool_wrench",
	"prop_toothbrush_01",
	"prop_toothb_cup_01",
	"prop_toothpaste_01",
	"prop_tornado_wheel",
	"prop_torture_01",
	"prop_torture_ch_01",
	"prop_tourist_map_01",
	"prop_towel2_01",
	"prop_towel2_02",
	"prop_towel_01",
	"prop_towel_rail_01",
	"prop_towel_rail_02",
	"prop_towel_shelf_01",
	"prop_towel_small_01",
	"prop_towercrane_01a",
	"prop_towercrane_02a",
	"prop_towercrane_02b",
	"prop_towercrane_02c",
	"prop_towercrane_02d",
	"prop_towercrane_02e",
	"prop_towercrane_02el",
	"prop_towercrane_02el2",
	"prop_traffic_rail_1c",
	"prop_traffic_rail_2",
	"prop_trailer01",
	"prop_trailer01_up",
	"prop_trailer_01_new",
	"prop_trailer_door_closed",
	"prop_trailer_door_open",
	"prop_trailer_monitor_01",
	"prop_trailr_base",
	"prop_trailr_base_static",
	"prop_train_ticket_02",
	"prop_tram_pole_double01",
	"prop_tram_pole_double02",
	"prop_tram_pole_double03",
	"prop_tram_pole_roadside",
	"prop_tram_pole_single01",
	"prop_tram_pole_single02",
	"prop_tram_pole_wide01",
	"prop_tree_birch_01",
	"prop_tree_birch_02",
	"prop_tree_birch_03",
	"prop_tree_birch_03b",
	"prop_tree_birch_04",
	"prop_tree_birch_05",
	"prop_tree_cedar_02",
	"prop_tree_cedar_03",
	"prop_tree_cedar_04",
	"prop_tree_cedar_s_01",
	"prop_tree_cedar_s_02",
	"prop_tree_cedar_s_04",
	"prop_tree_cedar_s_05",
	"prop_tree_cedar_s_06",
	"prop_tree_cypress_01",
	"prop_tree_eng_oak_01",
	"prop_tree_eucalip_01",
	"prop_tree_fallen_01",
	"prop_tree_fallen_02",
	"prop_tree_fallen_pine_01",
	"prop_tree_jacada_01",
	"prop_tree_jacada_02",
	"prop_tree_lficus_02",
	"prop_tree_lficus_03",
	"prop_tree_lficus_05",
	"prop_tree_lficus_06",
	"prop_tree_log_01",
	"prop_tree_log_02",
	"prop_tree_maple_02",
	"prop_tree_maple_03",
	"prop_tree_mquite_01",
	"prop_tree_oak_01",
	"prop_tree_olive_01",
	"prop_tree_pine_01",
	"prop_tree_pine_02",
	"prop_tree_stump_01",
	"prop_trevor_rope_01",
	"prop_trev_sec_id",
	"prop_trev_tv_01",
	"prop_triple_grid_line",
	"prop_tri_finish_banner",
	"prop_tri_pod",
	"prop_tri_pod_lod",
	"prop_tri_start_banner",
	"prop_tri_table_01",
	"prop_trough1",
	"prop_truktrailer_01a",
	"prop_tshirt_box_02",
	"prop_tshirt_shelf_1",
	"prop_tshirt_shelf_2",
	"prop_tshirt_shelf_2a",
	"prop_tshirt_shelf_2b",
	"prop_tshirt_shelf_2c",
	"prop_tshirt_stand_01",
	"prop_tshirt_stand_01b",
	"prop_tshirt_stand_02",
	"prop_tshirt_stand_04",
	"prop_tt_screenstatic",
	"prop_tumbler_01",
	"prop_tumbler_01b",
	"prop_tumbler_01_empty",
	"prop_tunnel_liner01",
	"prop_tunnel_liner02",
	"prop_tunnel_liner03",
	"prop_turkey_leg_01",
	"prop_turnstyle_01",
	"prop_tv_02",
	"prop_tv_03_overlay",
	"prop_tv_04",
	"prop_tv_05",
	"prop_tv_06",
	"prop_tv_07",
	"prop_tv_cabinet_03",
	"prop_tv_cabinet_04",
	"prop_tv_cabinet_05",
	"prop_tv_cam_02",
	"prop_tv_flat_01",
	"prop_tv_flat_01_screen",
	"prop_tv_flat_02b",
	"prop_tv_flat_03",
	"prop_tv_flat_03b",
	"prop_tv_flat_michael",
	"prop_tv_test",
	"prop_tyre_rack_01",
	"prop_tyre_spike_01",
	"prop_t_coffe_table",
	"prop_t_shirt_ironing",
	"prop_t_shirt_row_01",
	"prop_t_shirt_row_02",
	"prop_t_shirt_row_02b",
	"prop_t_shirt_row_03",
	"prop_t_shirt_row_04",
	"prop_t_shirt_row_05l",
	"prop_t_shirt_row_05r",
	"prop_t_sofa",
	"prop_t_sofa_02",
	"prop_t_telescope_01b",
	"prop_umpire_01",
	"prop_utensil",
	"prop_valet_03",
	"prop_vault_shutter",
	"prop_vb_34_tencrt_lighting",
	"prop_vcr_01",
	"prop_veg_corn_01",
	"prop_veg_crop_01",
	"prop_veg_crop_02",
	"prop_veg_crop_04",
	"prop_veg_crop_04_leaf",
	"prop_veg_crop_05",
	"prop_veg_crop_06",
	"prop_veg_crop_orange",
	"prop_veg_crop_tr_01",
	"prop_veg_crop_tr_02",
	"prop_veg_grass_01_a",
	"prop_veg_grass_01_b",
	"prop_veg_grass_01_c",
	"prop_veg_grass_01_d",
	"prop_veg_grass_02_a",
	"prop_vehicle_hook",
	"prop_vend_coffe_01",
	"prop_vend_condom_01",
	"prop_vend_fags_01",
	"prop_vend_fridge01",
	"prop_vend_snak_01",
	"prop_venice_board_01",
	"prop_venice_board_02",
	"prop_venice_board_03",
	"prop_venice_counter_01",
	"prop_venice_counter_02",
	"prop_venice_counter_03",
	"prop_venice_counter_04",
	"prop_venice_shop_front_01",
	"prop_venice_sign_09",
	"prop_venice_sign_10",
	"prop_venice_sign_11",
	"prop_venice_sign_12",
	"prop_venice_sign_14",
	"prop_venice_sign_15",
	"prop_venice_sign_16",
	"prop_venice_sign_17",
	"prop_venice_sign_18",
	"prop_ventsystem_01",
	"prop_ventsystem_02",
	"prop_ventsystem_03",
	"prop_ventsystem_04",
	"prop_ven_market_stool",
	"prop_ven_market_table1",
	"prop_ven_shop_1_counter",
	"prop_vertdrill_01",
	"prop_voltmeter_01",
	"prop_v_15_cars_clock",
	"prop_v_5_bclock",
	"prop_v_bmike_01",
	"prop_v_cam_01",
	"prop_v_door_44",
	"prop_v_hook_s",
	"prop_v_m_phone_01",
	"prop_v_m_phone_o1s",
	"prop_v_parachute",
	"prop_waiting_seat_01",
	"prop_wait_bench_01",
	"prop_walllight_ld_01b",
	"prop_wall_light_08a",
	"prop_wall_light_10a",
	"prop_wall_light_10b",
	"prop_wall_light_10c",
	"prop_wall_light_11",
	"prop_wall_light_12",
	"prop_wall_light_17b",
	"prop_wall_light_18a",
	"prop_wall_vent_01",
	"prop_wall_vent_02",
	"prop_wall_vent_03",
	"prop_wall_vent_04",
	"prop_wall_vent_05",
	"prop_wall_vent_06",
	"prop_wardrobe_door_01",
	"prop_warehseshelf01",
	"prop_warehseshelf02",
	"prop_warehseshelf03",
	"prop_warninglight_01",
	"prop_washer_01",
	"prop_washer_02",
	"prop_washer_03",
	"prop_washing_basket_01",
	"prop_watercrate_01",
	"prop_wateringcan",
	"prop_watertower01",
	"prop_watertower02",
	"prop_watertower03",
	"prop_watertower04",
	"prop_waterwheela",
	"prop_waterwheelb",
	"prop_water_bottle",
	"prop_water_bottle_dark",
	"prop_water_corpse_01",
	"prop_water_corpse_02",
	"prop_water_ramp_01",
	"prop_water_ramp_02",
	"prop_water_ramp_03",
	"prop_weed_01",
	"prop_weed_02",
	"prop_weed_block_01",
	"prop_weed_bottle",
	"prop_weed_pallet",
	"prop_weed_tub_01",
	"prop_weed_tub_01b",
	"prop_weight_10k",
	"prop_weight_15k",
	"prop_weight_1_5k",
	"prop_weight_20k",
	"prop_weight_2_5k",
	"prop_weight_5k",
	"prop_weight_rack_01",
	"prop_weight_rack_02",
	"prop_welding_mask_01",
	"prop_weld_torch",
	"prop_wheat_grass_empty",
	"prop_wheat_grass_glass",
	"prop_wheelbarrow01a",
	"prop_wheelbarrow02a",
	"prop_wheelchair_01",
	"prop_wheel_01",
	"prop_wheel_02",
	"prop_wheel_03",
	"prop_wheel_04",
	"prop_wheel_05",
	"prop_wheel_06",
	"prop_wheel_hub_01",
	"prop_wheel_hub_02_lod_02",
	"prop_wheel_rim_01",
	"prop_wheel_rim_02",
	"prop_wheel_rim_03",
	"prop_wheel_rim_04",
	"prop_wheel_rim_05",
	"prop_wheel_tyre",
	"prop_whisk",
	"prop_white_keyboard",
	"prop_winch_hook_long",
	"prop_winch_hook_short",
	"prop_windmill2",
	"prop_windmill_01_l1",
	"prop_windmill_01_slod",
	"prop_windmill_01_slod2",
	"prop_windowbox_a",
	"prop_windowbox_b",
	"prop_windowbox_broken",
	"prop_windowbox_small",
	"prop_win_plug_01",
	"prop_win_plug_01_dam",
	"prop_win_trailer_ld",
	"prop_wok",
	"prop_woodpile_02a",
	"prop_worklight_01a_l1",
	"prop_worklight_03a_l1",
	"prop_worklight_03b_l1",
	"prop_worklight_04a",
	"prop_worklight_04b_l1",
	"prop_worklight_04c_l1",
	"prop_worklight_04d_l1",
	"prop_workwall_01",
	"prop_workwall_02",
	"prop_wreckedcart",
	"prop_wrecked_buzzard",
	"prop_w_board_blank",
	"prop_w_board_blank_2",
	"prop_w_fountain_01",
	"prop_w_r_cedar_01",
	"prop_w_r_cedar_dead",
	"prop_xmas_tree_int",
	"prop_xmas_ext",
	"prop_yacht_lounger",
	"prop_yacht_seat_01",
	"prop_yacht_seat_02",
	"prop_yacht_seat_03",
	"prop_yacht_table_01",
	"prop_yacht_table_02",
	"prop_yacht_table_03",
	"prop_yaught_chair_01",
	"prop_yaught_sofa_01",
	"prop_yell_plastic_target",
	"prop_yoga_mat_01",
	"prop_yoga_mat_02",
	"prop_yoga_mat_03",
	"prop_ztype_covered",
	"p_ing_skiprope_01",
	"p_ing_skiprope_01_s",
	"p_skiprope_r_s",
	"test_prop_gravestones_04a",
	"test_prop_gravestones_05a",
	"test_prop_gravestones_07a",
	"test_prop_gravestones_08a",
	"test_prop_gravestones_09a",
	"test_prop_gravetomb_01a",
	"test_prop_gravetomb_02a",
	"prop_cs_dog_lead_a_s",
	"prop_cs_dog_lead_b_s",
	"prop_welding_mask_01_s",
	"prop_wheelchair_01_s",
	"p_a4_sheets_s",
	"p_amanda_note_01_s",
	"p_armchair_01_s",
	"p_arm_bind_cut_s",
	"p_ashley_neck_01_s",
	"p_banknote_onedollar_s",
	"p_banknote_s",
	"p_binbag_01_s",
	"p_bison_winch_s",
	"p_bloodsplat_s",
	"p_blueprints_01_s",
	"p_brain_chunk_s",
	"p_bs_map_door_01_s",
	"p_cablecar_s",
	"p_cablecar_s_door_l",
	"p_cablecar_s_door_r",
	"p_cash_envelope_01_s",
	"p_cctv_s",
	"p_chem_vial_02b_s",
	"p_clb_officechair_s",
	"p_cletus_necklace_s",
	"p_clothtarp_down_s",
	"p_clothtarp_s",
	"p_clothtarp_up_s",
	"p_controller_01_s",
	"p_crahsed_heli_s",
	"p_cs1_14b_train_s",
	"p_cs1_14b_train_s_col",
	"p_cs1_14b_train_s_colopen",
	"p_csbporndudes_necklace_s",
	"p_csh_strap_01_pro_s",
	"p_csh_strap_01_s",
	"p_csh_strap_03_s",
	"p_cs_15m_rope_s",
	"p_cs_bandana_s",
	"p_cs_beachtowel_01_s",
	"p_cs_beverly_lanyard_s",
	"p_cs_bowl_01b_s",
	"p_cs_ciggy_01b_s",
	"p_cs_clothes_box_s",
	"p_cs_coke_line_s",
	"p_cs_cuffs_02_s",
	"p_cs_duffel_01_s",
	"p_cs_laz_ptail_s",
	"p_cs_leaf_s",
	"p_cs_mp_jet_01_s",
	"p_cs_newspaper_s",
	"p_cs_pamphlet_01_s",
	"p_cs_panties_03_s",
	"p_cs_para_ropebit_s",
	"p_cs_para_ropes_s",
	"p_cs_polaroid_s",
	"p_cs_police_torch_s",
	"p_cs_pour_tube_s",
	"p_cs_power_cord_s",
	"p_cs_rope_tie_01_s",
	"p_cs_sack_01_s",
	"p_cs_saucer_01_s",
	"p_cs_scissors_s",
	"p_cs_script_s",
	"p_cs_shirt_01_s",
	"p_cs_shot_glass_2_s",
	"p_cs_shot_glass_s",
	"p_cs_sub_hook_01_s",
	"p_cs_toaster_s",
	"p_cs_tracy_neck2_s",
	"p_cs_trolley_01_s",
	"p_defilied_ragdoll_01_s",
	"p_devin_box_01_s",
	"p_dinechair_01_s",
	"p_d_scuba_mask_s",
	"p_d_scuba_tank_s",
	"p_ecg_01_cable_01_s",
	"p_fib_rubble_s",
	"p_finale_bld_ground_s",
	"p_finale_bld_pool_s",
	"p_fin_vaultdoor_s",
	"p_flatbed_strap_s",
	"p_folding_chair_01_s",
	"p_gaffer_tape_s",
	"p_gaffer_tape_strip_s",
	"p_gasmask_s",
	"p_gcase_s",
	"p_hand_toilet_s",
	"p_hw1_22_doors_s",
	"p_hw1_22_table_s",
	"p_ice_box_01_s",
	"p_ice_box_proxy_col",
	"p_idol_case_s",
	"p_ilev_p_easychair_s",
	"p_inhaler_01_s",
	"p_jimmyneck_03_s",
	"p_jimmy_necklace_s",
	"p_kitch_juicer_s",
	"p_lamarneck_01_s",
	"p_laptop_02_s",
	"p_large_gold_s",
	"p_lazlow_shirt_s",
	"p_laz_j01_s",
	"p_laz_j02_s",
	"p_ld_cable_tie_01_s",
	"p_ld_crocclips01_s",
	"p_ld_crocclips02_s",
	"p_ld_heist_bag_s_1",
	"p_ld_heist_bag_s_2",
	"p_ld_heist_bag_s_pro",
	"p_ld_heist_bag_s_pro2_s",
	"p_ld_heist_bag_s_pro_o",
	"p_leg_bind_cut_s",
	"p_lestersbed_s",
	"p_lev_sofa_s",
	"p_lifeinv_neck_01_s",
	"p_loose_rag_01_s",
	"p_mbbed_s",
	"p_medal_01_s",
	"p_med_jet_01_s",
	"p_meth_bag_01_s",
	"p_michael_backpack_s",
	"p_michael_scuba_mask_s",
	"p_michael_scuba_tank_s",
	"p_mp_showerdoor_s",
	"p_mrk_harness_s",
	"p_mr_raspberry_01_s",
	"p_novel_01_s",
	"p_omega_neck_01_s",
	"p_omega_neck_02_s",
	"p_orleans_mask_s",
	"p_ortega_necklace_s",
	"p_oscar_necklace_s",
	"p_overalls_02_s",
	"p_pistol_holster_s",
	"p_po1_01_doorm_s",
	"p_police_radio_hset_s",
	"p_poly_bag_01_s",
	"p_pour_wine_s",
	"p_rail_controller_s",
	"p_res_sofa_l_s",
	"p_rpulley_s",
	"p_sec_case_02_s",
	"p_shower_towel_s",
	"p_single_rose_s",
	"p_smg_holster_01_s",
	"p_soloffchair_s",
	"p_spinning_anus_s",
	"p_steve_scuba_hood_s",
	"p_stretch_necklace_s",
	"p_syringe_01_s",
	"p_s_scuba_mask_s",
	"p_s_scuba_tank_s",
	"p_till_01_s",
	"p_tmom_earrings_s",
	"p_tourist_map_01_s",
	"p_trevor_prologe_bally_s",
	"p_trev_rope_01_s",
	"p_trev_ski_mask_s",
	"p_tumbler_01_s",
	"p_tumbler_02_s1",
	"p_tumbler_cs2_s",
	"p_tv_cam_02_s",
	"p_t_shirt_pile_s",
	"p_v_43_safe_s",
	"p_v_ilev_chopshopswitch_s",
	"p_v_med_p_sofa_s",
	"p_v_res_tt_bed_s",
	"p_wade_necklace_s",
	"p_wboard_clth_s",
	"p_weed_bottle_s",
	"p_whiskey_bottle_s",
	"p_winch_long_s",
	"s_prop_hdphones",
	"s_prop_hdphones_1",
	"v_ilev_fib_door1_s",
	"v_res_msonbed_s",
	"v_res_tre_sofa_s",
	"v_tre_sofa_mess_a_s",
	"v_tre_sofa_mess_b_s",
	"v_tre_sofa_mess_c_s",
	"prop_ar_arrow_1",
	"prop_ar_arrow_2",
	"prop_ar_arrow_3",
	"prop_ar_ring_01",
	"prop_mk_arrow_3d",
	"prop_mk_arrow_flat",
	"prop_mk_bike_logo_1",
	"prop_mk_bike_logo_2",
	"prop_mk_boost",
	"prop_mk_cone",
	"prop_mk_cylinder",
	"prop_mk_flag",
	"prop_mk_flag_2",
	"prop_mk_heli",
	"prop_mk_lap",
	"prop_mk_mp_ring_01",
	"prop_mk_mp_ring_01b",
	"prop_mk_num_0",
	"prop_mk_num_1",
	"prop_mk_num_2",
	"prop_mk_num_3",
	"prop_mk_num_4",
	"prop_mk_num_5",
	"prop_mk_num_6",
	"prop_mk_num_7",
	"prop_mk_num_8",
	"prop_mk_num_9",
	"prop_mk_plane",
	"prop_mk_race_chevron_01",
	"prop_mk_race_chevron_02",
	"prop_mk_race_chevron_03",
	"prop_mk_repair",
	"prop_mk_ring",
	"prop_mk_ring_flat",
	"prop_mk_sphere",
	"prop_mk_tri_cycle",
	"prop_mk_tri_run",
	"prop_mk_tri_swim",
	"prop_mp_arrow_ring",
	"prop_mp_halo",
	"prop_mp_halo_lrg",
	"prop_mp_halo_med",
	"prop_mp_halo_point",
	"prop_mp_halo_point_lrg",
	"prop_mp_halo_point_med",
	"prop_mp_halo_point_sm",
	"prop_mp_halo_rotate",
	"prop_mp_halo_rotate_lrg",
	"prop_mp_halo_rotate_med",
	"prop_mp_halo_rotate_sm",
	"prop_mp_halo_sm",
	"prop_mp_pointer_ring",
	"prop_mp_solid_ring",
	"cj_parachute",
	"gb_cap_use",
	"gb_specs_use",
	"cj_proc_tin2",
	"proc_coral_01",
	"proc_fern_02",
	"proc_litter_01",
	"proc_litter_02",
	"proc_mntn_stone01",
	"proc_mntn_stone02",
	"proc_mntn_stone03",
	"proc_searock_01",
	"proc_searock_02",
	"proc_searock_03",
	"proc_sml_stones01",
	"proc_sml_stones02",
	"proc_sml_stones03",
	"proc_trolley_lakebed",
	"prop_bush_gorse_dry",
	"prop_bush_gorse_lush",
	"prop_coral_01",
	"prop_coral_02",
	"prop_coral_03",
	"prop_sapling_01",
	"prop_seabrain_01",
	"prop_seagroup_02",
	"prop_sealife_01",
	"prop_sealife_02",
	"prop_sealife_03",
	"prop_sealife_04",
	"prop_sealife_05",
	"prop_seaweed_01",
	"prop_seaweed_02",
	"prop_starfish_01",
	"prop_starfish_02",
	"prop_starfish_03",
	"prop_aerial_01a",
	"prop_aerial_01b",
	"prop_aerial_01c",
	"prop_aerial_01d",
	"prop_aircon_l_01",
	"prop_aircon_l_02",
	"prop_aircon_l_03",
	"prop_aircon_l_04",
	"prop_aircon_m_09",
	"prop_aircon_s_01a",
	"prop_aircon_s_02a",
	"prop_aircon_s_02b",
	"prop_aircon_s_03a",
	"prop_aircon_s_03b",
	"prop_aircon_s_04a",
	"prop_aircon_s_05a",
	"prop_aircon_s_06a",
	"prop_aircon_s_07a",
	"prop_aircon_s_07b",
	"prop_alarm_01",
	"prop_alarm_02",
	"prop_billb_frame01a",
	"prop_billb_frame01b",
	"prop_billb_frame02a",
	"prop_billb_frame02b",
	"prop_billb_frame03a",
	"prop_billb_frame03b",
	"prop_billb_frame03c",
	"prop_billb_frame04a",
	"prop_billb_frame04b",
	"prop_bmu_01",
	"prop_bmu_01_b",
	"prop_bmu_02",
	"prop_bmu_02_ld",
	"prop_bmu_02_ld_cab",
	"prop_bmu_02_ld_sup",
	"prop_bmu_track01",
	"prop_bmu_track02",
	"prop_bmu_track03",
	"prop_fireescape_01a",
	"prop_fireescape_01b",
	"prop_fireescape_02a",
	"prop_fireescape_02b",
	"prop_flagpole_1a",
	"prop_flagpole_2a",
	"prop_flagpole_3a",
	"prop_helipad_01",
	"prop_helipad_02",
	"prop_radiomast01",
	"prop_radiomast02",
	"prop_roofpipe_01",
	"prop_roofpipe_02",
	"prop_roofpipe_03",
	"prop_roofpipe_04",
	"prop_roofpipe_05",
	"prop_roofpipe_06",
	"prop_roofvent_011a",
	"prop_roofvent_01a",
	"prop_roofvent_01b",
	"prop_roofvent_02a",
	"prop_roofvent_02b",
	"prop_roofvent_03a",
	"prop_roofvent_04a",
	"prop_roofvent_05a",
	"prop_roofvent_05b",
	"prop_roofvent_07a",
	"prop_roofvent_08a",
	"prop_roofvent_09a",
	"prop_roofvent_10a",
	"prop_roofvent_10b",
	"prop_roofvent_11b",
	"prop_roofvent_11c",
	"prop_roofvent_12a",
	"prop_roofvent_13a",
	"prop_roofvent_15a",
	"prop_roofvent_16a",
	"prop_satdish_2_a",
	"prop_satdish_2_f",
	"prop_satdish_2_g",
	"prop_satdish_3_b",
	"prop_satdish_3_c",
	"prop_satdish_3_d",
	"prop_satdish_l_01",
	"prop_satdish_s_03",
	"prop_satdish_s_05a",
	"prop_satdish_s_05b",
	"prop_skylight_01",
	"prop_skylight_02",
	"prop_skylight_03",
	"prop_skylight_04",
	"prop_skylight_05",
	"prop_skylight_06a",
	"prop_skylight_06b",
	"prop_skylight_06c",
	"prop_solarpanel_01",
	"prop_solarpanel_02",
	"prop_solarpanel_03",
	"prop_ventsystem_01",
	"prop_ventsystem_02",
	"prop_ventsystem_03",
	"prop_ventsystem_04",
	"prop_wall_vent_01",
	"prop_wall_vent_02",
	"prop_wall_vent_03",
	"prop_wall_vent_04",
	"prop_wall_vent_05",
	"prop_wall_vent_06",
	"prop_watertower01",
	"prop_watertower02",
	"prop_watertower03",
	"prop_watertower04",
	"prop_bahammenu",
	"prop_barrachneon",
	"prop_bar_coastbarr",
	"prop_bar_coastchamp",
	"prop_bar_coastdusc",
	"prop_bar_coastmount",
	"prop_bar_cooler_01",
	"prop_bar_cooler_03",
	"prop_bar_fridge_01",
	"prop_bar_fridge_02",
	"prop_bar_fridge_03",
	"prop_bar_fridge_04",
	"prop_bar_ice_01",
	"prop_bar_napkindisp",
	"prop_bar_pump_01",
	"prop_bar_pump_04",
	"prop_bar_pump_05",
	"prop_bar_pump_06",
	"prop_bar_pump_07",
	"prop_bar_pump_08",
	"prop_bar_pump_09",
	"prop_bar_pump_10",
	"prop_bar_sink_01",
	"prop_bar_stool_01",
	"prop_beerneon",
	"prop_beer_bison",
	"prop_cherenneon",
	"prop_cockneon",
	"prop_cs_kitchen_cab_l2",
	"prop_cs_kitchen_cab_ld",
	"prop_cs_kitchen_cab_rd",
	"prop_irish_sign_01",
	"prop_irish_sign_02",
	"prop_irish_sign_03",
	"prop_irish_sign_04",
	"prop_irish_sign_05",
	"prop_irish_sign_06",
	"prop_irish_sign_07",
	"prop_irish_sign_08",
	"prop_irish_sign_09",
	"prop_irish_sign_10",
	"prop_irish_sign_11",
	"prop_irish_sign_12",
	"prop_irish_sign_13",
	"prop_loggneon",
	"prop_patriotneon",
	"prop_pitcher_01_cs",
	"prop_ragganeon",
	"prop_shots_glass_cs",
	"prop_stripmenu",
	"prop_bread_rack_01",
	"prop_bread_rack_02",
	"prop_chip_fryer",
	"prop_coffee_mac_02",
	"prop_detergent_01a",
	"prop_detergent_01b",
	"prop_ff_counter_01",
	"prop_ff_counter_02",
	"prop_ff_counter_03",
	"prop_ff_noodle_01",
	"prop_ff_noodle_02",
	"prop_ff_shelves_01",
	"prop_ff_sink_01",
	"prop_ff_sink_02",
	"prop_food_bin_01",
	"prop_food_bin_02",
	"prop_food_bs_bshelf",
	"prop_food_bs_cups01",
	"prop_food_bs_cups03",
	"prop_food_bs_soda_01",
	"prop_food_bs_soda_02",
	"prop_food_bs_tray_01",
	"prop_food_bs_tray_06",
	"prop_food_burg1",
	"prop_food_burg2",
	"prop_food_cb_bshelf",
	"prop_food_cb_burg01",
	"prop_food_cb_cups01",
	"prop_food_cb_donuts",
	"prop_food_cb_nugets",
	"prop_food_cb_soda_01",
	"prop_food_cb_soda_02",
	"prop_food_cb_tray_01",
	"prop_food_cups1",
	"prop_food_napkin_01",
	"prop_food_napkin_02",
	"prop_food_tray_01",
	"prop_griddle_01",
	"prop_griddle_02",
	"prop_handtowels",
	"prop_juice_dispenser",
	"prop_kebab_grill",
	"prop_microwave_1",
	"prop_pizza_oven_01",
	"prop_slush_dispenser",
	"prop_bumper_01",
	"prop_bumper_02",
	"prop_bumper_03",
	"prop_bumper_04",
	"prop_bumper_05",
	"prop_bumper_06",
	"prop_carcreeper",
	"prop_carjack",
	"prop_carjack_l2",
	"prop_car_battery_01",
	"prop_car_bonnet_01",
	"prop_car_bonnet_02",
	"prop_car_door_01",
	"prop_car_door_02",
	"prop_car_door_03",
	"prop_car_door_04",
	"prop_car_engine_01",
	"prop_car_exhaust_01",
	"prop_car_seat",
	"prop_cheetah_covered",
	"prop_compressor_01",
	"prop_compressor_02",
	"prop_compressor_03",
	"prop_entityxf_covered",
	"prop_jb700_covered",
	"prop_spray_jackframe",
	"prop_spray_jackleg",
	"prop_toolchest_01",
	"prop_toolchest_02",
	"prop_toolchest_03",
	"prop_toolchest_04",
	"prop_toolchest_05",
	"prop_wheel_01",
	"prop_wheel_02",
	"prop_wheel_03",
	"prop_wheel_04",
	"prop_wheel_05",
	"prop_wheel_06",
	"prop_wheel_hub_01",
	"prop_wheel_hub_02_lod_02",
	"prop_wheel_rim_01",
	"prop_wheel_rim_02",
	"prop_wheel_rim_03",
	"prop_wheel_rim_04",
	"prop_wheel_rim_05",
	"prop_wheel_tyre",
	"prop_ztype_covered",
	"prop_cabinet_01",
	"prop_cabinet_01b",
	"prop_cabinet_02b",
	"prop_coathook_01",
	"prop_copier_01",
	"prop_fan_01",
	"prop_fax_01",
	"prop_folder_01",
	"prop_folder_02",
	"prop_in_tray_01",
	"prop_office_alarm_01",
	"prop_office_desk_01",
	"prop_off_chair_01",
	"prop_off_chair_03",
	"prop_off_chair_04",
	"prop_off_chair_04b",
	"prop_off_chair_05",
	"prop_off_phone_01",
	"prop_paper_box_01",
	"prop_paper_box_02",
	"prop_paper_box_03",
	"prop_paper_box_04",
	"prop_paper_box_05",
	"prop_printer_01",
	"prop_printer_02",
	"prop_shredder_01",
	"prop_sol_chair",
	"prop_tablesmall_01",
	"prop_waiting_seat_01",
	"prop_wait_bench_01",
	"prop_water_bottle",
	"prop_water_bottle_dark",
	"prop_air_bagloader",
	"prop_air_bagloader2",
	"prop_air_barrier",
	"prop_air_bench_01",
	"prop_air_bench_02",
	"prop_air_bigradar_l1",
	"prop_air_bigradar_l2",
	"prop_air_bigradar_slod",
	"prop_air_blastfence_01",
	"prop_air_blastfence_02",
	"prop_air_bridge01",
	"prop_air_bridge02",
	"prop_air_cargoloader_01",
	"prop_air_cargo_01a",
	"prop_air_cargo_01b",
	"prop_air_cargo_01c",
	"prop_air_cargo_02a",
	"prop_air_cargo_02b",
	"prop_air_cargo_03a",
	"prop_air_cargo_04a",
	"prop_air_cargo_04b",
	"prop_air_cargo_04c",
	"prop_air_chock_01",
	"prop_air_chock_03",
	"prop_air_chock_04",
	"prop_air_fueltrail1",
	"prop_air_fueltrail2",
	"prop_air_gasbogey_01",
	"prop_air_generator_01",
	"prop_air_generator_03",
	"prop_air_lights_01a",
	"prop_air_lights_01b",
	"prop_air_lights_03a",
	"prop_air_luggtrolley",
	"prop_air_mast_01",
	"prop_air_mast_02",
	"prop_air_monhut_01",
	"prop_air_monhut_02",
	"prop_air_monhut_03",
	"prop_air_propeller01",
	"prop_air_radar_01",
	"prop_air_stair_01",
	"prop_air_stair_02",
	"prop_air_stair_03",
	"prop_air_stair_04a",
	"prop_air_stair_04b",
	"prop_air_towbar_01",
	"prop_air_towbar_02",
	"prop_air_towbar_03",
	"prop_air_trailer_4a",
	"prop_air_trailer_4b",
	"prop_air_trailer_4c",
	"prop_air_watertank1",
	"prop_air_watertank2",
	"prop_air_windsock_base",
	"prop_air_woodsteps",
	"prop_luggage_01a",
	"prop_luggage_02a",
	"prop_luggage_03a",
	"prop_luggage_04a",
	"prop_luggage_05a",
	"prop_luggage_06a",
	"prop_luggage_07a",
	"prop_luggage_08a",
	"prop_luggage_09a",
	"prop_mb_cargo_01a",
	"prop_mb_cargo_02a",
	"prop_mb_cargo_03a",
	"prop_mb_cargo_04a",
	"prop_mb_cargo_04b",
	"prop_mb_crate_01a",
	"prop_mb_crate_01b",
	"prop_mb_hesco_06",
	"prop_mb_ordnance_01",
	"prop_mb_ordnance_03",
	"prop_mb_sandblock_01",
	"prop_mb_sandblock_02",
	"prop_mb_sandblock_03",
	"prop_mb_sandblock_04",
	"prop_mb_sandblock_05",
	"prop_boxcar5_handle",
	"prop_byard_bench01",
	"prop_byard_bench02",
	"prop_byard_block_01",
	"prop_byard_boat01",
	"prop_byard_boat02",
	"prop_byard_chains01",
	"prop_byard_dingy",
	"prop_byard_elecbox01",
	"prop_byard_elecbox02",
	"prop_byard_elecbox03",
	"prop_byard_elecbox04",
	"prop_byard_floatpile",
	"prop_byard_float_01",
	"prop_byard_float_01b",
	"prop_byard_float_02",
	"prop_byard_float_02b",
	"prop_byard_hoist",
	"prop_byard_hoist_2",
	"prop_byard_hoses01",
	"prop_byard_hoses02",
	"prop_byard_ladder01",
	"prop_byard_machine01",
	"prop_byard_machine02",
	"prop_byard_machine03",
	"prop_byard_motor_01",
	"prop_byard_motor_02",
	"prop_byard_motor_03",
	"prop_byard_net02",
	"prop_byard_phone",
	"prop_byard_pipes01",
	"prop_byard_pipe_01",
	"prop_byard_planks01",
	"prop_byard_pulley01",
	"prop_byard_rack",
	"prop_byard_ramp",
	"prop_byard_rampold",
	"prop_byard_rowboat1",
	"prop_byard_rowboat2",
	"prop_byard_rowboat3",
	"prop_byard_rowboat4",
	"prop_byard_rowboat5",
	"prop_byard_scfhold01",
	"prop_byard_sleeper01",
	"prop_byard_sleeper02",
	"prop_byard_steps_01",
	"prop_byard_tank_01",
	"prop_byard_trailer01",
	"prop_byard_trailer02",
	"prop_crane_01_truck1",
	"prop_crane_01_truck2",
	"prop_dock_bouy_1",
	"prop_dock_bouy_2",
	"prop_dock_bouy_3",
	"prop_dock_bouy_5",
	"prop_dock_crane_01",
	"prop_dock_crane_02",
	"prop_dock_crane_02_cab",
	"prop_dock_crane_02_hook",
	"prop_dock_crane_02_ld",
	"prop_dock_crane_04",
	"prop_dock_crane_lift",
	"prop_dock_float_1",
	"prop_dock_float_1b",
	"prop_dock_moor_01",
	"prop_dock_moor_04",
	"prop_dock_moor_05",
	"prop_dock_moor_06",
	"prop_dock_moor_07",
	"prop_dock_ropefloat",
	"prop_dock_ropetyre1",
	"prop_dock_ropetyre2",
	"prop_dock_ropetyre3",
	"prop_dock_rtg_01",
	"prop_dock_rtg_ld",
	"prop_dock_shippad",
	"prop_dock_sign_01",
	"prop_dock_woodpole1",
	"prop_dock_woodpole2",
	"prop_dock_woodpole3",
	"prop_dock_woodpole4",
	"prop_dock_woodpole5",
	"prop_ind_barge_01",
	"prop_ind_barge_02",
	"prop_ind_coalcar_01",
	"prop_ind_coalcar_02",
	"prop_ind_coalcar_03",
	"prop_ind_oldcrane",
	"prop_jetski_ramp_01",
	"prop_railsleepers01",
	"prop_railsleepers02",
	"prop_railstack01",
	"prop_railstack02",
	"prop_railstack03",
	"prop_railstack04",
	"prop_railstack05",
	"prop_rail_boxcar",
	"prop_rail_boxcar2",
	"prop_rail_boxcar3",
	"prop_rail_boxcar4",
	"prop_rail_boxcar5",
	"prop_rail_boxcar5_d",
	"prop_rail_buffer_01",
	"prop_rail_buffer_02",
	"prop_rail_crane_01",
	"prop_rail_points01",
	"prop_rail_points02",
	"prop_rail_sigbox01",
	"prop_rail_sigbox02",
	"prop_rail_signals02",
	"prop_rail_tankcar",
	"prop_rail_tankcar2",
	"prop_rail_tankcar3",
	"prop_rail_wellcar",
	"prop_rail_wellcar2",
	"p_dock_rtg_ld_cab",
	"p_dock_rtg_ld_spdr",
	"p_dock_rtg_ld_wheel",
	"prop_fac_machine_02",
	"prop_ind_conveyor_01",
	"prop_ind_conveyor_02",
	"prop_ind_conveyor_04",
	"prop_ind_crusher",
	"prop_ind_deiseltank",
	"prop_ind_mech_01c",
	"prop_ind_mech_02a",
	"prop_ind_mech_02b",
	"prop_ind_mech_03a",
	"prop_ind_mech_04a",
	"prop_jyard_block_01a",
	"prop_oil_derrick_01",
	"prop_oil_guage_01",
	"prop_oil_spool_02",
	"prop_oil_valve_01",
	"prop_oil_valve_02",
	"prop_oil_wellhead_01",
	"prop_oil_wellhead_03",
	"prop_oil_wellhead_04",
	"prop_oil_wellhead_05",
	"prop_oil_wellhead_06",
	"prop_portacabin01",
	"prop_portasteps_01",
	"prop_portasteps_02",
	"prop_pylon_01",
	"prop_pylon_02",
	"prop_pylon_03",
	"prop_pylon_04",
	"prop_sluicegate",
	"prop_sluicegatel",
	"prop_sluicegater",
	"prop_storagetank_01",
	"prop_storagetank_02",
	"prop_storagetank_03",
	"prop_storagetank_03a",
	"prop_storagetank_03b",
	"prop_storagetank_04",
	"prop_storagetank_05",
	"prop_storagetank_06",
	"prop_storagetank_07a",
	"prop_sub_crane_hook",
	"prop_sub_frame_01a",
	"prop_sub_frame_01b",
	"prop_sub_frame_01c",
	"prop_sub_frame_02a",
	"prop_sub_frame_03a",
	"prop_sub_frame_04a",
	"prop_sub_frame_04b",
	"prop_sub_gantry",
	"prop_sub_trans_01a",
	"prop_sub_trans_02a",
	"prop_sub_trans_03a",
	"prop_sub_trans_04a",
	"prop_sub_trans_05b",
	"prop_sub_trans_06b",
	"prop_windmill_01_l1",
	"prop_windmill_01_slod",
	"prop_windmill_01_slod2",
	"prop_acc_guitar_01",
	"prop_acc_guitar_01_d1",
	"prop_alien_egg_01",
	"prop_amb_handbag_01",
	"prop_amb_phone",
	"prop_asteroid_01",
	"prop_attache_case_01",
	"prop_bank_shutter",
	"prop_bank_vaultdoor",
	"prop_barrel_float_1",
	"prop_barrel_float_2",
	"prop_beggers_sign_01",
	"prop_beggers_sign_02",
	"prop_beggers_sign_03",
	"prop_beggers_sign_04",
	"prop_bh1_16_display",
	"prop_big_bag_01",
	"prop_big_clock_01",
	"prop_biotech_store",
	"prop_bomb_01",
	"prop_bonesaw",
	"prop_bskball_01",
	"prop_b_board_blank",
	"prop_cable_hook_01",
	"prop_camera_strap",
	"prop_cash_dep_bag_01",
	"prop_cash_trolly",
	"prop_chem_grill",
	"prop_chem_grill_bit",
	"prop_chem_vial_02",
	"prop_chem_vial_02b",
	"prop_choc_ego",
	"prop_choc_meto",
	"prop_choc_pq",
	"prop_clapper_brd_01",
	"prop_cone_float_1",
	"prop_container_hole",
	"prop_cont_chiller_01",
	"prop_cork_board",
	"prop_cranial_saw",
	"prop_crate_float_1",
	"prop_cs_20m_rope",
	"prop_cs_30m_rope",
	"prop_cs_aircon_01",
	"prop_cs_aircon_fan",
	"prop_cs_ashtray",
	"prop_cs_bin_01",
	"prop_cs_bin_01_lid",
	"prop_cs_bin_02",
	"prop_cs_bin_03",
	"prop_cs_box_clothes",
	"prop_cs_cardbox_01",
	"prop_cs_dumpster_01a",
	"prop_cs_dumpster_lidl",
	"prop_cs_dumpster_lidr",
	"prop_cs_fertilizer",
	"prop_cs_folding_chair_01",
	"prop_cs_fridge",
	"prop_cs_fridge_door",
	"prop_cs_heist_bag_01",
	"prop_cs_heist_bag_02",
	"prop_cs_heist_bag_strap_01",
	"prop_cs_h_bag_strap_01",
	"prop_cs_ice_locker",
	"prop_cs_ice_locker_door_l",
	"prop_cs_ice_locker_door_r",
	"prop_cs_keys_01",
	"prop_cs_leaf",
	"prop_cs_office_chair",
	"prop_cs_package_01",
	"prop_cs_panel_01",
	"prop_cs_panties",
	"prop_cs_panties_02",
	"prop_cs_panties_03",
	"prop_cs_planning_photo",
	"prop_cs_polaroid",
	"prop_cs_remote_01",
	"prop_cs_rope_tie_01",
	"prop_cs_rub_binbag_01",
	"prop_cs_scissors",
	"prop_cs_shopping_bag",
	"prop_cs_spray_can",
	"prop_cs_tablet",
	"prop_cs_tablet_02",
	"prop_cs_vial_01",
	"prop_cs_walking_stick",
	"prop_cub_door_lifeblurb",
	"prop_cub_lifeblurb",
	"prop_cuff_keys_01",
	"prop_defilied_ragdoll_01",
	"prop_drop_armscrate_01",
	"prop_drop_armscrate_01b",
	"prop_dummy_01",
	"prop_dummy_light",
	"prop_dummy_plane",
	"prop_egg_clock_01",
	"prop_ejector_seat_01",
	"prop_el_guitar_01",
	"prop_el_guitar_02",
	"prop_el_guitar_03",
	"prop_fbibombbin",
	"prop_fbibombcupbrd",
	"prop_fbibombfile",
	"prop_fbibombplant",
	"prop_feed_sack_01",
	"prop_feed_sack_02",
	"prop_fib_broken_window",
	"prop_flash_unit",
	"prop_flatbed_strap_b",
	"prop_floor_duster_01",
	"prop_folded_polo_shirt",
	"prop_foundation_sponge",
	"prop_fruit_basket",
	"prop_f_duster_02",
	"prop_gascyl_ramp_01",
	"prop_gascyl_ramp_door_01",
	"prop_gas_grenade",
	"prop_gas_mask_hang_01",
	"prop_gold_bar",
	"prop_gold_trolly",
	"prop_gold_trolly_full",
	"prop_grapes_01",
	"prop_grapes_02",
	"prop_hacky_sack_01",
	"prop_hd_seats_01",
	"prop_hole_plug_01",
	"prop_hotel_clock_01",
	"prop_hotel_trolley",
	"prop_huge_display_01",
	"prop_huge_display_02",
	"prop_idol_01_error",
	"prop_idol_case_01",
	"prop_ing_camera_01",
	"prop_int_gate01",
	"prop_jewel_02a",
	"prop_jewel_02b",
	"prop_jewel_02c",
	"prop_jewel_03a",
	"prop_jewel_03b",
	"prop_jewel_04a",
	"prop_jewel_04b",
	"prop_jewel_pickup_new_01",
	"prop_j_disptray_01",
	"prop_j_disptray_01b",
	"prop_j_disptray_01_dam",
	"prop_j_disptray_02",
	"prop_j_disptray_02_dam",
	"prop_j_disptray_03",
	"prop_j_disptray_03_dam",
	"prop_j_disptray_04",
	"prop_j_disptray_04b",
	"prop_j_disptray_05",
	"prop_j_disptray_05b",
	"prop_j_heist_pic_01",
	"prop_j_heist_pic_02",
	"prop_j_heist_pic_03",
	"prop_j_heist_pic_04",
	"prop_j_neck_disp_01",
	"prop_j_neck_disp_02",
	"prop_j_neck_disp_03",
	"prop_large_gold",
	"prop_large_gold_alt_a",
	"prop_large_gold_alt_b",
	"prop_large_gold_alt_c",
	"prop_large_gold_empty",
	"prop_ld_alarm_01",
	"prop_ld_alarm_01_dam",
	"prop_ld_alarm_alert",
	"prop_ld_armour",
	"prop_ld_binbag_01",
	"prop_ld_bomb",
	"prop_ld_cable",
	"prop_ld_cable_tie_01",
	"prop_ld_case_01",
	"prop_ld_case_01_lod",
	"prop_ld_container",
	"prop_ld_contain_dl",
	"prop_ld_contain_dl2",
	"prop_ld_contain_dr",
	"prop_ld_contain_dr2",
	"prop_ld_crate_01",
	"prop_ld_crate_lid_01",
	"prop_ld_fan_01",
	"prop_ld_fan_01_old",
	"prop_ld_greenscreen_01",
	"prop_ld_handbag",
	"prop_ld_haybail",
	"prop_ld_health_pack",
	"prop_ld_hook",
	"prop_ld_int_safe_01",
	"prop_ld_jerrycan_01",
	"prop_ld_keypad_01",
	"prop_ld_keypad_01b",
	"prop_ld_keypad_01b_lod",
	"prop_ld_lap_top",
	"prop_ld_monitor_01",
	"prop_ld_pipe_single_01",
	"prop_ld_planning_pin_01",
	"prop_ld_planning_pin_02",
	"prop_ld_planning_pin_03",
	"prop_ld_purse_01",
	"prop_ld_purse_01_lod",
	"prop_ld_rope_t",
	"prop_ld_rub_binbag_01",
	"prop_ld_suitcase_01",
	"prop_ld_suitcase_02",
	"prop_ld_toilet_01",
	"prop_ld_vault_door",
	"prop_ld_wallet_01",
	"prop_ld_w_me_machette",
	"prop_lectern_01",
	"prop_lev_crate_01",
	"prop_lifeblurb_01",
	"prop_lifeblurb_01b",
	"prop_lifeblurb_02",
	"prop_lifeblurb_02b",
	"prop_mast_01",
	"prop_medal_01",
	"prop_med_bag_01",
	"prop_med_bag_01b",
	"prop_michael_backpack",
	"prop_mr_rasberryclean",
	"prop_mr_raspberry_01",
	"prop_muster_wboard_01",
	"prop_muster_wboard_02",
	"prop_necklace_board",
	"prop_new_drug_pack_01",
	"prop_night_safe_01",
	"prop_novel_01",
	"prop_npc_phone",
	"prop_npc_phone_02",
	"prop_out_door_speaker",
	"prop_overalls_01",
	"prop_paper_bag_01",
	"prop_paper_bag_small",
	"prop_paper_ball",
	"prop_pap_camera_01",
	"prop_parachute",
	"prop_parapack_01",
	"prop_paynspray_door_l",
	"prop_paynspray_door_r",
	"prop_ped_pic_01",
	"prop_ped_pic_01_sm",
	"prop_ped_pic_02",
	"prop_ped_pic_02_sm",
	"prop_ped_pic_03",
	"prop_ped_pic_03_sm",
	"prop_ped_pic_04",
	"prop_ped_pic_04_sm",
	"prop_ped_pic_05",
	"prop_ped_pic_05_sm",
	"prop_ped_pic_06",
	"prop_ped_pic_06_sm",
	"prop_ped_pic_07",
	"prop_ped_pic_07_sm",
	"prop_ped_pic_08",
	"prop_ped_pic_08_sm",
	"prop_phone_ing",
	"prop_phone_ing_02",
	"prop_phone_ing_03",
	"prop_phone_overlay_01",
	"prop_phone_overlay_02",
	"prop_phone_overlay_anim",
	"prop_phone_proto",
	"prop_phone_proto_back",
	"prop_phone_proto_battery",
	"prop_player_phone_01",
	"prop_player_phone_02",
	"prop_podium_mic",
	"prop_police_phone",
	"prop_poly_bag_01",
	"prop_poly_bag_money",
	"prop_pool_ball_01",
	"prop_postit_drive",
	"prop_postit_gun",
	"prop_postit_it",
	"prop_postit_lock",
	"prop_prologue_phone",
	"prop_protest_sign_01",
	"prop_protest_table_01",
	"prop_prototype_minibomb",
	"prop_rag_01",
	"prop_rf_conc_pillar",
	"prop_riding_crop_01",
	"prop_rock_chair_01",
	"prop_rolled_yoga_mat",
	"prop_rope_hook_01",
	"prop_scalpel",
	"prop_scrap_win_01",
	"prop_security_case_01",
	"prop_security_case_02",
	"prop_shamal_crash",
	"prop_shopping_bags01",
	"prop_shopping_bags02",
	"prop_showroom_glass_1b",
	"prop_side_lights",
	"prop_single_rose",
	"prop_sky_cover_01",
	"prop_sm_19_clock",
	"prop_sm_locker_door",
	"prop_spot_01",
	"prop_spot_clamp",
	"prop_spot_clamp_02",
	"prop_stat_pack_01",
	"prop_strip_pole_01",
	"prop_sub_chunk_01",
	"prop_tail_gate_col",
	"prop_taxi_meter_1",
	"prop_taxi_meter_2",
	"prop_telescope_01",
	"prop_tennis_bag_01",
	"prop_test_elevator",
	"prop_test_elevator_dl",
	"prop_test_elevator_dr",
	"prop_tick",
	"prop_tick_02",
	"prop_toiletfoot_static",
	"prop_torture_ch_01",
	"prop_tri_table_01",
	"prop_tyre_spike_01",
	"prop_t_coffe_table",
	"prop_t_sofa",
	"prop_t_sofa_02",
	"prop_t_telescope_01b",
	"prop_vb_34_tencrt_lighting",
	"prop_vehicle_hook",
	"prop_v_bmike_01",
	"prop_v_cam_01",
	"prop_v_hook_s",
	"prop_v_m_phone_01",
	"prop_v_parachute",
	"prop_water_ramp_01",
	"prop_water_ramp_02",
	"prop_water_ramp_03",
	"prop_wheelchair_01",
	"prop_windowbox_a",
	"prop_windowbox_b",
	"prop_windowbox_broken",
	"prop_windowbox_small",
	"prop_win_trailer_ld",
	"prop_w_board_blank",
	"prop_w_board_blank_2",
	"prop_yoga_mat_01",
	"prop_yoga_mat_02",
	"prop_yoga_mat_03",
	"p_amb_bag_bottle_01",
	"p_amb_brolly_01",
	"p_amb_brolly_01_s",
	"p_amb_clipboard_01",
	"p_amb_coffeecup_01",
	"p_amb_joint_01",
	"p_amb_lap_top_01",
	"p_amb_lap_top_02",
	"p_amb_phone_01",
	"p_car_keys_01",
	"p_counter_01_glass",
	"p_counter_01_glass_plug",
	"p_counter_02_glass",
	"p_counter_03_glass",
	"p_counter_04_glass",
	"p_cs_cam_phone",
	"p_cs_comb_01",
	"p_cs_laptop_02",
	"p_cs_laptop_02_w",
	"p_cs_locker_01",
	"p_cs_locker_02",
	"p_cs_locker_door_01",
	"p_cs_locker_door_01b",
	"p_cs_locker_door_02",
	"p_cs_paper_disp_02",
	"p_cs_paper_disp_1",
	"p_disp_02_door_01",
	"p_ferris_car_01",
	"p_f_duster_handle_01",
	"p_f_duster_head_01",
	"p_ing_skiprope_01",
	"p_int_jewel_mirror",
	"p_int_jewel_plant_01",
	"p_int_jewel_plant_02",
	"p_jewel_necklace_02",
	"p_ld_am_ball_01",
	"p_ld_coffee_vend_01",
	"p_ld_conc_cyl_01",
	"p_ld_frisbee_01",
	"p_ld_heist_bag_01",
	"p_ld_sax",
	"p_ld_soc_ball_01",
	"p_new_j_counter_01",
	"p_new_j_counter_02",
	"p_new_j_counter_03",
	"p_num_plate_01",
	"p_num_plate_02",
	"p_num_plate_03",
	"p_num_plate_04",
	"p_oil_slick_01",
	"p_pharm_unit_01",
	"p_pharm_unit_02",
	"p_planning_board_01",
	"p_planning_board_02",
	"p_planning_board_03",
	"p_planning_board_04",
	"p_secret_weapon_02",
	"p_stinger_02",
	"p_stinger_03",
	"p_stinger_04",
	"p_stinger_piece_01",
	"p_stinger_piece_02",
	"p_watch_01",
	"p_watch_02",
	"p_watch_03",
	"p_watch_04",
	"p_watch_05",
	"p_watch_06",
	"prop_bomb_01_s",
	"prop_cs_bin_01_skinned",
	"prop_cs_bucket_s",
	"prop_cs_bucket_s_lod",
	"prop_cs_mop_s",
	"prop_f_duster_01_s",
	"prop_ld_case_01_s",
	"prop_ld_handbag_s",
	"prop_ld_wallet_01_s",
	"prop_news_disp_02a_s",
	"prop_off_chair_04_s",
	"prop_p_jack_03_col",
	"prop_rub_binbag_sd_01",
	"prop_rub_binbag_sd_02",
	"prop_v_m_phone_o1s",
	"p_abat_roller_1",
	"p_abat_roller_1_col",
	"p_amb_drain_water_double",
	"p_amb_drain_water_longstrip",
	"p_amb_drain_water_single",
	"p_attache_case_01_s",
	"p_balaclavamichael_s",
	"p_barierbase_test_s",
	"p_barier_test_s",
	"p_beefsplitter_s",
	"p_cargo_chute_s",
	"p_cigar_pack_02_s",
	"p_cs_locker_01_s",
	"p_cs_script_bottle_s",
	"p_dock_crane_cable_s",
	"p_dock_crane_cabl_s",
	"p_dock_crane_sld_s",
	"p_dumpster_t",
	"p_fag_packet_01_s",
	"p_ferris_wheel_amo_l",
	"p_ferris_wheel_amo_l2",
	"p_ferris_wheel_amo_p",
	"p_gar_door_01_s",
	"p_gar_door_02_s",
	"p_gar_door_03_s",
	"p_gdoor1colobject_s",
	"p_gdoor1_s",
	"p_ing_skiprope_01_s",
	"p_jewel_necklace01_s",
	"p_jewel_necklace02_s",
	"p_jewel_pickup33_s",
	"p_ld_coffee_vend_s",
	"p_ld_heist_bag_s",
	"p_ld_stinger_s",
	"p_litter_picker_s",
	"p_mast_01_s",
	"p_notepad_01_s",
	"p_oil_pjack_01_amo",
	"p_oil_pjack_01_frg_s",
	"p_oil_pjack_02_amo",
	"p_oil_pjack_02_frg_s",
	"p_oil_pjack_03_amo",
	"p_oil_pjack_03_frg_s",
	"p_pallet_02a_s",
	"p_panties_s",
	"p_parachute1_mp_s",
	"p_parachute1_s",
	"p_parachute1_sp_s",
	"p_parachute_fallen_s",
	"p_parachute_s",
	"p_parachute_s_shop",
	"p_para_broken1_s",
	"p_patio_lounger1_s",
	"p_phonebox_02_s",
	"p_pliers_01_s",
	"p_rcss_folded",
	"p_rcss_s",
	"p_ringbinder_01_s",
	"p_sec_gate_01_s",
	"p_sec_gate_01_s_col",
	"p_shoalfish_s",
	"p_skiprope_r_s",
	"p_sofa_s",
	"p_sub_crane_s",
	"p_sunglass_m_s",
	"p_tennis_bag_01_s",
	"p_tram_crash_s",
	"p_watch_01_s",
	"p_watch_02_s",
	"p_watch_03_s",
	"p_waterboardc_s",
	"p_yacht_chair_01_s",
	"p_yacht_sofa_01_s",
	"p_yoga_mat_01_s",
	"p_yoga_mat_02_s",
	"p_yoga_mat_03_s",
	"pop_v_bank_door_l",
	"pop_v_bank_door_r",
	"prop_abat_roller_static",
	"prop_abat_slide",
	"prop_artgallery_02_dl",
	"prop_artgallery_02_dr",
	"prop_artgallery_dl",
	"prop_artgallery_dr",
	"prop_barn_door_l",
	"prop_barn_door_r",
	"prop_bh1_03_gate_l",
	"prop_bh1_03_gate_r",
	"prop_bh1_08_mp_gar",
	"prop_bh1_09_mp_gar",
	"prop_bh1_09_mp_l",
	"prop_bh1_09_mp_r",
	"prop_bh1_44_door_01l",
	"prop_bh1_44_door_01r",
	"prop_bh1_48_backdoor_l",
	"prop_bh1_48_backdoor_r",
	"prop_bh1_48_gate_1",
	"prop_bhhotel_door_l",
	"prop_bhhotel_door_r",
	"prop_biolab_g_door",
	"prop_broken_cell_gate_01",
	"prop_bs_map_door_01",
	"prop_burto_gate_01",
	"prop_casino_door_01l",
	"prop_casino_door_01r",
	"prop_ch1_07_door_01l",
	"prop_ch1_07_door_01r",
	"prop_ch1_07_door_02l",
	"prop_ch1_07_door_02r",
	"prop_ch2_05d_g_door",
	"prop_ch2_07b_20_g_door",
	"prop_ch2_09b_door",
	"prop_ch2_09c_garage_door",
	"prop_ch3_01_trlrdoor_l",
	"prop_ch3_01_trlrdoor_r",
	"prop_ch3_04_door_01l",
	"prop_ch3_04_door_01r",
	"prop_ch3_04_door_02",
	"prop_ch_025c_g_door_01",
	"prop_com_gar_door_01",
	"prop_com_ls_door_01",
	"prop_control_rm_door_01",
	"prop_cs1_14b_traind",
	"prop_cs1_14b_traind_dam",
	"prop_cs4_05_tdoor",
	"prop_cs4_10_tr_gd_01",
	"prop_cs4_11_door",
	"prop_cs6_03_door_l",
	"prop_cs6_03_door_r",
	"prop_cs_freightdoor_l1",
	"prop_cs_freightdoor_r1",
	"prop_cs_gravyard_gate_l",
	"prop_cs_gravyard_gate_r",
	"prop_cs_sc1_11_gate",
	"prop_cs_sm_27_gate",
	"prop_damdoor_01",
	"prop_door_01",
	"prop_door_balcony_frame",
	"prop_door_balcony_left",
	"prop_door_balcony_right",
	"prop_dt1_20_mp_door_l",
	"prop_dt1_20_mp_door_r",
	"prop_dt1_20_mp_gar",
	"prop_d_balcony_l_light",
	"prop_d_balcony_r_light",
	"prop_epsilon_door_l",
	"prop_epsilon_door_r",
	"prop_faceoffice_door_l",
	"prop_faceoffice_door_r",
	"prop_gar_door_01",
	"prop_gar_door_02",
	"prop_gar_door_03",
	"prop_gar_door_03_ld",
	"prop_gar_door_04",
	"prop_gar_door_05",
	"prop_gar_door_05_l",
	"prop_gar_door_05_r",
	"prop_gar_door_a_01",
	"prop_gar_door_plug",
	"prop_gd_ch2_08",
	"prop_grumandoor_l",
	"prop_grumandoor_r",
	"prop_hanger_door_1",
	"prop_hospitaldoors_start",
	"prop_hospital_door_l",
	"prop_hospital_door_r",
	"prop_hw1_03_gardoor_01",
	"prop_hw1_04_door_l1",
	"prop_hw1_04_door_r1",
	"prop_hw1_23_door",
	"prop_id2_11_gdoor",
	"prop_id_21_gardoor_01",
	"prop_id_21_gardoor_02",
	"prop_indus_meet_door_l",
	"prop_indus_meet_door_r",
	"prop_kt1_06_door_l",
	"prop_kt1_06_door_r",
	"prop_kt1_10_mpdoor_l",
	"prop_kt1_10_mpdoor_r",
	"prop_ld_garaged_01",
	"prop_ld_jail_door",
	"prop_magenta_door",
	"prop_map_door_01",
	"prop_michael_door",
	"prop_motel_door_09",
	"prop_police_door_l",
	"prop_police_door_l_dam",
	"prop_police_door_r",
	"prop_police_door_r_dam",
	"prop_police_door_surround",
	"prop_pris_door_01_l",
	"prop_pris_door_01_r",
	"prop_pris_door_02",
	"prop_pris_door_03",
	"prop_ql_revolving_door",
	"prop_ret_door",
	"prop_ret_door_02",
	"prop_ret_door_03",
	"prop_ret_door_04",
	"prop_ron_door_01",
	"prop_sc1_06_gate_l",
	"prop_sc1_06_gate_r",
	"prop_sc1_12_door",
	"prop_sc1_21_g_door_01",
	"prop_section_garage_01",
	"prop_sec_gate_01b",
	"prop_sec_gate_01c",
	"prop_sec_gate_01d",
	"prop_showroom_door_l",
	"prop_showroom_door_r",
	"prop_sm1_11_doorl",
	"prop_sm1_11_doorr",
	"prop_sm1_11_garaged",
	"prop_sm_10_mp_door",
	"prop_sm_14_mp_gar",
	"prop_sm_27_door",
	"prop_sm_27_gate",
	"prop_sm_27_gate_02",
	"prop_sm_27_gate_03",
	"prop_sm_27_gate_04",
	"prop_ss1_05_mp_door",
	"prop_ss1_08_mp_door_l",
	"prop_ss1_08_mp_door_r",
	"prop_ss1_10_door_l",
	"prop_ss1_10_door_r",
	"prop_ss1_14_garage_door",
	"prop_ss1_mpint_door_l",
	"prop_ss1_mpint_door_r",
	"prop_ss1_mpint_garage",
	"prop_ss1_mpint_garage_cl",
	"prop_strip_door_01",
	"prop_vault_shutter",
	"prop_v_door_44",
	"prop_wardrobe_door_01",
	"prop_win_plug_01",
	"prop_win_plug_01_dam",
	"p_cut_door_01",
	"p_cut_door_02",
	"p_cut_door_03",
	"p_jewel_door_l",
	"p_jewel_door_r1",
	"prop_a4_pile_01",
	"prop_a4_sheet_01",
	"prop_a4_sheet_02",
	"prop_a4_sheet_03",
	"prop_a4_sheet_04",
	"prop_a4_sheet_05",
	"prop_aiprort_sign_01",
	"prop_aiprort_sign_02",
	"prop_amanda_note_01",
	"prop_amanda_note_01b",
	"prop_amb_40oz_02",
	"prop_amb_40oz_03",
	"prop_amb_beer_bottle",
	"prop_amb_ciggy_01",
	"prop_amb_donut",
	"prop_anim_cash_note",
	"prop_anim_cash_note_b",
	"prop_anim_cash_pile_01",
	"prop_anim_cash_pile_02",
	"prop_arc_blueprints_01",
	"prop_armour_pickup",
	"prop_artifact_01",
	"prop_ashtray_01",
	"prop_aviators_01",
	"prop_a_trailer_door_01",
	"prop_ballistic_shield",
	"prop_ballistic_shield_lod1",
	"prop_barry_table_detail",
	"prop_basejump_target_01",
	"prop_battery_01",
	"prop_battery_02",
	"prop_beer_box_01",
	"prop_beta_tape",
	"prop_big_shit_01",
	"prop_big_shit_02",
	"prop_binoc_01",
	"prop_bison_winch",
	"prop_blackjack_01",
	"prop_blox_spray",
	"prop_bodyarmour_02",
	"prop_bodyarmour_03",
	"prop_bodyarmour_04",
	"prop_bodyarmour_05",
	"prop_bodyarmour_06",
	"prop_bongos_01",
	"prop_bong_01",
	"prop_boombox_01",
	"prop_bottle_cap_01",
	"prop_bowl_crisps",
	"prop_broken_cboard_p1",
	"prop_broken_cboard_p2",
	"prop_busker_hat_01",
	"prop_c4_final",
	"prop_c4_final_green",
	"prop_candy_pqs",
	"prop_cargo_int",
	"prop_carrier_bag_01",
	"prop_carrier_bag_01_lod",
	"prop_carwash_roller_horz",
	"prop_carwash_roller_vert",
	"prop_car_ignition",
	"prop_casey_sec_id",
	"prop_cash_case_01",
	"prop_cash_case_02",
	"prop_cash_crate_01",
	"prop_cash_envelope_01",
	"prop_cash_note_01",
	"prop_cash_pile_01",
	"prop_cash_pile_02",
	"prop_ceramic_jug_01",
	"prop_ceramic_jug_cork",
	"prop_cigar_01",
	"prop_cigar_02",
	"prop_cigar_03",
	"prop_cigar_pack_01",
	"prop_cigar_pack_02",
	"prop_cliff_paper",
	"prop_clippers_01",
	"prop_coffee_cup_trailer",
	"prop_coffin_02",
	"prop_coffin_02b",
	"prop_coke_block_01",
	"prop_coke_block_half_a",
	"prop_coke_block_half_b",
	"prop_controller_01",
	"prop_crisp",
	"prop_crisp_small",
	"prop_cs_abattoir_switch",
	"prop_cs_amanda_shoe",
	"prop_cs_bandana",
	"prop_cs_bar",
	"prop_cs_beer_bot_01",
	"prop_cs_beer_bot_01b",
	"prop_cs_beer_bot_01lod",
	"prop_cs_beer_bot_02",
	"prop_cs_beer_bot_03",
	"prop_cs_beer_bot_40oz",
	"prop_cs_beer_bot_40oz_02",
	"prop_cs_beer_bot_40oz_03",
	"prop_cs_beer_bot_test",
	"prop_cs_binder_01",
	"prop_cs_book_01",
	"prop_cs_bottle_opener",
	"prop_cs_bowie_knife",
	"prop_cs_bowl_01",
	"prop_cs_bowl_01b",
	"prop_cs_box_step",
	"prop_cs_brain_chunk",
	"prop_cs_bs_cup",
	"prop_cs_burger_01",
	"prop_cs_business_card",
	"prop_cs_cash_note_01",
	"prop_cs_cctv",
	"prop_cs_champ_flute",
	"prop_cs_ciggy_01",
	"prop_cs_ciggy_01b",
	"prop_cs_clothes_box",
	"prop_cs_coke_line",
	"prop_cs_cont_latch",
	"prop_cs_crackpipe",
	"prop_cs_credit_card",
	"prop_cs_creeper_01",
	"prop_cs_crisps_01",
	"prop_cs_cuffs_01",
	"prop_cs_diaphram",
	"prop_cs_dildo_01",
	"prop_cs_documents_01",
	"prop_cs_dog_lead_2a",
	"prop_cs_dog_lead_2b",
	"prop_cs_dog_lead_2c",
	"prop_cs_dog_lead_3a",
	"prop_cs_dog_lead_3b",
	"prop_cs_dog_lead_a",
	"prop_cs_dog_lead_b",
	"prop_cs_dog_lead_c",
	"prop_cs_duffel_01",
	"prop_cs_duffel_01b",
	"prop_cs_dvd",
	"prop_cs_dvd_case",
	"prop_cs_envolope_01",
	"prop_cs_film_reel_01",
	"prop_cs_fork",
	"prop_cs_frank_photo",
	"prop_cs_fuel_hose",
	"prop_cs_fuel_nozle",
	"prop_cs_gascutter_1",
	"prop_cs_gascutter_2",
	"prop_cs_glass_scrap",
	"prop_cs_gunrack",
	"prop_cs_hand_radio",
	"prop_cs_heist_rope",
	"prop_cs_heist_rope_b",
	"prop_cs_hotdog_01",
	"prop_cs_hotdog_02",
	"prop_cs_ilev_blind_01",
	"prop_cs_ironing_board",
	"prop_cs_katana_01",
	"prop_cs_kettle_01",
	"prop_cs_lazlow_ponytail",
	"prop_cs_lazlow_shirt_01",
	"prop_cs_lazlow_shirt_01b",
	"prop_cs_leg_chain_01",
	"prop_cs_lester_crate",
	"prop_cs_lipstick",
	"prop_cs_magazine",
	"prop_cs_marker_01",
	"prop_cs_meth_pipe",
	"prop_cs_milk_01",
	"prop_cs_mini_tv",
	"prop_cs_mopbucket_01",
	"prop_cs_nail_file",
	"prop_cs_newspaper",
	"prop_cs_overalls_01",
	"prop_cs_padlock",
	"prop_cs_pamphlet_01",
	"prop_cs_paper_cup",
	"prop_cs_para_ropebit",
	"prop_cs_para_ropes",
	"prop_cs_pebble",
	"prop_cs_pebble_02",
	"prop_cs_petrol_can",
	"prop_cs_phone_01",
	"prop_cs_photoframe_01",
	"prop_cs_pills",
	"prop_cs_plane_int_01",
	"prop_cs_plate_01",
	"prop_cs_police_torch",
	"prop_cs_pour_tube",
	"prop_cs_power_cell",
	"prop_cs_power_cord",
	"prop_cs_protest_sign_01",
	"prop_cs_protest_sign_02",
	"prop_cs_protest_sign_02b",
	"prop_cs_protest_sign_03",
	"prop_cs_protest_sign_04a",
	"prop_cs_protest_sign_04b",
	"prop_cs_rage_statue_p1",
	"prop_cs_rage_statue_p2",
	"prop_cs_rolled_paper",
	"prop_cs_rub_box_01",
	"prop_cs_rub_box_02",
	"prop_cs_r_business_card",
	"prop_cs_sack_01",
	"prop_cs_saucer_01",
	"prop_cs_script_bottle",
	"prop_cs_script_bottle_01",
	"prop_cs_server_drive",
	"prop_cs_sheers",
	"prop_cs_shirt_01",
	"prop_cs_shot_glass",
	"prop_cs_silver_tray",
	"prop_cs_sink_filler",
	"prop_cs_sink_filler_02",
	"prop_cs_sink_filler_03",
	"prop_cs_sol_glasses",
	"prop_cs_steak",
	"prop_cs_stock_book",
	"prop_cs_street_binbag_01",
	"prop_cs_street_card_01",
	"prop_cs_street_card_02",
	"prop_cs_sub_hook_01",
	"prop_cs_sub_rope_01",
	"prop_cs_swipe_card",
	"prop_cs_toaster",
	"prop_cs_trolley_01",
	"prop_cs_trowel",
	"prop_cs_truck_ladder",
	"prop_cs_tshirt_ball_01",
	"prop_cs_t_shirt_pile",
	"prop_cs_valve",
	"prop_cs_vent_cover",
	"prop_cs_walkie_talkie",
	"prop_cs_whiskey_bottle",
	"prop_cs_whiskey_bot_stop",
	"prop_cs_wrench",
	"prop_devin_box_01",
	"prop_devin_rope_01",
	"prop_direct_chair_01",
	"prop_direct_chair_02",
	"prop_disp_razor_01",
	"prop_distantcar_day",
	"prop_distantcar_night",
	"prop_distantcar_truck",
	"prop_donut_01",
	"prop_donut_02",
	"prop_donut_02b",
	"prop_door_bell_01",
	"prop_double_grid_line",
	"prop_drug_package",
	"prop_drug_package_02",
	"prop_dummy_car",
	"prop_ear_defenders_01",
	"prop_ecg_01",
	"prop_ecg_01_cable_01",
	"prop_ecg_01_cable_02",
	"prop_ecola_can",
	"prop_employee_month_01",
	"prop_employee_month_02",
	"prop_energy_drink",
	"prop_face_rag_01",
	"prop_fag_packet_01",
	"prop_fbi3_coffee_table",
	"prop_fib_badge",
	"prop_fib_skylight_piece",
	"prop_fishing_rod_01",
	"prop_fishing_rod_02",
	"prop_fish_slice_01",
	"prop_flare_01",
	"prop_flare_01b",
	"prop_flatbed_strap",
	"prop_flight_box_01",
	"prop_flight_box_insert",
	"prop_flight_box_insert2",
	"prop_franklin_dl",
	"prop_f_b_insert_broken",
	"prop_gaffer_arm_bind",
	"prop_gaffer_arm_bind_cut",
	"prop_gaffer_leg_bind",
	"prop_gaffer_leg_bind_cut",
	"prop_gaffer_tape",
	"prop_gaffer_tape_strip",
	"prop_glasscutter_01",
	"prop_glass_suck_holder",
	"prop_gold_cont_01",
	"prop_gold_cont_01b",
	"prop_gold_trolly_strap_01",
	"prop_gun_case_01",
	"prop_gun_case_02",
	"prop_gun_frame",
	"prop_hand_toilet",
	"prop_hard_hat_01",
	"prop_headphones_01",
	"prop_headset_01",
	"prop_hockey_bag_01",
	"prop_holster_01",
	"prop_hose_nozzle",
	"prop_huf_rag_01",
	"prop_ice_cube_01",
	"prop_ice_cube_02",
	"prop_ice_cube_03",
	"prop_id2_20_clock",
	"prop_idol_01",
	"prop_idol_case",
	"prop_idol_case_02",
	"prop_ing_crowbar",
	"prop_inhaler_01",
	"prop_iron_01",
	"prop_jet_bloodsplat_01",
	"prop_juice_pool_01",
	"prop_ld_ammo_pack_01",
	"prop_ld_ammo_pack_02",
	"prop_ld_ammo_pack_03",
	"prop_ld_barrier_01",
	"prop_ld_bomb_01",
	"prop_ld_bomb_01_open",
	"prop_ld_bomb_anim",
	"prop_ld_can_01",
	"prop_ld_contact_card",
	"prop_ld_crocclips01",
	"prop_ld_crocclips02",
	"prop_ld_dummy_rope",
	"prop_ld_fags_01",
	"prop_ld_fags_02",
	"prop_ld_faucet",
	"prop_ld_ferris_wheel",
	"prop_ld_fireaxe",
	"prop_ld_flow_bottle",
	"prop_ld_gold_tooth",
	"prop_ld_hdd_01",
	"prop_ld_peep_slider",
	"prop_ld_rail_01",
	"prop_ld_rail_02",
	"prop_ld_rubble_01",
	"prop_ld_rubble_02",
	"prop_ld_rubble_03",
	"prop_ld_rubble_04",
	"prop_ld_scrap",
	"prop_ld_shovel",
	"prop_ld_shovel_dirt",
	"prop_ld_snack_01",
	"prop_ld_test_01",
	"prop_ld_tooth",
	"prop_ld_wallet_02",
	"prop_ld_wallet_pickup",
	"prop_lev_des_barge_01",
	"prop_lev_des_barge_02",
	"prop_lift_overlay_01",
	"prop_lift_overlay_02",
	"prop_litter_picker",
	"prop_loose_rag_01",
	"prop_med_jet_01",
	"prop_megaphone_01",
	"prop_mem_candle_04",
	"prop_mem_candle_05",
	"prop_mem_candle_06",
	"prop_mem_reef_01",
	"prop_mem_reef_02",
	"prop_mem_reef_03",
	"prop_mem_teddy_01",
	"prop_mem_teddy_02",
	"prop_meth_bag_01",
	"prop_michael_balaclava",
	"prop_michael_sec_id",
	"prop_microphone_02",
	"prop_military_pickup_01",
	"prop_mil_crate_01",
	"prop_mil_crate_02",
	"prop_minigun_01",
	"prop_money_bag_01",
	"prop_mp3_dock",
	"prop_mp_arrow_barrier_01",
	"prop_mp_barrier_01",
	"prop_mp_barrier_01b",
	"prop_mp_barrier_02",
	"prop_mp_barrier_02b",
	"prop_mp_base_marker",
	"prop_mp_boost_01",
	"prop_mp_cant_place_lrg",
	"prop_mp_cant_place_med",
	"prop_mp_cant_place_sm",
	"prop_mp_cone_01",
	"prop_mp_cone_02",
	"prop_mp_cone_03",
	"prop_mp_cone_04",
	"prop_mp_drug_package",
	"prop_mp_drug_pack_blue",
	"prop_mp_drug_pack_red",
	"prop_mp_icon_shad_lrg",
	"prop_mp_icon_shad_med",
	"prop_mp_icon_shad_sm",
	"prop_mp_max_out_lrg",
	"prop_mp_max_out_med",
	"prop_mp_max_out_sm",
	"prop_mp_num_0",
	"prop_mp_num_1",
	"prop_mp_num_2",
	"prop_mp_num_3",
	"prop_mp_num_4",
	"prop_mp_num_5",
	"prop_mp_num_6",
	"prop_mp_num_7",
	"prop_mp_num_8",
	"prop_mp_num_9",
	"prop_mp_placement",
	"prop_mp_placement_lrg",
	"prop_mp_placement_maxd",
	"prop_mp_placement_med",
	"prop_mp_placement_red",
	"prop_mp_placement_sm",
	"prop_mp_ramp_01",
	"prop_mp_ramp_02",
	"prop_mp_ramp_03",
	"prop_mp_repair",
	"prop_mp_repair_01",
	"prop_mp_respawn_02",
	"prop_mp_rocket_01",
	"prop_mp_spike_01",
	"prop_m_pack_int_01",
	"prop_nigel_bag_pickup",
	"prop_notepad_01",
	"prop_notepad_02",
	"prop_old_boot",
	"prop_orang_can_01",
	"prop_parking_wand_01",
	"prop_passport_01",
	"prop_peanut_bowl_01",
	"prop_pencil_01",
	"prop_piercing_gun",
	"prop_ping_pong",
	"prop_pistol_holster",
	"prop_plastic_cup_02",
	"prop_player_gasmask",
	"prop_pliers_01",
	"prop_police_radio_handset",
	"prop_police_radio_main",
	"prop_poster_tube_01",
	"prop_poster_tube_02",
	"prop_power_cell",
	"prop_power_cord_01",
	"prop_premier_fence_01",
	"prop_premier_fence_02",
	"prop_quad_grid_line",
	"prop_rad_waste_barrel_01",
	"prop_rail_controller",
	"prop_range_target_01",
	"prop_range_target_02",
	"prop_range_target_03",
	"prop_riot_shield",
	"prop_rolled_sock_01",
	"prop_rolled_sock_02",
	"prop_rope_family_3",
	"prop_safety_glasses",
	"prop_sam_01",
	"prop_sandwich_01",
	"prop_scaffold_pole",
	"prop_scn_police_torch",
	"prop_scourer_01",
	"prop_scrap_2_crate",
	"prop_sewing_fabric",
	"prop_sewing_machine",
	"prop_shower_towel",
	"prop_sh_beer_pissh_01",
	"prop_sh_bong_01",
	"prop_sh_cigar_01",
	"prop_sh_joint_01",
	"prop_sh_mr_rasp_01",
	"prop_sh_shot_glass",
	"prop_sh_tall_glass",
	"prop_sh_tt_fridgedoor",
	"prop_sh_wine_glass",
	"prop_single_grid_line",
	"prop_smg_holster_01",
	"prop_space_pistol",
	"prop_space_rifle",
	"prop_spycam",
	"prop_squeegee",
	"prop_stag_do_rope",
	"prop_start_finish_line_01",
	"prop_start_grid_01",
	"prop_stockade_wheel",
	"prop_stockade_wheel_flat",
	"prop_sub_cover_01",
	"prop_sub_release",
	"prop_syringe_01",
	"prop_table_mic_01",
	"prop_table_ten_bat",
	"prop_taco_01",
	"prop_taco_02",
	"prop_tapeplayer_01",
	"prop_target_arm",
	"prop_target_arm_b",
	"prop_target_arm_long",
	"prop_target_arm_sm",
	"prop_target_backboard",
	"prop_target_backboard_b",
	"prop_target_blue",
	"prop_target_blue_arrow",
	"prop_target_bull",
	"prop_target_bull_b",
	"prop_target_comp_metal",
	"prop_target_comp_wood",
	"prop_target_frame_01",
	"prop_target_inner1",
	"prop_target_inner2",
	"prop_target_inner2_b",
	"prop_target_inner3",
	"prop_target_inner3_b",
	"prop_target_inner_b",
	"prop_target_orange_arrow",
	"prop_target_oran_cross",
	"prop_target_ora_purp_01",
	"prop_target_purp_arrow",
	"prop_target_purp_cross",
	"prop_target_red",
	"prop_target_red_arrow",
	"prop_target_red_blue_01",
	"prop_target_red_cross",
	"prop_tarp_strap",
	"prop_tea_trolly",
	"prop_temp_block_blocker",
	"prop_tennis_ball",
	"prop_tennis_rack_01",
	"prop_tennis_rack_01b",
	"prop_time_capsule_01",
	"prop_tornado_wheel",
	"prop_torture_01",
	"prop_tourist_map_01",
	"prop_trailer_01_new",
	"prop_trailer_door_closed",
	"prop_trailer_door_open",
	"prop_trevor_rope_01",
	"prop_trev_sec_id",
	"prop_triple_grid_line",
	"prop_tri_finish_banner",
	"prop_tri_start_banner",
	"prop_tumbler_01",
	"prop_tumbler_01b",
	"prop_tumbler_01_empty",
	"prop_turkey_leg_01",
	"prop_tv_cam_02",
	"prop_tv_test",
	"prop_t_shirt_ironing",
	"prop_voltmeter_01",
	"prop_water_corpse_01",
	"prop_water_corpse_02",
	"prop_weed_01",
	"prop_weed_02",
	"prop_weed_block_01",
	"prop_weed_bottle",
	"prop_weed_pallet",
	"prop_weed_tub_01",
	"prop_weed_tub_01b",
	"prop_welding_mask_01",
	"prop_weld_torch",
	"prop_wheat_grass_empty",
	"prop_wheat_grass_glass",
	"prop_winch_hook_long",
	"prop_winch_hook_short",
	"prop_wrecked_buzzard",
	"prop_yacht_lounger",
	"prop_yacht_seat_01",
	"prop_yacht_seat_02",
	"prop_yacht_seat_03",
	"prop_yacht_table_01",
	"prop_yacht_table_02",
	"prop_yacht_table_03",
	"prop_yell_plastic_target",
	"p_amb_bagel_01",
	"p_cs_bbbat_01",
	"p_cs_bottle_01",
	"p_cs_clipboard",
	"p_cs_joint_01",
	"p_cs_joint_02",
	"p_cs_lighter_01",
	"p_cs_papers_01",
	"p_cs_papers_02",
	"p_cs_papers_03",
	"p_ing_bagel_01",
	"p_ing_microphonel_01",
	"p_ld_bs_bag_01",
	"p_ld_id_card_002",
	"p_ld_id_card_01",
	"p_rc_handset",
	"p_whiskey_notop",
	"p_whiskey_notop_empty",
	"prop_crashed_heli",
	"prop_ld_bankdoors_02",
	"prop_ld_fragwall_01a",
	"prop_pipe_single_01",
	"prop_test_boulder_01",
	"prop_test_boulder_02",
	"prop_test_boulder_03",
	"prop_test_boulder_04",
	"prop_trailr_base",
	"prop_trailr_base_static",
	"proc_drkyel001",
	"proc_flower1",
	"proc_flower_wild_04",
	"proc_weeds01a",
	"proc_weeds01b",
	"proc_weeds01c",
	"prop_test_bed",
	"proair_hoc_puck",
	"prop_airhockey_01",
	"prop_air_hoc_paddle_01",
	"prop_air_hoc_paddle_02",
	"prop_arcade_01",
	"prop_arcade_02",
	"prop_ice_box_01",
	"prop_ice_box_01_l1",
	"prop_jukebox_01",
	"prop_jukebox_02",
	"prop_park_ticket_01",
	"prop_pier_kiosk_01",
	"prop_pier_kiosk_02",
	"prop_pier_kiosk_03",
	"prop_pooltable_02",
	"prop_pooltable_3b",
	"prop_pool_cue",
	"prop_pool_rack_01",
	"prop_pool_rack_02",
	"prop_pool_tri",
	"prop_telescope",
	"prop_train_ticket_02",
	"prop_turnstyle_01",
	"prop_vend_coffe_01",
	"prop_vend_condom_01",
	"prop_vend_fags_01",
	"prop_vend_fridge01",
	"prop_vend_snak_01",
	"prop_apple_box_01",
	"prop_apple_box_02",
	"prop_arm_wrestle_01",
	"prop_a_base_bars_01",
	"prop_barbell_01",
	"prop_barbell_02",
	"prop_barbell_100kg",
	"prop_barbell_10kg",
	"prop_barbell_20kg",
	"prop_barbell_30kg",
	"prop_barbell_40kg",
	"prop_barbell_50kg",
	"prop_barbell_60kg",
	"prop_barbell_80kg",
	"prop_basketball_net",
	"prop_bball_arcade_01",
	"prop_beachbag_01",
	"prop_beachbag_02",
	"prop_beachbag_03",
	"prop_beachbag_04",
	"prop_beachbag_05",
	"prop_beachbag_06",
	"prop_beachbag_combo_01",
	"prop_beachbag_combo_02",
	"prop_beachball_02",
	"prop_beachflag_le",
	"prop_beach_bars_01",
	"prop_beach_bars_02",
	"prop_beach_bbq",
	"prop_beach_dip_bars_01",
	"prop_beach_dip_bars_02",
	"prop_beach_fire",
	"prop_beach_lg_float",
	"prop_beach_lg_stretch",
	"prop_beach_lg_surf",
	"prop_beach_lotion_01",
	"prop_beach_lotion_02",
	"prop_beach_lotion_03",
	"prop_beach_punchbag",
	"prop_beach_rings_01",
	"prop_beach_sculp_01",
	"prop_beach_towel_02",
	"prop_beach_volball01",
	"prop_beach_volball02",
	"prop_bikini_disp_01",
	"prop_bikini_disp_02",
	"prop_bikini_disp_03",
	"prop_bikini_disp_04",
	"prop_bikini_disp_05",
	"prop_bikini_disp_06",
	"prop_bleachers_01",
	"prop_bleachers_02",
	"prop_bleachers_03",
	"prop_bleachers_04",
	"prop_bleachers_05",
	"prop_boogbd_stack_01",
	"prop_boogbd_stack_02",
	"prop_boogieboard_01",
	"prop_boogieboard_02",
	"prop_boogieboard_03",
	"prop_boogieboard_04",
	"prop_boogieboard_05",
	"prop_boogieboard_06",
	"prop_boogieboard_07",
	"prop_boogieboard_08",
	"prop_boogieboard_09",
	"prop_boogieboard_10",
	"prop_bowling_ball",
	"prop_bowling_pin",
	"prop_boxing_glove_01",
	"prop_buck_spade_01",
	"prop_buck_spade_02",
	"prop_buck_spade_03",
	"prop_buck_spade_04",
	"prop_buck_spade_05",
	"prop_buck_spade_06",
	"prop_buck_spade_07",
	"prop_buck_spade_08",
	"prop_buck_spade_09",
	"prop_buck_spade_10",
	"prop_bumper_car_01",
	"prop_can_canoe",
	"prop_cap_01",
	"prop_cap_01b",
	"prop_cap_row_01",
	"prop_cap_row_01b",
	"prop_cap_row_02",
	"prop_cap_row_02b",
	"prop_clothes_rail_02",
	"prop_clothes_rail_03",
	"prop_clothes_rail_2b",
	"prop_clothes_tub_01",
	"prop_cs_beachtowel_01",
	"prop_cup_saucer_01",
	"prop_curl_bar_01",
	"prop_dart_1",
	"prop_dart_2",
	"prop_dart_bd_01",
	"prop_dart_bd_cab_01",
	"prop_display_unit_01",
	"prop_display_unit_02",
	"prop_disp_cabinet_002",
	"prop_disp_cabinet_01",
	"prop_dolly_01",
	"prop_dolly_02",
	"prop_dress_disp_01",
	"prop_dress_disp_02",
	"prop_dress_disp_03",
	"prop_dress_disp_04",
	"prop_drug_burner",
	"prop_exer_bike_01",
	"prop_ferris_car_01",
	"prop_ferris_car_01_lod1",
	"prop_film_cam_01",
	"prop_flipchair_01",
	"prop_food_van_01",
	"prop_food_van_02",
	"prop_freeweight_01",
	"prop_freeweight_02",
	"prop_front_seat_01",
	"prop_front_seat_02",
	"prop_front_seat_03",
	"prop_front_seat_04",
	"prop_front_seat_05",
	"prop_front_seat_06",
	"prop_front_seat_07",
	"prop_front_seat_row_01",
	"prop_ftowel_01",
	"prop_ftowel_07",
	"prop_ftowel_08",
	"prop_ftowel_10",
	"prop_game_clock_01",
	"prop_game_clock_02",
	"prop_golf_bag_01",
	"prop_golf_bag_01b",
	"prop_golf_bag_01c",
	"prop_golf_ball",
	"prop_golf_ball_p2",
	"prop_golf_ball_p3",
	"prop_golf_ball_p4",
	"prop_golf_ball_tee",
	"prop_golf_driver",
	"prop_golf_iron_01",
	"prop_golf_marker_01",
	"prop_golf_pitcher_01",
	"prop_golf_putter_01",
	"prop_golf_tee",
	"prop_golf_wood_01",
	"prop_hat_box_01",
	"prop_hat_box_02",
	"prop_hat_box_03",
	"prop_hat_box_04",
	"prop_hat_box_05",
	"prop_hat_box_06",
	"prop_henna_disp_01",
	"prop_henna_disp_02",
	"prop_henna_disp_03",
	"prop_hwbowl_pseat_6x1",
	"prop_hwbowl_seat_01",
	"prop_hwbowl_seat_02",
	"prop_hwbowl_seat_03",
	"prop_hwbowl_seat_03b",
	"prop_hwbowl_seat_6x6",
	"prop_hydro_platform_01",
	"prop_inflatearch_01",
	"prop_inflategate_01",
	"prop_jeans_01",
	"prop_kayak_01",
	"prop_kayak_01b",
	"prop_kino_light_01",
	"prop_kino_light_03",
	"prop_ld_hat_01",
	"prop_ld_jeans_01",
	"prop_ld_jeans_02",
	"prop_ld_shirt_01",
	"prop_ld_shoe_01",
	"prop_ld_shoe_02",
	"prop_ld_tshirt_01",
	"prop_ld_tshirt_02",
	"prop_life_ring_02",
	"prop_makeup_trail_01",
	"prop_makeup_trail_02",
	"prop_mat_box",
	"prop_movie_rack",
	"prop_muscle_bench_01",
	"prop_muscle_bench_02",
	"prop_muscle_bench_03",
	"prop_muscle_bench_04",
	"prop_muscle_bench_05",
	"prop_muscle_bench_06",
	"prop_offroad_bale01",
	"prop_offroad_bale02_l1_frag_",
	"prop_offroad_barrel01",
	"prop_offroad_tyres01",
	"prop_plate_stand_01",
	"prop_poolball_1",
	"prop_poolball_10",
	"prop_poolball_11",
	"prop_poolball_12",
	"prop_poolball_13",
	"prop_poolball_14",
	"prop_poolball_15",
	"prop_poolball_2",
	"prop_poolball_3",
	"prop_poolball_4",
	"prop_poolball_5",
	"prop_poolball_6",
	"prop_poolball_7",
	"prop_poolball_8",
	"prop_poolball_9",
	"prop_poolball_cue",
	"prop_porn_mag_01",
	"prop_porn_mag_02",
	"prop_porn_mag_03",
	"prop_porn_mag_04",
	"prop_postcard_rack",
	"prop_pris_bars_01",
	"prop_pris_bench_01",
	"prop_prop_tree_01",
	"prop_prop_tree_02",
	"prop_punch_bag_l",
	"prop_roller_car_01",
	"prop_roller_car_02",
	"prop_scrim_01",
	"prop_set_generator_01",
	"prop_sglasses_stand_01",
	"prop_sglasses_stand_02",
	"prop_sglasses_stand_02b",
	"prop_sglasses_stand_03",
	"prop_sglasss_1b_lod",
	"prop_sglasss_1_lod",
	"prop_shop_front_door_l",
	"prop_shop_front_door_r",
	"prop_skate_flatramp",
	"prop_skate_funbox",
	"prop_skate_halfpipe",
	"prop_skate_kickers",
	"prop_skate_quartpipe",
	"prop_skate_rail",
	"prop_skate_spiner",
	"prop_skip_rope_01",
	"prop_slacks_01",
	"prop_slacks_02",
	"prop_speedball_01",
	"prop_sports_clock_01",
	"prop_studio_light_02",
	"prop_studio_light_03",
	"prop_suitcase_01",
	"prop_suitcase_01b",
	"prop_suitcase_01c",
	"prop_suitcase_01d",
	"prop_suitcase_02",
	"prop_suitcase_03",
	"prop_suitcase_03b",
	"prop_surf_board_ldn_01",
	"prop_surf_board_ldn_02",
	"prop_surf_board_ldn_03",
	"prop_surf_board_ldn_04",
	"prop_table_tennis",
	"prop_tennis_ball_lobber",
	"prop_tint_towel",
	"prop_tint_towels_01",
	"prop_tint_towels_01b",
	"prop_towel2_01",
	"prop_towel2_02",
	"prop_towel_shelf_01",
	"prop_tri_pod",
	"prop_tri_pod_lod",
	"prop_tshirt_box_02",
	"prop_tshirt_shelf_1",
	"prop_tshirt_shelf_2",
	"prop_tshirt_shelf_2a",
	"prop_tshirt_shelf_2b",
	"prop_tshirt_shelf_2c",
	"prop_tshirt_stand_01",
	"prop_tshirt_stand_01b",
	"prop_tshirt_stand_02",
	"prop_tshirt_stand_04",
	"prop_t_shirt_row_01",
	"prop_t_shirt_row_02",
	"prop_t_shirt_row_02b",
	"prop_t_shirt_row_03",
	"prop_t_shirt_row_04",
	"prop_t_shirt_row_05l",
	"prop_t_shirt_row_05r",
	"prop_venice_board_01",
	"prop_venice_board_02",
	"prop_venice_board_03",
	"prop_venice_counter_01",
	"prop_venice_counter_02",
	"prop_venice_counter_03",
	"prop_venice_counter_04",
	"prop_venice_shop_front_01",
	"prop_venice_sign_09",
	"prop_venice_sign_10",
	"prop_venice_sign_11",
	"prop_venice_sign_12",
	"prop_venice_sign_14",
	"prop_venice_sign_15",
	"prop_venice_sign_16",
	"prop_venice_sign_17",
	"prop_venice_sign_18",
	"prop_ven_market_stool",
	"prop_ven_market_table1",
	"prop_ven_shop_1_counter",
	"prop_v_15_cars_clock",
	"prop_v_5_bclock",
	"prop_weight_10k",
	"prop_weight_15k",
	"prop_weight_1_5k",
	"prop_weight_20k",
	"prop_weight_2_5k",
	"prop_weight_5k",
	"prop_weight_rack_01",
	"prop_weight_rack_02",
	"p_film_set_static_01",
	"prop_bath_dirt_01",
	"prop_broom_unit_01",
	"prop_handdry_01",
	"prop_handdry_02",
	"prop_shower_01",
	"prop_shower_rack_01",
	"prop_sink_01",
	"prop_sink_02",
	"prop_sink_03",
	"prop_sink_04",
	"prop_sink_05",
	"prop_sink_06",
	"prop_soap_disp_01",
	"prop_soap_disp_02",
	"prop_sponge_01",
	"prop_toilet_01",
	"prop_toilet_02",
	"prop_toilet_03",
	"prop_toilet_brush_01",
	"prop_toilet_cube_01",
	"prop_toilet_cube_02",
	"prop_toilet_roll_01",
	"prop_toilet_roll_02",
	"prop_toilet_roll_03",
	"prop_toilet_roll_04",
	"prop_toilet_roll_05",
	"prop_toilet_shamp_01",
	"prop_toilet_shamp_02",
	"prop_toilet_soap_01",
	"prop_toilet_soap_02",
	"prop_toilet_soap_03",
	"prop_toilet_soap_04",
	"prop_toothbrush_01",
	"prop_toothb_cup_01",
	"prop_toothpaste_01",
	"prop_towel_01",
	"prop_towel_rail_01",
	"prop_towel_rail_02",
	"prop_towel_small_01",
	"prop_w_fountain_01",
	"prop_amp_01",
	"prop_cctv_02_sm",
	"prop_cctv_cont_01",
	"prop_cctv_cont_03",
	"prop_cctv_cont_04",
	"prop_cctv_cont_05",
	"prop_cctv_cont_06",
	"prop_cctv_unit_01",
	"prop_cctv_unit_02",
	"prop_cctv_unit_05",
	"prop_console_01",
	"prop_cs_dvd_player",
	"prop_cs_keyboard_01",
	"prop_cs_mouse_01",
	"prop_cs_tv_stand",
	"prop_dj_deck_01",
	"prop_dj_deck_02",
	"prop_flatscreen_overlay",
	"prop_ghettoblast_02",
	"prop_hifi_01",
	"prop_keyboard_01a",
	"prop_keyboard_01b",
	"prop_laptop_02_closed",
	"prop_laptop_jimmy",
	"prop_laptop_lester",
	"prop_laptop_lester2",
	"prop_michaels_credit_tv",
	"prop_monitor_01c",
	"prop_monitor_01d",
	"prop_monitor_02",
	"prop_monitor_03b",
	"prop_mouse_01",
	"prop_mouse_01a",
	"prop_mouse_01b",
	"prop_mouse_02",
	"prop_pc_01a",
	"prop_pc_02a",
	"prop_portable_hifi_01",
	"prop_projector_overlay",
	"prop_speaker_01",
	"prop_speaker_02",
	"prop_speaker_03",
	"prop_speaker_05",
	"prop_speaker_06",
	"prop_speaker_07",
	"prop_speaker_08",
	"prop_till_01_dam",
	"prop_till_02",
	"prop_till_03",
	"prop_trailer_monitor_01",
	"prop_trev_tv_01",
	"prop_tt_screenstatic",
	"prop_tv_02",
	"prop_tv_03_overlay",
	"prop_tv_04",
	"prop_tv_05",
	"prop_tv_06",
	"prop_tv_07",
	"prop_tv_cabinet_03",
	"prop_tv_cabinet_04",
	"prop_tv_cabinet_05",
	"prop_tv_flat_01",
	"prop_tv_flat_01_screen",
	"prop_tv_flat_02b",
	"prop_tv_flat_03",
	"prop_tv_flat_03b",
	"prop_tv_flat_michael",
	"prop_vcr_01",
	"prop_white_keyboard",
	"prop_bbq_2",
	"prop_bbq_3",
	"prop_beware_dog_sign",
	"prop_forsalejr2",
	"prop_forsalejr3",
	"prop_forsalejr4",
	"prop_fountain1",
	"prop_fountain2",
	"prop_garden_dreamcatch_01",
	"prop_garden_edging_01",
	"prop_garden_edging_02",
	"prop_garden_zapper_01",
	"prop_gardnght_01",
	"prop_gazebo_03",
	"prop_glf_roller",
	"prop_glf_spreader",
	"prop_gravestones_01a",
	"prop_gravestones_02a",
	"prop_gravestones_03a",
	"prop_gravestones_04a",
	"prop_gravestones_05a",
	"prop_gravestones_06a",
	"prop_gravestones_07a",
	"prop_gravestones_08a",
	"prop_gravestones_09a",
	"prop_gravestones_10a",
	"prop_gravetomb_01a",
	"prop_gravetomb_02a",
	"prop_hedge_trimmer_01",
	"prop_hose_1",
	"prop_hose_2",
	"prop_hose_3",
	"prop_hottub2",
	"prop_lawnmower_01",
	"prop_leaf_blower_01",
	"prop_letterbox_04",
	"prop_outdoor_fan_01",
	"prop_owl_totem_01",
	"prop_poolskimmer",
	"prop_prlg_gravestone_05a_l1",
	"prop_prlg_gravestone_06a",
	"prop_shrub_rake",
	"prop_sign_mallet",
	"prop_spray_backpack_01",
	"prop_sprink_crop_01",
	"prop_sprink_golf_01",
	"prop_sprink_park_01",
	"prop_stickbfly",
	"prop_stickhbird",
	"prop_wateringcan",
	"prop_windmill2",
	"test_prop_gravestones_04a",
	"test_prop_gravestones_05a",
	"test_prop_gravestones_07a",
	"test_prop_gravestones_08a",
	"test_prop_gravestones_09a",
	"test_prop_gravetomb_01a",
	"test_prop_gravetomb_02a",
	"prop_breadbin_01",
	"prop_cleaver",
	"prop_cooker_03",
	"prop_copper_pan",
	"prop_fridge_01",
	"prop_fridge_03",
	"prop_ind_washer_02",
	"prop_kettle",
	"prop_kettle_01",
	"prop_kitch_juicer",
	"prop_kitch_pot_fry",
	"prop_kitch_pot_huge",
	"prop_kitch_pot_lrg",
	"prop_kitch_pot_lrg2",
	"prop_kitch_pot_med",
	"prop_kitch_pot_sm",
	"prop_knife",
	"prop_knife_stand",
	"prop_ladel",
	"prop_metalfoodjar_01",
	"prop_micro_01",
	"prop_micro_02",
	"prop_micro_cs_01",
	"prop_micro_cs_01_door",
	"prop_plate_04",
	"prop_plate_warmer",
	"prop_pot_01",
	"prop_pot_02",
	"prop_pot_03",
	"prop_pot_04",
	"prop_pot_05",
	"prop_pot_06",
	"prop_pot_rack",
	"prop_steam_basket_01",
	"prop_steam_basket_02",
	"prop_tea_urn",
	"prop_toaster_01",
	"prop_toaster_02",
	"prop_utensil",
	"prop_washer_01",
	"prop_washer_02",
	"prop_washer_03",
	"prop_washing_basket_01",
	"prop_whisk",
	"prop_wok",
	"prop_armchair_01",
	"prop_couch_01",
	"prop_couch_03",
	"prop_couch_04",
	"prop_couch_lg_02",
	"prop_couch_lg_05",
	"prop_couch_lg_06",
	"prop_couch_lg_07",
	"prop_couch_lg_08",
	"prop_couch_sm1_07",
	"prop_couch_sm2_07",
	"prop_couch_sm_02",
	"prop_couch_sm_05",
	"prop_couch_sm_06",
	"prop_couch_sm_07",
	"prop_yaught_chair_01",
	"prop_yaught_sofa_01",
	"prop_bin_04a",
	"prop_bin_10a",
	"prop_bin_10b",
	"prop_bin_11a",
	"prop_bin_11b",
	"prop_bin_12a",
	"prop_bin_13a",
	"prop_bin_14a",
	"prop_bin_14b",
	"prop_bin_beach_01d",
	"prop_bin_delpiero",
	"prop_bin_delpiero_b",
	"prop_dumpster_3a",
	"prop_dumpster_3step",
	"prop_dumpster_4a",
	"prop_dumpster_4b",
	"prop_recyclebin_02a",
	"prop_recyclebin_02b",
	"prop_recyclebin_02_c",
	"prop_recyclebin_02_d",
	"prop_recyclebin_03_a",
	"prop_recyclebin_04_a",
	"prop_recyclebin_04_b",
	"prop_recyclebin_05_a",
	"prop_skip_01a",
	"prop_skip_02a",
	"prop_skip_03",
	"prop_skip_04",
	"prop_skip_05a",
	"prop_skip_05b",
	"prop_skip_06a",
	"prop_skip_08a",
	"prop_skip_08b",
	"prop_skip_10a",
	"prop_bandsaw_01",
	"prop_barier_conc_01b",
	"prop_barier_conc_01c",
	"prop_barier_conc_02b",
	"prop_barier_conc_02c",
	"prop_barier_conc_03a",
	"prop_barier_conc_04a",
	"prop_barier_conc_05a",
	"prop_barier_conc_05b",
	"prop_barriercrash_03",
	"prop_barriercrash_04",
	"prop_barrier_wat_01a",
	"prop_barrier_wat_03b",
	"prop_barrier_work01c",
	"prop_cablespool_01a",
	"prop_cablespool_01b",
	"prop_cablespool_02",
	"prop_cablespool_03",
	"prop_cablespool_04",
	"prop_cablespool_05",
	"prop_cablespool_06",
	"prop_cementmixer_01a",
	"prop_cementmixer_02a",
	"prop_conc_sacks_02a",
	"prop_conschute",
	"prop_consign_01c",
	"prop_consign_02a",
	"prop_conslift_base",
	"prop_conslift_brace",
	"prop_conslift_cage",
	"prop_conslift_door",
	"prop_conslift_lift",
	"prop_conslift_rail",
	"prop_conslift_rail2",
	"prop_conslift_steps",
	"prop_cons_crate",
	"prop_cons_plank",
	"prop_cons_ply01",
	"prop_cons_ply02",
	"prop_crosssaw_01",
	"prop_diggerbkt_01",
	"prop_drywallpile_01",
	"prop_drywallpile_02",
	"prop_ducktape_01",
	"prop_etricmotor_01",
	"prop_generator_02a",
	"prop_generator_03a",
	"prop_generator_04",
	"prop_girder_01a",
	"prop_logpile_05",
	"prop_logpile_06",
	"prop_logpile_06b",
	"prop_logpile_07",
	"prop_logpile_07b",
	"prop_log_01",
	"prop_log_02",
	"prop_log_03",
	"prop_medstation_02",
	"prop_medstation_03",
	"prop_medstation_04",
	"prop_metal_plates01",
	"prop_metal_plates02",
	"prop_oiltub_01",
	"prop_oiltub_02",
	"prop_oiltub_03",
	"prop_oiltub_05",
	"prop_oiltub_06",
	"prop_paints_can01",
	"prop_paints_can02",
	"prop_paints_can03",
	"prop_paints_can04",
	"prop_paints_can05",
	"prop_paints_can06",
	"prop_paints_can07",
	"prop_paint_brush01",
	"prop_paint_brush02",
	"prop_paint_brush03",
	"prop_paint_brush04",
	"prop_paint_brush05",
	"prop_paint_roller",
	"prop_paint_spray01a",
	"prop_paint_spray01b",
	"prop_paint_stepl01",
	"prop_paint_stepl01b",
	"prop_paint_stepl02",
	"prop_paint_tray",
	"prop_paint_wpaper01",
	"prop_partsbox_01",
	"prop_pile_dirt_01",
	"prop_pile_dirt_02",
	"prop_pile_dirt_03",
	"prop_pile_dirt_04",
	"prop_pile_dirt_06",
	"prop_pile_dirt_07",
	"prop_pipes_01a",
	"prop_pipes_01b",
	"prop_pipes_03b",
	"prop_pipes_04a",
	"prop_pipes_05a",
	"prop_pipes_conc_01",
	"prop_pipes_conc_02",
	"prop_planer_01",
	"prop_plas_barier_01a",
	"prop_plywoodpile_01a",
	"prop_plywoodpile_01b",
	"prop_rebar_pile01",
	"prop_roadcone01a",
	"prop_roadcone01b",
	"prop_roadcone01c",
	"prop_roadcone02a",
	"prop_roadcone02b",
	"prop_roadcone02c",
	"prop_roadheader_01",
	"prop_scafold_01a",
	"prop_scafold_01c",
	"prop_scafold_01f",
	"prop_scafold_02a",
	"prop_scafold_02c",
	"prop_scafold_03a",
	"prop_scafold_03b",
	"prop_scafold_03c",
	"prop_scafold_03f",
	"prop_scafold_04a",
	"prop_scafold_05a",
	"prop_scafold_06a",
	"prop_scafold_06b",
	"prop_scafold_06c",
	"prop_scafold_07a",
	"prop_scafold_08a",
	"prop_scafold_09a",
	"prop_scafold_frame1a",
	"prop_scafold_frame1b",
	"prop_scafold_frame1c",
	"prop_scafold_frame1f",
	"prop_scafold_frame2a",
	"prop_scafold_frame2b",
	"prop_scafold_frame2c",
	"prop_scafold_frame3a",
	"prop_scafold_frame3c",
	"prop_scafold_rail_01",
	"prop_scafold_rail_02",
	"prop_scafold_rail_03",
	"prop_scafold_xbrace",
	"prop_shuttering01",
	"prop_shuttering02",
	"prop_shuttering03",
	"prop_shuttering04",
	"prop_spraygun_01",
	"prop_staticmixer_01",
	"prop_steps_big_01",
	"prop_tablesaw_01",
	"prop_tool_adjspanner",
	"prop_tool_bench01",
	"prop_tool_bluepnt",
	"prop_tool_box_01",
	"prop_tool_box_02",
	"prop_tool_box_03",
	"prop_tool_box_04",
	"prop_tool_box_05",
	"prop_tool_box_06",
	"prop_tool_box_07",
	"prop_tool_broom",
	"prop_tool_broom2",
	"prop_tool_broom2_l1",
	"prop_tool_cable01",
	"prop_tool_cable02",
	"prop_tool_consaw",
	"prop_tool_drill",
	"prop_tool_fireaxe",
	"prop_tool_hammer",
	"prop_tool_hardhat",
	"prop_tool_jackham",
	"prop_tool_mallet",
	"prop_tool_mopbucket",
	"prop_tool_nailgun",
	"prop_tool_pickaxe",
	"prop_tool_pliers",
	"prop_tool_rake",
	"prop_tool_rake_l1",
	"prop_tool_sawhorse",
	"prop_tool_screwdvr01",
	"prop_tool_screwdvr02",
	"prop_tool_screwdvr03",
	"prop_tool_shovel",
	"prop_tool_shovel006",
	"prop_tool_shovel2",
	"prop_tool_shovel3",
	"prop_tool_shovel4",
	"prop_tool_shovel5",
	"prop_tool_sledgeham",
	"prop_tool_spanner01",
	"prop_tool_spanner02",
	"prop_tool_spanner03",
	"prop_tool_torch",
	"prop_tool_wrench",
	"prop_towercrane_01a",
	"prop_towercrane_02a",
	"prop_towercrane_02b",
	"prop_towercrane_02c",
	"prop_towercrane_02d",
	"prop_towercrane_02e",
	"prop_towercrane_02el",
	"prop_towercrane_02el2",
	"prop_tunnel_liner01",
	"prop_tunnel_liner02",
	"prop_tunnel_liner03",
	"prop_vertdrill_01",
	"prop_wheelbarrow01a",
	"prop_wheelbarrow02a",
	"prop_woodpile_02a",
	"prop_worklight_01a_l1",
	"prop_worklight_03a_l1",
	"prop_worklight_03b_l1",
	"prop_worklight_04a",
	"prop_worklight_04b_l1",
	"prop_worklight_04c_l1",
	"prop_worklight_04d_l1",
	"prop_workwall_01",
	"prop_workwall_02",
	"prop_armenian_gate",
	"prop_arm_gate_l",
	"prop_const_fence01a",
	"prop_const_fence01b",
	"prop_const_fence02a",
	"prop_const_fence02b",
	"prop_const_fence03b",
	"prop_facgate_01",
	"prop_facgate_01b",
	"prop_facgate_02pole",
	"prop_facgate_02_l",
	"prop_facgate_03post",
	"prop_facgate_03_l",
	"prop_facgate_03_ld_l",
	"prop_facgate_03_ld_r",
	"prop_facgate_03_r",
	"prop_facgate_04_l",
	"prop_facgate_04_r",
	"prop_facgate_05_r",
	"prop_facgate_05_r_dam_l1",
	"prop_facgate_05_r_l1",
	"prop_facgate_06_l",
	"prop_facgate_06_r",
	"prop_facgate_07",
	"prop_facgate_07b",
	"prop_facgate_08",
	"prop_facgate_08_frame",
	"prop_facgate_08_ld2",
	"prop_facgate_id1_27",
	"prop_fence_log_01",
	"prop_fence_log_02",
	"prop_fncconstruc_02a",
	"prop_fnclog_01a",
	"prop_fnclog_01b",
	"prop_fncpeir_03a",
	"prop_fncres_02a",
	"prop_fncres_02b",
	"prop_fncres_02c",
	"prop_fncres_02d",
	"prop_fncres_02_gate1",
	"prop_fncres_03gate1",
	"prop_fncres_05c_l1",
	"prop_fncsec_01a",
	"prop_fncsec_01b",
	"prop_fncsec_01crnr",
	"prop_fncsec_01gate",
	"prop_fncsec_01pole",
	"prop_fncsec_02a",
	"prop_fncsec_02pole",
	"prop_fncwood_07gate1",
	"prop_fncwood_11a_l1",
	"prop_fncwood_16a",
	"prop_fncwood_16b",
	"prop_fncwood_16c",
	"prop_fncwood_18a",
	"prop_gatecom_02",
	"prop_gate_airport_01",
	"prop_gate_cult_01_l",
	"prop_gate_cult_01_r",
	"prop_gate_docks_ld",
	"prop_gate_farm_01a",
	"prop_gate_farm_post",
	"prop_gate_frame_01",
	"prop_gate_frame_02",
	"prop_gate_frame_04",
	"prop_gate_frame_05",
	"prop_gate_frame_06",
	"prop_gate_military_01",
	"prop_gate_prison_01",
	"prop_gate_tep_01_l",
	"prop_gate_tep_01_r",
	"prop_ld_balcfnc_01a",
	"prop_ld_balcfnc_02a",
	"prop_ld_balcfnc_02c",
	"prop_lrggate_01c_l",
	"prop_lrggate_01c_r",
	"prop_lrggate_01_l",
	"prop_lrggate_01_pst",
	"prop_lrggate_01_r",
	"prop_lrggate_02_ld",
	"prop_lrggate_03a",
	"prop_lrggate_03b",
	"prop_lrggate_03b_ld",
	"prop_lrggate_04a",
	"prop_lrggate_05a",
	"prop_lrggate_06a",
	"prop_fnccorgm_05a",
	"prop_fnccorgm_05b",
	"prop_fnccorgm_06a",
	"prop_fnccorgm_06b",
	"prop_fnclink_01gate1",
	"prop_fnclink_02gate1",
	"prop_fnclink_02gate2",
	"prop_fnclink_02gate5",
	"prop_fnclink_02gate6_l",
	"prop_fnclink_02gate6_r",
	"prop_fnclink_02gate7",
	"prop_fnclink_03gate1",
	"prop_fnclink_03gate2",
	"prop_fnclink_03gate4",
	"prop_fnclink_03gate5",
	"prop_fnclink_04gate1",
	"prop_fnclink_04h_l2",
	"prop_fnclink_06gate2",
	"prop_fnclink_06gate3",
	"prop_fnclink_06gatepost",
	"prop_fnclink_07gate1",
	"prop_fnclink_07gate2",
	"prop_fnclink_07gate3",
	"prop_fnclink_09gate1",
	"prop_fnclink_10a",
	"prop_fnclink_10b",
	"prop_fnclink_10c",
	"prop_fnclink_10d",
	"prop_fnclink_10e",
	"prop_fncsec_04a",
	"prop_gate_bridge_ld",
	"prop_hobo_stove_01",
	"prop_homeless_matress_01",
	"prop_homeless_matress_02",
	"prop_pizza_box_01",
	"prop_pizza_box_02",
	"prop_rub_bike_01",
	"prop_rub_bike_02",
	"prop_rub_bike_03",
	"prop_rub_busdoor_01",
	"prop_rub_busdoor_02",
	"prop_rub_buswreck_01",
	"prop_rub_buswreck_03",
	"prop_rub_buswreck_06",
	"prop_rub_cabinet",
	"prop_rub_cabinet01",
	"prop_rub_cabinet02",
	"prop_rub_cabinet03",
	"prop_rub_cage01a",
	"prop_rub_carpart_02",
	"prop_rub_carpart_03",
	"prop_rub_carpart_04",
	"prop_rub_chassis_01",
	"prop_rub_chassis_02",
	"prop_rub_chassis_03",
	"prop_rub_cont_01a",
	"prop_rub_cont_01b",
	"prop_rub_cont_01c",
	"prop_rub_flotsam_01",
	"prop_rub_flotsam_02",
	"prop_rub_flotsam_03",
	"prop_rub_frklft",
	"prop_rub_litter_01",
	"prop_rub_litter_02",
	"prop_rub_litter_03",
	"prop_rub_litter_03b",
	"prop_rub_litter_03c",
	"prop_rub_litter_04",
	"prop_rub_litter_04b",
	"prop_rub_litter_05",
	"prop_rub_litter_06",
	"prop_rub_litter_07",
	"prop_rub_litter_09",
	"prop_rub_litter_8",
	"prop_rub_matress_01",
	"prop_rub_matress_02",
	"prop_rub_matress_03",
	"prop_rub_matress_04",
	"prop_rub_monitor",
	"prop_rub_pile_01",
	"prop_rub_pile_02",
	"prop_rub_planks_01",
	"prop_rub_planks_02",
	"prop_rub_planks_03",
	"prop_rub_planks_04",
	"prop_rub_railwreck_1",
	"prop_rub_railwreck_2",
	"prop_rub_railwreck_3",
	"prop_rub_scrap_02",
	"prop_rub_scrap_03",
	"prop_rub_scrap_04",
	"prop_rub_scrap_05",
	"prop_rub_scrap_06",
	"prop_rub_scrap_07",
	"prop_rub_stool",
	"prop_rub_sunktyre",
	"prop_rub_t34",
	"prop_rub_trainers_01",
	"prop_rub_trolley01a",
	"prop_rub_trolley02a",
	"prop_rub_trolley03a",
	"prop_rub_trukwreck_1",
	"prop_rub_trukwreck_2",
	"prop_rub_tyre_01",
	"prop_rub_tyre_02",
	"prop_rub_tyre_03",
	"prop_rub_tyre_dam1",
	"prop_rub_tyre_dam2",
	"prop_rub_tyre_dam3",
	"prop_rub_washer_01",
	"prop_rub_wheel_01",
	"prop_rub_wheel_02",
	"prop_rub_wreckage_3",
	"prop_rub_wreckage_4",
	"prop_rub_wreckage_5",
	"prop_rub_wreckage_6",
	"prop_rub_wreckage_7",
	"prop_rub_wreckage_8",
	"prop_rub_wreckage_9",
	"prop_skid_chair_01",
	"prop_skid_chair_02",
	"prop_skid_chair_03",
	"prop_skid_sleepbag_1",
	"prop_skid_tent_01",
	"prop_skid_tent_01b",
	"prop_skid_tent_03",
	"prop_still",
	"prop_bench_01b",
	"prop_bench_01c",
	"prop_bench_04",
	"prop_bench_05",
	"prop_bench_09",
	"prop_chair_01a",
	"prop_chair_01b",
	"prop_chair_02",
	"prop_chair_03",
	"prop_chair_04a",
	"prop_chair_04b",
	"prop_chair_05",
	"prop_chair_06",
	"prop_chair_07",
	"prop_chair_08",
	"prop_chair_09",
	"prop_chair_10",
	"prop_chair_pile_01",
	"prop_chateau_chair_01",
	"prop_clown_chair",
	"prop_old_deck_chair",
	"prop_old_deck_chair_02",
	"prop_old_wood_chair",
	"prop_old_wood_chair_lod",
	"prop_parasol_01",
	"prop_parasol_01_b",
	"prop_parasol_01_c",
	"prop_parasol_01_down",
	"prop_parasol_02",
	"prop_parasol_02_b",
	"prop_parasol_02_c",
	"prop_parasol_03",
	"prop_parasol_03_b",
	"prop_parasol_03_c",
	"prop_parasol_04e",
	"prop_parasol_04e_lod1",
	"prop_parasol_bh_48",
	"prop_patio_heater_01",
	"prop_patio_lounger1",
	"prop_patio_lounger1b",
	"prop_patio_lounger1_table",
	"prop_patio_lounger_2",
	"prop_patio_lounger_3",
	"prop_picnictable_02",
	"prop_proxy_chateau_table",
	"prop_stool_01",
	"prop_table_02",
	"prop_table_03b_cs",
	"prop_table_04",
	"prop_table_04_chr",
	"prop_table_05",
	"prop_table_05_chr",
	"prop_table_06",
	"prop_table_06_chr",
	"prop_table_07",
	"prop_table_07_l1",
	"prop_table_08",
	"prop_table_08_chr",
	"prop_table_08_side",
	"prop_table_para_comb_04",
	"prop_umpire_01",
	"prop_afsign_amun",
	"prop_afsign_vbike",
	"prop_beer_neon_01",
	"prop_beer_neon_02",
	"prop_beer_neon_03",
	"prop_beer_neon_04",
	"prop_billboard_01",
	"prop_billboard_02",
	"prop_billboard_03",
	"prop_billboard_04",
	"prop_billboard_05",
	"prop_billboard_06",
	"prop_billboard_07",
	"prop_billboard_08",
	"prop_billboard_09",
	"prop_billboard_09wall",
	"prop_billboard_10",
	"prop_billboard_11",
	"prop_billboard_12",
	"prop_billboard_13",
	"prop_billboard_14",
	"prop_billboard_15",
	"prop_billboard_16",
	"prop_gas_01",
	"prop_gas_02",
	"prop_gas_03",
	"prop_gas_04",
	"prop_gas_05",
	"prop_pharm_sign_01",
	"prop_sign_airp_01a",
	"prop_sign_airp_02a",
	"prop_sign_airp_02b",
	"prop_sign_big_01",
	"prop_sign_road_04g_l1",
	"prop_barrel_01a",
	"prop_barrel_02a",
	"prop_barrel_02b",
	"prop_barrel_03a",
	"prop_barrel_03d",
	"prop_boxpile_10a",
	"prop_boxpile_10b",
	"prop_box_ammo01a",
	"prop_box_ammo02a",
	"prop_box_ammo03a_set",
	"prop_box_ammo03a_set2",
	"prop_box_ammo04a",
	"prop_box_ammo05b",
	"prop_box_ammo07a",
	"prop_box_ammo07b",
	"prop_box_guncase_01a",
	"prop_box_guncase_02a",
	"prop_box_guncase_03a",
	"prop_box_tea01a",
	"prop_box_wood05a",
	"prop_box_wood05b",
	"prop_box_wood08a",
	"prop_buckets_02",
	"prop_bucket_01a",
	"prop_bucket_01b",
	"prop_bucket_02a",
	"prop_cntrdoor_ld_l",
	"prop_cntrdoor_ld_r",
	"prop_container_01a",
	"prop_container_01b",
	"prop_container_01c",
	"prop_container_01d",
	"prop_container_01e",
	"prop_container_01f",
	"prop_container_01g",
	"prop_container_01h",
	"prop_container_01mb",
	"prop_container_02a",
	"prop_container_03a",
	"prop_container_03b",
	"prop_container_03mb",
	"prop_container_03_ld",
	"prop_container_04a",
	"prop_container_04mb",
	"prop_container_05mb",
	"prop_container_door_mb_l",
	"prop_container_door_mb_r",
	"prop_container_ld",
	"prop_container_ld2",
	"prop_container_old1",
	"prop_contnr_pile_01a",
	"prop_cratepile_07a_l1",
	"prop_crate_01a",
	"prop_crate_02a",
	"prop_crate_08a",
	"prop_crate_09a",
	"prop_crate_10a",
	"prop_crate_11a",
	"prop_crate_11b",
	"prop_crate_11c",
	"prop_crate_11d",
	"prop_dog_cage_01",
	"prop_dog_cage_02",
	"prop_drop_crate_01",
	"prop_drop_crate_01_set",
	"prop_drop_crate_01_set2",
	"prop_flattrailer_01a",
	"prop_flattruck_01a",
	"prop_fruitstand_b_nite",
	"prop_gascage01",
	"prop_keg_01",
	"prop_mb_crate_01a_set",
	"prop_pallettruck_01",
	"prop_sacktruck_01",
	"prop_sacktruck_02a",
	"prop_shelves_01",
	"prop_shelves_02",
	"prop_shelves_03",
	"prop_truktrailer_01a",
	"prop_warehseshelf01",
	"prop_warehseshelf02",
	"prop_warehseshelf03",
	"prop_watercrate_01",
	"prop_chall_lamp_01",
	"prop_chall_lamp_01n",
	"prop_chall_lamp_02",
	"prop_construcionlamp_01",
	"prop_dt1_13_groundlight",
	"prop_dt1_13_walllightsource",
	"prop_ind_light_01a",
	"prop_ind_light_01b",
	"prop_ind_light_01c",
	"prop_securityvan_lightrig",
	"prop_traffic_rail_1c",
	"prop_traffic_rail_2",
	"prop_walllight_ld_01b",
	"prop_wall_light_08a",
	"prop_wall_light_10a",
	"prop_wall_light_10b",
	"prop_wall_light_10c",
	"prop_wall_light_11",
	"prop_wall_light_12",
	"prop_wall_light_17b",
	"prop_wall_light_18a",
	"prop_warninglight_01",
	"prop_atm_02",
	"prop_atm_03",
	"prop_bikerack_2",
	"prop_bollard_01a",
	"prop_bollard_01b",
	"prop_bollard_01c",
	"prop_bollard_03a",
	"prop_elecbox_03a",
	"prop_elecbox_10",
	"prop_elecbox_12",
	"prop_elecbox_13",
	"prop_elecbox_14",
	"prop_elecbox_15",
	"prop_elecbox_16",
	"prop_elecbox_17",
	"prop_elecbox_18",
	"prop_elecbox_19",
	"prop_elecbox_20",
	"prop_elecbox_21",
	"prop_elecbox_22",
	"prop_elecbox_23",
	"prop_elecbox_24",
	"prop_elecbox_24b",
	"prop_elecbox_25",
	"prop_fire_driser_1a",
	"prop_fire_driser_1b",
	"prop_fire_driser_2b",
	"prop_fire_driser_3b",
	"prop_fire_driser_4a",
	"prop_fire_driser_4b",
	"prop_fire_hosereel",
	"prop_fleeca_atm",
	"prop_gshotsensor_01",
	"prop_mobile_mast_1",
	"prop_mobile_mast_2",
	"prop_parking_sign_06",
	"prop_parking_sign_07",
	"prop_parking_sign_1",
	"prop_parking_sign_2",
	"prop_phonebox_05a",
	"prop_telegraph_01a",
	"prop_telegraph_01b",
	"prop_telegraph_01c",
	"prop_telegraph_01d",
	"prop_telegraph_01e",
	"prop_telegraph_01f",
	"prop_telegraph_01g",
	"prop_telegraph_02a",
	"prop_telegraph_02b",
	"prop_telegraph_03",
	"prop_telegraph_04a",
	"prop_telegraph_04b",
	"prop_telegraph_05a",
	"prop_telegraph_05b",
	"prop_telegraph_05c",
	"prop_telegraph_06a",
	"prop_telegraph_06b",
	"prop_telegraph_06c",
	"prop_telegwall_01a",
	"prop_telegwall_01b",
	"prop_telegwall_02a",
	"prop_telegwall_03a",
	"prop_telegwall_03b",
	"prop_telegwall_04a",
	"prop_tram_pole_double01",
	"prop_tram_pole_double02",
	"prop_tram_pole_double03",
	"prop_tram_pole_roadside",
	"prop_tram_pole_single01",
	"prop_tram_pole_single02",
	"prop_tram_pole_wide01",
	"prop_tyre_rack_01",
	"prop_valet_03",
	"prop_cartwheel_01",
	"prop_cattlecrush",
	"prop_chickencoop_a",
	"prop_feeder1",
	"prop_grain_hopper",
	"prop_handrake",
	"prop_haybailer_01",
	"prop_haybale_01",
	"prop_haybale_02",
	"prop_haybale_stack_01",
	"prop_hunterhide",
	"prop_oldplough1",
	"prop_old_churn_01",
	"prop_old_churn_02",
	"prop_old_farm_01",
	"prop_old_farm_02",
	"prop_potatodigger",
	"prop_roundbailer01",
	"prop_roundbailer02",
	"prop_rural_windmill_l1",
	"prop_rural_windmill_l2",
	"prop_scythemower",
	"prop_side_spreader",
	"prop_snow_bailer_01",
	"prop_snow_barrel_pile_03",
	"prop_snow_bench_01",
	"prop_snow_bin_01",
	"prop_snow_bin_02",
	"prop_snow_cam_03",
	"prop_snow_cam_03a",
	"prop_snow_diggerbkt_01",
	"prop_snow_dumpster_01",
	"prop_snow_elecbox_16",
	"prop_snow_facgate_01",
	"prop_snow_flower_01",
	"prop_snow_flower_02",
	"prop_snow_fnclink_03crnr2",
	"prop_snow_fnclink_03h",
	"prop_snow_fnclink_03i",
	"prop_snow_fncwood_14a",
	"prop_snow_fncwood_14b",
	"prop_snow_fncwood_14c",
	"prop_snow_fncwood_14d",
	"prop_snow_fncwood_14e",
	"prop_snow_fnc_01",
	"prop_snow_gate_farm_03",
	"prop_snow_grain_01",
	"prop_snow_light_01",
	"prop_snow_oldlight_01b",
	"prop_snow_rail_signals02",
	"prop_snow_rub_trukwreck_2",
	"prop_snow_side_spreader_01",
	"prop_snow_streetlight01",
	"prop_snow_streetlight_01_frag_",
	"prop_snow_sub_frame_01a",
	"prop_snow_sub_frame_04b",
	"prop_snow_telegraph_01a",
	"prop_snow_telegraph_02a",
	"prop_snow_telegraph_03",
	"prop_snow_traffic_rail_1a",
	"prop_snow_traffic_rail_1b",
	"prop_snow_trailer01",
	"prop_snow_truktrailer_01a",
	"prop_snow_tyre_01",
	"prop_snow_wall_light_15a",
	"prop_snow_watertower01",
	"prop_snow_watertower01_l2",
	"prop_snow_watertower03",
	"prop_snow_woodpile_04a",
	"prop_sprayer",
	"prop_trailer01",
	"prop_trailer01_up",
	"prop_trough1",
	"prop_waterwheela",
	"prop_waterwheelb",
	"prop_wreckedcart",
	"prop_am_box_wood_01",
	"prop_bush_ivy_01_1m",
	"prop_bush_ivy_01_2m",
	"prop_bush_ivy_01_bk",
	"prop_bush_ivy_01_l",
	"prop_bush_ivy_01_pot",
	"prop_bush_ivy_01_r",
	"prop_bush_ivy_01_top",
	"prop_bush_ivy_02_1m",
	"prop_bush_ivy_02_2m",
	"prop_bush_ivy_02_l",
	"prop_bush_ivy_02_pot",
	"prop_bush_ivy_02_r",
	"prop_bush_ivy_02_top",
	"prop_bush_lrg_01",
	"prop_bush_lrg_01b",
	"prop_bush_lrg_01c",
	"prop_bush_lrg_01d",
	"prop_bush_lrg_01e",
	"prop_bush_lrg_02",
	"prop_bush_lrg_02b",
	"prop_bush_lrg_03",
	"prop_bush_lrg_03b",
	"prop_bush_lrg_04b",
	"prop_bush_lrg_04c",
	"prop_bush_lrg_04d",
	"prop_bush_med_01",
	"prop_bush_med_02",
	"prop_bush_med_03",
	"prop_bush_med_05",
	"prop_bush_med_06",
	"prop_bush_med_07",
	"prop_bush_neat_01",
	"prop_bush_neat_02",
	"prop_bush_neat_03",
	"prop_bush_neat_04",
	"prop_bush_neat_05",
	"prop_bush_neat_06",
	"prop_bush_neat_07",
	"prop_bush_neat_08",
	"prop_bush_ornament_01",
	"prop_bush_ornament_02",
	"prop_bush_ornament_03",
	"prop_bush_ornament_04",
	"prop_creosote_b_01",
	"prop_desert_iron_01",
	"prop_plant_group_01",
	"prop_plant_group_02",
	"prop_plant_group_03",
	"prop_plant_group_04",
	"prop_plant_group_05",
	"prop_plant_group_05b",
	"prop_plant_group_05c",
	"prop_plant_group_05d",
	"prop_plant_group_06a",
	"prop_plant_group_06b",
	"prop_plant_group_06c",
	"prop_skunk_bush_01",
	"prop_bush_grape_01",
	"prop_coral_bush_01",
	"prop_coral_flat_01",
	"prop_coral_flat_01_l1",
	"prop_coral_flat_02",
	"prop_coral_flat_brainy",
	"prop_coral_flat_clam",
	"prop_coral_grass_01",
	"prop_coral_grass_02",
	"prop_coral_kelp_01",
	"prop_coral_kelp_01_l1",
	"prop_coral_kelp_02",
	"prop_coral_kelp_02_l1",
	"prop_coral_kelp_03",
	"prop_coral_kelp_03a",
	"prop_coral_kelp_03b",
	"prop_coral_kelp_03c",
	"prop_coral_kelp_03d",
	"prop_coral_kelp_03_l1",
	"prop_coral_kelp_04",
	"prop_coral_kelp_04_l1",
	"prop_coral_pillar_01",
	"prop_coral_pillar_02",
	"prop_coral_spikey_01",
	"prop_coral_stone_03",
	"prop_coral_stone_04",
	"prop_coral_sweed_01",
	"prop_coral_sweed_02",
	"prop_coral_sweed_03",
	"prop_coral_sweed_04",
	"prop_cora_clam_01",
	"prop_tree_birch_05",
	"prop_veg_corn_01",
	"prop_veg_crop_01",
	"prop_veg_crop_02",
	"prop_veg_crop_04",
	"prop_veg_crop_04_leaf",
	"prop_veg_crop_05",
	"prop_veg_crop_06",
	"prop_veg_crop_orange",
	"prop_veg_crop_tr_01",
	"prop_veg_crop_tr_02",
	"prop_agave_01",
	"prop_agave_02",
	"prop_aloevera_01",
	"prop_bush_dead_02",
	"prop_cat_tail_01",
	"prop_cs_plant_01",
	"prop_grass_dry_02",
	"prop_grass_dry_03",
	"prop_plant_01a",
	"prop_plant_01b",
	"prop_plant_base_01",
	"prop_plant_base_02",
	"prop_plant_base_03",
	"prop_plant_cane_01a",
	"prop_plant_cane_01b",
	"prop_plant_cane_02a",
	"prop_plant_cane_02b",
	"prop_plant_clover_01",
	"prop_plant_clover_02",
	"prop_plant_fern_01a",
	"prop_plant_fern_01b",
	"prop_plant_fern_02a",
	"prop_plant_fern_02b",
	"prop_plant_fern_02c",
	"prop_plant_flower_01",
	"prop_plant_flower_02",
	"prop_plant_flower_03",
	"prop_plant_flower_04",
	"prop_plant_paradise",
	"prop_plant_paradise_b",
	"prop_p_spider_01a",
	"prop_p_spider_01c",
	"prop_p_spider_01d",
	"prop_veg_grass_01_a",
	"prop_veg_grass_01_b",
	"prop_veg_grass_01_c",
	"prop_veg_grass_01_d",
	"prop_veg_grass_02_a",
	"prop_fan_palm_01a",
	"prop_palm_fan_02_a",
	"prop_palm_fan_02_b",
	"prop_palm_fan_03_a",
	"prop_palm_fan_03_b",
	"prop_palm_fan_03_c",
	"prop_palm_fan_03_d",
	"prop_palm_fan_04_a",
	"prop_palm_fan_04_b",
	"prop_palm_fan_04_c",
	"prop_palm_fan_04_d",
	"prop_palm_huge_01a",
	"prop_palm_huge_01b",
	"prop_palm_med_01a",
	"prop_palm_med_01b",
	"prop_palm_med_01c",
	"prop_palm_med_01d",
	"prop_palm_sm_01a",
	"prop_palm_sm_01d",
	"prop_palm_sm_01e",
	"prop_palm_sm_01f",
	"prop_plant_int_02a",
	"prop_plant_int_02b",
	"prop_plant_int_05a",
	"prop_plant_int_05b",
	"prop_plant_int_06a",
	"prop_plant_int_06b",
	"prop_plant_int_06c",
	"prop_pot_plant_02a",
	"prop_pot_plant_02b",
	"prop_pot_plant_02c",
	"prop_pot_plant_02d",
	"prop_pot_plant_03a",
	"prop_pot_plant_04a",
	"prop_pot_plant_05d_l1",
	"prop_pot_plant_bh1",
	"prop_rock_1_a",
	"prop_rock_1_b",
	"prop_rock_1_c",
	"prop_rock_1_d",
	"prop_rock_1_e",
	"prop_rock_1_f",
	"prop_rock_1_g",
	"prop_rock_1_h",
	"prop_rock_1_i",
	"prop_rock_2_a",
	"prop_rock_2_c",
	"prop_rock_2_d",
	"prop_rock_2_f",
	"prop_rock_2_g",
	"prop_rock_3_a",
	"prop_rock_3_b",
	"prop_rock_3_c",
	"prop_rock_3_d",
	"prop_rock_3_e",
	"prop_rock_3_f",
	"prop_rock_3_g",
	"prop_rock_3_h",
	"prop_rock_3_i",
	"prop_rock_3_j",
	"prop_rock_4_c",
	"prop_rock_4_d",
	"rock_4_cl_2_1",
	"rock_4_cl_2_2",
	"prop_snow_bush_01_a",
	"prop_snow_bush_02_a",
	"prop_snow_bush_02_b",
	"prop_snow_bush_03",
	"prop_snow_bush_04",
	"prop_snow_bush_04b",
	"prop_snow_field_01",
	"prop_snow_field_02",
	"prop_snow_field_03",
	"prop_snow_field_04",
	"prop_snow_grass_01",
	"prop_snow_tree_03_e",
	"prop_snow_tree_03_h",
	"prop_snow_tree_03_i",
	"prop_snow_tree_04_d",
	"prop_snow_tree_04_f",
	"prop_snow_t_ml_01",
	"prop_snow_t_ml_02",
	"prop_snow_t_ml_03",
	"prop_rio_del_01",
	"prop_rus_olive",
	"prop_rus_olive_wint",
	"prop_s_pine_dead_01",
	"prop_tree_birch_01",
	"prop_tree_birch_02",
	"prop_tree_birch_03",
	"prop_tree_birch_03b",
	"prop_tree_birch_04",
	"prop_tree_cedar_02",
	"prop_tree_cedar_03",
	"prop_tree_cedar_04",
	"prop_tree_cedar_s_01",
	"prop_tree_cedar_s_02",
	"prop_tree_cedar_s_04",
	"prop_tree_cedar_s_05",
	"prop_tree_cedar_s_06",
	"prop_tree_cypress_01",
	"prop_tree_eng_oak_01",
	"prop_tree_eucalip_01",
	"prop_tree_fallen_01",
	"prop_tree_fallen_02",
	"prop_tree_fallen_pine_01",
	"prop_tree_jacada_01",
	"prop_tree_jacada_02",
	"prop_tree_lficus_02",
	"prop_tree_lficus_03",
	"prop_tree_lficus_05",
	"prop_tree_lficus_06",
	"prop_tree_log_01",
	"prop_tree_log_02",
	"prop_tree_maple_02",
	"prop_tree_maple_03",
	"prop_tree_mquite_01",
	"prop_tree_oak_01",
	"prop_tree_olive_01",
	"prop_tree_pine_01",
	"prop_tree_pine_02",
	"prop_tree_stump_01",
	"prop_w_r_cedar_01",
	"prop_w_r_cedar_dead",
	"w_am_baseball",
	"w_am_baseball_hi",
	"w_am_brfcase",
	"w_am_case",
	"w_am_digiscanner",
	"w_am_digiscanner_hi",
	"w_am_fire_exting",
	"w_am_flare",
	"w_am_flare_hi",
	"w_am_jerrycan",
	"w_ar_advancedrifle",
	"w_ar_advancedrifle_hi",
	"w_ar_advancedrifle_mag1",
	"w_ar_advancedrifle_mag2",
	"w_ar_assaultrifle",
	"w_ar_assaultrifle_hi",
	"w_ar_assaultrifle_mag1",
	"w_ar_assaultrifle_mag2",
	"w_ar_carbinerifle",
	"w_ar_carbinerifle_hi",
	"w_ar_carbinerifle_mag1",
	"w_ar_carbinerifle_mag2",
	"w_at_ar_afgrip",
	"w_at_ar_afgrip_hi",
	"w_at_ar_flsh",
	"w_at_ar_flsh_hi",
	"w_at_ar_supp",
	"w_at_ar_supp_02",
	"w_at_ar_supp_02_hi",
	"w_at_ar_supp_hi",
	"w_at_pi_flsh",
	"w_at_pi_flsh_hi",
	"w_at_pi_supp",
	"w_at_pi_supp_hi",
	"w_at_railcover_01",
	"w_at_railcover_01_hi",
	"w_at_scope_large",
	"w_at_scope_large_hi",
	"w_at_scope_macro",
	"w_at_scope_macro_hi",
	"w_at_scope_max",
	"w_at_scope_max_hi",
	"w_at_scope_medium",
	"w_at_scope_medium_hi",
	"w_at_scope_small",
	"w_at_scope_small_hi",
	"w_at_sr_supp",
	"w_at_sr_supp_hi",
	"w_ex_grenadefrag",
	"w_ex_grenadefrag_hi",
	"w_ex_grenadesmoke",
	"w_ex_molotov",
	"w_ex_molotov_hi",
	"w_ex_pe",
	"w_ex_pe_hi",
	"w_lr_40mm",
	"w_lr_40mm_pu",
	"w_lr_grenadelauncher",
	"w_lr_grenadelauncher_hi",
	"w_lr_rpg",
	"w_lr_rpg_hi",
	"w_lr_rpg_rocket",
	"w_lr_rpg_rocket_pu",
	"w_me_bat",
	"w_me_crowbar",
	"w_me_gclub",
	"w_me_hammer",
	"w_me_knife_01",
	"w_me_nightstick",
	"w_mg_combatmg",
	"w_mg_combatmg_hi",
	"w_mg_combatmg_mag1",
	"w_mg_combatmg_mag2",
	"w_mg_mg",
	"w_mg_mg_hi",
	"w_mg_mg_mag1",
	"w_mg_mg_mag2",
	"w_mg_minigun",
	"w_mg_minigun_hi",
	"w_pi_appistol",
	"w_pi_appistol_hi",
	"w_pi_appistol_mag1",
	"w_pi_appistol_mag2",
	"w_pi_combatpistol",
	"w_pi_combatpistol_hi",
	"w_pi_combatpistol_mag1",
	"w_pi_combatpistol_mag2",
	"w_pi_pistol",
	"w_pi_pistol50",
	"w_pi_pistol50_hi",
	"w_pi_pistol50_mag1",
	"w_pi_pistol50_mag2",
	"w_pi_pistol_hi",
	"w_pi_pistol_mag1",
	"w_pi_pistol_mag2",
	"w_pi_stungun",
	"w_pi_stungun_hi",
	"w_sb_assaultsmg",
	"w_sb_assaultsmg_hi",
	"w_sb_assaultsmg_mag1",
	"w_sb_assaultsmg_mag2",
	"w_sb_microsmg",
	"w_sb_microsmg_hi",
	"w_sb_microsmg_mag1",
	"w_sb_microsmg_mag2",
	"w_sb_smg",
	"w_sb_smg_hi",
	"w_sb_smg_mag1",
	"w_sb_smg_mag2",
	"w_sg_assaultshotgun",
	"w_sg_assaultshotgun_hi",
	"w_sg_assaultshotgun_mag1",
	"w_sg_assaultshotgun_mag2",
	"w_sg_bullpupshotgun",
	"w_sg_bullpupshotgun_hi",
	"w_sg_pumpshotgun",
	"w_sg_pumpshotgun_hi",
	"w_sg_sawnoff",
	"w_sg_sawnoff_hi",
	"w_sr_heavysniper",
	"w_sr_heavysniper_hi",
	"w_sr_heavysniper_mag1",
	"w_sr_sniperrifle",
	"w_sr_sniperrifle_hi",
	"w_sr_sniperrifle_mag1",
};
int propListPossd = 0;
std::vector<char*> propListt = {
	{
		"stt_prop_stunt_tube_crn_15d",
	}
};

int propListPos = 0;
std::vector<char*> propList = {
	{
		"prop_mp_ramp_03",
		"prop_a4_pile_01",
		"prop_a4_sheet_01",
		"prop_abat_roller_static",
		"prop_abat_slide",
		"prop_acc_guitar_01",
		"prop_aerial_01a",
		"prop_afsign_amun",
		"prop_afsign_vbike",
		"prop_agave_01",
		"prop_aiprort_sign_01",
		"prop_aircon_l_01",
		"prop_aircon_m_09",
		"prop_aircon_s_01a",
		"prop_aircon_s_02a",
		"prop_airhockey_01",
		"prop_air_bagloader",
		"prop_air_bagloader2",
		"prop_air_barrier",
		"prop_air_bench_01",
		"prop_air_bench_02",
		"prop_air_bigradar_l1",
		"prop_air_bigradar_slod",
		"prop_air_blastfence_01",
		"prop_air_blastfence_02",
		"prop_air_bridge01",
		"prop_air_bridge02",
		"prop_air_cargoloader_01",
		"prop_air_cargo_01a",
		"prop_air_cargo_01b",
		"prop_air_chock_01",
		"prop_air_fueltrail1",
		"prop_air_fueltrail2",
		"prop_air_gasbogey_01",
		"prop_air_generator_01",
		"prop_air_generator_03",
		"prop_air_hoc_paddle_01",
		"prop_air_hoc_paddle_02",
		"prop_air_lights_01a",
		"prop_air_lights_01b",
		"prop_air_lights_03a",
		"prop_air_luggtrolley",
		"prop_air_mast_01",
		"prop_air_mast_02",
		"prop_air_monhut_01",
		"prop_air_monhut_02",
		"prop_air_monhut_03",
		"prop_air_propeller01",
		"prop_air_radar_01",
		"prop_air_stair_01",
		"prop_air_towbar_01",
		"prop_air_towbar_02",
		"prop_air_towbar_03",
		"prop_air_trailer_4a",
		"prop_air_trailer_4b",
		"prop_air_trailer_4c",
		"prop_air_watertank1",
		"prop_air_watertank2",
		"prop_air_windsock_base",
		"prop_air_woodsteps",
		"prop_alarm_01",
		"prop_alarm_02",
		"prop_alien_egg_01",
		"prop_aloevera_01",
		"prop_amanda_note_01",
		"prop_amanda_note_01b",
		"prop_amb_40oz_02",
		"prop_amb_40oz_03",
		"prop_amb_beer_bottle",
		"prop_amb_ciggy_01",
		"prop_amb_donut",
		"prop_amb_handbag_01",
		"prop_amb_phone",
		"prop_amp_01",
		"prop_am_box_wood_01",
		"prop_anim_cash_note",
		"prop_anim_cash_note_b",
		"prop_anim_cash_pile_01",
		"prop_anim_cash_pile_02",
		"prop_apple_box_01",
		"prop_apple_box_02",
		"prop_arcade_01",
		"prop_arcade_02",
		"prop_arc_blueprints_01",
		"prop_armchair_01",
		"prop_armenian_gate",
		"prop_armour_pickup",
		"prop_arm_gate_l",
		"prop_arm_wrestle_01",
		"prop_artgallery_02_dl",
		"prop_artgallery_02_dr",
		"prop_artgallery_dl",
		"prop_artgallery_dr",
		"prop_artifact_01",
		"prop_ashtray_01",
		"prop_asteroid_01",
		"prop_atm_02",
		"prop_atm_03",
		"prop_attache_case_01",
		"prop_aviators_01",
		"prop_a_base_bars_01",
		"prop_a_trailer_door_01",
		"prop_bahammenu",
		"prop_ballistic_shield",
		"prop_ballistic_shield_lod1",
		"prop_bandsaw_01",
		"prop_bank_shutter",
		"prop_bank_vaultdoor",
		"prop_barn_door_l",
		"prop_barn_door_r",
		"prop_barrachneon",
		"prop_barrel_01a",
		"prop_barrel_02a",
		"prop_barrel_02b",
		"prop_barrel_03a",
		"prop_barrel_03d",
		"prop_barrel_float_1",
		"prop_barrel_float_2",
		"prop_barriercrash_03",
		"prop_barriercrash_04",
		"prop_barrier_wat_01a",
		"prop_barrier_wat_03b",
		"prop_barrier_work01c",
		"prop_barry_table_detail",
		"prop_bar_coastbarr",
		"prop_bar_coastchamp",
		"prop_bar_coastdusc",
		"prop_bar_coastmount",
		"prop_bar_cooler_01",
		"prop_bar_cooler_03",
		"prop_bar_fridge_01",
		"prop_bar_fridge_02",
		"prop_bar_fridge_03",
		"prop_bar_fridge_04",
		"prop_bar_ice_01",
		"prop_bar_napkindisp",
		"prop_bar_pump_01",
		"prop_bar_pump_04",
		"prop_bar_pump_05",
		"prop_bar_pump_10",
		"prop_bar_sink_01",
		"prop_bar_stool_01",
		"prop_basejump_target_01",
		"prop_basketball_net",
		"prop_bath_dirt_01",
		"prop_battery_01",
		"prop_battery_02",
		"prop_bball_arcade_01",
		"prop_bbq_2",
		"prop_bbq_3",
		"prop_beachbag_01",
		"prop_beachbag_02",
		"prop_beachbag_combo_01",
		"prop_beachball_02",
		"prop_beachflag_le",
		"prop_beach_bars_01",
		"prop_beach_bars_02",
		"prop_beach_bbq",
		"prop_beach_dip_bars_01",
		"prop_beach_dip_bars_02",
		"prop_beach_fire",
		"prop_beach_lg_float",
		"prop_beach_lg_stretch",
		"prop_beach_lg_surf",
		"prop_beach_punchbag",
		"prop_beach_rings_01",
		"prop_beach_sculp_01",
		"prop_beach_towel_02",
		"prop_beach_volball01",
		"prop_beach_volball02",
		"prop_beerneon",
		"prop_beer_bison",
		"prop_beer_box_01",
		"prop_beer_neon_01",
		"prop_beer_neon_02",
		"prop_beggers_sign_01",
		"prop_beggers_sign_02",
		"prop_bench_01b",
		"prop_bench_01c",
		"prop_bench_04",
		"prop_beta_tape",
		"prop_beware_dog_sign",
		"prop_bh1_03_gate_l",
		"prop_bh1_03_gate_r",
		"prop_bh1_08_mp_gar",
		"prop_bh1_09_mp_gar",
		"prop_bh1_09_mp_l",
		"prop_bh1_09_mp_r",
		"prop_bh1_16_display",
		"prop_bh1_44_door_01l",
		"prop_bh1_44_door_01r",
		"prop_bh1_48_backdoor_l",
		"prop_bh1_48_backdoor_r",
		"prop_bh1_48_gate_1",
		"prop_bhhotel_door_l",
		"prop_bhhotel_door_r",
		"prop_big_bag_01",
		"prop_big_clock_01",
		"prop_big_shit_01",
		"prop_big_shit_02",
		"prop_bikerack_2",
		"prop_bikini_disp_01",
		"prop_bikini_disp_02",
		"prop_billboard_01",
		"prop_billboard_02",
		"prop_billboard_03",
		"prop_billboard_04",
		"prop_billboard_09wall",
		"prop_billboard_10",
		"prop_billboard_11",
		"prop_billb_frame01a",
		"prop_billb_frame01b",
		"prop_billb_frame02a",
		"prop_binoc_01",
		"prop_bin_04a",
		"prop_bin_10a",
		"prop_bin_10b",
		"prop_bin_11a",
		"prop_bin_beach_01d",
		"prop_bin_delpiero",
		"prop_bin_delpiero_b",
		"prop_biolab_g_door",
		"prop_biotech_store",
		"prop_bison_winch",
		"prop_blackjack_01",
		"prop_bleachers_01",
		"prop_blox_spray",
		"prop_bmu_01",
		"prop_bmu_01_b",
		"prop_bmu_02",
		"prop_bmu_02_ld",
		"prop_bmu_02_ld_cab",
		"prop_bmu_02_ld_sup",
		"prop_bmu_track01",
		"prop_bmu_track02",
		"prop_bmu_track03",
		"prop_bodyarmour_02",
		"prop_bodyarmour_03",
		"prop_bodyarmour_04",
		"prop_bollard_01a",
		"prop_bollard_01b",
		"prop_bomb_01",
		"prop_bomb_01_s",
		"prop_bonesaw",
		"prop_bongos_01",
		"prop_bong_01",
		"prop_boogbd_stack_01",
		"prop_boogbd_stack_02",
		"prop_boogieboard_01",
		"prop_boogieboard_02",
		"prop_boombox_01",
		"prop_bottle_cap_01",
		"prop_bowling_ball",
		"prop_bowling_pin",
		"prop_bowl_crisps",
		"prop_boxcar5_handle",
		"prop_boxing_glove_01",
		"prop_boxpile_10a",
		"prop_boxpile_10b",
		"prop_box_ammo01a",
		"prop_box_ammo02a",
		"prop_box_ammo03a_set",
		"prop_box_ammo03a_set2",
		"prop_box_guncase_01a",
		"prop_box_guncase_02a",
		"prop_box_guncase_03a",
		"prop_box_tea01a",
		"prop_box_wood05a",
		"prop_box_wood05b",
		"prop_box_wood08a",
		"prop_breadbin_01",
		"prop_bread_rack_01",
		"prop_bread_rack_02",
		"prop_broken_cboard_p1",
		"prop_broken_cboard_p2",
		"prop_broken_cell_gate_01",
		"prop_broom_unit_01",
		"prop_bskball_01",
		"prop_bs_map_door_01",
		"prop_buckets_02",
		"prop_bucket_01a",
		"prop_bucket_01b",
		"prop_bucket_02a",
		"prop_buck_spade_01",
		"prop_buck_spade_02",
		"prop_buck_spade_03",
		"prop_bumper_01",
		"prop_bumper_02",
		"prop_bumper_03",
		"prop_bumper_car_01",
		"prop_burto_gate_01",
		"prop_bush_dead_02",
		"prop_bush_grape_01",
		"prop_bush_ivy_01_1m",
		"prop_bush_lrg_01",
		"prop_bush_lrg_01b",
		"prop_bush_lrg_01c",
		"prop_bush_med_01",
		"prop_bush_med_02",
		"prop_bush_neat_01",
		"prop_bush_neat_02",
		"prop_bush_ornament_01",
		"prop_bush_ornament_02",
		"prop_busker_hat_01",
		"prop_byard_bench01",
		"prop_byard_bench02",
		"prop_byard_block_01",
		"prop_byard_boat01",
		"prop_byard_boat02",
		"prop_byard_chains01",
		"prop_byard_dingy",
		"prop_byard_elecbox01",
		"prop_byard_elecbox02",
		"prop_byard_floatpile",
		"prop_byard_float_01",
		"prop_byard_float_01b",
		"prop_byard_hoist",
		"prop_byard_hoist_2",
		"prop_byard_hoses01",
		"prop_byard_hoses02",
		"prop_byard_ladder01",
		"prop_byard_machine01",
		"prop_byard_machine02",
		"prop_byard_motor_01",
		"prop_byard_motor_02",
		"prop_byard_net02",
		"prop_byard_phone",
		"prop_byard_pipes01",
		"prop_byard_pipe_01",
		"prop_byard_planks01",
		"prop_byard_pulley01",
		"prop_byard_rack",
		"prop_byard_ramp",
		"prop_byard_rampold",
		"prop_byard_rowboat1",
		"prop_byard_scfhold01",
		"prop_byard_sleeper01",
		"prop_byard_sleeper02",
		"prop_byard_steps_01",
		"prop_byard_tank_01",
		"prop_byard_trailer01",
		"prop_byard_trailer02",
		"prop_b_board_blank",
		"prop_c4_final",
		"prop_c4_final_green",
		"prop_cabinet_01",
		"prop_cabinet_01b",
		"prop_cabinet_02b",
		"prop_cablespool_01a",
		"prop_cablespool_01b",
		"prop_cablespool_02",
		"prop_camera_strap",
		"prop_candy_pqs",
		"prop_can_canoe",
		"prop_cap_01",
		"prop_cap_01b",
		"prop_cap_row_01",
		"prop_cap_row_01b",
		"prop_cap_row_02",
		"prop_cap_row_02b",
		"prop_carcreeper",
		"prop_cargo_int",
		"prop_carjack",
		"prop_carjack_l2",
		"prop_carrier_bag_01",
		"prop_carrier_bag_01_lod",
		"prop_cartwheel_01",
		"prop_carwash_roller_horz",
		"prop_carwash_roller_vert",
		"prop_car_battery_01",
		"prop_car_bonnet_01",
		"prop_car_bonnet_02",
		"prop_car_door_01",
		"prop_car_engine_01",
		"prop_car_exhaust_01",
		"prop_car_ignition",
		"prop_car_seat",
		"prop_casey_sec_id",
		"prop_cash_case_01",
		"prop_cash_case_02",
		"prop_cash_crate_01",
		"prop_cash_dep_bag_01",
		"prop_cash_envelope_01",
		"prop_cash_note_01",
		"prop_cash_pile_01",
		"prop_cash_pile_02",
		"prop_cash_trolly",
		"prop_casino_door_01l",
		"prop_casino_door_01r",
		"prop_cattlecrush",
		"prop_cat_tail_01",
		"prop_cctv_02_sm",
		"prop_cctv_cont_01",
		"prop_cctv_cont_03",
		"prop_cementmixer_01a",
		"prop_cementmixer_02a",
		"prop_ceramic_jug_01",
		"prop_ceramic_jug_cork",
		"prop_ch1_07_door_01l",
		"prop_ch2_05d_g_door",
		"prop_ch2_07b_20_g_door",
		"prop_ch2_09b_door",
		"prop_ch2_09c_garage_door",
		"prop_ch3_01_trlrdoor_l",
		"prop_ch3_01_trlrdoor_r",
		"prop_ch3_04_door_01l",
		"prop_ch3_04_door_01r",
		"prop_ch3_04_door_02",
		"prop_chair_01a",
		"prop_chair_01b",
		"prop_chair_02",
		"prop_chair_03",
		"prop_chair_pile_01",
		"prop_chall_lamp_01",
		"prop_chall_lamp_01n",
		"prop_chall_lamp_02",
		"prop_chateau_chair_01",
		"prop_cheetah_covered",
		"prop_chem_grill",
		"prop_chem_grill_bit",
		"prop_chem_vial_02",
		"prop_chem_vial_02b",
		"prop_cherenneon",
		"prop_chickencoop_a",
		"prop_chip_fryer",
		"prop_choc_ego",
		"prop_choc_meto",
		"prop_choc_pq",
		"prop_ch_025c_g_door_01",
		"prop_cigar_01",
		"prop_cigar_pack_01",
		"prop_cigar_pack_02",
		"prop_clapper_brd_01",
		"prop_cleaver",
		"prop_cliff_paper",
		"prop_clippers_01",
		"prop_clothes_rail_02",
		"prop_clothes_rail_03",
		"prop_clothes_rail_2b",
		"prop_clothes_tub_01",
		"prop_clown_chair",
		"prop_cntrdoor_ld_l",
		"prop_cntrdoor_ld_r",
		"prop_coathook_01",
		"prop_cockneon",
		"prop_coffee_cup_trailer",
		"prop_coffee_mac_02",
		"prop_coffin_02",
		"prop_coffin_02b",
		"prop_coke_block_01",
		"prop_coke_block_half_a",
		"prop_coke_block_half_b",
		"prop_compressor_01",
		"prop_compressor_02",
		"prop_compressor_03",
		"prop_com_gar_door_01",
		"prop_com_ls_door_01",
		"prop_conc_sacks_02a",
		"prop_cone_float_1",
		"prop_conschute",
		"prop_consign_01c",
		"prop_consign_02a",
		"prop_conslift_base",
		"prop_conslift_brace",
		"prop_conslift_cage",
		"prop_conslift_steps",
		"prop_console_01",
		"prop_construcionlamp_01",
		"prop_const_fence01a",
		"prop_const_fence01b",
		"prop_const_fence02a",
		"prop_cons_crate",
		"prop_cons_plank",
		"prop_cons_ply01",
		"prop_cons_ply02",
		"prop_container_01a",
		"prop_container_01b",
		"prop_container_01c",
		"prop_container_01d",
		"prop_container_01e",
		"prop_container_01f",
		"prop_container_03mb",
		"prop_container_05mb",
		"prop_container_door_mb_l",
		"prop_container_door_mb_r",
		"prop_container_hole",
		"prop_container_ld",
		"prop_container_ld2",
		"prop_container_old1",
		"prop_contnr_pile_01a",
		"prop_controller_01",
		"prop_control_rm_door_01",
		"prop_cont_chiller_01",
		"prop_cooker_03",
		"prop_copier_01",
		"prop_copper_pan",
		"prop_coral_bush_01",
		"prop_coral_flat_01",
		"prop_coral_flat_01_l1",
		"prop_coral_flat_02",
		"prop_coral_flat_brainy",
		"prop_coral_flat_clam",
		"prop_coral_grass_01",
		"prop_coral_grass_02",
		"prop_coral_kelp_01",
		"prop_coral_kelp_01_l1",
		"prop_coral_kelp_02",
		"prop_coral_kelp_02_l1",
		"prop_coral_kelp_03",
		"prop_coral_kelp_03_l1",
		"prop_coral_kelp_04",
		"prop_coral_kelp_04_l1",
		"prop_coral_pillar_01",
		"prop_coral_pillar_02",
		"prop_coral_spikey_01",
		"prop_coral_stone_03",
		"prop_coral_sweed_03",
		"prop_coral_sweed_04",
		"prop_cora_clam_01",
		"prop_cork_board",
		"prop_couch_01",
		"prop_couch_03",
		"prop_couch_04",
		"prop_couch_lg_02",
		"prop_couch_lg_05",
		"prop_couch_sm_07",
		"prop_crane_01_truck1",
		"prop_crane_01_truck2",
		"prop_cranial_saw",
		"prop_crashed_heli",
		"prop_cratepile_07a_l1",
		"prop_crate_01a",
		"prop_crate_02a",
		"prop_crate_08a",
		"prop_crate_float_1",
		"prop_creosote_b_01",
		"prop_crisp",
		"prop_crisp_small",
		"prop_crosssaw_01",
		"prop_cs1_14b_traind",
		"prop_cs1_14b_traind_dam",
		"prop_cs4_05_tdoor",
		"prop_cs4_10_tr_gd_01",
		"prop_cs4_11_door",
		"prop_cs6_03_door_l",
		"prop_cs6_03_door_r",
		"prop_cs_20m_rope",
		"prop_cs_30m_rope",
		"prop_cs_abattoir_switch",
		"prop_cs_aircon_01",
		"prop_cs_aircon_fan",
		"prop_cs_amanda_shoe",
		"prop_cs_ashtray",
		"prop_cs_bandana",
		"prop_cs_bar",
		"prop_cs_beachtowel_01",
		"prop_cs_beer_bot_01",
		"prop_cs_beer_bot_01b",
		"prop_cs_beer_bot_01lod",
		"prop_cs_beer_bot_02",
		"prop_cs_beer_bot_40oz_03",
		"prop_cs_beer_bot_test",
		"prop_cs_binder_01",
		"prop_cs_bin_01",
		"prop_cs_bin_01_lid",
		"prop_cs_bin_01_skinned",
		"prop_cs_bin_02",
		"prop_cs_bin_03",
		"prop_cs_book_01",
		"prop_cs_bottle_opener",
		"prop_cs_bowie_knife",
		"prop_cs_bowl_01",
		"prop_cs_bowl_01b",
		"prop_cs_box_clothes",
		"prop_cs_box_step",
		"prop_cs_brain_chunk",
		"prop_cs_bs_cup",
		"prop_cs_bucket_s",
		"prop_cs_bucket_s_lod",
		"prop_cs_burger_01",
		"prop_cs_business_card",
		"prop_cs_cardbox_01",
		"prop_cs_cash_note_01",
		"prop_cs_cctv",
		"prop_cs_champ_flute",
		"prop_cs_ciggy_01",
		"prop_cs_ciggy_01b",
		"prop_cs_clothes_box",
		"prop_cs_coke_line",
		"prop_cs_cont_latch",
		"prop_cs_crackpipe",
		"prop_cs_credit_card",
		"prop_cs_creeper_01",
		"prop_cs_crisps_01",
		"prop_cs_cuffs_01",
		"prop_cs_diaphram",
		"prop_cs_dildo_01",
		"prop_cs_documents_01",
		"prop_cs_duffel_01",
		"prop_cs_duffel_01b",
		"prop_cs_dumpster_01a",
		"prop_cs_dumpster_lidl",
		"prop_cs_dumpster_lidr",
		"prop_cs_dvd",
		"prop_cs_dvd_case",
		"prop_cs_dvd_player",
		"prop_cs_envolope_01",
		"prop_cs_fertilizer",
		"prop_cs_film_reel_01",
		"prop_cs_folding_chair_01",
		"prop_cs_fork",
		"prop_cs_frank_photo",
		"prop_cs_freightdoor_l1",
		"prop_cs_freightdoor_r1",
		"prop_cs_fridge",
		"prop_cs_fridge_door",
		"prop_cs_fuel_hose",
		"prop_cs_fuel_nozle",
		"prop_cs_gascutter_1",
		"prop_cs_gascutter_2",
		"prop_cs_glass_scrap",
		"prop_cs_gravyard_gate_l",
		"prop_cs_gravyard_gate_r",
		"prop_cs_gunrack",
		"prop_cs_hand_radio",
		"prop_cs_heist_bag_01",
		"prop_cs_heist_bag_02",
		"prop_cs_heist_bag_strap_01",
		"prop_cs_heist_rope",
		"prop_cs_heist_rope_b",
		"prop_cs_hotdog_01",
		"prop_cs_hotdog_02",
		"prop_cs_h_bag_strap_01",
		"prop_cs_ice_locker",
		"prop_cs_ice_locker_door_l",
		"prop_cs_ice_locker_door_r",
		"prop_cs_ilev_blind_01",
		"prop_cs_ironing_board",
		"prop_cs_katana_01",
		"prop_cs_kettle_01",
		"prop_cs_keyboard_01",
		"prop_cs_keys_01",
		"prop_cs_kitchen_cab_l2",
		"prop_cs_lazlow_ponytail",
		"prop_cs_lazlow_shirt_01",
		"prop_cs_lazlow_shirt_01b",
		"prop_cs_leaf",
		"prop_cs_leg_chain_01",
		"prop_cs_lester_crate",
		"prop_cs_lipstick",
		"prop_cs_magazine",
		"prop_cs_marker_01",
		"prop_cs_meth_pipe",
		"prop_cs_milk_01",
		"prop_cs_mini_tv",
		"prop_cs_mopbucket_01",
		"prop_cs_mop_s",
		"prop_cs_mouse_01",
		"prop_cs_nail_file",
		"prop_cs_newspaper",
		"prop_cs_office_chair",
		"prop_cs_overalls_01",
		"prop_cs_package_01",
		"prop_cs_padlock",
		"prop_cs_pamphlet_01",
		"prop_cs_panel_01",
		"prop_cs_panties",
		"prop_cs_panties_02",
		"prop_cs_panties_03",
		"prop_cs_paper_cup",
		"prop_cs_para_ropebit",
		"prop_cs_para_ropes",
		"prop_cs_pebble",
		"prop_cs_pebble_02",
		"prop_cs_petrol_can",
		"prop_cs_phone_01",
		"prop_cs_photoframe_01",
		"prop_cs_pills",
		"prop_cs_plane_int_01",
		"prop_cs_planning_photo",
		"prop_cs_plant_01",
		"prop_cs_plate_01",
		"prop_cs_polaroid",
		"prop_cs_police_torch",
		"prop_cs_pour_tube",
		"prop_cs_power_cell",
		"prop_cs_power_cord",
		"prop_cs_protest_sign_01",
		"prop_cs_protest_sign_02",
		"prop_cs_rage_statue_p1",
		"prop_cs_rage_statue_p2",
		"prop_cs_remote_01",
		"prop_cs_rolled_paper",
		"prop_cs_rope_tie_01",
		"prop_cs_rub_binbag_01",
		"prop_cs_rub_box_01",
		"prop_cs_rub_box_02",
		"prop_cs_r_business_card",
		"prop_cs_sack_01",
		"prop_cs_saucer_01",
		"prop_cs_sc1_11_gate",
		"prop_cs_scissors",
		"prop_cs_script_bottle",
		"prop_cs_script_bottle_01",
		"prop_cs_server_drive",
		"prop_cs_sheers",
		"prop_cs_shirt_01",
		"prop_cs_shopping_bag",
		"prop_cs_shot_glass",
		"prop_cs_silver_tray",
		"prop_cs_sink_filler",
		"prop_cs_sink_filler_02",
		"prop_cs_sm_27_gate",
		"prop_cs_sol_glasses",
		"prop_cs_spray_can",
		"prop_cs_steak",
		"prop_cs_stock_book",
		"prop_cs_street_binbag_01",
		"prop_cs_street_card_01",
		"prop_cs_street_card_02",
		"prop_cs_sub_hook_01",
		"prop_cs_sub_rope_01",
		"prop_cs_swipe_card",
		"prop_cs_tablet",
		"prop_cs_tablet_02",
		"prop_cs_toaster",
		"prop_cs_trolley_01",
		"prop_cs_trowel",
		"prop_cs_truck_ladder",
		"prop_cs_tshirt_ball_01",
		"prop_cs_tv_stand",
		"prop_cs_t_shirt_pile",
		"prop_cs_valve",
		"prop_cs_vent_cover",
		"prop_cs_vial_01",
		"prop_cs_walkie_talkie",
		"prop_cs_walking_stick",
		"prop_cs_whiskey_bottle",
		"prop_cs_whiskey_bot_stop",
		"prop_cs_wrench",
		"prop_cub_door_lifeblurb",
		"prop_cub_lifeblurb",
		"prop_cuff_keys_01",
		"prop_cup_saucer_01",
		"prop_curl_bar_01",
		"prop_damdoor_01",
		"prop_dart_1",
		"prop_dart_2",
		"prop_dart_bd_01",
		"prop_dart_bd_cab_01",
		"prop_defilied_ragdoll_01",
		"prop_desert_iron_01",
		"prop_detergent_01a",
		"prop_detergent_01b",
		"prop_devin_box_01",
		"prop_devin_rope_01",
		"prop_diggerbkt_01",
		"prop_direct_chair_01",
		"prop_direct_chair_02",
		"prop_display_unit_01",
		"prop_display_unit_02",
		"prop_disp_cabinet_002",
		"prop_disp_cabinet_01",
		"prop_disp_razor_01",
		"prop_distantcar_day",
		"prop_distantcar_night",
		"prop_distantcar_truck",
		"prop_dj_deck_01",
		"prop_dj_deck_02",
		"prop_dock_ropefloat",
		"prop_dock_ropetyre1",
		"prop_dock_ropetyre2",
		"prop_dock_ropetyre3",
		"prop_dock_rtg_01",
		"prop_dock_rtg_ld",
		"prop_dock_shippad",
		"prop_dock_sign_01",
		"prop_dock_woodpole1",
		"prop_dock_woodpole2",
		"prop_dog_cage_01",
		"prop_dog_cage_02",
		"prop_dolly_01",
		"prop_dolly_02",
		"prop_donut_01",
		"prop_donut_02",
		"prop_donut_02b",
		"prop_door_01",
		"prop_door_balcony_frame",
		"prop_door_balcony_left",
		"prop_door_balcony_right",
		"prop_door_bell_01",
		"prop_double_grid_line",
		"prop_dress_disp_01",
		"prop_dress_disp_02",
		"prop_drop_armscrate_01",
		"prop_drop_armscrate_01b",
		"prop_drop_crate_01",
		"prop_drop_crate_01_set",
		"prop_drop_crate_01_set2",
		"prop_drug_burner",
		"prop_drug_package",
		"prop_drug_package_02",
		"prop_drywallpile_01",
		"prop_drywallpile_02",
		"prop_dt1_13_groundlight",
		"prop_dt1_13_walllightsource",
		"prop_dt1_20_mp_door_l",
		"prop_dt1_20_mp_door_r",
		"prop_dt1_20_mp_gar",
		"prop_ducktape_01",
		"prop_dummy_01",
		"prop_dummy_car",
		"prop_dummy_light",
		"prop_dummy_plane",
		"prop_dumpster_3a",
		"prop_dumpster_3step",
		"prop_dumpster_4a",
		"prop_dumpster_4b",
		"prop_d_balcony_l_light",
		"prop_d_balcony_r_light",
		"prop_ear_defenders_01",
		"prop_ecg_01",
		"prop_ecg_01_cable_01",
		"prop_ecg_01_cable_02",
		"prop_ecola_can",
		"prop_egg_clock_01",
		"prop_ejector_seat_01",
		"prop_elecbox_03a",
		"prop_elecbox_10",
		"prop_el_guitar_01",
		"prop_el_guitar_02",
		"prop_el_guitar_03",
		"prop_employee_month_01",
		"prop_employee_month_02",
		"prop_energy_drink",
		"prop_entityxf_covered",
		"prop_epsilon_door_l",
		"prop_epsilon_door_r",
		"prop_etricmotor_01",
		"prop_exer_bike_01",
		"prop_faceoffice_door_l",
		"prop_faceoffice_door_r",
		"prop_face_rag_01",
		"prop_facgate_01",
		"prop_facgate_01b",
		"prop_facgate_02pole",
		"prop_facgate_02_l",
		"prop_facgate_03post",
		"prop_facgate_08_frame",
		"prop_facgate_08_ld2",
		"prop_facgate_id1_27",
		"prop_fac_machine_02",
		"prop_fag_packet_01",
		"prop_fan_01",
		"prop_fan_palm_01a",
		"prop_fax_01",
		"prop_fbi3_coffee_table",
		"prop_fbibombbin",
		"prop_fbibombcupbrd",
		"prop_fbibombfile",
		"prop_fbibombplant",
		"prop_feeder1",
		"prop_feed_sack_01",
		"prop_feed_sack_02",
		"prop_fence_log_01",
		"prop_fence_log_02",
		"prop_ff_shelves_01",
		"prop_ff_sink_01",
		"prop_ff_sink_02",
		"prop_fib_badge",
		"prop_fib_broken_window",
		"prop_fib_skylight_piece",
		"prop_film_cam_01",
		"prop_fireescape_01a",
		"prop_fireescape_01b",
		"prop_fireescape_02a",
		"prop_fireescape_02b",
		"prop_fire_driser_1a",
		"prop_fire_hosereel",
		"prop_fishing_rod_01",
		"prop_fishing_rod_02",
		"prop_fish_slice_01",
		"prop_flagpole_1a",
		"prop_flagpole_2a",
		"prop_flagpole_3a",
		"prop_flare_01",
		"prop_flare_01b",
		"prop_flash_unit",
		"prop_flatbed_strap",
		"prop_flatbed_strap_b",
		"prop_flatscreen_overlay",
		"prop_flattrailer_01a",
		"prop_flattruck_01a",
		"prop_fleeca_atm",
		"prop_flight_box_01",
		"prop_flight_box_insert",
		"prop_flight_box_insert2",
		"prop_flipchair_01",
		"prop_floor_duster_01",
		"prop_fncconstruc_02a",
		"prop_fridge_03",
		"prop_front_seat_01",
		"prop_front_seat_02",
		"prop_front_seat_03",
		"prop_front_seat_04",
		"prop_front_seat_05",
		"prop_front_seat_06",
		"prop_front_seat_07",
		"prop_front_seat_row_01",
		"prop_fruitstand_b_nite",
		"prop_fruit_basket",
		"prop_ftowel_01",
		"prop_ftowel_07",
		"prop_ftowel_08",
		"prop_ftowel_10",
		"prop_f_b_insert_broken",
		"prop_f_duster_01_s",
		"prop_f_duster_02",
		"prop_gaffer_arm_bind",
		"prop_gaffer_arm_bind_cut",
		"prop_gaffer_leg_bind",
		"prop_gaffer_leg_bind_cut",
		"prop_gaffer_tape",
		"prop_gaffer_tape_strip",
		"prop_game_clock_01",
		"prop_game_clock_02",
		"prop_garden_dreamcatch_01",
		"prop_garden_edging_01",
		"prop_garden_edging_02",
		"prop_garden_zapper_01",
		"prop_gar_door_05_l",
		"prop_gar_door_05_r",
		"prop_gar_door_a_01",
		"prop_gar_door_plug",
		"prop_gascage01",
		"prop_gascyl_ramp_01",
		"prop_gascyl_ramp_door_01",
		"prop_gas_grenade",
		"prop_gas_mask_hang_01",
		"prop_gatecom_02",
		"prop_gate_airport_01",
		"prop_gate_bridge_ld",
		"prop_gate_cult_01_l",
		"prop_gate_cult_01_r",
		"prop_gate_docks_ld",
		"prop_gate_farm_01a",
		"prop_gate_farm_post",
		"prop_gate_frame_06",
		"prop_gate_military_01",
		"prop_gate_prison_01",
		"prop_gate_tep_01_l",
		"prop_gate_tep_01_r",
		"prop_gazebo_03",
		"prop_gd_ch2_08",
		"prop_generator_02a",
		"prop_generator_03a",
		"prop_generator_04",
		"prop_ghettoblast_02",
		"prop_girder_01a",
		"prop_glasscutter_01",
		"prop_glass_suck_holder",
		"prop_glf_roller",
		"prop_glf_spreader",
		"prop_gold_bar",
		"prop_gold_cont_01",
		"prop_gold_cont_01b",
		"prop_gold_trolly",
		"prop_gold_trolly_full",
		"prop_gold_trolly_strap_01",
		"prop_golf_bag_01",
		"prop_golf_bag_01b",
		"prop_golf_bag_01c",
		"prop_golf_ball",
		"prop_golf_ball_p2",
		"prop_golf_tee",
		"prop_golf_wood_01",
		"prop_grain_hopper",
		"prop_grapes_01",
		"prop_grapes_02",
		"prop_grass_dry_02",
		"prop_grass_dry_03",
		"prop_gravestones_01a",
		"prop_gravestones_02a",
		"prop_gravestones_03a",
		"prop_gravestones_04a",
		"prop_gravestones_05a",
		"prop_gravestones_06a",
		"prop_gravestones_07a",
		"prop_gravestones_08a",
		"prop_gravestones_09a",
		"prop_gravestones_10a",
		"prop_gravetomb_01a",
		"prop_gravetomb_02a",
		"prop_griddle_01",
		"prop_griddle_02",
		"prop_grumandoor_l",
		"prop_grumandoor_r",
		"prop_gshotsensor_01",
		"prop_gun_case_01",
		"prop_gun_case_02",
		"prop_gun_frame",
		"prop_hacky_sack_01",
		"prop_handdry_01",
		"prop_handdry_02",
		"prop_handrake",
		"prop_handtowels",
		"prop_hand_toilet",
		"prop_hanger_door_1",
		"prop_hard_hat_01",
		"prop_hat_box_01",
		"prop_hat_box_02",
		"prop_hat_box_03",
		"prop_hat_box_04",
		"prop_hat_box_05",
		"prop_hat_box_06",
		"prop_haybailer_01",
		"prop_haybale_01",
		"prop_haybale_02",
		"prop_haybale_stack_01",
		"prop_hd_seats_01",
		"prop_headphones_01",
		"prop_headset_01",
		"prop_hedge_trimmer_01",
		"prop_helipad_01",
		"prop_helipad_02",
		"prop_henna_disp_01",
		"prop_henna_disp_02",
		"prop_henna_disp_03",
		"prop_hifi_01",
		"prop_hobo_stove_01",
		"prop_hockey_bag_01",
		"prop_hole_plug_01",
		"prop_holster_01",
		"prop_homeless_matress_01",
		"prop_homeless_matress_02",
		"prop_hose_1",
		"prop_hose_2",
		"prop_hose_3",
		"prop_hose_nozzle",
		"prop_hospitaldoors_start",
		"prop_hospital_door_l",
		"prop_hospital_door_r",
		"prop_hotel_clock_01",
		"prop_hotel_trolley",
		"prop_hottub2",
		"prop_huf_rag_01",
		"prop_huge_display_01",
		"prop_huge_display_02",
		"prop_hunterhide",
		"prop_hw1_03_gardoor_01",
		"prop_hw1_04_door_l1",
		"prop_hw1_04_door_r1",
		"prop_hw1_23_door",
		"prop_hwbowl_pseat_6x1",
		"prop_hwbowl_seat_01",
		"prop_hwbowl_seat_02",
		"prop_hwbowl_seat_03",
		"prop_hwbowl_seat_03b",
		"prop_hwbowl_seat_6x6",
		"prop_hydro_platform_01",
		"prop_ice_box_01",
		"prop_ice_box_01_l1",
		"prop_ice_cube_01",
		"prop_ice_cube_02",
		"prop_ice_cube_03",
		"prop_id2_11_gdoor",
		"prop_id2_20_clock",
		"prop_idol_01",
		"prop_idol_01_error",
		"prop_idol_case",
		"prop_idol_case_01",
		"prop_idol_case_02",
		"prop_id_21_gardoor_01",
		"prop_id_21_gardoor_02",
		"prop_indus_meet_door_l",
		"prop_indus_meet_door_r",
		"prop_ind_barge_01",
		"prop_ind_barge_02",
		"prop_ind_coalcar_01",
		"prop_ind_coalcar_02",
		"prop_ind_coalcar_03",
		"prop_ind_conveyor_01",
		"prop_ind_conveyor_02",
		"prop_ind_conveyor_04",
		"prop_ind_crusher",
		"prop_ind_deiseltank",
		"prop_ind_light_01a",
		"prop_ind_light_01b",
		"prop_ind_light_01c",
		"prop_ind_mech_01c",
		"prop_ind_mech_02a",
		"prop_ind_mech_02b",
		"prop_ind_mech_03a",
		"prop_ind_mech_04a",
		"prop_ind_oldcrane",
		"prop_ind_washer_02",
		"prop_inflatearch_01",
		"prop_inflategate_01",
		"prop_ing_camera_01",
		"prop_ing_crowbar",
		"prop_inhaler_01",
		"prop_int_gate01",
		"prop_in_tray_01",
		"prop_irish_sign_01",
		"prop_irish_sign_02",
		"prop_irish_sign_03",
		"prop_irish_sign_04",
		"prop_irish_sign_05",
		"prop_irish_sign_06",
		"prop_irish_sign_07",
		"prop_irish_sign_08",
		"prop_irish_sign_09",
		"prop_irish_sign_10",
		"prop_irish_sign_11",
		"prop_irish_sign_12",
		"prop_irish_sign_13",
		"prop_iron_01",
		"prop_jb700_covered",
		"prop_jeans_01",
		"prop_jetski_ramp_01",
		"prop_jet_bloodsplat_01",
		"prop_jewel_02a",
		"prop_jewel_02b",
		"prop_jewel_02c",
		"prop_jewel_03a",
		"prop_jewel_03b",
		"prop_jewel_04a",
		"prop_jewel_04b",
		"prop_jewel_pickup_new_01",
		"prop_juice_dispenser",
		"prop_juice_pool_01",
		"prop_jukebox_01",
		"prop_jukebox_02",
		"prop_jyard_block_01a",
		"prop_j_disptray_01",
		"prop_j_disptray_01b",
		"prop_j_disptray_01_dam",
		"prop_j_disptray_02",
		"prop_j_disptray_02_dam",
		"prop_j_disptray_03",
		"prop_j_disptray_03_dam",
		"prop_j_disptray_04",
		"prop_j_disptray_04b",
		"prop_j_disptray_05",
		"prop_j_disptray_05b",
		"prop_j_heist_pic_01",
		"prop_j_heist_pic_02",
		"prop_j_heist_pic_03",
		"prop_j_heist_pic_04",
		"prop_j_neck_disp_01",
		"prop_j_neck_disp_02",
		"prop_j_neck_disp_03",
		"prop_kayak_01",
		"prop_kayak_01b",
		"prop_kebab_grill",
		"prop_keg_01",
		"prop_kettle",
		"prop_kettle_01",
		"prop_keyboard_01a",
		"prop_keyboard_01b",
		"prop_kino_light_01",
		"prop_kino_light_03",
		"prop_kitch_juicer",
		"prop_kitch_pot_fry",
		"prop_kitch_pot_huge",
		"prop_kitch_pot_lrg",
		"prop_kitch_pot_lrg2",
		"prop_kitch_pot_med",
		"prop_kitch_pot_sm",
		"prop_knife",
		"prop_knife_stand",
		"prop_kt1_06_door_l",
		"prop_kt1_06_door_r",
		"prop_kt1_10_mpdoor_l",
		"prop_kt1_10_mpdoor_r",
		"prop_ladel",
		"prop_laptop_02_closed",
		"prop_laptop_jimmy",
		"prop_laptop_lester",
		"prop_laptop_lester2",
		"prop_large_gold",
		"prop_large_gold_alt_a",
		"prop_large_gold_alt_b",
		"prop_large_gold_alt_c",
		"prop_large_gold_empty",
		"prop_lawnmower_01",
		"prop_ld_alarm_01",
		"prop_ld_alarm_01_dam",
		"prop_ld_alarm_alert",
		"prop_ld_ammo_pack_01",
		"prop_ld_ammo_pack_02",
		"prop_ld_ammo_pack_03",
		"prop_ld_armour",
		"prop_ld_balcfnc_01a",
		"prop_ld_balcfnc_02a",
		"prop_ld_balcfnc_02c",
		"prop_ld_bankdoors_02",
		"prop_ld_barrier_01",
		"prop_ld_binbag_01",
		"prop_ld_bomb",
		"prop_ld_bomb_01",
		"prop_ld_bomb_01_open",
		"prop_ld_bomb_anim",
		"prop_ld_cable",
		"prop_ld_cable_tie_01",
		"prop_ld_can_01",
		"prop_ld_case_01",
		"prop_ld_case_01_lod",
		"prop_ld_case_01_s",
		"prop_ld_contact_card",
		"prop_ld_container",
		"prop_ld_contain_dl",
		"prop_ld_contain_dl2",
		"prop_ld_contain_dr",
		"prop_ld_contain_dr2",
		"prop_ld_crate_01",
		"prop_ld_crate_lid_01",
		"prop_ld_crocclips01",
		"prop_ld_crocclips02",
		"prop_ld_dummy_rope",
		"prop_ld_fags_01",
		"prop_ld_fags_02",
		"prop_ld_fan_01",
		"prop_ld_fan_01_old",
		"prop_ld_faucet",
		"prop_ld_ferris_wheel",
		"prop_ld_fireaxe",
		"prop_ld_flow_bottle",
		"prop_ld_fragwall_01a",
		"prop_ld_garaged_01",
		"prop_ld_gold_tooth",
		"prop_ld_greenscreen_01",
		"prop_ld_handbag",
		"prop_ld_handbag_s",
		"prop_ld_hat_01",
		"prop_ld_haybail",
		"prop_ld_hdd_01",
		"prop_ld_health_pack",
		"prop_ld_hook",
		"prop_ld_int_safe_01",
		"prop_ld_jail_door",
		"prop_ld_jeans_01",
		"prop_ld_jeans_02",
		"prop_ld_jerrycan_01",
		"prop_ld_keypad_01",
		"prop_ld_keypad_01b",
		"prop_ld_keypad_01b_lod",
		"prop_ld_lap_top",
		"prop_ld_monitor_01",
		"prop_ld_peep_slider",
		"prop_ld_pipe_single_01",
		"prop_ld_planning_pin_01",
		"prop_ld_planning_pin_02",
		"prop_ld_planning_pin_03",
		"prop_ld_purse_01",
		"prop_ld_purse_01_lod",
		"prop_ld_rail_01",
		"prop_ld_rail_02",
		"prop_ld_rope_t",
		"prop_ld_rubble_01",
		"prop_ld_rubble_02",
		"prop_ld_rubble_03",
		"prop_ld_rubble_04",
		"prop_ld_rub_binbag_01",
		"prop_ld_scrap",
		"prop_ld_shirt_01",
		"prop_ld_shoe_01",
		"prop_ld_shoe_02",
		"prop_ld_shovel",
		"prop_ld_shovel_dirt",
		"prop_ld_snack_01",
		"prop_ld_suitcase_01",
		"prop_ld_suitcase_02",
		"prop_ld_test_01",
		"prop_ld_toilet_01",
		"prop_ld_tooth",
		"prop_ld_tshirt_01",
		"prop_ld_tshirt_02",
		"prop_ld_vault_door",
		"prop_ld_wallet_01",
		"prop_ld_wallet_01_s",
		"prop_ld_wallet_02",
		"prop_ld_wallet_pickup",
		"prop_ld_w_me_machette",
		"prop_leaf_blower_01",
		"prop_lectern_01",
		"prop_letterbox_04",
		"prop_lev_crate_01",
		"prop_lev_des_barge_01",
		"prop_lev_des_barge_02",
		"prop_lifeblurb_01",
		"prop_lifeblurb_01b",
		"prop_lifeblurb_02",
		"prop_lifeblurb_02b",
		"prop_life_ring_02",
		"prop_lift_overlay_01",
		"prop_lift_overlay_02",
		"prop_litter_picker",
		"prop_loggneon",
		"prop_logpile_05",
		"prop_logpile_06",
		"prop_logpile_06b",
		"prop_logpile_07",
		"prop_logpile_07b",
		"prop_log_01",
		"prop_log_02",
		"prop_log_03",
		"prop_loose_rag_01",
		"prop_lrggate_01c_l",
		"prop_lrggate_01c_r",
		"prop_lrggate_01_l",
		"prop_lrggate_01_pst",
		"prop_lrggate_01_r",
		"prop_lrggate_02_ld",
		"prop_lrggate_03a",
		"prop_lrggate_03b",
		"prop_lrggate_03b_ld",
		"prop_lrggate_04a",
		"prop_lrggate_05a",
		"prop_lrggate_06a",
		"prop_luggage_01a",
		"prop_luggage_02a",
		"prop_luggage_03a",
		"prop_luggage_04a",
		"prop_luggage_05a",
		"prop_luggage_06a",
		"prop_luggage_07a",
		"prop_luggage_08a",
		"prop_luggage_09a",
		"prop_magenta_door",
		"prop_makeup_trail_01",
		"prop_makeup_trail_02",
		"prop_map_door_01",
		"prop_mast_01",
		"prop_mat_box",
		"prop_mb_cargo_01a",
		"prop_mb_cargo_02a",
		"prop_mb_cargo_03a",
		"prop_mb_cargo_04a",
		"prop_mb_cargo_04b",
		"prop_mb_crate_01a",
		"prop_mb_crate_01a_set",
		"prop_mb_crate_01b",
		"prop_mb_hesco_06",
		"prop_mb_ordnance_01",
		"prop_mb_ordnance_03",
		"prop_mb_sandblock_01",
		"prop_mb_sandblock_02",
		"prop_mb_sandblock_03",
		"prop_mb_sandblock_04",
		"prop_mb_sandblock_05",
		"prop_medal_01",
		"prop_medstation_02",
		"prop_medstation_03",
		"prop_medstation_04",
		"prop_med_bag_01",
		"prop_med_bag_01b",
		"prop_med_jet_01",
		"prop_megaphone_01",
		"prop_mem_candle_04",
		"prop_mem_candle_05",
		"prop_mem_candle_06",
		"prop_mem_reef_01",
		"prop_mem_reef_02",
		"prop_mem_reef_03",
		"prop_mem_teddy_01",
		"prop_mem_teddy_02",
		"prop_metalfoodjar_01",
		"prop_metal_plates01",
		"prop_metal_plates02",
		"prop_meth_bag_01",
		"prop_michaels_credit_tv",
		"prop_michael_backpack",
		"prop_michael_balaclava",
		"prop_michael_door",
		"prop_michael_sec_id",
		"prop_microphone_02",
		"prop_microwave_1",
		"prop_micro_01",
		"prop_micro_02",
		"prop_micro_cs_01",
		"prop_micro_cs_01_door",
		"prop_military_pickup_01",
		"prop_mil_crate_01",
		"prop_mil_crate_02",
		"prop_minigun_01",
		"prop_mobile_mast_1",
		"prop_mobile_mast_2",
		"prop_money_bag_01",
		"prop_monitor_01c",
		"prop_monitor_01d",
		"prop_monitor_02",
		"prop_monitor_03b",
		"prop_motel_door_09",
		"prop_mouse_01",
		"prop_mouse_01a",
		"prop_mouse_01b",
		"prop_mouse_02",
		"prop_movie_rack",
		"prop_mp3_dock",
		"prop_mp_arrow_barrier_01",
		"prop_mp_barrier_01",
		"prop_mp_barrier_01b",
		"prop_mp_barrier_02",
		"prop_mp_barrier_02b",
		"prop_mp_base_marker",
		"prop_mp_boost_01",
		"prop_mp_cant_place_lrg",
		"prop_mp_cant_place_med",
		"prop_mp_cant_place_sm",
		"prop_mp_cone_01",
		"prop_mp_cone_02",
		"prop_mp_cone_03",
		"prop_mp_cone_04",
		"prop_mp_drug_package",
		"prop_mp_drug_pack_blue",
		"prop_mp_drug_pack_red",
		"prop_mp_icon_shad_lrg",
		"prop_mp_icon_shad_med",
		"prop_mp_icon_shad_sm",
		"prop_mp_max_out_lrg",
		"prop_mp_max_out_med",
		"prop_mp_max_out_sm",
		"prop_mp_num_0",
		"prop_mp_num_1",
		"prop_mp_num_2",
		"prop_mp_num_3",
		"prop_mp_num_4",
		"prop_mp_num_5",
		"prop_mp_num_6",
		"prop_mp_num_7",
		"prop_mp_num_8",
		"prop_mp_num_9",
		"prop_mp_placement",
		"prop_mp_placement_lrg",
		"prop_mp_placement_maxd",
		"prop_mp_placement_med",
		"prop_mp_placement_red",
		"prop_mp_placement_sm",
		"prop_mp_ramp_01",
		"prop_mp_ramp_02",
		"prop_mp_repair",
		"prop_mp_repair_01",
		"prop_mp_respawn_02",
		"prop_mp_rocket_01",
		"prop_mp_spike_01",
		"prop_mr_rasberryclean",
		"prop_mr_raspberry_01",
		"prop_muscle_bench_01",
		"prop_muscle_bench_02",
		"prop_muscle_bench_03",
		"prop_muscle_bench_04",
		"prop_muscle_bench_05",
		"prop_muscle_bench_06",
		"prop_muster_wboard_01",
		"prop_muster_wboard_02",
		"prop_m_pack_int_01",
		"prop_necklace_board",
		"prop_news_disp_02a_s",
		"prop_new_drug_pack_01",
		"prop_nigel_bag_pickup",
		"prop_night_safe_01",
		"prop_notepad_01",
		"prop_notepad_02",
		"prop_novel_01",
		"prop_npc_phone",
		"prop_npc_phone_02",
		"prop_office_alarm_01",
		"prop_office_desk_01",
		"prop_offroad_bale01",
		"prop_offroad_bale02_l1_frag_",
		"prop_offroad_barrel01",
		"prop_offroad_tyres01",
		"prop_off_chair_01",
		"prop_off_chair_03",
		"prop_off_chair_04",
		"prop_off_chair_04b",
		"prop_off_chair_04_s",
		"prop_off_chair_05",
		"prop_off_phone_01",
		"prop_oiltub_01",
		"prop_oiltub_02",
		"prop_oiltub_03",
		"prop_oiltub_05",
		"prop_oiltub_06",
		"prop_oil_derrick_01",
		"prop_oil_guage_01",
		"prop_oil_spool_02",
		"prop_oil_valve_01",
		"prop_oil_valve_02",
		"prop_oil_wellhead_01",
		"prop_oil_wellhead_03",
		"prop_oil_wellhead_04",
		"prop_oil_wellhead_05",
		"prop_oil_wellhead_06",
		"prop_oldplough1",
		"prop_old_boot",
		"prop_old_churn_01",
		"prop_old_churn_02",
		"prop_old_deck_chair",
		"prop_old_deck_chair_02",
		"prop_old_farm_01",
		"prop_old_farm_02",
		"prop_old_wood_chair",
		"prop_old_wood_chair_lod",
		"prop_orang_can_01",
		"prop_outdoor_fan_01",
		"prop_out_door_speaker",
		"prop_overalls_01",
		"prop_owl_totem_01",
		"prop_paints_can01",
		"prop_paints_can02",
		"prop_paints_can03",
		"prop_paints_can04",
		"prop_paints_can05",
		"prop_paints_can06",
		"prop_paints_can07",
		"prop_paint_brush01",
		"prop_paint_brush02",
		"prop_paint_brush03",
		"prop_paint_brush04",
		"prop_paint_brush05",
		"prop_paint_roller",
		"prop_paint_spray01a",
		"prop_paint_spray01b",
		"prop_paint_stepl01",
		"prop_paint_stepl01b",
		"prop_paint_stepl02",
		"prop_paint_tray",
		"prop_paint_wpaper01",
		"prop_pallettruck_01",
		"prop_palm_fan_02_a",
		"prop_palm_fan_02_b",
		"prop_palm_fan_03_a",
		"prop_palm_fan_03_b",
		"prop_palm_fan_03_c",
		"prop_palm_fan_03_d",
		"prop_palm_fan_04_a",
		"prop_palm_fan_04_b",
		"prop_palm_fan_04_c",
		"prop_palm_fan_04_d",
		"prop_palm_huge_01a",
		"prop_palm_huge_01b",
		"prop_palm_med_01a",
		"prop_palm_med_01b",
		"prop_palm_med_01c",
		"prop_palm_med_01d",
		"prop_palm_sm_01a",
		"prop_palm_sm_01d",
		"prop_palm_sm_01e",
		"prop_palm_sm_01f",
		"prop_paper_bag_01",
		"prop_paper_bag_small",
		"prop_paper_ball",
		"prop_paper_box_01",
		"prop_paper_box_02",
		"prop_paper_box_03",
		"prop_paper_box_04",
		"prop_paper_box_05",
		"prop_pap_camera_01",
		"prop_parachute",
		"prop_parapack_01",
		"prop_parasol_01",
		"prop_parasol_01_b",
		"prop_parasol_01_c",
		"prop_parasol_01_down",
		"prop_parasol_02",
		"prop_parasol_02_b",
		"prop_parasol_02_c",
		"prop_parasol_03",
		"prop_parasol_03_b",
		"prop_parasol_03_c",
		"prop_parasol_04e",
		"prop_parasol_04e_lod1",
		"prop_parasol_bh_48",
		"prop_parking_sign_06",
		"prop_parking_sign_07",
		"prop_parking_sign_1",
		"prop_parking_sign_2",
		"prop_parking_wand_01",
		"prop_park_ticket_01",
		"prop_partsbox_01",
		"prop_passport_01",
		"prop_patio_heater_01",
		"prop_patio_lounger1",
		"prop_patio_lounger1b",
		"prop_patio_lounger1_table",
		"prop_patio_lounger_2",
		"prop_patio_lounger_3",
		"prop_patriotneon",
		"prop_paynspray_door_l",
		"prop_paynspray_door_r",
		"prop_pc_01a",
		"prop_pc_02a",
		"prop_peanut_bowl_01",
		"prop_ped_pic_01",
		"prop_ped_pic_01_sm",
		"prop_ped_pic_02",
		"prop_ped_pic_02_sm",
		"prop_ped_pic_03",
		"prop_ped_pic_03_sm",
		"prop_ped_pic_04",
		"prop_ped_pic_04_sm",
		"prop_ped_pic_05",
		"prop_ped_pic_05_sm",
		"prop_ped_pic_06",
		"prop_ped_pic_06_sm",
		"prop_ped_pic_07",
		"prop_ped_pic_07_sm",
		"prop_ped_pic_08",
		"prop_ped_pic_08_sm",
		"prop_pencil_01",
		"prop_pharm_sign_01",
		"prop_phonebox_05a",
		"prop_phone_ing",
		"prop_phone_ing_02",
		"prop_phone_ing_03",
		"prop_phone_overlay_01",
		"prop_phone_overlay_02",
		"prop_phone_overlay_anim",
		"prop_phone_proto",
		"prop_phone_proto_back",
		"prop_phone_proto_battery",
		"prop_picnictable_02",
		"prop_piercing_gun",
		"prop_pier_kiosk_01",
		"prop_pier_kiosk_02",
		"prop_pier_kiosk_03",
		"prop_pile_dirt_01",
		"prop_pile_dirt_02",
		"prop_pile_dirt_03",
		"prop_pile_dirt_04",
		"prop_pile_dirt_06",
		"prop_pile_dirt_07",
		"prop_ping_pong",
		"prop_pipes_01a",
		"prop_pipes_01b",
		"prop_pipes_03b",
		"prop_pipes_04a",
		"prop_pipes_05a",
		"prop_pipes_conc_01",
		"prop_pipes_conc_02",
		"prop_pipe_single_01",
		"prop_pistol_holster",
		"prop_pitcher_01_cs",
		"prop_pizza_box_01",
		"prop_pizza_box_02",
		"prop_pizza_oven_01",
		"prop_planer_01",
		"prop_plant_01a",
		"prop_plant_01b",
		"prop_plant_base_01",
		"prop_plant_base_02",
		"prop_plant_base_03",
		"prop_plant_cane_01a",
		"prop_plant_cane_01b",
		"prop_plant_cane_02a",
		"prop_plant_cane_02b",
		"prop_plant_clover_01",
		"prop_plant_clover_02",
		"prop_plant_fern_01a",
		"prop_plant_fern_01b",
		"prop_plant_fern_02a",
		"prop_plant_fern_02b",
		"prop_plant_fern_02c",
		"prop_plant_flower_01",
		"prop_plant_flower_02",
		"prop_plant_flower_03",
		"prop_plant_flower_04",
		"prop_plant_group_01",
		"prop_plant_group_02",
		"prop_plant_group_03",
		"prop_plant_group_04",
		"prop_plant_group_05",
		"prop_plant_group_05b",
		"prop_plant_group_05c",
		"prop_plant_group_05d",
		"prop_plant_group_06a",
		"prop_plant_group_06b",
		"prop_plant_group_06c",
		"prop_plant_int_02a",
		"prop_plant_int_02b",
		"prop_plant_int_05a",
		"prop_plant_int_05b",
		"prop_plant_int_06a",
		"prop_plant_int_06b",
		"prop_plant_int_06c",
		"prop_plant_paradise",
		"prop_plant_paradise_b",
		"prop_plastic_cup_02",
		"prop_plas_barier_01a",
		"prop_plate_04",
		"prop_plate_stand_01",
		"prop_plate_warmer",
		"prop_player_gasmask",
		"prop_player_phone_01",
		"prop_player_phone_02",
		"prop_pliers_01",
		"prop_plywoodpile_01a",
		"prop_plywoodpile_01b",
		"prop_podium_mic",
		"prop_police_door_l",
		"prop_police_door_l_dam",
		"prop_police_door_r",
		"prop_police_door_r_dam",
		"prop_police_door_surround",
		"prop_police_phone",
		"prop_police_radio_handset",
		"prop_police_radio_main",
		"prop_poly_bag_01",
		"prop_poly_bag_money",
		"prop_poolball_1",
		"prop_poolball_10",
		"prop_poolball_11",
		"prop_poolball_12",
		"prop_poolball_13",
		"prop_poolball_14",
		"prop_poolball_15",
		"prop_poolball_2",
		"prop_poolball_3",
		"prop_poolball_4",
		"prop_poolball_5",
		"prop_poolball_6",
		"prop_poolball_7",
		"prop_poolball_8",
		"prop_poolball_9",
		"prop_poolball_cue",
		"prop_poolskimmer",
		"prop_pooltable_02",
		"prop_pooltable_3b",
		"prop_pool_ball_01",
		"prop_pool_cue",
		"prop_pool_rack_01",
		"prop_pool_rack_02",
		"prop_pool_tri",
		"prop_porn_mag_01",
		"prop_porn_mag_02",
		"prop_porn_mag_03",
		"prop_porn_mag_04",
		"prop_portable_hifi_01",
		"prop_portacabin01",
		"prop_portasteps_01",
		"prop_portasteps_02",
		"prop_postcard_rack",
		"prop_poster_tube_01",
		"prop_poster_tube_02",
		"prop_postit_drive",
		"prop_postit_gun",
		"prop_postit_it",
		"prop_postit_lock",
		"prop_potatodigger",
		"prop_pot_01",
		"prop_pot_02",
		"prop_pot_03",
		"prop_pot_04",
		"prop_pot_05",
		"prop_pot_06",
		"prop_pot_plant_02a",
		"prop_pot_plant_02b",
		"prop_pot_plant_02c",
		"prop_pot_plant_02d",
		"prop_pot_plant_03a",
		"prop_pot_plant_04a",
		"prop_pot_plant_05d_l1",
		"prop_pot_plant_bh1",
		"prop_pot_rack",
		"prop_power_cell",
		"prop_power_cord_01",
		"prop_premier_fence_01",
		"prop_premier_fence_02",
		"prop_printer_01",
		"prop_printer_02",
		"prop_pris_bars_01",
		"prop_pris_bench_01",
		"prop_pris_door_01_l",
		"prop_pris_door_01_r",
		"prop_pris_door_02",
		"prop_pris_door_03",
		"prop_prlg_gravestone_05a_l1",
		"prop_prlg_gravestone_06a",
		"prop_projector_overlay",
		"prop_prologue_phone",
		"prop_prop_tree_01",
		"prop_prop_tree_02",
		"prop_protest_sign_01",
		"prop_protest_table_01",
		"prop_prototype_minibomb",
		"prop_proxy_chateau_table",
		"prop_punch_bag_l",
		"prop_pylon_01",
		"prop_pylon_02",
		"prop_pylon_03",
		"prop_pylon_04",
		"prop_p_jack_03_col",
		"prop_p_spider_01a",
		"prop_p_spider_01c",
		"prop_p_spider_01d",
		"prop_ql_revolving_door",
		"prop_quad_grid_line",
		"prop_radiomast01",
		"prop_radiomast02",
		"prop_rad_waste_barrel_01",
		"prop_ragganeon",
		"prop_rag_01",
		"prop_railsleepers01",
		"prop_railsleepers02",
		"prop_railstack01",
		"prop_railstack02",
		"prop_railstack03",
		"prop_railstack04",
		"prop_railstack05",
		"prop_rail_boxcar",
		"prop_rail_boxcar2",
		"prop_rail_boxcar3",
		"prop_rail_boxcar4",
		"prop_rail_boxcar5",
		"prop_rail_boxcar5_d",
		"prop_rail_buffer_01",
		"prop_rail_buffer_02",
		"prop_rail_controller",
		"prop_rail_crane_01",
		"prop_rail_points01",
		"prop_rail_points02",
		"prop_rail_sigbox01",
		"prop_rail_sigbox02",
		"prop_rail_signals02",
		"prop_rail_tankcar",
		"prop_rail_tankcar2",
		"prop_rail_tankcar3",
		"prop_rail_wellcar",
		"prop_rail_wellcar2",
		"prop_range_target_01",
		"prop_range_target_02",
		"prop_range_target_03",
		"prop_rebar_pile01",
		"prop_recyclebin_02a",
		"prop_recyclebin_02b",
		"prop_recyclebin_02_c",
		"prop_recyclebin_02_d",
		"prop_recyclebin_03_a",
		"prop_recyclebin_04_a",
		"prop_recyclebin_04_b",
		"prop_recyclebin_05_a",
		"prop_ret_door",
		"prop_ret_door_02",
		"prop_ret_door_03",
		"prop_ret_door_04",
		"prop_rf_conc_pillar",
		"prop_riding_crop_01",
		"prop_riot_shield",
		"prop_rio_del_01",
		"prop_roadcone01a",
		"prop_roadcone01b",
		"prop_roadcone01c",
		"prop_roadcone02a",
		"prop_roadcone02b",
		"prop_roadcone02c",
		"prop_roadheader_01",
		"prop_rock_1_a",
		"prop_rock_1_b",
		"prop_rock_1_c",
		"prop_rock_1_d",
		"prop_rock_1_e",
		"prop_rock_1_f",
		"prop_rock_1_g",
		"prop_rock_1_h",
		"prop_rock_1_i",
		"prop_rock_2_a",
		"prop_rock_2_c",
		"prop_rock_2_d",
		"prop_rock_2_f",
		"prop_rock_2_g",
		"prop_rock_3_a",
		"prop_rock_3_b",
		"prop_rock_3_c",
		"prop_rock_3_d",
		"prop_rock_3_e",
		"prop_rock_3_f",
		"prop_rock_3_g",
		"prop_rock_3_h",
		"prop_rock_3_i",
		"prop_rock_3_j",
		"prop_rock_4_c",
		"prop_rock_4_d",
		"prop_rock_chair_01",
		"prop_rolled_sock_01",
		"prop_rolled_sock_02",
		"prop_rolled_yoga_mat",
		"prop_roller_car_01",
		"prop_roller_car_02",
		"prop_ron_door_01",
		"prop_roofpipe_01",
		"prop_roofpipe_02",
		"prop_roofpipe_03",
		"prop_roofpipe_04",
		"prop_roofpipe_05",
		"prop_roofpipe_06",
		"prop_roofvent_011a",
		"prop_roofvent_01a",
		"prop_roofvent_01b",
		"prop_roofvent_02a",
		"prop_roofvent_02b",
		"prop_roofvent_03a",
		"prop_roofvent_04a",
		"prop_roofvent_05a",
		"prop_roofvent_05b",
		"prop_roofvent_07a",
		"prop_roofvent_08a",
		"prop_roofvent_09a",
		"prop_roofvent_10a",
		"prop_roofvent_10b",
		"prop_roofvent_11b",
		"prop_roofvent_11c",
		"prop_roofvent_12a",
		"prop_roofvent_13a",
		"prop_roofvent_15a",
		"prop_roofvent_16a",
		"prop_rope_family_3",
		"prop_rope_hook_01",
		"prop_roundbailer01",
		"prop_roundbailer02",
		"prop_rub_bike_01",
		"prop_rub_bike_02",
		"prop_rub_bike_03",
		"prop_rub_binbag_sd_01",
		"prop_rub_binbag_sd_02",
		"prop_rub_busdoor_01",
		"prop_rub_busdoor_02",
		"prop_rub_buswreck_01",
		"prop_rub_buswreck_03",
		"prop_rub_buswreck_06",
		"prop_rub_cabinet",
		"prop_rub_cabinet01",
		"prop_rub_cabinet02",
		"prop_rub_cabinet03",
		"prop_rub_cage01a",
		"prop_rub_carpart_02",
		"prop_rub_carpart_03",
		"prop_rub_carpart_04",
		"prop_rub_chassis_01",
		"prop_rub_chassis_02",
		"prop_rub_chassis_03",
		"prop_rub_cont_01a",
		"prop_rub_cont_01b",
		"prop_rub_cont_01c",
		"prop_rub_flotsam_01",
		"prop_rub_flotsam_02",
		"prop_rub_flotsam_03",
		"prop_rub_frklft",
		"prop_rub_litter_01",
		"prop_rub_litter_02",
		"prop_rub_litter_03",
		"prop_rub_litter_03b",
		"prop_rub_litter_03c",
		"prop_rub_litter_04",
		"prop_rub_litter_04b",
		"prop_rub_litter_05",
		"prop_rub_litter_06",
		"prop_rub_litter_07",
		"prop_rub_litter_09",
		"prop_rub_litter_8",
		"prop_rub_matress_01",
		"prop_rub_matress_02",
		"prop_rub_matress_03",
		"prop_rub_matress_04",
		"prop_rub_monitor",
		"prop_rub_pile_01",
		"prop_rub_pile_02",
		"prop_rub_planks_01",
		"prop_rub_planks_02",
		"prop_rub_planks_03",
		"prop_rub_planks_04",
		"prop_rub_railwreck_1",
		"prop_rub_railwreck_2",
		"prop_rub_railwreck_3",
		"prop_rub_scrap_02",
		"prop_rub_scrap_03",
		"prop_rub_scrap_04",
		"prop_rub_scrap_05",
		"prop_rub_scrap_06",
		"prop_rub_scrap_07",
		"prop_rub_stool",
		"prop_rub_sunktyre",
		"prop_rub_t34",
		"prop_rub_trainers_01",
		"prop_rub_trolley01a",
		"prop_rub_trolley02a",
		"prop_rub_trolley03a",
		"prop_rub_trukwreck_1",
		"prop_rub_trukwreck_2",
		"prop_rub_tyre_01",
		"prop_rub_tyre_02",
		"prop_rub_tyre_03",
		"prop_rub_tyre_dam1",
		"prop_rub_tyre_dam2",
		"prop_rub_tyre_dam3",
		"prop_rub_washer_01",
		"prop_rub_wheel_01",
		"prop_rub_wheel_02",
		"prop_rub_wreckage_3",
		"prop_rub_wreckage_4",
		"prop_rub_wreckage_5",
		"prop_rub_wreckage_6",
		"prop_rub_wreckage_7",
		"prop_rub_wreckage_8",
		"prop_rub_wreckage_9",
		"prop_rural_windmill_l1",
		"prop_rural_windmill_l2",
		"prop_rus_olive",
		"prop_rus_olive_wint",
		"prop_sacktruck_01",
		"prop_sacktruck_02a",
		"prop_safety_glasses",
		"prop_sam_01",
		"prop_sandwich_01",
		"prop_satdish_2_a",
		"prop_satdish_2_f",
		"prop_satdish_2_g",
		"prop_satdish_3_b",
		"prop_satdish_3_c",
		"prop_satdish_3_d",
		"prop_satdish_l_01",
		"prop_satdish_s_03",
		"prop_satdish_s_05a",
		"prop_satdish_s_05b",
		"prop_sc1_06_gate_l",
		"prop_sc1_06_gate_r",
		"prop_sc1_12_door",
		"prop_sc1_21_g_door_01",
		"prop_scaffold_pole",
		"prop_scafold_01a",
		"prop_scafold_01c",
		"prop_scafold_01f",
		"prop_scafold_02a",
		"prop_scafold_02c",
		"prop_scafold_03a",
		"prop_scafold_03b",
		"prop_scafold_03c",
		"prop_scafold_03f",
		"prop_scafold_04a",
		"prop_scafold_05a",
		"prop_scafold_06a",
		"prop_scafold_06b",
		"prop_scafold_06c",
		"prop_scafold_07a",
		"prop_scafold_08a",
		"prop_scafold_09a",
		"prop_scafold_frame1a",
		"prop_scafold_frame1b",
		"prop_scafold_frame1c",
		"prop_scafold_frame1f",
		"prop_scafold_frame2a",
		"prop_scafold_frame2b",
		"prop_scafold_frame2c",
		"prop_scafold_frame3a",
		"prop_scafold_frame3c",
		"prop_scafold_rail_01",
		"prop_scafold_rail_02",
		"prop_scafold_rail_03",
		"prop_scafold_xbrace",
		"prop_scalpel",
		"prop_scn_police_torch",
		"prop_scourer_01",
		"prop_scrap_2_crate",
		"prop_scrap_win_01",
		"prop_scrim_01",
		"prop_scythemower",
		"prop_section_garage_01",
		"prop_securityvan_lightrig",
		"prop_security_case_01",
		"prop_security_case_02",
		"prop_sec_gate_01b",
		"prop_sec_gate_01c",
		"prop_sec_gate_01d",
		"prop_set_generator_01",
		"prop_sewing_fabric",
		"prop_sewing_machine",
		"prop_sglasses_stand_01",
		"prop_sglasses_stand_02",
		"prop_sglasses_stand_02b",
		"prop_sglasses_stand_03",
		"prop_sglasss_1b_lod",
		"prop_sglasss_1_lod",
		"prop_shamal_crash",
		"prop_shelves_01",
		"prop_shelves_02",
		"prop_shelves_03",
		"prop_shopping_bags01",
		"prop_shopping_bags02",
		"prop_shop_front_door_l",
		"prop_shop_front_door_r",
		"prop_shots_glass_cs",
		"prop_shower_01",
		"prop_shower_rack_01",
		"prop_shower_towel",
		"prop_showroom_door_l",
		"prop_showroom_door_r",
		"prop_showroom_glass_1b",
		"prop_shredder_01",
		"prop_shrub_rake",
		"prop_shuttering01",
		"prop_shuttering02",
		"prop_shuttering03",
		"prop_shuttering04",
		"prop_sh_beer_pissh_01",
		"prop_sh_bong_01",
		"prop_sh_cigar_01",
		"prop_sh_joint_01",
		"prop_sh_mr_rasp_01",
		"prop_sh_shot_glass",
		"prop_sh_tall_glass",
		"prop_sh_tt_fridgedoor",
		"prop_sh_wine_glass",
		"prop_side_lights",
		"prop_side_spreader",
		"prop_sign_airp_01a",
		"prop_sign_airp_02a",
		"prop_sign_airp_02b",
		"prop_sign_big_01",
		"prop_sign_mallet",
		"prop_sign_road_04g_l1",
		"prop_single_grid_line",
		"prop_single_rose",
		"prop_sink_01",
		"prop_sink_02",
		"prop_sink_03",
		"prop_sink_04",
		"prop_sink_05",
		"prop_sink_06",
		"prop_skate_flatramp",
		"prop_skate_funbox",
		"prop_skate_halfpipe",
		"prop_skate_kickers",
		"prop_skate_quartpipe",
		"prop_skate_rail",
		"prop_skate_spiner",
		"prop_skid_chair_01",
		"prop_skid_chair_02",
		"prop_skid_chair_03",
		"prop_skid_sleepbag_1",
		"prop_skid_tent_01",
		"prop_skid_tent_01b",
		"prop_skid_tent_03",
		"prop_skip_01a",
		"prop_skip_02a",
		"prop_skip_03",
		"prop_skip_04",
		"prop_skip_05a",
		"prop_skip_05b",
		"prop_skip_06a",
		"prop_skip_08a",
		"prop_skip_08b",
		"prop_skip_10a",
		"prop_skip_rope_01",
		"prop_skunk_bush_01",
		"prop_skylight_01",
		"prop_skylight_02",
		"prop_skylight_03",
		"prop_skylight_04",
		"prop_skylight_05",
		"prop_skylight_06a",
		"prop_skylight_06b",
		"prop_skylight_06c",
		"prop_sky_cover_01",
		"prop_slacks_01",
		"prop_slacks_02",
		"prop_sluicegate",
		"prop_sluicegatel",
		"prop_sluicegater",
		"prop_slush_dispenser",
		"prop_sm1_11_doorl",
		"prop_sm1_11_doorr",
		"prop_sm1_11_garaged",
		"prop_smg_holster_01",
		"prop_sm_10_mp_door",
		"prop_sm_14_mp_gar",
		"prop_sm_19_clock",
		"prop_sm_27_door",
		"prop_sm_27_gate",
		"prop_sm_27_gate_02",
		"prop_sm_27_gate_03",
		"prop_sm_27_gate_04",
		"prop_sm_locker_door",
		"prop_snow_bailer_01",
		"prop_snow_barrel_pile_03",
		"prop_snow_bench_01",
		"prop_snow_bin_01",
		"prop_snow_bin_02",
		"prop_snow_bush_01_a",
		"prop_snow_bush_02_a",
		"prop_snow_bush_02_b",
		"prop_snow_bush_03",
		"prop_snow_bush_04",
		"prop_snow_bush_04b",
		"prop_snow_cam_03",
		"prop_snow_cam_03a",
		"prop_snow_diggerbkt_01",
		"prop_snow_dumpster_01",
		"prop_snow_elecbox_16",
		"prop_snow_facgate_01",
		"prop_snow_field_01",
		"prop_snow_field_02",
		"prop_snow_field_03",
		"prop_snow_field_04",
		"prop_snow_flower_01",
		"prop_snow_flower_02",
		"prop_snow_fnclink_03crnr2",
		"prop_snow_fnclink_03h",
		"prop_snow_fnclink_03i",
		"prop_snow_fncwood_14a",
		"prop_snow_fncwood_14b",
		"prop_snow_fncwood_14c",
		"prop_snow_fncwood_14d",
		"prop_snow_fncwood_14e",
		"prop_snow_fnc_01",
		"prop_snow_gate_farm_03",
		"prop_snow_grain_01",
		"prop_snow_grass_01",
		"prop_snow_light_01",
		"prop_snow_oldlight_01b",
		"prop_snow_rail_signals02",
		"prop_snow_rub_trukwreck_2",
		"prop_snow_side_spreader_01",
		"prop_snow_streetlight01",
		"prop_snow_streetlight_01_frag_",
		"prop_snow_sub_frame_01a",
		"prop_snow_sub_frame_04b",
		"prop_snow_telegraph_01a",
		"prop_snow_telegraph_02a",
		"prop_snow_telegraph_03",
		"prop_snow_traffic_rail_1a",
		"prop_snow_traffic_rail_1b",
		"prop_snow_trailer01",
		"prop_snow_tree_03_e",
		"prop_snow_tree_03_h",
		"prop_snow_tree_03_i",
		"prop_snow_tree_04_d",
		"prop_snow_tree_04_f",
		"prop_snow_truktrailer_01a",
		"prop_snow_tyre_01",
		"prop_snow_t_ml_01",
		"prop_snow_t_ml_02",
		"prop_snow_t_ml_03",
		"prop_snow_wall_light_15a",
		"prop_snow_watertower01",
		"prop_snow_watertower01_l2",
		"prop_snow_watertower03",
		"prop_snow_woodpile_04a",
		"prop_soap_disp_01",
		"prop_soap_disp_02",
		"prop_solarpanel_01",
		"prop_solarpanel_02",
		"prop_solarpanel_03",
		"prop_sol_chair",
		"prop_space_pistol",
		"prop_space_rifle",
		"prop_speaker_01",
		"prop_speaker_02",
		"prop_speaker_03",
		"prop_speaker_05",
		"prop_speaker_06",
		"prop_speaker_07",
		"prop_speaker_08",
		"prop_speedball_01",
		"prop_sponge_01",
		"prop_sports_clock_01",
		"prop_spot_01",
		"prop_spot_clamp",
		"prop_spot_clamp_02",
		"prop_sprayer",
		"prop_spraygun_01",
		"prop_spray_backpack_01",
		"prop_spray_jackframe",
		"prop_spray_jackleg",
		"prop_sprink_crop_01",
		"prop_sprink_golf_01",
		"prop_sprink_park_01",
		"prop_spycam",
		"prop_squeegee",
		"prop_ss1_05_mp_door",
		"prop_ss1_08_mp_door_l",
		"prop_ss1_08_mp_door_r",
		"prop_ss1_10_door_l",
		"prop_ss1_10_door_r",
		"prop_ss1_14_garage_door",
		"prop_ss1_mpint_door_l",
		"prop_ss1_mpint_door_r",
		"prop_ss1_mpint_garage",
		"prop_ss1_mpint_garage_cl",
		"prop_stag_do_rope",
		"prop_start_finish_line_01",
		"prop_start_grid_01",
		"prop_staticmixer_01",
		"prop_stat_pack_01",
		"prop_steam_basket_01",
		"prop_steam_basket_02",
		"prop_steps_big_01",
		"prop_stickbfly",
		"prop_stickhbird",
		"prop_still",
		"prop_stockade_wheel",
		"prop_stockade_wheel_flat",
		"prop_stool_01",
		"prop_storagetank_01",
		"prop_storagetank_02",
		"prop_storagetank_03",
		"prop_storagetank_03a",
		"prop_storagetank_03b",
		"prop_storagetank_04",
		"prop_storagetank_05",
		"prop_storagetank_06",
		"prop_storagetank_07a",
		"prop_stripmenu",
		"prop_strip_door_01",
		"prop_strip_pole_01",
		"prop_studio_light_02",
		"prop_studio_light_03",
		"prop_sub_chunk_01",
		"prop_sub_cover_01",
		"prop_sub_crane_hook",
		"prop_sub_frame_01a",
		"prop_sub_frame_01b",
		"prop_sub_frame_01c",
		"prop_sub_frame_02a",
		"prop_sub_frame_03a",
		"prop_sub_frame_04a",
		"prop_sub_frame_04b",
		"prop_sub_gantry",
		"prop_sub_release",
		"prop_sub_trans_01a",
		"prop_sub_trans_02a",
		"prop_sub_trans_03a",
		"prop_sub_trans_04a",
		"prop_sub_trans_05b",
		"prop_sub_trans_06b",
		"prop_suitcase_01",
		"prop_suitcase_01b",
		"prop_suitcase_01c",
		"prop_suitcase_01d",
		"prop_suitcase_02",
		"prop_suitcase_03",
		"prop_suitcase_03b",
		"prop_surf_board_ldn_01",
		"prop_surf_board_ldn_02",
		"prop_surf_board_ldn_03",
		"prop_surf_board_ldn_04",
		"prop_syringe_01",
		"prop_s_pine_dead_01",
		"prop_tablesaw_01",
		"prop_tablesmall_01",
		"prop_table_02",
		"prop_table_03b_cs",
		"prop_table_04",
		"prop_table_04_chr",
		"prop_table_05",
		"prop_table_05_chr",
		"prop_table_06",
		"prop_table_06_chr",
		"prop_table_07",
		"prop_table_07_l1",
		"prop_table_08",
		"prop_table_08_chr",
		"prop_table_08_side",
		"prop_table_mic_01",
		"prop_table_para_comb_04",
		"prop_table_tennis",
		"prop_table_ten_bat",
		"prop_taco_01",
		"prop_taco_02",
		"prop_tail_gate_col",
		"prop_tapeplayer_01",
		"prop_target_arm",
		"prop_target_arm_b",
		"prop_target_arm_long",
		"prop_target_arm_sm",
		"prop_target_backboard",
		"prop_target_backboard_b",
		"prop_target_blue",
		"prop_target_blue_arrow",
		"prop_target_bull",
		"prop_target_bull_b",
		"prop_target_comp_metal",
		"prop_target_comp_wood",
		"prop_target_frame_01",
		"prop_target_inner1",
		"prop_target_inner2",
		"prop_target_inner2_b",
		"prop_target_inner3",
		"prop_target_inner3_b",
		"prop_target_inner_b",
		"prop_target_orange_arrow",
		"prop_target_oran_cross",
		"prop_target_ora_purp_01",
		"prop_target_purp_arrow",
		"prop_target_purp_cross",
		"prop_target_red",
		"prop_target_red_arrow",
		"prop_target_red_blue_01",
		"prop_target_red_cross",
		"prop_tarp_strap",
		"prop_taxi_meter_1",
		"prop_taxi_meter_2",
		"prop_tea_trolly",
		"prop_tea_urn",
		"prop_telegraph_01a",
		"prop_telegraph_01b",
		"prop_telegraph_01c",
		"prop_telegraph_01d",
		"prop_telegraph_01e",
		"prop_telegraph_01f",
		"prop_telegraph_01g",
		"prop_telegraph_02a",
		"prop_telegraph_02b",
		"prop_telegraph_03",
		"prop_telegraph_04a",
		"prop_telegraph_04b",
		"prop_telegraph_05a",
		"prop_telegraph_05b",
		"prop_telegraph_05c",
		"prop_telegraph_06a",
		"prop_telegraph_06b",
		"prop_telegraph_06c",
		"prop_telegwall_01a",
		"prop_telegwall_01b",
		"prop_telegwall_02a",
		"prop_telegwall_03a",
		"prop_telegwall_03b",
		"prop_telegwall_04a",
		"prop_telescope",
		"prop_telescope_01",
		"prop_temp_block_blocker",
		"prop_tennis_bag_01",
		"prop_tennis_ball",
		"prop_tennis_ball_lobber",
		"prop_tennis_rack_01",
		"prop_tennis_rack_01b",
		"prop_test_boulder_01",
		"prop_test_boulder_02",
		"prop_test_boulder_03",
		"prop_test_boulder_04",
		"prop_test_elevator",
		"prop_test_elevator_dl",
		"prop_test_elevator_dr",
		"prop_tick",
		"prop_tick_02",
		"prop_till_01_dam",
		"prop_till_02",
		"prop_till_03",
		"prop_time_capsule_01",
		"prop_tint_towel",
		"prop_tint_towels_01",
		"prop_tint_towels_01b",
		"prop_toaster_01",
		"prop_toaster_02",
		"prop_toiletfoot_static",
		"prop_toilet_01",
		"prop_toilet_02",
		"prop_toilet_03",
		"prop_toilet_brush_01",
		"prop_toilet_cube_01",
		"prop_toilet_cube_02",
		"prop_toilet_roll_01",
		"prop_toilet_roll_02",
		"prop_toilet_roll_03",
		"prop_toilet_roll_04",
		"prop_toilet_roll_05",
		"prop_toilet_shamp_01",
		"prop_toilet_shamp_02",
		"prop_toilet_soap_01",
		"prop_toilet_soap_02",
		"prop_toilet_soap_03",
		"prop_toilet_soap_04",
		"prop_toolchest_01",
		"prop_toolchest_02",
		"prop_toolchest_03",
		"prop_toolchest_04",
		"prop_toolchest_05",
		"prop_tool_adjspanner",
		"prop_tool_bench01",
		"prop_tool_bluepnt",
		"prop_tool_box_01",
		"prop_tool_box_02",
		"prop_tool_box_03",
		"prop_tool_box_04",
		"prop_tool_box_05",
		"prop_tool_box_06",
		"prop_tool_box_07",
		"prop_tool_broom",
		"prop_tool_broom2",
		"prop_tool_broom2_l1",
		"prop_tool_cable01",
		"prop_tool_cable02",
		"prop_tool_consaw",
		"prop_tool_drill",
		"prop_tool_fireaxe",
		"prop_tool_hammer",
		"prop_tool_hardhat",
		"prop_tool_jackham",
		"prop_tool_mallet",
		"prop_tool_mopbucket",
		"prop_tool_nailgun",
		"prop_tool_pickaxe",
		"prop_tool_pliers",
		"prop_tool_rake",
		"prop_tool_rake_l1",
		"prop_tool_sawhorse",
		"prop_tool_screwdvr01",
		"prop_tool_screwdvr02",
		"prop_tool_screwdvr03",
		"prop_tool_shovel",
		"prop_tool_shovel006",
		"prop_tool_shovel2",
		"prop_tool_shovel3",
		"prop_tool_shovel4",
		"prop_tool_shovel5",
		"prop_tool_sledgeham",
		"prop_tool_spanner01",
		"prop_tool_spanner02",
		"prop_tool_spanner03",
		"prop_tool_torch",
		"prop_tool_wrench",
		"prop_toothbrush_01",
		"prop_toothb_cup_01",
		"prop_toothpaste_01",
		"prop_tornado_wheel",
		"prop_torture_01",
		"prop_torture_ch_01",
		"prop_tourist_map_01",
		"prop_towel2_01",
		"prop_towel2_02",
		"prop_towel_01",
		"prop_towel_rail_01",
		"prop_towel_rail_02",
		"prop_towel_shelf_01",
		"prop_towel_small_01",
		"prop_towercrane_01a",
		"prop_towercrane_02a",
		"prop_towercrane_02b",
		"prop_towercrane_02c",
		"prop_towercrane_02d",
		"prop_towercrane_02e",
		"prop_towercrane_02el",
		"prop_towercrane_02el2",
		"prop_traffic_rail_1c",
		"prop_traffic_rail_2",
		"prop_trailer01",
		"prop_trailer01_up",
		"prop_trailer_01_new",
		"prop_trailer_door_closed",
		"prop_trailer_door_open",
		"prop_trailer_monitor_01",
		"prop_trailr_base",
		"prop_trailr_base_static",
		"prop_train_ticket_02",
		"prop_tram_pole_double01",
		"prop_tram_pole_double02",
		"prop_tram_pole_double03",
		"prop_tram_pole_roadside",
		"prop_tram_pole_single01",
		"prop_tram_pole_single02",
		"prop_tram_pole_wide01",
		"prop_tree_birch_01",
		"prop_tree_birch_02",
		"prop_tree_birch_03",
		"prop_tree_birch_03b",
		"prop_tree_birch_04",
		"prop_tree_birch_05",
		"prop_tree_cedar_02",
		"prop_tree_cedar_03",
		"prop_tree_cedar_04",
		"prop_tree_cedar_s_01",
		"prop_tree_cedar_s_02",
		"prop_tree_cedar_s_04",
		"prop_tree_cedar_s_05",
		"prop_tree_cedar_s_06",
		"prop_tree_cypress_01",
		"prop_tree_eng_oak_01",
		"prop_tree_eucalip_01",
		"prop_tree_fallen_01",
		"prop_tree_fallen_02",
		"prop_tree_fallen_pine_01",
		"prop_tree_jacada_01",
		"prop_tree_jacada_02",
		"prop_tree_lficus_02",
		"prop_tree_lficus_03",
		"prop_tree_lficus_05",
		"prop_tree_lficus_06",
		"prop_tree_log_01",
		"prop_tree_log_02",
		"prop_tree_maple_02",
		"prop_tree_maple_03",
		"prop_tree_mquite_01",
		"prop_tree_oak_01",
		"prop_tree_olive_01",
		"prop_tree_pine_01",
		"prop_tree_pine_02",
		"prop_tree_stump_01",
		"prop_trevor_rope_01",
		"prop_trev_sec_id",
		"prop_trev_tv_01",
		"prop_triple_grid_line",
		"prop_tri_finish_banner",
		"prop_tri_pod",
		"prop_tri_pod_lod",
		"prop_tri_start_banner",
		"prop_tri_table_01",
		"prop_trough1",
		"prop_truktrailer_01a",
		"prop_tshirt_box_02",
		"prop_tshirt_shelf_1",
		"prop_tshirt_shelf_2",
		"prop_tshirt_shelf_2a",
		"prop_tshirt_shelf_2b",
		"prop_tshirt_shelf_2c",
		"prop_tshirt_stand_01",
		"prop_tshirt_stand_01b",
		"prop_tshirt_stand_02",
		"prop_tshirt_stand_04",
		"prop_tt_screenstatic",
		"prop_tumbler_01",
		"prop_tumbler_01b",
		"prop_tumbler_01_empty",
		"prop_tunnel_liner01",
		"prop_tunnel_liner02",
		"prop_tunnel_liner03",
		"prop_turkey_leg_01",
		"prop_turnstyle_01",
		"prop_tv_02",
		"prop_tv_03_overlay",
		"prop_tv_04",
		"prop_tv_05",
		"prop_tv_06",
		"prop_tv_07",
		"prop_tv_cabinet_03",
		"prop_tv_cabinet_04",
		"prop_tv_cabinet_05",
		"prop_tv_cam_02",
		"prop_tv_flat_01",
		"prop_tv_flat_01_screen",
		"prop_tv_flat_02b",
		"prop_tv_flat_03",
		"prop_tv_flat_03b",
		"prop_tv_flat_michael",
		"prop_tv_test",
		"prop_tyre_rack_01",
		"prop_tyre_spike_01",
		"prop_t_coffe_table",
		"prop_t_shirt_ironing",
		"prop_t_shirt_row_01",
		"prop_t_shirt_row_02",
		"prop_t_shirt_row_02b",
		"prop_t_shirt_row_03",
		"prop_t_shirt_row_04",
		"prop_t_shirt_row_05l",
		"prop_t_shirt_row_05r",
		"prop_t_sofa",
		"prop_t_sofa_02",
		"prop_t_telescope_01b",
		"prop_umpire_01",
		"prop_utensil",
		"prop_valet_03",
		"prop_vault_shutter",
		"prop_vb_34_tencrt_lighting",
		"prop_vcr_01",
		"prop_veg_corn_01",
		"prop_veg_crop_01",
		"prop_veg_crop_02",
		"prop_veg_crop_04",
		"prop_veg_crop_04_leaf",
		"prop_veg_crop_05",
		"prop_veg_crop_06",
		"prop_veg_crop_orange",
		"prop_veg_crop_tr_01",
		"prop_veg_crop_tr_02",
		"prop_veg_grass_01_a",
		"prop_veg_grass_01_b",
		"prop_veg_grass_01_c",
		"prop_veg_grass_01_d",
		"prop_veg_grass_02_a",
		"prop_vehicle_hook",
		"prop_vend_coffe_01",
		"prop_vend_condom_01",
		"prop_vend_fags_01",
		"prop_vend_fridge01",
		"prop_vend_snak_01",
		"prop_venice_board_01",
		"prop_venice_board_02",
		"prop_venice_board_03",
		"prop_venice_counter_01",
		"prop_venice_counter_02",
		"prop_venice_counter_03",
		"prop_venice_counter_04",
		"prop_venice_shop_front_01",
		"prop_venice_sign_09",
		"prop_venice_sign_10",
		"prop_venice_sign_11",
		"prop_venice_sign_12",
		"prop_venice_sign_14",
		"prop_venice_sign_15",
		"prop_venice_sign_16",
		"prop_venice_sign_17",
		"prop_venice_sign_18",
		"prop_ventsystem_01",
		"prop_ventsystem_02",
		"prop_ventsystem_03",
		"prop_ventsystem_04",
		"prop_ven_market_stool",
		"prop_ven_market_table1",
		"prop_ven_shop_1_counter",
		"prop_vertdrill_01",
		"prop_voltmeter_01",
		"prop_v_15_cars_clock",
		"prop_v_5_bclock",
		"prop_v_bmike_01",
		"prop_v_cam_01",
		"prop_v_door_44",
		"prop_v_hook_s",
		"prop_v_m_phone_01",
		"prop_v_m_phone_o1s",
		"prop_v_parachute",
		"prop_waiting_seat_01",
		"prop_wait_bench_01",
		"prop_walllight_ld_01b",
		"prop_wall_light_08a",
		"prop_wall_light_10a",
		"prop_wall_light_10b",
		"prop_wall_light_10c",
		"prop_wall_light_11",
		"prop_wall_light_12",
		"prop_wall_light_17b",
		"prop_wall_light_18a",
		"prop_wall_vent_01",
		"prop_wall_vent_02",
		"prop_wall_vent_03",
		"prop_wall_vent_04",
		"prop_wall_vent_05",
		"prop_wall_vent_06",
		"prop_wardrobe_door_01",
		"prop_warehseshelf01",
		"prop_warehseshelf02",
		"prop_warehseshelf03",
		"prop_warninglight_01",
		"prop_washer_01",
		"prop_washer_02",
		"prop_washer_03",
		"prop_washing_basket_01",
		"prop_watercrate_01",
		"prop_wateringcan",
		"prop_watertower01",
		"prop_watertower02",
		"prop_watertower03",
		"prop_watertower04",
		"prop_waterwheela",
		"prop_waterwheelb",
		"prop_water_bottle",
		"prop_water_bottle_dark",
		"prop_water_corpse_01",
		"prop_water_corpse_02",
		"prop_water_ramp_01",
		"prop_water_ramp_02",
		"prop_water_ramp_03",
		"prop_weed_01",
		"prop_weed_02",
		"prop_weed_block_01",
		"prop_weed_bottle",
		"prop_weed_pallet",
		"prop_weed_tub_01",
		"prop_weed_tub_01b",
		"prop_weight_10k",
		"prop_weight_15k",
		"prop_weight_1_5k",
		"prop_weight_20k",
		"prop_weight_2_5k",
		"prop_weight_5k",
		"prop_weight_rack_01",
		"prop_weight_rack_02",
		"prop_welding_mask_01",
		"prop_weld_torch",
		"prop_wheat_grass_empty",
		"prop_wheat_grass_glass",
		"prop_wheelbarrow01a",
		"prop_wheelbarrow02a",
		"prop_wheelchair_01",
		"prop_wheel_01",
		"prop_wheel_02",
		"prop_wheel_03",
		"prop_wheel_04",
		"prop_wheel_05",
		"prop_wheel_06",
		"prop_wheel_hub_01",
		"prop_wheel_hub_02_lod_02",
		"prop_wheel_rim_01",
		"prop_wheel_rim_02",
		"prop_wheel_rim_03",
		"prop_wheel_rim_04",
		"prop_wheel_rim_05",
		"prop_wheel_tyre",
		"prop_whisk",
		"prop_white_keyboard",
		"prop_winch_hook_long",
		"prop_winch_hook_short",
		"prop_windmill2",
		"prop_windmill_01_l1",
		"prop_windmill_01_slod",
		"prop_windmill_01_slod2",
		"prop_windowbox_a",
		"prop_windowbox_b",
		"prop_windowbox_broken",
		"prop_windowbox_small",
		"prop_win_plug_01",
		"prop_win_plug_01_dam",
		"prop_win_trailer_ld",
		"prop_wok",
		"prop_woodpile_02a",
		"prop_worklight_01a_l1",
		"prop_worklight_03a_l1",
		"prop_worklight_03b_l1",
		"prop_worklight_04a",
		"prop_worklight_04b_l1",
		"prop_worklight_04c_l1",
		"prop_worklight_04d_l1",
		"prop_workwall_01",
		"prop_workwall_02",
		"prop_wreckedcart",
		"prop_wrecked_buzzard",
		"prop_w_board_blank",
		"prop_w_board_blank_2",
		"prop_w_fountain_01",
		"prop_w_r_cedar_01",
		"prop_w_r_cedar_dead",
		"prop_xmas_tree_int",
		"prop_xmas_ext",
		"prop_yacht_lounger",
		"prop_yacht_seat_01",
		"prop_yacht_seat_02",
		"prop_yacht_seat_03",
		"prop_yacht_table_01",
		"prop_yacht_table_02",
		"prop_yacht_table_03",
		"prop_yaught_chair_01",
		"prop_yaught_sofa_01",
		"prop_yell_plastic_target",
		"prop_yoga_mat_01",
		"prop_yoga_mat_02",
		"prop_yoga_mat_03",
		"prop_ztype_covered",
		"p_ing_skiprope_01",
		"p_ing_skiprope_01_s",
		"p_skiprope_r_s",
		"test_prop_gravestones_04a",
		"test_prop_gravestones_05a",
		"test_prop_gravestones_07a",
		"test_prop_gravestones_08a",
		"test_prop_gravestones_09a",
		"test_prop_gravetomb_01a",
		"test_prop_gravetomb_02a",
		"prop_cs_dog_lead_a_s",
		"prop_cs_dog_lead_b_s",
		"prop_welding_mask_01_s",
		"prop_wheelchair_01_s",
		"p_a4_sheets_s",
		"p_amanda_note_01_s",
		"p_armchair_01_s",
		"p_arm_bind_cut_s",
		"p_ashley_neck_01_s",
		"p_banknote_onedollar_s",
		"p_banknote_s",
		"p_binbag_01_s",
		"p_bison_winch_s",
		"p_bloodsplat_s",
		"p_blueprints_01_s",
		"p_brain_chunk_s",
		"p_bs_map_door_01_s",
		"p_cablecar_s",
		"p_cablecar_s_door_l",
		"p_cablecar_s_door_r",
		"p_cash_envelope_01_s",
		"p_cctv_s",
		"p_chem_vial_02b_s",
		"p_clb_officechair_s",
		"p_cletus_necklace_s",
		"p_clothtarp_down_s",
		"p_clothtarp_s",
		"p_clothtarp_up_s",
		"p_controller_01_s",
		"p_crahsed_heli_s",
		"p_cs1_14b_train_s",
		"p_cs1_14b_train_s_col",
		"p_cs1_14b_train_s_colopen",
		"p_csbporndudes_necklace_s",
		"p_csh_strap_01_pro_s",
		"p_csh_strap_01_s",
		"p_csh_strap_03_s",
		"p_cs_15m_rope_s",
		"p_cs_bandana_s",
		"p_cs_beachtowel_01_s",
		"p_cs_beverly_lanyard_s",
		"p_cs_bowl_01b_s",
		"p_cs_ciggy_01b_s",
		"p_cs_clothes_box_s",
		"p_cs_coke_line_s",
		"p_cs_cuffs_02_s",
		"p_cs_duffel_01_s",
		"p_cs_laz_ptail_s",
		"p_cs_leaf_s",
		"p_cs_mp_jet_01_s",
		"p_cs_newspaper_s",
		"p_cs_pamphlet_01_s",
		"p_cs_panties_03_s",
		"p_cs_para_ropebit_s",
		"p_cs_para_ropes_s",
		"p_cs_polaroid_s",
		"p_cs_police_torch_s",
		"p_cs_pour_tube_s",
		"p_cs_power_cord_s",
		"p_cs_rope_tie_01_s",
		"p_cs_sack_01_s",
		"p_cs_saucer_01_s",
		"p_cs_scissors_s",
		"p_cs_script_s",
		"p_cs_shirt_01_s",
		"p_cs_shot_glass_2_s",
		"p_cs_shot_glass_s",
		"p_cs_sub_hook_01_s",
		"p_cs_toaster_s",
		"p_cs_tracy_neck2_s",
		"p_cs_trolley_01_s",
		"p_defilied_ragdoll_01_s",
		"p_devin_box_01_s",
		"p_dinechair_01_s",
		"p_d_scuba_mask_s",
		"p_d_scuba_tank_s",
		"p_ecg_01_cable_01_s",
		"p_fib_rubble_s",
		"p_finale_bld_ground_s",
		"p_finale_bld_pool_s",
		"p_fin_vaultdoor_s",
		"p_flatbed_strap_s",
		"p_folding_chair_01_s",
		"p_gaffer_tape_s",
		"p_gaffer_tape_strip_s",
		"p_gasmask_s",
		"p_gcase_s",
		"p_hand_toilet_s",
		"p_hw1_22_doors_s",
		"p_hw1_22_table_s",
		"p_ice_box_01_s",
		"p_ice_box_proxy_col",
		"p_idol_case_s",
		"p_ilev_p_easychair_s",
		"p_inhaler_01_s",
		"p_jimmyneck_03_s",
		"p_jimmy_necklace_s",
		"p_kitch_juicer_s",
		"p_lamarneck_01_s",
		"p_laptop_02_s",
		"p_large_gold_s",
		"p_lazlow_shirt_s",
		"p_laz_j01_s",
		"p_laz_j02_s",
		"p_ld_cable_tie_01_s",
		"p_ld_crocclips01_s",
		"p_ld_crocclips02_s",
		"p_ld_heist_bag_s_1",
		"p_ld_heist_bag_s_2",
		"p_ld_heist_bag_s_pro",
		"p_ld_heist_bag_s_pro2_s",
		"p_ld_heist_bag_s_pro_o",
		"p_leg_bind_cut_s",
		"p_lestersbed_s",
		"p_lev_sofa_s",
		"p_lifeinv_neck_01_s",
		"p_loose_rag_01_s",
		"p_mbbed_s",
		"p_medal_01_s",
		"p_med_jet_01_s",
		"p_meth_bag_01_s",
		"p_michael_backpack_s",
		"p_michael_scuba_mask_s",
		"p_michael_scuba_tank_s",
		"p_mp_showerdoor_s",
		"p_mrk_harness_s",
		"p_mr_raspberry_01_s",
		"p_novel_01_s",
		"p_b1rd_neck_01_s",
		"p_b1rd_neck_02_s",
		"p_orleans_mask_s",
		"p_ortega_necklace_s",
		"p_oscar_necklace_s",
		"p_overalls_02_s",
		"p_pistol_holster_s",
		"p_po1_01_doorm_s",
		"p_police_radio_hset_s",
		"p_poly_bag_01_s",
		"p_pour_wine_s",
		"p_rail_controller_s",
		"p_res_sofa_l_s",
		"p_rpulley_s",
		"p_sec_case_02_s",
		"p_shower_towel_s",
		"p_single_rose_s",
		"p_smg_holster_01_s",
		"p_soloffchair_s",
		"p_spinning_anus_s",
		"p_steve_scuba_hood_s",
		"p_stretch_necklace_s",
		"p_syringe_01_s",
		"p_s_scuba_mask_s",
		"p_s_scuba_tank_s",
		"p_till_01_s",
		"p_tmom_earrings_s",
		"p_tourist_map_01_s",
		"p_trevor_prologe_bally_s",
		"p_trev_rope_01_s",
		"p_trev_ski_mask_s",
		"p_tumbler_01_s",
		"p_tumbler_02_s1",
		"p_tumbler_cs2_s",
		"p_tv_cam_02_s",
		"p_t_shirt_pile_s",
		"p_v_43_safe_s",
		"p_v_ilev_chopshopswitch_s",
		"p_v_med_p_sofa_s",
		"p_v_res_tt_bed_s",
		"p_wade_necklace_s",
		"p_wboard_clth_s",
		"p_weed_bottle_s",
		"p_whiskey_bottle_s",
		"p_winch_long_s",
		"s_prop_hdphones",
		"s_prop_hdphones_1",
		"v_ilev_fib_door1_s",
		"v_res_msonbed_s",
		"v_res_tre_sofa_s",
		"v_tre_sofa_mess_a_s",
		"v_tre_sofa_mess_b_s",
		"v_tre_sofa_mess_c_s",
		"prop_ar_arrow_1",
		"prop_ar_arrow_2",
		"prop_ar_arrow_3",
		"prop_ar_ring_01",
		"prop_mk_arrow_3d",
		"prop_mk_arrow_flat",
		"prop_mk_bike_logo_1",
		"prop_mk_bike_logo_2",
		"prop_mk_boost",
		"prop_mk_cone",
		"prop_mk_cylinder",
		"prop_mk_flag",
		"prop_mk_flag_2",
		"prop_mk_heli",
		"prop_mk_lap",
		"prop_mk_mp_ring_01",
		"prop_mk_mp_ring_01b",
		"prop_mk_num_0",
		"prop_mk_num_1",
		"prop_mk_num_2",
		"prop_mk_num_3",
		"prop_mk_num_4",
		"prop_mk_num_5",
		"prop_mk_num_6",
		"prop_mk_num_7",
		"prop_mk_num_8",
		"prop_mk_num_9",
		"prop_mk_plane",
		"prop_mk_race_chevron_01",
		"prop_mk_race_chevron_02",
		"prop_mk_race_chevron_03",
		"prop_mk_repair",
		"prop_mk_ring",
		"prop_mk_ring_flat",
		"prop_mk_sphere",
		"prop_mk_tri_cycle",
		"prop_mk_tri_run",
		"prop_mk_tri_swim",
		"prop_mp_arrow_ring",
		"prop_mp_halo",
		"prop_mp_halo_lrg",
		"prop_mp_halo_med",
		"prop_mp_halo_point",
		"prop_mp_halo_point_lrg",
		"prop_mp_halo_point_med",
		"prop_mp_halo_point_sm",
		"prop_mp_halo_rotate",
		"prop_mp_halo_rotate_lrg",
		"prop_mp_halo_rotate_med",
		"prop_mp_halo_rotate_sm",
		"prop_mp_halo_sm",
		"prop_mp_pointer_ring",
		"prop_mp_solid_ring",
		"cj_parachute",
		"gb_cap_use",
		"gb_specs_use",
		"cj_proc_tin2",
		"proc_coral_01",
		"proc_fern_02",
		"proc_litter_01",
		"proc_litter_02",
		"proc_mntn_stone01",
		"proc_mntn_stone02",
		"proc_mntn_stone03",
		"proc_searock_01",
		"proc_searock_02",
		"proc_searock_03",
		"proc_sml_stones01",
		"proc_sml_stones02",
		"proc_sml_stones03",
		"proc_trolley_lakebed",
		"prop_bush_gorse_dry",
		"prop_bush_gorse_lush",
		"prop_coral_01",
		"prop_coral_02",
		"prop_coral_03",
		"prop_sapling_01",
		"prop_seabrain_01",
		"prop_seagroup_02",
		"prop_sealife_01",
		"prop_sealife_02",
		"prop_sealife_03",
		"prop_sealife_04",
		"prop_sealife_05",
		"prop_seaweed_01",
		"prop_seaweed_02",
		"prop_starfish_01",
		"prop_starfish_02",
		"prop_starfish_03",
		"p_dock_rtg_ld_cab",
		"p_dock_rtg_ld_spdr",
		"p_dock_rtg_ld_wheel",
		"p_amb_bag_bottle_01",
		"p_amb_brolly_01",
		"p_amb_brolly_01_s",
		"p_amb_clipboard_01",
		"p_amb_coffeecup_01",
		"p_amb_joint_01",
		"p_amb_lap_top_01",
		"p_amb_lap_top_02",
		"p_amb_phone_01",
		"p_car_keys_01",
		"p_counter_01_glass",
		"p_counter_01_glass_plug",
		"p_counter_02_glass",
		"p_counter_03_glass",
		"p_counter_04_glass",
		"p_cs_cam_phone",
		"p_cs_comb_01",
		"p_cs_laptop_02",
		"p_cs_laptop_02_w",
		"p_cs_locker_01",
		"p_cs_locker_02",
		"p_cs_locker_door_01",
		"p_cs_locker_door_01b",
		"p_cs_locker_door_02",
		"p_cs_paper_disp_02",
		"p_cs_paper_disp_1",
		"p_disp_02_door_01",
		"p_ferris_car_01",
		"p_f_duster_handle_01",
		"p_f_duster_head_01",
		"p_int_jewel_mirror",
		"p_int_jewel_plant_01",
		"p_int_jewel_plant_02",
		"p_jewel_necklace_02",
		"p_ld_am_ball_01",
		"p_ld_coffee_vend_01",
		"p_ld_conc_cyl_01",
		"p_ld_frisbee_01",
		"p_ld_heist_bag_01",
		"p_ld_sax",
		"p_ld_soc_ball_01",
		"p_new_j_counter_01",
		"p_new_j_counter_02",
		"p_new_j_counter_03",
		"p_num_plate_01",
		"p_num_plate_02",
		"p_num_plate_03",
		"p_num_plate_04",
		"p_oil_slick_01",
		"p_pharm_unit_01",
		"p_pharm_unit_02",
		"p_planning_board_01",
		"p_planning_board_02",
		"p_planning_board_03",
		"p_planning_board_04",
		"p_secret_weapon_02",
		"p_stinger_02",
		"p_stinger_03",
		"p_stinger_04",
		"p_stinger_piece_01",
		"p_stinger_piece_02",
		"p_watch_01",
		"p_watch_02",
		"p_watch_03",
		"p_watch_04",
		"p_watch_05",
		"p_watch_06",
		"p_abat_roller_1",
		"p_abat_roller_1_col",
		"p_amb_drain_water_double",
		"p_amb_drain_water_longstrip",
		"p_amb_drain_water_single",
		"p_attache_case_01_s",
		"p_balaclavamichael_s",
		"p_barierbase_test_s",
		"p_barier_test_s",
		"p_beefsplitter_s",
		"p_cargo_chute_s",
		"p_cigar_pack_02_s",
		"p_cs_locker_01_s",
		"p_cs_script_bottle_s",
		"p_dock_crane_cable_s",
		"p_dock_crane_cabl_s",
		"p_dock_crane_sld_s",
		"p_dumpster_t",
		"p_fag_packet_01_s",
		"p_ferris_wheel_amo_l",
		"p_ferris_wheel_amo_l2",
		"p_ferris_wheel_amo_p",
		"p_gar_door_01_s",
		"p_gar_door_02_s",
		"p_gar_door_03_s",
		"p_gdoor1colobject_s",
		"p_gdoor1_s",
		"p_jewel_necklace01_s",
		"p_jewel_necklace02_s",
		"p_jewel_pickup33_s",
		"p_ld_coffee_vend_s",
		"p_ld_heist_bag_s",
		"p_ld_stinger_s",
		"p_litter_picker_s",
		"p_mast_01_s",
		"p_notepad_01_s",
		"p_oil_pjack_01_amo",
		"p_oil_pjack_01_frg_s",
		"p_oil_pjack_02_amo",
		"p_oil_pjack_02_frg_s",
		"p_oil_pjack_03_amo",
		"p_oil_pjack_03_frg_s",
		"p_pallet_02a_s",
		"p_panties_s",
		"p_parachute1_mp_s",
		"p_parachute1_s",
		"p_parachute1_sp_s",
		"p_parachute_fallen_s",
		"p_parachute_s",
		"p_parachute_s_shop",
		"p_para_broken1_s",
		"p_patio_lounger1_s",
		"p_phonebox_02_s",
		"p_pliers_01_s",
		"p_rcss_folded",
		"p_rcss_s",
		"p_ringbinder_01_s",
		"p_sec_gate_01_s",
		"p_sec_gate_01_s_col",
		"p_shoalfish_s",
		"p_sofa_s",
		"p_sub_crane_s",
		"p_sunglass_m_s",
		"p_tennis_bag_01_s",
		"p_tram_crash_s",
		"p_watch_01_s",
		"p_watch_02_s",
		"p_watch_03_s",
		"p_waterboardc_s",
		"p_yacht_chair_01_s",
		"p_yacht_sofa_01_s",
		"p_yoga_mat_01_s",
		"p_yoga_mat_02_s",
		"p_yoga_mat_03_s",
		"pop_v_bank_door_l",
		"pop_v_bank_door_r",
		"p_cut_door_01",
		"p_cut_door_02",
		"p_cut_door_03",
		"p_jewel_door_l",
		"p_jewel_door_r1",
		"p_amb_bagel_01",
		"p_cs_bbbat_01",
		"p_cs_bottle_01",
		"p_cs_clipboard",
		"p_cs_joint_01",
		"p_cs_joint_02",
		"p_cs_lighter_01",
		"p_cs_papers_01",
		"p_cs_papers_02",
		"p_cs_papers_03",
		"p_ing_bagel_01",
		"p_ing_microphonel_01",
		"p_ld_bs_bag_01",
		"p_ld_id_card_002",
		"p_ld_id_card_01",
		"p_rc_handset",
		"p_whiskey_notop",
		"p_whiskey_notop_empty",
		"proc_drkyel001",
		"proc_flower1",
		"proc_flower_wild_04",
		"proc_weeds01a",
		"proc_weeds01b",
		"proc_weeds01c",
		"prop_test_bed",
		"proair_hoc_puck",
		"p_film_set_static_01",
		"rock_4_cl_2_1",
		"rock_4_cl_2_2",
		"w_am_baseball",
		"w_am_baseball_hi",
		"w_am_brfcase",
		"w_am_case",
		"w_am_digiscanner",
		"w_am_digiscanner_hi",
		"w_am_fire_exting",
		"w_am_flare",
		"w_am_flare_hi",
		"w_am_jerrycan",
		"w_ar_advancedrifle",
		"w_ar_advancedrifle_hi",
		"w_ar_advancedrifle_mag1",
		"w_ar_advancedrifle_mag2",
		"w_ar_assaultrifle",
		"w_ar_assaultrifle_hi",
		"w_ar_assaultrifle_mag1",
		"w_ar_assaultrifle_mag2",
		"w_ar_carbinerifle",
		"w_ar_carbinerifle_hi",
		"w_ar_carbinerifle_mag1",
		"w_ar_carbinerifle_mag2",
		"w_at_ar_afgrip",
		"w_at_ar_afgrip_hi",
		"w_at_ar_flsh",
		"w_at_ar_flsh_hi",
		"w_at_ar_supp",
		"w_at_ar_supp_02",
		"w_at_ar_supp_02_hi",
		"w_at_ar_supp_hi",
		"w_at_pi_flsh",
		"w_at_pi_flsh_hi",
		"w_at_pi_supp",
		"w_at_pi_supp_hi",
		"w_at_railcover_01",
		"w_at_railcover_01_hi",
		"w_at_scope_large",
		"w_at_scope_large_hi",
		"w_at_scope_macro",
		"w_at_scope_macro_hi",
		"w_at_scope_max",
		"w_at_scope_max_hi",
		"w_at_scope_medium",
		"w_at_scope_medium_hi",
		"w_at_scope_small",
		"w_at_scope_small_hi",
		"w_at_sr_supp",
		"w_at_sr_supp_hi",
		"w_ex_grenadefrag",
		"w_ex_grenadefrag_hi",
		"w_ex_grenadesmoke",
		"w_ex_molotov",
		"w_ex_molotov_hi",
		"w_ex_pe",
		"w_ex_pe_hi",
		"w_lr_40mm",
		"w_lr_40mm_pu",
		"w_lr_grenadelauncher",
		"w_lr_grenadelauncher_hi",
		"w_lr_rpg",
		"w_lr_rpg_hi",
		"w_lr_rpg_rocket",
		"w_lr_rpg_rocket_pu",
		"w_me_bat",
		"w_me_crowbar",
		"w_me_gclub",
		"w_me_hammer",
		"w_me_knife_01",
		"w_me_nightstick",
		"w_mg_combatmg",
		"w_mg_combatmg_hi",
		"w_mg_combatmg_mag1",
		"w_mg_combatmg_mag2",
		"w_mg_mg",
		"w_mg_mg_hi",
		"w_mg_mg_mag1",
		"w_mg_mg_mag2",
		"w_mg_minigun",
		"w_mg_minigun_hi",
		"w_pi_appistol",
		"w_pi_appistol_hi",
		"w_pi_appistol_mag1",
		"w_pi_appistol_mag2",
		"w_pi_combatpistol",
		"w_pi_combatpistol_hi",
		"w_pi_combatpistol_mag1",
		"w_pi_combatpistol_mag2",
		"w_pi_pistol",
		"w_pi_pistol50",
		"w_pi_pistol50_hi",
		"w_pi_pistol50_mag1",
		"w_pi_pistol50_mag2",
		"w_pi_pistol_hi",
		"w_pi_pistol_mag1",
		"w_pi_pistol_mag2",
		"w_pi_stungun",
		"w_pi_stungun_hi",
		"w_sb_assaultsmg",
		"w_sb_assaultsmg_hi",
		"w_sb_assaultsmg_mag1",
		"w_sb_assaultsmg_mag2",
		"w_sb_microsmg",
		"w_sb_microsmg_hi",
		"w_sb_microsmg_mag1",
		"w_sb_microsmg_mag2",
		"w_sb_smg",
		"w_sb_smg_hi",
		"w_sb_smg_mag1",
		"w_sb_smg_mag2",
		"w_sg_assaultshotgun",
		"w_sg_assaultshotgun_hi",
		"w_sg_assaultshotgun_mag1",
		"w_sg_assaultshotgun_mag2",
		"w_sg_bullpupshotgun",
		"w_sg_bullpupshotgun_hi",
		"w_sg_pumpshotgun",
		"w_sg_pumpshotgun_hi",
		"w_sg_sawnoff",
		"w_sg_sawnoff_hi",
		"w_sr_heavysniper",
		"w_sr_heavysniper_hi",
		"w_sr_heavysniper_mag1",
		"w_sr_sniperrifle",
		"w_sr_sniperrifle_hi",
		"w_sr_sniperrifle_mag1",
	}
};

#pragma endregion
int WaveIntensity;
int RainIntensity;
int cloud;
int wind;
int snoww;
Object selecObjj;
Object latestObjj;
Object selecObj;
Object latestObj;
vector<int> MapModObjs;
float MoveX = 0.5f;
float MoveY;
float MoveZ = 0.5f;
bool freezeSpawn;
bool freezeObj;
bool freezeSpawnn;
bool freezeObjj;
bool collisionObj = true;
bool collisionObjj = true;
float roll11;
float yaw11;
float pitch11;
float roll1;
float yaw1;
float pitch1;
int spwnObjC;
Object spwndObjects[1024];
char* spwndObjectsNames[1024];

Object SpawnObject(char* name, Vector3 coords) {
	Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	//Object obj = CREATE_OBJECT_NO_OFFSET(GET_HASH_KEY(name), coords.x, coords.y, coords.z, 1, 0, 0);
	Object obj = OBJECT::CREATE_OBJECT(GAMEPLAY::GET_HASH_KEY(name), pos.x, pos.y, pos.z, true, 1, 0);
	Vector3 c00rds = ENTITY::GET_ENTITY_COORDS(obj, 1);
	spwndObjects[spwnObjC] = obj;
	spwndObjectsNames[spwnObjC] = name;
	spwnObjC++;
	MoveX = c00rds.x;
	MoveY = c00rds.y;
	MoveZ = c00rds.z;
	roll1 = 0.f;
	yaw1 = 0.f;
	pitch1 = 0.f;
	ENTITY::FREEZE_ENTITY_POSITION(obj, freezeSpawn);
	freezeObj = freezeSpawn;
	return obj;

}
bool ShadowfitExist()
{
	DWORD dwAttrib = GetFileAttributesA(".\\SHADEFolder");
	return (dwAttrib != INVALID_FILE_ATTRIBUTES && dwAttrib & FILE_ATTRIBUTE_DIRECTORY);
}

bool SolOutfitExist()
{
	DWORD dwAttrib = GetFileAttributesA(".\\SHADEFolder\\Outfits");
	return (dwAttrib != INVALID_FILE_ATTRIBUTES && dwAttrib & FILE_ATTRIBUTE_DIRECTORY);
}

class Ini
{
private:
	std::string inifile;
public:
	Ini(std::string file)
	{
		this->inifile = file;
	}
	void WriteString(std::string string, std::string app, std::string key)
	{
		WritePrivateProfileStringA(app.c_str(), key.c_str(), string.c_str(), this->inifile.c_str());
	}
	std::string GetString(std::string app, std::string key)
	{
		char buf[100];
		GetPrivateProfileStringA(app.c_str(), key.c_str(), "NULL", buf, 100, this->inifile.c_str());
		return (std::string)buf;
	}
	void WriteInt(int value, std::string app, std::string key)
	{
		WriteString(std::to_string(value), app, key);
	}
	int GetInt(std::string app, std::string key)
	{
		return std::stoi(GetString(app, key));
	}
	void WriteFloat(float value, std::string app, std::string key)
	{
		WriteString(std::to_string(value), app, key);
	}
	float GetFloat(std::string app, std::string key)
	{
		return std::stof(GetString(app, key));
	}
};



int outfit1 = 0;
int Zoom = 0;
int outfit2 = 0;
int outfit3 = 0;
int outfit4 = 0;
int mask1 = 0;
int mask2 = 0;
int shirt1 = 0;
int pants1 = 0;
int hands1 = 0;
int shoes1 = 0;
int eyes1 = 0;
int Accessories1 = 0;
int mission1 = 0;
int decals1 = 0;
int collars1 = 0;
bool slowMotion;
bool FreezeTime;


int selectedOutfit = 0;

void SaveOutfit() {
	if (!ShadowfitExist()) {
		CreateDirectoryA(".\\SHADEFolder\\Outfits", NULL);
	}
	Ini *settingsIni = new Ini(".\\SHADEFolder\\Outfits\\" + to_string(selectedOutfit) + ".ini");
	settingsIni->WriteInt(outfit1, "Outfit", "1");
	settingsIni->WriteInt(mask1, "Outfit", "2");
	settingsIni->WriteInt(shirt1, "Outfit", "3");
	settingsIni->WriteInt(collars1, "Outfit", "4");
	settingsIni->WriteInt(Accessories1, "Outfit", "5");
	settingsIni->WriteInt(pants1, "Outfit", "6");
	settingsIni->WriteInt(hands1, "Outfit", "7");
	settingsIni->WriteInt(shoes1, "Outfit", "8");
	settingsIni->WriteInt(mission1, "Outfit", "9");
	settingsIni->WriteInt(decals1, "Outfit", "10");
}

void LoadOutfit() {
	Ini *settingsIni = new Ini(".\\SHADEFolder\\Outfits\\" + to_string(selectedOutfit) + ".ini");
	outfit1 = settingsIni->GetInt("Outfit", "1");
	mask1 = settingsIni->GetInt("Outfit", "2");
	shirt1 = settingsIni->GetInt("Outfit", "3");
	collars1 = settingsIni->GetInt("Outfit", "4");
	Accessories1 = settingsIni->GetInt("Outfit", "5");
	pants1 = settingsIni->GetInt("Outfit", "6");
	hands1 = settingsIni->GetInt("Outfit", "7");
	shoes1 = settingsIni->GetInt("Outfit", "8");
	mission1 = settingsIni->GetInt("Outfit", "9");
	decals1 = settingsIni->GetInt("Outfit", "10");
	delete settingsIni;
}

void SaveStyles()
{
	Ini *settingsIni = new Ini(".\\SHADEFolder\\theme.ini");
	// Misc //
	settingsIni->WriteInt(Menu::Settings::DrawTextOutline, "Misc", "TextOutline");
	settingsIni->WriteInt(Menu::Settings::GlareOnOff, "Misc", "GlareToggle");
	settingsIni->WriteFloat(Menu::Settings::menuX, "Misc", "MenuX");
	settingsIni->WriteFloat(Menu::Settings::DrawGradientRect, "Misc", "Gradient");
	settingsIni->WriteInt(Menu::Settings::displayEnd, "Misc", "DisplayEnd");
	// Title Rect //
	settingsIni->WriteInt(Menu::Settings::titleRectTexture, "Title Rect", "Texture");
	settingsIni->WriteInt(Menu::Settings::titleRect.r, "Title Rect", "R");
	settingsIni->WriteInt(Menu::Settings::titleRect.g, "Title Rect", "G");
	settingsIni->WriteInt(Menu::Settings::titleRect.b, "Title Rect", "B");
	settingsIni->WriteInt(Menu::Settings::titleRect.a, "Title Rect", "A");
	// Title Text //
	settingsIni->WriteInt(Menu::Settings::titleText.r, "Title Text", "R");
	settingsIni->WriteInt(Menu::Settings::titleText.g, "Title Text", "G");
	settingsIni->WriteInt(Menu::Settings::titleText.b, "Title Text", "B");
	settingsIni->WriteInt(Menu::Settings::titleText.a, "Title Text", "A");
	settingsIni->WriteInt(Menu::Settings::titleText.f, "Title Text", "F");
	// Option Text //
	settingsIni->WriteInt(Menu::Settings::optionText.r, "Option Text", "R");
	settingsIni->WriteInt(Menu::Settings::optionText.g, "Option Text", "G");
	settingsIni->WriteInt(Menu::Settings::optionText.b, "Option Text", "B");
	settingsIni->WriteInt(Menu::Settings::optionText.a, "Option Text", "A");
	settingsIni->WriteInt(Menu::Settings::optionText.f, "Option Text", "F");
	// Option Rect //
	settingsIni->WriteInt(Menu::Settings::optionRect.r, "Option Rect", "R");
	settingsIni->WriteInt(Menu::Settings::optionRect.g, "Option Rect", "G");
	settingsIni->WriteInt(Menu::Settings::optionRect.b, "Option Rect", "B");
	settingsIni->WriteInt(Menu::Settings::optionRect.a, "Option Rect", "A");
	// Scroller //
	settingsIni->WriteInt(Menu::Settings::scroller.r, "Scroller", "R");
	settingsIni->WriteInt(Menu::Settings::scroller.g, "Scroller", "G");
	settingsIni->WriteInt(Menu::Settings::scroller.b, "Scroller", "B");
	settingsIni->WriteInt(Menu::Settings::scroller.a, "Scroller", "A");
	// Break Text //
	settingsIni->WriteInt(Menu::Settings::breakText.r, "Break Text", "R");
	settingsIni->WriteInt(Menu::Settings::breakText.g, "Break Text", "G");
	settingsIni->WriteInt(Menu::Settings::breakText.b, "Break Text", "B");
	settingsIni->WriteInt(Menu::Settings::breakText.a, "Break Text", "A");
	settingsIni->WriteInt(Menu::Settings::breakText.f, "Break Text", "F");
	// Integre //
	settingsIni->WriteInt(Menu::Settings::integre.r, "Integre", "R");
	settingsIni->WriteInt(Menu::Settings::integre.g, "Integre", "G");
	settingsIni->WriteInt(Menu::Settings::integre.b, "Integre", "B");
	// Primary //
	settingsIni->WriteInt(Menu::Settings::primary.r, "Primary", "R");
	settingsIni->WriteInt(Menu::Settings::primary.g, "Primary", "G");
	settingsIni->WriteInt(Menu::Settings::primary.b, "Primary", "B");
	settingsIni->WriteInt(Menu::Settings::primary.a, "Primary", "A");
	// Secondary //
	settingsIni->WriteInt(Menu::Settings::secondary.r, "Secondary", "R");
	settingsIni->WriteInt(Menu::Settings::secondary.g, "Secondary", "G");
	settingsIni->WriteInt(Menu::Settings::secondary.b, "Secondary", "B");
	settingsIni->WriteInt(Menu::Settings::secondary.a, "Secondary", "A");
	//// Selected Text //
	//settingsIni->WriteInt(Menu::Settings::selectedTextClrs.r, "Selected Text", "R");
	//settingsIni->WriteInt(Menu::Settings::selectedTextClrs.g, "Selected Text", "G");
	//settingsIni->WriteInt(Menu::Settings::selectedTextClrs.b, "Selected Text", "B");
	//settingsIni->WriteInt(Menu::Settings::selectedTextClrs.a, "Selected Text", "A");
	delete settingsIni;
}

void LoadStyles()
{
	Ini *settingsIni = new Ini(".\\SHADEFolder\\theme.ini");
	// Misc //
	Menu::Settings::DrawTextOutline = settingsIni->GetInt("Misc", "TextOutline");
	Menu::Settings::menuX = settingsIni->GetFloat("Misc", "MenuX");
	Menu::Settings::GlareOnOff = settingsIni->GetInt("Misc", "GlareToggle");
	Menu::Settings::DrawGradientRect = settingsIni->GetInt("Misc", "Gradient");
	Menu::Settings::displayEnd = settingsIni->GetInt("Misc", "DisplayEnd");
	// Title Rect //
	Menu::Settings::titleRect.r = settingsIni->GetInt("Title Rect", "R");
	Menu::Settings::titleRect.g = settingsIni->GetInt("Title Rect", "G");
	Menu::Settings::titleRect.b = settingsIni->GetInt("Title Rect", "B");
	Menu::Settings::titleRect.a = settingsIni->GetInt("Title Rect", "R");
	Menu::Settings::titleRectTexture = settingsIni->GetInt("Title Rect", "Texture");
	// Title Text //
	Menu::Settings::titleText.r = settingsIni->GetInt("Title Text", "R");
	Menu::Settings::titleText.g = settingsIni->GetInt("Title Text", "G");
	Menu::Settings::titleText.b = settingsIni->GetInt("Title Text", "B");
	Menu::Settings::titleText.a = settingsIni->GetInt("Title Text", "A");
	Menu::Settings::titleText.f = settingsIni->GetInt("Title Text", "F");
	// Option Text //
	Menu::Settings::optionText.r = settingsIni->GetInt("Option Text", "R");
	Menu::Settings::optionText.g = settingsIni->GetInt("Option Text", "G");
	Menu::Settings::optionText.b = settingsIni->GetInt("Option Text", "B");
	Menu::Settings::optionText.a = settingsIni->GetInt("Option Text", "A");
	Menu::Settings::optionText.f = settingsIni->GetInt("Option Text", "F");
	// Option Rect //
	Menu::Settings::optionRect.r = settingsIni->GetInt("Option Rect", "R");
	Menu::Settings::optionRect.g = settingsIni->GetInt("Option Rect", "G");
	Menu::Settings::optionRect.b = settingsIni->GetInt("Option Rect", "B");
	Menu::Settings::optionRect.a = settingsIni->GetInt("Option Rect", "A");
	// Scroller //
	Menu::Settings::scroller.r = settingsIni->GetInt("Scroller", "R");
	Menu::Settings::scroller.g = settingsIni->GetInt("Scroller", "G");
	Menu::Settings::scroller.b = settingsIni->GetInt("Scroller", "B");
	Menu::Settings::scroller.a = settingsIni->GetInt("Scroller", "A");
	// Break Text //
	Menu::Settings::breakText.r = settingsIni->GetInt("Break Text", "R");
	Menu::Settings::breakText.g = settingsIni->GetInt("Break Text", "G");
	Menu::Settings::breakText.b = settingsIni->GetInt("Break Text", "B");
	Menu::Settings::breakText.a = settingsIni->GetInt("Break Text", "A");
	Menu::Settings::breakText.f = settingsIni->GetInt("Break Text", "F");
	// Integre //
	Menu::Settings::integre.r = settingsIni->GetInt("Integre", "R");
	Menu::Settings::integre.g = settingsIni->GetInt("Integre", "G");
	Menu::Settings::integre.b = settingsIni->GetInt("Integre", "B");
	// Primary //
	Menu::Settings::primary.r = settingsIni->GetInt("Primary", "R");
	Menu::Settings::primary.g = settingsIni->GetInt("Primary", "G");
	Menu::Settings::primary.b = settingsIni->GetInt("Primary", "B");
	Menu::Settings::primary.a = settingsIni->GetInt("Primary", "A");
	// Secondary //
	Menu::Settings::secondary.r = settingsIni->GetInt("Secondary", "R");
	Menu::Settings::secondary.g = settingsIni->GetInt("Secondary", "G");
	Menu::Settings::secondary.b = settingsIni->GetInt("Secondary", "B");
	Menu::Settings::secondary.a = settingsIni->GetInt("Secondary", "A");
	//// Selected Text //
	//Menu::Settings::selectedTextClrs.r = settingsIni->GetInt("Selected Text", "R");
	//Menu::Settings::selectedTextClrs.g = settingsIni->GetInt("Selected Text", "G");
	//Menu::Settings::selectedTextClrs.b = settingsIni->GetInt("Selected Text", "B");
	//Menu::Settings::selectedTextClrs.a = settingsIni->GetInt("Selected Text", "A");
	delete settingsIni;
}

#define PROP_MONEY_BAG_01 0x113FD533
#define PICKUP_MONEY_CASE 0xCE6FDD6B

int Amorr = 0;
int Enginee = 0;
int Brake = 0;
int Spoilerr = 0;
int Skirtt = 0;
int Suspensionn = 0;
int Transmission = 0;
int Bumperr = 0;
int Bumper2 = 0;
int Exhaust = 0;
int Bonnet = 0;
int Rollcage = 0;
int Klaxonn = 0;

const std::vector<std::string> vValues_ModSlotNames
{
	"CMOD_MOD_SPO",
	"CMOD_BUM_1",
	"CMOD_BUM_4",
	"CMOD_MOD_SKI",
	"CMOD_MOD_MUF",
	"CMOD_MOD_CHA",
	"CMOD_MOD_GRL",
	"CMOD_MOD_HOD",
	"CMOD_MOD_FEN",
	"CMOD_MOD_FEN",
	"CMOD_MOD_ROF",
	"CMOD_MOD_ENG",
	"CMOD_MOD_BRA",
	"CMOD_MOD_TRN",
	"CMOD_MOD_HRN",
	"CMOD_MOD_SUS",
	"CMOD_MOD_ARM",
	"Unknown 17",
	"CMOD_MOD_TUR",
	"Unknown 19",
	"Tyre Smoke",
	"Unknown 21",
	"CMOD_MOD_LGT",
	"CMOD_MOD_WHEM",
	"CMOD_WHE0_1",


	"VEM_SUPERMOD_0",
	"VEM_SUPERMOD_1",
	"VEM_SUPERMOD_2",
	"VEM_SUPERMOD_3",
	"VEM_SUPERMOD_4",
	"VEM_SUPERMOD_5",
	"VEM_SUPERMOD_6",
	"VEM_SUPERMOD_7",
	"VEM_SUPERMOD_8",
	"VEM_SUPERMOD_9",
	"VEM_SUPERMOD_10",
	"VEM_SUPERMOD_11",
	"VEM_SUPERMOD_12",
	"VEM_SUPERMOD_13",
	"VEM_SUPERMOD_14",
	"VEM_SUPERMOD_15",
	"VEM_SUPERMOD_16",
	"VEM_SUPERMOD_17",
	"VEM_SUPERMOD_18",
	"VEM_SUPERMOD_19",
	"VEM_SUPERMOD_20",
	"VEM_SUPERMOD_21",
	"VEM_SUPERMOD_22",
	"VEM_SUPERMOD_23",
	"CMM_MOD_S0",//"Plateholder",
	"CMM_MOD_S1",//"Vanity Plate",
	"CMM_MOD_S2",//"Trim Design",
	"CMM_MOD_S3",//"Ornament",
	"CMM_MOD_S4",//"Dash",
	"CMM_MOD_S5",//"Dial Design",
	"CMM_MOD_S6",//"Doorcards",
	"CMM_MOD_S7",//"Leather Seats",
	"CMM_MOD_S8",//"Steering Wheel",
	"CMM_MOD_S9",//"Column Shifter Lever",
	"CMM_MOD_S10",//"Plaque",
	"CMM_MOD_S11",//"Speakers",
	"CMM_MOD_S12",//"Trunk",
	"CMM_MOD_S13",//"Hydraulics",
	"CMM_MOD_S14",//"Engine Block",
	"CMM_MOD_S15",//"Air Filter",
	"CMM_MOD_S16",//"Struts",
	"CMM_MOD_S17",//"Arch Cover",
	"CMM_MOD_S18",//"Aerials",
	"CMM_MOD_S19",//"Trim",
	"CMM_MOD_S20",//"Tank",
	"CMM_MOD_S21",//"Windows",
	"CMM_MOD_S22",//"Unknown 47",
	"CMM_MOD_S23",//"Livery",
};


void notifyleft(char* msg)
{
	UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
	UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(msg);
	UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 1, 8, "~w~Exploit", msg, 7, "Exploit", 9, 0);
	UI::_DRAW_NOTIFICATION(FALSE, FALSE);
}

int timeer = 0;
long in = 0;
int intor = 0;
long out = 0;
bool safemode = true;
BOOL stream = false, freezespawned = 0;
string name = "";
string pw = "";

BOOL ant = 1;
BOOL ant1 = 1;
BOOL ant2 = 1;
BOOL ant3 = 1;
BOOL ant4 = 1;
BOOL ant5 = 1;
BOOL ant6 = 1;
BOOL ant7 = 1;
BOOL ant8 = 1;
BOOL ant9 = 1;
BOOL ant10 = 1;
BOOL ant11 = 1;
BOOL ant12 = 1;
BOOL ant13 = 1;
BOOL ant14 = 1;
BOOL ant15 = 1;

void LSC(int LSCType, int LSCIndex)
{
	int vehid = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
	VEHICLE::SET_VEHICLE_MOD_KIT(vehid, 0);
	VEHICLE::SET_VEHICLE_MOD(vehid, LSCType, LSCIndex, 0);
}

void addBunkerBusinessProfit(int value)
{
	char* profit = *reinterpret_cast<char**>((char*)GetModuleHandleA(NULL) + 0x2C9EB78);
	if (profit == nullptr)
		profit = *reinterpret_cast<char**>((char*)GetModuleHandleA(NULL) + 0x2C995A8);
	char* profit1 = *reinterpret_cast<char**>(profit + 0x1180);
	int* bunkerProfit = reinterpret_cast<int*>(profit1 + 0x4088);
	*bunkerProfit = value;
}


struct tunableList
{
	char* label;
	int index;
	int type;
};
static tunableList TunableList[] =
{
	{ "CASH_MULTIPLIER", 0, 1 },
	{ "XP_MULTIPLIER", 1, 1 },
	{ "CHEAT_THRESHOLD", 2, 0 },
	{ "CHEAT_THRESHOLD_NOTCHEATER", 3, 0 },
	{ "CHEAT_RESET_MINUTES", 4, 0 },
	{ "AMOUNT_TO_FORGIVE_BY", 5, 1 },
	{ "KICK_VOTES_NEEDED_RATIO", 6, 1 },
	{ "AMOUNT_TO_FORGIVE_BY_HELPFUL", 7, 1 },
	{ "AMOUNT_TO_FORGIVE_BY_FRIENDLY", 8, 1 },
	{ "AMOUNT_TO_PUNISH_BY_GRIEFING", 9, 1 },
	{ "AMOUNT_TO_PUNISH_BY_OFFENSIVE_LANGUAGE", 10, 1 },
	{ "AMOUNT_TO_PUNISH_BY_OFFENSIVE_TAG", 11, 1 },
	{ "AMOUNT_TO_PUNISH_BY_OFFENSIVE_UGC", 12, 1 },
	{ "AMOUNT_TO_PUNISH_BY_VC_ANNOY", 13, 1 },
	{ "336289304", 14, 0 },
	{ "MP_COUNTDOWN", 15, 0 },
	{ "CRATE_DROP_SPECIAL_WEAPON", 38, 0 },
	{ "CRATE_DROP_SPEICAL_WEAPON_CLIPS", 39, 0 },
	{ "CRATE_DROP_CASH_MIN", 40, 0 },
	{ "CRATE_DROP_CASH_MAX", 41, 0 },
	{ "CRATE_DROP_SPECIAL_CASH", 42, 0 },
	{ "CRATE_DROP_STANDARD_MIN_FREQ", 43, 0 },
	{ "CRATE_DROP_STANDARD_MAX_FREQ", 44, 0 },
	{ "CRATE_DROP_SPECIAL_FREQUENCY", 45, 0 },
	{ "CRATE_DROP_CASH_TOTAL_MAX", 46, 0 },
	{ "SHOP_SALES_ACTIVE", 61, 2 },
	{ "CRATE_DROP_XP", 65, 0 },
	{ "CRATE_DROP_SPECIAL_XP", 66, 0 },
	{ "CRATE_DROP_LOCATION", 67, 0 },
	{ "CRATE_DROP_CLOTHING_MALE", 68, 0 },
	{ "CRATE_DROP_CLOTHING_FEMALE", 69, 0 },
	{ "AUTOMUTE_PERCENT", 70, 1 },
	{ "BADSPORTCHEAT_AUTOMUTE_PERCENT", 71, 1 },
	{ "CARMOD_SHOP_MULTIPLIER", 72, 1 },
	{ "CLOTHES_SHOP_MULTIPLIER", 73, 1 },
	{ "HAIRDO_SHOP_MULTIPLIER", 74, 1 },
	{ "TATTOO_SHOP_MULTIPLIER", 75, 1 },
	{ "WEAPONS_SHOP_MULTIPLIER", 76, 1 },
	{ "PROPERTY_MULTIPLIER", 77, 1 },
	{ "CARS_WEBSITE_MULTIPLIER", 78, 1 },
	{ "PLANES_WEBSITE_MULTIPLIER", 79, 1 },
	{ "HELIS_WEBSITE_MULTIPLIER", 80, 1 },
	{ "BOATS_WEBSITE_MULTIPLIER", 81, 1 },
	{ "BIKES_WEBSITE_MULTIPLIER", 82, 1 },
	{ "KILL_DEATH_CHEAT_THRESH", 83, 1 },
	{ "GOOD_BOY_CASH_AWARD", 84, 0 },
	{ "SPENT_TO_GIVE_RATIO", 85, 1 },
	{ "SPENT_TO_GIVE_RATIO", 85, 1 },
	{ "IDLEKICK_WARNING1", 86, 0 },
	{ "IDLEKICK_WARNING2", 87, 0 },
	{ "IDLEKICK_WARNING3", 88, 0 },
	{ "IDLEKICK_KICK", 89, 0 },
	{ "SCRIPT_MP_TIMEOUT", 90, 0 },
	{ "SOCIAL_CLUB_PRESENCE_UPDATE_TIME", 94, 0 },
	{ "BADSPORT_THRESHOLD", 95, 0 },
	{ "BADSPORT_THRESHOLD_NOTCHEATER", 96, 0 },
	{ "BADSPORT_RESET_MINUTES", 97, 0 },
	{ "AMOUNT_TO_FORGIVE_BADSPORT_BY", 98, 1 },
	{ "CHEAT_TIME_EXPONENTIAL", 99, 0 },
	{ "MAX_BET_LIMIT", 100, 1 },
	{ "MIN_BET_LIMIT", 101, 1 },
	{ "SHORT_ODDS_LIMIT", 102, 1 },
	{ "LONG_ODDS_LIMIT", 103, 1 },
	{ "BOOKIE_RAKE", 104, 1 },
	{ "BOOKIE_RAKE", 104, 1 },
	{ "MAX_HEALTH_MULTIPLIER", 105, 1 },
	{ "MIN_HEALTH_MULTIPLIER", 106, 1 },
	{ "HEALTH_REGEN_RATE_MULTIPLIER", 107, 1 },
	{ "HEALTH_REGEN_MAX_MULTIPLIER", 108, 1 },
	{ "MAX_ARMOR_MULTIPLIER", 110, 1 },
	{ "PSANDQS_HEALTH_REPLENISH_MULTIPLIER", 111, 1 },
	{ "EGOCHASER_HEALTH_REPLENISH_MULTIPLIER", 112, 1 },
	{ "METEORITE_HEALTH_REPLENISH_MULTIPLIER", 113, 1 },
	{ "REDWOOD_HEALTH_DEPLETE_MULTIPLIER", 114, 1 },
	{ "ORANGOTANG_HEALTH_REPLENISH_MULTIPLIER", 115, 1 },
	{ "BOURGEOIX_HEALTH_REPLENISH_MULTIPLIER", 116, 1 },
	{ "SHOP_DISCOUNT_PERCENT", 120, 0 },
	{ "SHOP_GOODBOY_DISCOUNT_PERCENT", 121, 0 },
	{ "SCRIPT_MP_TIMEOUT_SHORT", 122, 0 },
	{ "SCRIPT_MP_TIMEOUT_LONG", 123, 0 },
	{ "MAX_BET_TOTAL_AMOUNT_ON_A_SINGLE_PLAYER", 125, 1 },
	{ "CRATE_DROP_SPECIAL_CRATE_DROP_PERCENTAGE", 126, 0 },
	{ "CRATE_DROP_SPECIAL_CRATE_MIN_PLAYERS", 127, 0 },
	{ "EXPIRED_CHALLENGE_BASIC_XP_REWARD", 128, 0 },
	{ "EXPIRED_CHALLENGE_TURN_OFF_XP_REWARD", 129, 2 },
	{ "AMOUNT_TO_VOTED_OUT", 131, 1 },
	{ "AMOUNT_TO_DESTORYED_PVEHICLE", 132, 1 },
	{ "CRC_DONEPLAYERS_RESET_START", 134, 0 },
	{ "CRC_DONEPLAYERS_RESET_END", 135, 0 },
	{ "CRC_BETWEEN_CHECKS_TIME_START", 136, 0 },
	{ "CRC_BETWEEN_CHECKS_TIME_END", 137, 0 },
	{ "BADSPORT_NUMDAYS_1ST_OFFENCE", 138, 0 },
	{ "BADSPORT_NUMDAYS_2ND_OFFENCE", 139, 0 },
	{ "BADSPORT_NUMDAYS_3RD_OFFENCE", 140, 0 },
	{ "BADSPORT_NUMDAYS_4TH_OFFENCE", 141, 0 },
	{ "BADSPORT_NUMDAYS_5TH_OFFENCE", 142, 0 },
	{ "BADSPORT_NUMDAYS_6TH_OFFENCE", 143, 0 },
	{ "BADSPORT_NUMDAYS_7TH_OFFENCE", 144, 0 },
	{ "BADSPORT_NUMDAYS_8TH_OFFENCE", 145, 0 },
	{ "BADSPORT_NUMDAYS_9TH_OFFENCE", 146, 0 },
	{ "CONTACT_MISSION_INITIAL_DELAY_SECS", 148, 0 },
	{ "CONTACT_MISSION_REGULAR_DELAY_SECS", 149, 0 },
	{ "CONTACT_MISSION_SERVER_DELAY_SECS", 150, 0 },
	{ "ELO_SEASON", 151, 0 },
	{ "BOOKMARK_REFRESH", 152, 0 },
	{ "AI_HEALTH", 153, 1 },
	{ "PASSIVE_DONATE", 154, 0 },
	{ "LOW_APRT_UTIL", 156, 0 },
	{ "MID_APRT_UTIL", 157, 0 },
	{ "HIGH_APRT_UTIL", 158, 0 },
	{ "PHONE_FRIEND_CHARGE", 161, 0 },
	{ "PED_DROP_CASH_MULTIPLIER", 162, 1 },
	{ "IMP_EXP_EARN_CAP", 163, 0 },
	{ "CARMOD_CAR_VAL_SELL_CAP", 164, 0 },
	{ "IMPROMPTU_RACE_CASH_AWARD_CAP", 165, 0 },
	{ "HOLD_UP_CASH_REWARD_CAP", 166, 0 },
	{ "IMPROMPTU_RACE_EXPENSES_MULTIPLIER", 167, 1 },
	{ "IMPROMPTU_RACE_ENTRY_FEE_CAP", 168, 0 },
	{ "IMPROMPTU_DM_ENTRY_MULTIPLIER", 169, 1 },
	{ "HIGH_TUTORIAL_WALLET_CASH", 2330, 0 },
	{ "LOW_TUTORIAL_WALLET_CASH", 2331, 0 },
	{ "HIGH_TUTORIAL_BANK_CASH", 2332, 0 },
	{ "LOW_TUTORIAL_BANK_CASH", 2333, 0 },
	{ "HIGH_PRIORITY_IMPORT_EXPORT_VEHICLE", 2334, 0 },
	{ "BOUNTY_AWARD_LEVEL_1_MODIFIER", 2337, 0 },
	{ "BOUNTY_AWARD_LEVEL_2_MODIFIER", 2338, 0 },
	{ "BOUNTY_AWARD_LEVEL_3_MODIFIER", 2339, 0 },
	{ "BOUNTY_AWARD_LEVEL_4_MODIFIER", 2340, 0 },
	{ "BOUNTY_AWARD_LEVEL_5_MODIFIER", 2341, 0 },
	{ "VEHICLE_RENTAL_PRICE_MODIFIER", 2342, 0 },
	{ "PISTOL_MODIFIER", 2343, 0 },
	{ "COMBAT_PISTOL_MODIFIER", 2344, 0 },
	{ "AP_PISTOL_MODIFIER", 2346, 0 },
	{ "MICRO_SMG_MODIFIER", 2347, 0 },
	{ "SMG_MODIFIER", 2348, 0 },
	{ "ASSAULT_SMG_MODIFIER", 2349, 0 },
	{ "ASSAULT_RIFLE_MODIFIER", 2350, 0 },
	{ "CARBINE_RIFLE_MODIFIER", 2351, 0 },
	{ "HEAVY_RIFLE_MODIFIER", 2352, 0 },
	{ "ADVANCED_RIFLE_MODIFIER", 2353, 0 },
	{ "MG_MODIFIER", 2354, 0 },
	{ "COMBAT_MG_MODIFIER", 2355, 0 },
	{ "ASSAULT_MG_MODIFIER", 2356, 0 },
	{ "PUMP_SHOTGUN_MODIFIER", 2357, 0 },
	{ "SAWEDOFF_SHOTGUN_MODIFIER", 2358, 0 },
	{ "BULLPUP_SHOTGUN_MODIFIER", 2359, 0 },
	{ "ASSAULT_SHOTGUN_MODIFIER", 2360, 0 },
	{ "HEAVY_SNIPER_MODIFIER", 2361, 0 },
	{ "REMOTE_SNIPER_MODIFIER", 2362, 0 },
	{ "SNIPER_RIFLE_MODIFIER", 2363, 0 },
	{ "ASSAULT_SNIPER_MODIFIER", 2364, 0 },
	{ "GRENADE_LAUNCHER_MODIFIER", 2365, 0 },
	{ "RPG_MODIFIER", 2366, 0 },
	{ "MINIGUN_MODIFIER", 2367, 0 },
	{ "TEARGAS_MODIFIER", 2368, 0 },
	{ "JERRYCAN_MODIFIER", 2369, 0 },
	{ "SAWNOFF_SHOTGUN_MODIFIER", 2370, 0 },
	{ "HAMMER_MODIFIER", 2371, 0 },
	{ "PISTOL_AMMO_AMMO_MODIFIER", 2372, 0 },
	{ "COMBAT_PISTOL_AMMO_MODIFIER", 2373, 0 },
	{ "PISTOL50_AMMO_MODIFIER", 2374, 0 },
	{ "AP_PISTOL_AMMO_MODIFIER", 2375, 0 },
	{ "MICRO_SMG_AMMO_MODIFIER", 2376, 0 },
	{ "SMG_AMMO_MODIFIER", 2377, 0 },
	{ "ASSAULT_SMG_AMMO_MODIFIER", 2378, 0 },
	{ "ASSAULT_RIFLE_AMMO_MODIFIER", 2379, 0 },
	{ "CARBINE_RIFLE_AMMO_MODIFIER", 2380, 0 },
	{ "HEAVY_RIFLE_AMMO_MODIFIER", 2381, 0 },
	{ "ADVANCED_RIFLE_AMMO_MODIFIER", 2382, 0 },
	{ "MG_AMMO_MODIFIER", 2383, 0 },
	{ "COMBAT_MG_AMMO_MODIFIER", 2384, 0 },
	{ "ASSAULT_MG_AMMO_MODIFIER", 2385, 0 },
	{ "PUMP_SHOTGUN_AMMO_MODIFIER", 2386, 0 },
	{ "SAWEDOFF_SHOTGUN_AMMO_MODIFIER", 2387, 0 },
	{ "BULLPUP_SHOTGUN_AMMO_MODIFIER", 2388, 0 },
	{ "ASSAULT_SHOTGUN_AMMO_MODIFIER", 2389, 0 },
	{ "HEAVY_SNIPER_AMMO_MODIFIER", 2390, 0 },
	{ "REMOTE_SNIPER_AMMO_MODIFIER", 2391, 0 },
	{ "SNIPER_RIFLE_AMMO_MODIFIER", 2392, 0 },
	{ "ASSAULT_SNIPER_AMMO_MODIFIER", 2393, 0 },
	{ "GRENADE_LAUNCHER_AMMO_MODIFIER", 2394, 0 },
	{ "RPG_AMMO_MODIFIER", 2395, 0 },
	{ "MINIGUN_AMMO_MODIFIER", 2396, 0 },
	{ "STICKYBOMB_MODIFIER", 2397, 0 },
	{ "GRENADE_MODIFIER", 2398, 0 },
	{ "KNIFE_MODIFIER", 2400, 0 },
	{ "MININIGHTSTICK_MODIFIER", 2401, 0 },
	{ "STICKYBOMB_AMMO_MODIFIER", 2403, 0 },
	{ "GRENADE_AMMO_MODIFIER", 2404, 0 },
	{ "TEARGAS_AMMO_MODIFIER", 2405, 0 },
	{ "KNIFE_AMMO_MODIFIER", 2406, 0 },
	{ "NIGHTSTICK_AMMO_MODIFIER", 2407, 0 },
	{ "QUERYING_BOOKMARKS", 2409, 0 },
	{ "PLAYER_HEADSHOP_UPLOAD_TUNABLE", 2410, 0 },
	{ "EARNINGS_IMPORT_EXPORT_MODIFIER", 2411, 1 },
	{ "BOUNTY_MINIMUM_PAYOUT_MODIFIER", 2412, 1 },
	{ "WIN_RACE_MODIFIER", 2413, 1 },
	{ "WIN_DEATHMATCH_MODIFIER", 2414, 1 },
	{ "KILLSTREAK_BONUS_ON_DEATHMATCH_MODIFIER", 2415, 1 },
	{ "KILLSTREAK_BONUS_ON_MISSION_MODIFIER", 2416, 1 },
	{ "HIGH_HOLD_UPS_MODIFIER", 2417, 1 },
	{ "HIGH_LESTER_NPC_TARGET_MODIFIER", 2418, 1 },
	{ "HIGH_ROCKSTAR_MISSIONS_MODIFIER", 2419, 1 },
	{ "HIGH_SELLING_VEHICLES_MAX_VALUE_MODIFIER", 2420, 1 },
	{ "LOW_HOLD_UPS_MODIFIER", 2421, 1 },
	{ "LOW_LESTER_NPC_TARGET_MODIFIER", 2422, 1 },
	{ "LOW_ROCKSTAR_MISSIONS_MODIFIER", 2423, 1 },
	{ "ARMOURED_TRUCK_EARNINGS_MULTIPLIER", 2424, 1 },
	{ "ARMOURED_TRUCK_EARNINGS_MULTIPLIER_LO", 2425, 1 },
	{ "ARMOURED_TRUCK_EARNINGS_MULTIPLIER_HI", 2426, 1 },
	{ "STAMINA_AMOUNT_DRAINED_MODIFIER", 2449, 0 },
	{ "IS_SALE_ON_IN_TATTOO_SHOP", 2450, 2 },
	{ "IS_SALE_ON_IN_MASK_SHOP", 2451, 2 },
	{ "IS_SALE_ON_IN_CLOTHING_SHOP", 2452, 2 },
	{ "IS_SALE_ON_IN_HAIR_SHOP", 2453, 2 },
	{ "IS_SALE_ON_IN_CAR_MOD_SHOP", 2454, 2 },
	{ "MAKEUP_UNLOCKS_BASIC_EXPENDITURE_TUNABLE", 2609, 1 },
	{ "MAKEUP_UNLOCKS_NUDE_EXPENDITURE_TUNABLE", 2610, 1 },
	{ "MAKEUP_UNLOCKS_SMOKY_EXPENDITURE_TUNABLE", 2611, 1 },
	{ "MAKEUP_UNLOCKS_GOTHIC_EXPENDITURE_TUNABLE", 2612, 1 },
	{ "MAKEUP_UNLOCKS_ROCKER_EXPENDITURE_TUNABLE", 2613, 1 },
	{ "MAKEUP_UNLOCKS_PARTYGIRL_EXPENDITURE_TUNABLE", 2614, 1 },
	{ "MAKEUP_UNLOCKS_ARTSY_EXPENDITURE_TUNABLE", 2615, 1 },
	{ "MAKEUP_UNLOCKS_TRAILERPARKPRINCESS_EXPENDITURE_TUNABLE", 2616, 1 },
	{ "MAKEUP_UNLOCKS_SOCCERMOM_EXPENDITURE_TUNABLE", 2617, 1 },
	{ "MAKEUP_UNLOCKS_FEMMEFATALE_EXPENDITURE_TUNABLE", 2618, 1 },
	{ "MAKEUP_UNLOCKS_SERIOUSLYCERISE_EXPENDITURE_TUNABLE", 2619, 1 },
	{ "MAKEUP_UNLOCKS_DISCOTEQUEWRECK_EXPENDITURE_TUNABLE", 2620, 1 },
	{ "MAKEUP_UNLOCKS_BEAUTYSPOT_EXPENDITURE_TUNABLE", 2621, 1 },
	{ "MAKEUP_UNLOCKS_TONEDDOWN_EXPENDITURE_TUNABLE", 2622, 1 },
	{ "MAKEUP_UNLOCKS_CYANSWIPED_EXPENDITURE_TUNABLE", 2623, 1 },
	{ "MAKEUP_UNLOCKS_MORNINGAFTER_EXPENDITURE_TUNABLE", 2624, 1 },
	{ "MAKEUP_UNLOCKS_COVERGIRL_EXPENDITURE_TUNABLE", 2625, 1 },
	{ "MAKEUP_UNLOCKS_KISSMYAXE_EXPENDITURE_TUNABLE", 2626, 1 },
	{ "MAKEUP_UNLOCKS_PANDAPUSSY_EXPENDITURE_TUNABLE", 2627, 1 },
	{ "MAKEUP_UNLOCKS_THEBAT_EXPENDITURE_TUNABLE", 2628, 1 },
	{ "MAKEUP_UNLOCKS_SKULLINSCARLET_EXPENDITURE_TUNABLE", 2629, 1 },
	{ "MAKEUP_UNLOCKS_SERPENTINE_EXPENDITURE_TUNABLE", 2630, 1 },
	{ "MAKEUP_UNLOCKS_THEVELDT_EXPENDITURE_TUNABLE", 2631, 1 },
	{ "MAKEUP_UNLOCKS_THEJOCK_EXPENDITURE_TUNABLE", 2632, 1 },
	{ "MAKEUP_UNLOCKS_LOSSANTOSCORKERS_EXPENDITURE_TUNABLE", 2633, 1 },
	{ "MAKEUP_UNLOCKS_LOSSANTOSPANIC_EXPENDITURE_TUNABLE", 2634, 1 },
	{ "MAKEUP_UNLOCKS_LIBERTYCITYSWINGERS_EXPENDITURE_TUNABLE", 2635, 1 },
	{ "MAKEUP_UNLOCKS_TRIBALLINES_EXPENDITURE_TUNABLE", 2636, 1 },
	{ "MAKEUP_UNLOCKS_TRIBALSWIRLS_EXPENDITURE_TUNABLE", 2637, 1 },
	{ "MAKEUP_UNLOCKS_TRIBALORANGE_EXPENDITURE_TUNABLE", 2638, 1 },
	{ "MAKEUP_UNLOCKS_TRIBALRED_EXPENDITURE_TUNABLE", 2639, 1 },
	{ "MAKEUP_UNLOCKS_TRAPPEDINABOX_EXPENDITURE_TUNABLE", 2640, 1 },
	{ "MAKEUP_UNLOCKS_CLOWNING_EXPENDITURE_TUNABLE", 2641, 1 },
	{ "MAKEUP_UNLOCKS_GUYLINER_EXPENDITURE_TUNABLE", 2642, 1 },
	{ "BEARD_UNLOCKS_CLEANSHAVEN_EXPENDITURE_TUNABLE", 2643, 1 },
	{ "BEARD_UNLOCKS_LIGHTSTUBBLE_EXPENDITURE_TUNABLE", 2644, 1 },
	{ "BEARD_UNLOCKS_BALBO_EXPENDITURE_TUNABLE", 2645, 1 },
	{ "BEARD_UNLOCKS_CIRCLEBEARD_EXPENDITURE_TUNABLE", 2646, 1 },
	{ "BEARD_UNLOCKS_GOATEE_EXPENDITURE_TUNABLE", 2647, 1 },
	{ "BEARD_UNLOCKS_CHIN_EXPENDITURE_TUNABLE", 2648, 1 },
	{ "BEARD_UNLOCKS_SOULPATCH_EXPENDITURE_TUNABLE", 2649, 1 },
	{ "BEARD_UNLOCKS_PENCILCHINSTRAP_EXPENDITURE_TUNABLE", 2650, 1 },
	{ "BEARD_UNLOCKS_LIGHTBEARD_EXPENDITURE_TUNABLE", 2651, 1 },
	{ "BEARD_UNLOCKS_MUSKETEER_EXPENDITURE_TUNABLE", 2652, 1 },
	{ "BEARD_UNLOCKS_MOUSTACHE_EXPENDITURE_TUNABLE", 2653, 1 },
	{ "BEARD_UNLOCKS_HEAVYBEARD_EXPENDITURE_TUNABLE", 2654, 1 },
	{ "BEARD_UNLOCKS_STUBBLE_EXPENDITURE_TUNABLE", 2655, 1 },
	{ "BEARD_UNLOCKS_CIRCLEBEARD2_EXPENDITURE_TUNABLE", 2656, 1 },
	{ "BEARD_UNLOCKS_HORSESHOEANDSIDEBURNS_EXPENDITURE_TUNABLE", 2657, 1 },
	{ "BEARD_UNLOCKS_PENCILMOUSTACHEANDMUTTONCHOPS_EXPENDITURE_TUNABLE", 2658, 1 },
	{ "BEARD_UNLOCKS_PENCILMOUSTACHEANDCHINSTRAP_EXPENDITURE_TUNABLE", 2659, 1 },
	{ "BEARD_UNLOCKS_BALBOANDDESIGNSIDEBURNS_EXPENDITURE_TUNABLE", 2660, 1 },
	{ "BEARD_UNLOCKS_MUTTONCHOPS_EXPENDITURE_TUNABLE", 2661, 1 },
	{ "BEARD_UNLOCKS_FULLBEARD_EXPENDITURE_TUNABLE", 2662, 1 },
	{ "PLAYERKIT_FM_PARACHUTE_EXPENDITURE_TUNABLE", 2663, 1 },
	{ "PLAYERKIT_FM_PARASMOKE_RED_EXPENDITURE_TUNABLE", 2664, 1 },
	{ "PLAYERKIT_FM_PARASMOKE_ORANGE_EXPENDITURE_TUNABLE", 2665, 1 },
	{ "PLAYERKIT_FM_PARASMOKE_YELLOW_EXPENDITURE_TUNABLE", 2666, 1 },
	{ "PLAYERKIT_FM_THERMALVISION_EXPENDITURE_TUNABLE", 2667, 1 },
	{ "PLAYERKIT_FM_PARASMOKE_BLACK_EXPENDITURE_TUNABLE", 2668, 1 },
	{ "PLAYERKIT_FM_PARASMOKE_BLUE_EXPENDITURE_TUNABLE", 2669, 1 },
	{ "PLAYERKIT_FM_RAINBOW_PARACHUTE_EXPENDITURE_TUNABLE", 2670, 1 },
	{ "PLAYERKIT_FM_RED_PARACHUTE_EXPENDITURE_TUNABLE", 2671, 1 },
	{ "PLAYERKIT_FM_YELLOWWHITEBLUE_PARACHUTE_EXPENDITURE_TUNABLE", 2672, 1 },
	{ "PLAYERKIT_FM_WHITEREDBROWN_PARACHUTE_EXPENDITURE_TUNABLE", 2673, 1 },
	{ "PLAYERKIT_FM_BLUEWHITERED_PARACHUTE_EXPENDITURE_TUNABLE", 2674, 1 },
	{ "PLAYERKIT_FM_BLUE_PARACHUTE_EXPENDITURE_TUNABLE", 2675, 1 },
	{ "PLAYERKIT_FM_BLACK_PARACHUTE_EXPENDITURE_TUNABLE", 2676, 1 },
	{ "PLAYERKIT_FM_BROWNYELLOW_PARACHUTE_EXPENDITURE_TUNABLE", 2677, 1 },
	{ "PLAYERKIT_GOLD_PISTOL_EXPENDITURE_TUNABLE", 2678, 1 },
	{ "PLAYERKIT_GOLD_CMBTPISTOL_EXPENDITURE_TUNABLE", 2679, 1 },
	{ "PLAYERKIT_GOLD_APPISTOL_EXPENDITURE_TUNABLE", 2680, 1 },
	{ "PLAYERKIT_GOLD_MICROSMG_EXPENDITURE_TUNABLE", 2681, 1 },
	{ "PLAYERKIT_GOLD_SMG_EXPENDITURE_TUNABLE", 2682, 1 },
	{ "PLAYERKIT_GOLD_ASLTRIFLE_EXPENDITURE_TUNABLE", 2683, 1 },
	{ "PLAYERKIT_GOLD_CRBNRIFLE_EXPENDITURE_TUNABLE", 2684, 1 },
	{ "PLAYERKIT_GOLD_ADVRRIFLE_EXPENDITURE_TUNABLE", 2685, 1 },
	{ "PLAYERKIT_GOLD_MG_EXPENDITURE_TUNABLE", 2686, 1 },
	{ "PLAYERKIT_GOLD_CMBTMG_EXPENDITURE_TUNABLE", 2687, 1 },
	{ "PLAYERKIT_GOLD_PUMP_EXPENDITURE_TUNABLE", 2688, 1 },
	{ "PLAYERKIT_GOLD_SAWOFF_EXPENDITURE_TUNABLE", 2689, 1 },
	{ "PLAYERKIT_GOLD_ASLTSHTGN_EXPENDITURE_TUNABLE", 2690, 1 },
	{ "PLAYERKIT_GOLD_RUBBERGUN_EXPENDITURE_TUNABLE", 2691, 1 },
	{ "PLAYERKIT_GOLD_STUNGUN_EXPENDITURE_TUNABLE", 2692, 1 },
	{ "PLAYERKIT_GOLD_SNIPERRFL_EXPENDITURE_TUNABLE", 2693, 1 },
	{ "PLAYERKIT_GOLD_HVYSNIPER_EXPENDITURE_TUNABLE", 2694, 1 },
	{ "PLAYERKIT_GOLD_GRNLAUNCH_EXPENDITURE_TUNABLE", 2695, 1 },
	{ "PLAYERKIT_GOLD_RPG_EXPENDITURE_TUNABLE", 2696, 1 },
	{ "PLAYERKIT_GOLD_MINIGUN_EXPENDITURE_TUNABLE", 2697, 1 },
	{ "PLAYERKIT_PLATINUM_PISTOL_EXPENDITURE_TUNABLE", 2698, 1 },
	{ "PLAYERKIT_PLATINUM_CMBTPISTOL_EXPENDITURE_TUNABLE", 2699, 1 },
	{ "PLAYERKIT_PLATINUM_APPISTOL_EXPENDITURE_TUNABLE", 2700, 1 },
	{ "PLAYERKIT_PLATINUM_MICROSMG_EXPENDITURE_TUNABLE", 2701, 1 },
	{ "PLAYERKIT_PLATINUM_SMG_EXPENDITURE_TUNABLE", 2702, 1 },
	{ "PLAYERKIT_PLATINUM_ASLTRIFLE_EXPENDITURE_TUNABLE", 2703, 1 },
	{ "PLAYERKIT_PLATINUM_CRBNRIFLE_EXPENDITURE_TUNABLE", 2704, 1 },
	{ "PLAYERKIT_PLATINUM_ADVRRIFLE_EXPENDITURE_TUNABLE", 2705, 1 },
	{ "PLAYERKIT_PLATINUM_MG_EXPENDITURE_TUNABLE", 2706, 1 },
	{ "PLAYERKIT_PLATINUM_CMBTMG_EXPENDITURE_TUNABLE", 2707, 1 },
	{ "PLAYERKIT_PLATINUM_PUMP_EXPENDITURE_TUNABLE", 2708, 1 },
	{ "PLAYERKIT_PLATINUM_SAWOFF_EXPENDITURE_TUNABLE", 2709, 1 },
	{ "PLAYERKIT_PLATINUM_ASLTSHTGN_EXPENDITURE_TUNABLE", 2710, 1 },
	{ "PLAYERKIT_PLATINUM_RUBBERGUN_EXPENDITURE_TUNABLE", 2711, 1 },
	{ "PLAYERKIT_PLATINUM_STUNGUN_EXPENDITURE_TUNABLE", 2712, 1 },
	{ "PLAYERKIT_PLATINUM_SNIPERRFL_EXPENDITURE_TUNABLE", 2713, 1 },
	{ "PLAYERKIT_PLATINUM_HVYSNIPER_EXPENDITURE_TUNABLE", 2714, 1 },
	{ "PLAYERKIT_PLATINUM_GRNLAUNCH_EXPENDITURE_TUNABLE", 2715, 1 },
	{ "PLAYERKIT_PLATINUM_RPG_EXPENDITURE_TUNABLE", 2716, 1 },
	{ "PLAYERKIT_PLATINUM_MINIGUN_EXPENDITURE_TUNABLE", 2717, 1 },
	{ "PLAYERKIT_TAN_PISTOL_EXPENDITURE_TUNABLE", 2718, 1 },
	{ "PLAYERKIT_TAN_CMBTPISTOL_EXPENDITURE_TUNABLE", 2719, 1 },
	{ "PLAYERKIT_TAN_APPISTOL_EXPENDITURE_TUNABLE", 2720, 1 },
	{ "PLAYERKIT_TAN_MICROSMG_EXPENDITURE_TUNABLE", 2721, 1 },
	{ "PLAYERKIT_TAN_SMG_EXPENDITURE_TUNABLE", 2722, 1 },
	{ "PLAYERKIT_TAN_ASLTRIFLE_EXPENDITURE_TUNABLE", 2723, 1 },
	{ "PLAYERKIT_TAN_CRBNRIFLE_EXPENDITURE_TUNABLE", 2724, 1 },
	{ "PLAYERKIT_TAN_ADVRRIFLE_EXPENDITURE_TUNABLE", 2725, 1 },
	{ "PLAYERKIT_TAN_MG_EXPENDITURE_TUNABLE", 2726, 1 },
	{ "PLAYERKIT_TAN_CMBTMG_EXPENDITURE_TUNABLE", 2727, 1 },
	{ "PLAYERKIT_TAN_PUMP_EXPENDITURE_TUNABLE", 2728, 1 },
	{ "PLAYERKIT_TAN_SAWOFF_EXPENDITURE_TUNABLE", 2729, 1 },
	{ "PLAYERKIT_TAN_ASLTSHTGN_EXPENDITURE_TUNABLE", 2730, 1 },
	{ "PLAYERKIT_TAN_RUBBERGUN_EXPENDITURE_TUNABLE", 2731, 1 },
	{ "PLAYERKIT_TAN_STUNGUN_EXPENDITURE_TUNABLE", 2732, 1 },
	{ "PLAYERKIT_TAN_SNIPERRFL_EXPENDITURE_TUNABLE", 2733, 1 },
	{ "PLAYERKIT_TAN_HVYSNIPER_EXPENDITURE_TUNABLE", 2734, 1 },
	{ "PLAYERKIT_TAN_GRNLAUNCH_EXPENDITURE_TUNABLE", 2735, 1 },
	{ "PLAYERKIT_TAN_RPG_EXPENDITURE_TUNABLE", 2736, 1 },
	{ "PLAYERKIT_TAN_MINIGUN_EXPENDITURE_TUNABLE", 2737, 1 },
	{ "PLAYERKIT_GREEN_PISTOL_EXPENDITURE_TUNABLE", 2738, 1 },
	{ "PLAYERKIT_GREEN_CMBTPISTOL_EXPENDITURE_TUNABLE", 2739, 1 },
	{ "PLAYERKIT_GREEN_APPISTOL_EXPENDITURE_TUNABLE", 2740, 1 },
	{ "PLAYERKIT_GREEN_MICROSMG_EXPENDITURE_TUNABLE", 2741, 1 },
	{ "PLAYERKIT_GREEN_SMG_EXPENDITURE_TUNABLE", 2742, 1 },
	{ "PLAYERKIT_GREEN_ASLTRIFLE_EXPENDITURE_TUNABLE", 2743, 1 },
	{ "PLAYERKIT_GREEN_CRBNRIFLE_EXPENDITURE_TUNABLE", 2744, 1 },
	{ "PLAYERKIT_GREEN_ADVRRIFLE_EXPENDITURE_TUNABLE", 2745, 1 },
	{ "PLAYERKIT_GREEN_MG_EXPENDITURE_TUNABLE", 2746, 1 },
	{ "PLAYERKIT_GREEN_CMBTMG_EXPENDITURE_TUNABLE", 2747, 1 },
	{ "PLAYERKIT_GREEN_PUMP_EXPENDITURE_TUNABLE", 2748, 1 },
	{ "PLAYERKIT_GREEN_SAWOFF_EXPENDITURE_TUNABLE", 2749, 1 },
	{ "PLAYERKIT_GREEN_ASLTSHTGN_EXPENDITURE_TUNABLE", 2750, 1 },
	{ "PLAYERKIT_GREEN_RUBBERGUN_EXPENDITURE_TUNABLE", 2751, 1 },
	{ "PLAYERKIT_GREEN_STUNGUN_EXPENDITURE_TUNABLE", 2752, 1 },
	{ "PLAYERKIT_GREEN_SNIPERRFL_EXPENDITURE_TUNABLE", 2753, 1 },
	{ "PLAYERKIT_GREEN_HVYSNIPER_EXPENDITURE_TUNABLE", 2754, 1 },
	{ "PLAYERKIT_GREEN_GRNLAUNCH_EXPENDITURE_TUNABLE", 2755, 1 },
	{ "PLAYERKIT_GREEN_RPG_EXPENDITURE_TUNABLE", 2756, 1 },
	{ "PLAYERKIT_GREEN_MINIGUN_EXPENDITURE_TUNABLE", 2757, 1 },
	{ "PLAYERKIT_RED_PISTOL_EXPENDITURE_TUNABLE", 2758, 1 },
	{ "PLAYERKIT_RED_CMBTPISTOL_EXPENDITURE_TUNABLE", 2759, 1 },
	{ "PLAYERKIT_RED_APPISTOL_EXPENDITURE_TUNABLE", 2760, 1 },
	{ "PLAYERKIT_RED_MICROSMG_EXPENDITURE_TUNABLE", 2761, 1 },
	{ "PLAYERKIT_RED_SMG_EXPENDITURE_TUNABLE", 2762, 1 },
	{ "PLAYERKIT_RED_ASLTRIFLE_EXPENDITURE_TUNABLE", 2763, 1 },
	{ "PLAYERKIT_RED_CRBNRIFLE_EXPENDITURE_TUNABLE", 2764, 1 },
	{ "PLAYERKIT_RED_ADVRRIFLE_EXPENDITURE_TUNABLE", 2765, 1 },
	{ "PLAYERKIT_RED_MG_EXPENDITURE_TUNABLE", 2766, 1 },
	{ "PLAYERKIT_RED_CMBTMG_EXPENDITURE_TUNABLE", 2767, 1 },
	{ "PLAYERKIT_RED_PUMP_EXPENDITURE_TUNABLE", 2768, 1 },
	{ "PLAYERKIT_RED_SAWOFF_EXPENDITURE_TUNABLE", 2769, 1 },
	{ "PLAYERKIT_RED_ASLTSHTGN_EXPENDITURE_TUNABLE", 2770, 1 },
	{ "PLAYERKIT_RED_RUBBERGUN_EXPENDITURE_TUNABLE", 2771, 1 },
	{ "PLAYERKIT_RED_STUNGUN_EXPENDITURE_TUNABLE", 2772, 1 },
	{ "PLAYERKIT_RED_SNIPERRFL_EXPENDITURE_TUNABLE", 2773, 1 },
	{ "PLAYERKIT_RED_HVYSNIPER_EXPENDITURE_TUNABLE", 2774, 1 },
	{ "PLAYERKIT_RED_GRNLAUNCH_EXPENDITURE_TUNABLE", 2775, 1 },
	{ "PLAYERKIT_RED_RPG_EXPENDITURE_TUNABLE", 2776, 1 },
	{ "PLAYERKIT_RED_MINIGUN_EXPENDITURE_TUNABLE", 2777, 1 },
	{ "PLAYERKIT_BLUE_PISTOL_EXPENDITURE_TUNABLE", 2778, 1 },
	{ "PLAYERKIT_BLUE_CMBTPISTOL_EXPENDITURE_TUNABLE", 2779, 1 },
	{ "PLAYERKIT_BLUE_APPISTOL_EXPENDITURE_TUNABLE", 2780, 1 },
	{ "PLAYERKIT_BLUE_MICROSMG_EXPENDITURE_TUNABLE", 2781, 1 },
	{ "PLAYERKIT_BLUE_SMG_EXPENDITURE_TUNABLE", 2782, 1 },
	{ "PLAYERKIT_BLUE_ASLTRIFLE_EXPENDITURE_TUNABLE", 2783, 1 },
	{ "PLAYERKIT_BLUE_CRBNRIFLE_EXPENDITURE_TUNABLE", 2784, 1 },
	{ "PLAYERKIT_BLUE_ADVRRIFLE_EXPENDITURE_TUNABLE", 2785, 1 },
	{ "PLAYERKIT_BLUE_MG_EXPENDITURE_TUNABLE", 2786, 1 },
	{ "PLAYERKIT_BLUE_CMBTMG_EXPENDITURE_TUNABLE", 2787, 1 },
	{ "PLAYERKIT_BLUE_PUMP_EXPENDITURE_TUNABLE", 2788, 1 },
	{ "PLAYERKIT_BLUE_SAWOFF_EXPENDITURE_TUNABLE", 2789, 1 },
	{ "PLAYERKIT_BLUE_ASLTSHTGN_EXPENDITURE_TUNABLE", 2790, 1 },
	{ "PLAYERKIT_BLUE_RUBBERGUN_EXPENDITURE_TUNABLE", 2791, 1 },
	{ "PLAYERKIT_BLUE_STUNGUN_EXPENDITURE_TUNABLE", 2792, 1 },
	{ "PLAYERKIT_BLUE_SNIPERRFL_EXPENDITURE_TUNABLE", 2793, 1 },
	{ "PLAYERKIT_BLUE_HVYSNIPER_EXPENDITURE_TUNABLE", 2794, 1 },
	{ "PLAYERKIT_BLUE_GRNLAUNCH_EXPENDITURE_TUNABLE", 2795, 1 },
	{ "PLAYERKIT_BLUE_RPG_EXPENDITURE_TUNABLE", 2796, 1 },
	{ "PLAYERKIT_BLUE_MINIGUN_EXPENDITURE_TUNABLE", 2797, 1 },
	{ "PLAYERKIT_PINK_PISTOL_EXPENDITURE_TUNABLE", 2798, 1 },
	{ "PLAYERKIT_PINK_CMBTPISTOL_EXPENDITURE_TUNABLE", 2799, 1 },
	{ "PLAYERKIT_PINK_APPISTOL_EXPENDITURE_TUNABLE", 2800, 1 },
	{ "PLAYERKIT_PINK_MICROSMG_EXPENDITURE_TUNABLE", 2801, 1 },
	{ "PLAYERKIT_PINK_SMG_EXPENDITURE_TUNABLE", 2802, 1 },
	{ "PLAYERKIT_PINK_ASLTRIFLE_EXPENDITURE_TUNABLE", 2803, 1 },
	{ "PLAYERKIT_PINK_CRBNRIFLE_EXPENDITURE_TUNABLE", 2804, 1 },
	{ "PLAYERKIT_PINK_ADVRRIFLE_EXPENDITURE_TUNABLE", 2805, 1 },
	{ "PLAYERKIT_PINK_MG_EXPENDITURE_TUNABLE", 2806, 1 },
	{ "PLAYERKIT_PINK_CMBTMG_EXPENDITURE_TUNABLE", 2807, 1 },
	{ "PLAYERKIT_PINK_PUMP_EXPENDITURE_TUNABLE", 2808, 1 },
	{ "PLAYERKIT_PINK_SAWOFF_EXPENDITURE_TUNABLE", 2809, 1 },
	{ "PLAYERKIT_PINK_ASLTSHTGN_EXPENDITURE_TUNABLE", 2810, 1 },
	{ "PLAYERKIT_PINK_RUBBERGUN_EXPENDITURE_TUNABLE", 2811, 1 },
	{ "PLAYERKIT_PINK_STUNGUN_EXPENDITURE_TUNABLE", 2812, 1 },
	{ "PLAYERKIT_PINK_SNIPERRFL_EXPENDITURE_TUNABLE", 2813, 1 },
	{ "PLAYERKIT_PINK_HVYSNIPER_EXPENDITURE_TUNABLE", 2814, 1 },
	{ "PLAYERKIT_PINK_GRNLAUNCH_EXPENDITURE_TUNABLE", 2815, 1 },
	{ "PLAYERKIT_PINK_RPG_EXPENDITURE_TUNABLE", 2816, 1 },
	{ "PLAYERKIT_PINK_MINIGUN_EXPENDITURE_TUNABLE", 2817, 1 },
	{ "PLAYERKIT_SUPERLIGHTARMOUR_EXPENDITURE_TUNABLE", 2818, 1 },
	{ "PLAYERKIT_LIGHTARMOUR_EXPENDITURE_TUNABLE", 2819, 1 },
	{ "PLAYERKIT_STANDARDARMOUR_EXPENDITURE_TUNABLE", 2820, 1 },
	{ "PLAYERKIT_HEAVYARMOUR_EXPENDITURE_TUNABLE", 2821, 1 },
	{ "PLAYERKIT_SUPERHEAVYARMOUR_EXPENDITURE_TUNABLE", 2822, 1 },
	{ "PLAYERKIT_GOLD_DLC_ASSAULTSMG_EXPENDITURE_TUNABLE", 2823, 1 },
	{ "PLAYERKIT_PINK_DLC_ASSAULTSMG_EXPENDITURE_TUNABLE", 2824, 1 },
	{ "PLAYERKIT_TAN_DLC_ASSAULTSMG_EXPENDITURE_TUNABLE", 2825, 1 },
	{ "PLAYERKIT_BLUE_DLC_ASSAULTSMG_EXPENDITURE_TUNABLE", 2826, 1 },
	{ "PLAYERKIT_RED_DLC_ASSAULTSMG_EXPENDITURE_TUNABLE", 2827, 1 },
	{ "PLAYERKIT_PLATINUM_DLC_ASSAULTSMG_EXPENDITURE_TUNABLE", 2828, 1 },
	{ "PLAYERKIT_GOLD_DLC_ASSAULTSNIPER_EXPENDITURE_TUNABLE", 2829, 1 },
	{ "PLAYERKIT_PINK_DLC_ASSAULTSNIPER_EXPENDITURE_TUNABLE", 2830, 1 },
	{ "PLAYERKIT_TAN_DLC_ASSAULTSNIPER_EXPENDITURE_TUNABLE", 2831, 1 },
	{ "PLAYERKIT_BLUE_DLC_ASSAULTSNIPER_EXPENDITURE_TUNABLE", 2832, 1 },
	{ "PLAYERKIT_RED_DLC_ASSAULTSNIPER_EXPENDITURE_TUNABLE", 2833, 1 },
	{ "PLAYERKIT_PLATINUM_DLC_ASSAULTSNIPER_EXPENDITURE_TUNABLE", 2834, 1 },
	{ "PLAYERKIT_GOLD_DLC_ASSAULTMG_EXPENDITURE_TUNABLE", 2841, 1 },
	{ "PLAYERKIT_PINK_DLC_ASSAULTMG_EXPENDITURE_TUNABLE", 2842, 1 },
	{ "PLAYERKIT_TAN_DLC_ASSAULTMG_EXPENDITURE_TUNABLE", 2843, 1 },
	{ "PLAYERKIT_BLUE_DLC_ASSAULTMG_EXPENDITURE_TUNABLE", 2844, 1 },
	{ "PLAYERKIT_RED_DLC_ASSAULTMG_EXPENDITURE_TUNABLE", 2845, 1 },
	{ "PLAYERKIT_PLATINUM_DLC_ASSAULTMG_EXPENDITURE_TUNABLE", 2846, 1 },
	{ "PLAYERKIT_GOLD_DLC_HEAVYRIFLE_EXPENDITURE_TUNABLE", 2847, 1 },
	{ "PLAYERKIT_PINK_DLC_HEAVYRIFLE_EXPENDITURE_TUNABLE", 2848, 1 },
	{ "PLAYERKIT_TAN_DLC_HEAVYRIFLE_EXPENDITURE_TUNABLE", 2849, 1 },
	{ "PLAYERKIT_BLUE_DLC_HEAVYRIFLE_EXPENDITURE_TUNABLE", 2850, 1 },
	{ "PLAYERKIT_RED_DLC_HEAVYRIFLE_EXPENDITURE_TUNABLE", 2851, 1 },
	{ "PLAYERKIT_PLATINUM_DLC_HEAVYRIFLE_EXPENDITURE_TUNABLE", 2852, 1 },
	{ "PLAYERKIT_GREEN_DLC_HEAVYRIFLE_EXPENDITURE_TUNABLE", 2853, 1 },
	{ "PLAYERKIT_GREEN_DLC_ASSAULTSMG_EXPENDITURE_TUNABLE", 2854, 1 },
	{ "PLAYERKIT_GREEN_DLC_ASSAULTMG_EXPENDITURE_TUNABLE", 2855, 1 },
	{ "PLAYERKIT_ARMOUR_STORE_L1_RANK_TUNABLE", 2857, 0 },
	{ "PLAYERKIT_ARMOUR_STORE_L2_RANK_TUNABLE", 2858, 0 },
	{ "PLAYERKIT_ARMOUR_STORE_L3_RANK_TUNABLE", 2859, 0 },
	{ "PLAYERKIT_ARMOUR_STORE_L4_RANK_TUNABLE", 2860, 0 },
	{ "PLAYERKIT_ARMOUR_STORE_L5_RANK_TUNABLE", 2861, 0 },
	{ "PLAYERKIT_ARMOUR_STORE_L6_RANK_TUNABLE", 2862, 0 },
	{ "PLAYERKIT_ARMOUR_STORE_L7_RANK_TUNABLE", 2863, 0 },
	{ "PLAYERKIT_ARMOUR_STORE_L8_RANK_TUNABLE", 2864, 0 },
	{ "PLAYERKIT_ARMOUR_STORE_L9_RANK_TUNABLE", 2865, 0 },
	{ "WEAPONADDON_AT_AR_AFGRIP_EXPENDITURE_TUNABLE", 2868, 1 },
	{ "WEAPONADDON_AT_PI_FLSH_EXPENDITURE_TUNABLE", 2869, 1 },
	{ "WEAPONADDON_AT_PI_LASR_EXPENDITURE_TUNABLE", 2870, 1 },
	{ "WEAPONADDON_AT_PI_FLSHLASR_EXPENDITURE_TUNABLE", 2871, 1 },
	{ "WEAPONADDON_AT_AR_FLSH_EXPENDITURE_TUNABLE", 2872, 1 },
	{ "WEAPONADDON_AT_AR_LASR_EXPENDITURE_TUNABLE", 2873, 1 },
	{ "WEAPONADDON_AT_AR_FLSHLASR_EXPENDITURE_TUNABLE", 2874, 1 },
	{ "WEAPONADDON_AT_SCOPE_MACRO_EXPENDITURE_TUNABLE", 2875, 1 },
	{ "WEAPONADDON_AT_SCOPE_SMALL_EXPENDITURE_TUNABLE", 2876, 1 },
	{ "WEAPONADDON_AT_SCOPE_MEDIUM_EXPENDITURE_TUNABLE", 2877, 1 },
	{ "WEAPONADDON_AT_SCOPE_LARGE_EXPENDITURE_TUNABLE", 2878, 1 },
	{ "WEAPONADDON_AT_SCOPE_MAX_EXPENDITURE_TUNABLE", 2879, 1 },
	{ "WEAPONADDON_AT_PI_SUPP_EXPENDITURE_TUNABLE", 2880, 1 },
	{ "WEAPONADDON_AT_AR_SUPP_EXPENDITURE_TUNABLE", 2881, 1 },
	{ "WEAPONADDON_AT_SR_SUPP_EXPENDITURE_TUNABLE", 2883, 1 },
	{ "WEAPONADDON_PISTOL_CLIP_02_EXPENDITURE_TUNABLE", 2884, 1 },
	{ "WEAPONADDON_COMBATPISTOL_CLIP_02_EXPENDITURE_TUNABLE", 2885, 1 },
	{ "WEAPONADDON_PISTOL50_CLIP_02_EXPENDITURE_TUNABLE", 2886, 1 },
	{ "WEAPONADDON_APPISTOL_CLIP_02_EXPENDITURE_TUNABLE", 2887, 1 },
	{ "WEAPONADDON_MICROSMG_CLIP_02_EXPENDITURE_TUNABLE", 2888, 1 },
	{ "WEAPONADDON_SMG_CLIP_02_EXPENDITURE_TUNABLE", 2889, 1 },
	{ "WEAPONADDON_ASSAULTSMG_CLIP_02_EXPENDITURE_TUNABLE", 2890, 1 },
	{ "WEAPONADDON_ASSAULTRIFLE_CLIP_02_EXPENDITURE_TUNABLE", 2891, 1 },
	{ "WEAPONADDON_CARBINERIFLE_CLIP_02_EXPENDITURE_TUNABLE", 2892, 1 },
	{ "WEAPONADDON_ADVANCEDRIFLE_CLIP_02_EXPENDITURE_TUNABLE", 2894, 1 },
	{ "WEAPONADDON_MG_CLIP_02_EXPENDITURE_TUNABLE", 2895, 1 },
	{ "WEAPONADDON_COMBATMG_CLIP_02_EXPENDITURE_TUNABLE", 2896, 1 },
	{ "WEAPONADDON_ASSAULTSHOTGUN_CLIP_02_EXPENDITURE_TUNABLE", 2898, 1 },
	{ "WEAPONADDON_PROGRAMMABLEAR_PROGRAMMABLE_TARGETING_EXPENDITURE_TUNABLE", 2900, 1 },
	{ "TATTOO_MP_FM_HEAD_BANGER_EXPENDITURE_TUNABLE", 2906, 1 },
	{ "TATTOO_MP_FM_SLAYER_EXPENDITURE_TUNABLE", 2907, 1 },
	{ "TATTOO_MP_FM_GANGHIDEOUT_CLEAR_EXPENDITURE_TUNABLE", 2908, 1 },
	{ "TATTOO_MP_FM_ARMOURED_VAN_TAKEDOWN_EXPENDITURE_TUNABLE", 2909, 1 },
	{ "TATTOO_MP_FM_HUSTLER_EXPENDITURE_TUNABLE", 2910, 1 },
	{ "TATTOO_MP_FM_WIN_EVER_MODE_ONCE_EXPENDITURE_TUNABLE", 2911, 1 },
	{ "TATTOO_MP_FM_BOUNTY_KILLER_EXPENDITURE_TUNABLE", 2912, 1 },
	{ "TATTOO_MP_FM_HOLD_WORLD_RECORD_EXPENDITURE_TUNABLE", 2913, 1 },
	{ "TATTOO_MP_FM_FULL_MODDED_EXPENDITURE_TUNABLE", 2914, 1 },
	{ "TATTOO_MP_FM_REVENGE_KILL_EXPENDITURE_TUNABLE", 2915, 1 },
	{ "TATTOO_MP_FM_KILL_3_RACERS_EXPENDITURE_TUNABLE", 2916, 1 },
	{ "TATTOO_MP_FM_REACH_RANK_1_EXPENDITURE_TUNABLE", 2917, 1 },
	{ "TATTOO_MP_FM_REACH_RANK_2_EXPENDITURE_TUNABLE", 2918, 1 },
	{ "TATTOO_MP_FM_REACH_RANK_3_EXPENDITURE_TUNABLE", 2919, 1 },
	{ "TATTOO_MP_FM_FMKILLCHEATER_EXPENDITURE_TUNABLE", 2920, 1 },
	{ "TATTOO_MP_FM_RACES_WON_EXPENDITURE_TUNABLE", 2921, 1 },
	{ "TATTOO_MP_FM_HOLD_UP_SHOPS_1_EXPENDITURE_TUNABLE", 2922, 1 },
	{ "TATTOO_MP_FM_HOLD_UP_SHOPS_2_EXPENDITURE_TUNABLE", 2923, 1 },
	{ "TATTOO_MP_FM_HOLD_UP_SHOPS_3_EXPENDITURE_TUNABLE", 2924, 1 },
	{ "TATTOO_MP_FM_HOLD_UP_SHOPS_4_EXPENDITURE_TUNABLE", 2925, 1 },
	{ "TATTOO_MP_FM_CREW_A_EXPENDITURE_TUNABLE", 2926, 1 },
	{ "TATTOO_MP_FM_CREW_B_EXPENDITURE_TUNABLE", 2927, 1 },
	{ "TATTOO_MP_FM_CREW_C_EXPENDITURE_TUNABLE", 2928, 1 },
	{ "TATTOO_MP_FM_CREW_D_EXPENDITURE_TUNABLE", 2929, 1 },
	{ "TATTOO_MP_FM_11_EXPENDITURE_TUNABLE", 2940, 1 },
	{ "TATTOO_MP_FM_12_EXPENDITURE_TUNABLE", 2941, 1 },
	{ "TATTOO_MP_FM_13_EXPENDITURE_TUNABLE", 2942, 1 },
	{ "TATTOO_MP_FM_14_EXPENDITURE_TUNABLE", 2943, 1 },
	{ "TATTOO_MP_FM_15_EXPENDITURE_TUNABLE", 2944, 1 },
	{ "TATTOO_MP_FM_16_EXPENDITURE_TUNABLE", 2945, 1 },
	{ "TATTOO_MP_FM_17_EXPENDITURE_TUNABLE", 2946, 1 },
	{ "TATTOO_MP_FM_18_EXPENDITURE_TUNABLE", 2947, 1 },
	{ "TATTOO_MP_FM_19_EXPENDITURE_TUNABLE", 2948, 1 },
	{ "TATTOO_MP_FM_20_EXPENDITURE_TUNABLE", 2949, 1 },
	{ "TATTOO_MP_FM_21_EXPENDITURE_TUNABLE", 2950, 1 },
	{ "TATTOO_MP_FM_22_EXPENDITURE_TUNABLE", 2951, 1 },
	{ "TATTOO_MP_FM_23_EXPENDITURE_TUNABLE", 2952, 1 },
	{ "TATTOO_MP_FM_24_EXPENDITURE_TUNABLE", 2953, 1 },
	{ "TATTOO_MP_FM_25_EXPENDITURE_TUNABLE", 2954, 1 },
	{ "TATTOO_MP_FM_26_EXPENDITURE_TUNABLE", 2955, 1 },
	{ "TATTOO_MP_FM_27_EXPENDITURE_TUNABLE", 2956, 1 },
	{ "TATTOO_MP_FM_28_EXPENDITURE_TUNABLE", 2957, 1 },
	{ "TATTOO_MP_FM_29_EXPENDITURE_TUNABLE", 2958, 1 },
	{ "TATTOO_MP_FM_30_EXPENDITURE_TUNABLE", 2959, 1 },
	{ "TATTOO_MP_FM_31_EXPENDITURE_TUNABLE", 2960, 1 },
	{ "TATTOO_MP_FM_32_EXPENDITURE_TUNABLE", 2961, 1 },
	{ "TATTOO_MP_FM_33_EXPENDITURE_TUNABLE", 2962, 1 },
	{ "TATTOO_MP_FM_34_EXPENDITURE_TUNABLE", 2963, 1 },
	{ "TATTOO_MP_FM_35_EXPENDITURE_TUNABLE", 2964, 1 },
	{ "TATTOO_MP_FM_36_EXPENDITURE_TUNABLE", 2965, 1 },
	{ "TATTOO_MP_FM_37_EXPENDITURE_TUNABLE", 2966, 1 },
	{ "TATTOO_MP_FM_38_EXPENDITURE_TUNABLE", 2967, 1 },
	{ "TATTOO_MP_FM_39_EXPENDITURE_TUNABLE", 2968, 1 },
	{ "TATTOO_MP_FM_40_EXPENDITURE_TUNABLE", 2969, 1 },
	{ "TATTOO_MP_FM_41_EXPENDITURE_TUNABLE", 2970, 1 },
	{ "TATTOO_MP_FM_42_EXPENDITURE_TUNABLE", 2971, 1 },
	{ "TATTOO_MP_FM_43_EXPENDITURE_TUNABLE", 2972, 1 },
	{ "TATTOO_MP_FM_44_EXPENDITURE_TUNABLE", 2973, 1 },
	{ "TATTOO_MP_FM_45_EXPENDITURE_TUNABLE", 2974, 1 },
	{ "TATTOO_MP_FM_46_EXPENDITURE_TUNABLE", 2975, 1 },
	{ "TATTOO_MP_FM_47_EXPENDITURE_TUNABLE", 2976, 1 },
	{ "TSHIRT_TRANS_MP_FM_REDSKULL_EXPENDITURE_TUNABLE", 2977, 1 },
	{ "TSHIRT_TRANS_MP_FM_LSBELLE_EXPENDITURE_TUNABLE", 2978, 1 },
	{ "TSHIRT_TRANS_MP_FM_ROCKSTAR_EXPENDITURE_TUNABLE", 2979, 1 },
	{ "CARMOD_UNLOCK_WHEELSHIGHEND_EXPENDITURE_TUNABLE", 2980, 1 },
	{ "CARMOD_UNLOCK_WHEELSSPORT_EXPENDITURE_TUNABLE", 2981, 1 },
	{ "CARMOD_UNLOCK_WHEELSLOWRIDER_EXPENDITURE_TUNABLE", 2982, 1 },
	{ "CARMOD_UNLOCK_WHEELSSUV_EXPENDITURE_TUNABLE", 2983, 1 },
	{ "CARMOD_UNLOCK_WHEELSMUSCLE_EXPENDITURE_TUNABLE", 2984, 1 },
	{ "CARMOD_UNLOCK_WHEELSTUNER_EXPENDITURE_TUNABLE", 2985, 1 },
	{ "CARMOD_UNLOCK_WHEELSOFFROAD_EXPENDITURE_TUNABLE", 2986, 1 },
	{ "CARMOD_UNLOCK_WHEELSBIKE_EXPENDITURE_TUNABLE", 2987, 1 },
	{ "CARMOD_UNLOCK_WHEELCOLOURS_EXPENDITURE_TUNABLE", 2988, 1 },
	{ "CARMOD_UNLOCK_STOCKTIRES_EXPENDITURE_TUNABLE", 2989, 1 },
	{ "CARMOD_UNLOCK_NOARMOUR_EXPENDITURE_TUNABLE", 2990, 1 },
	{ "CARMOD_UNLOCK_STOCKFRONTBUMPER_EXPENDITURE_TUNABLE", 2991, 1 },
	{ "CARMOD_UNLOCK_STOCKREARBUMPER_EXPENDITURE_TUNABLE", 2992, 1 },
	{ "CARMOD_UNLOCK_STOCKCHASSIS_EXPENDITURE_TUNABLE", 2993, 1 },
	{ "CARMOD_UNLOCK_STOCKEXHAUST_EXPENDITURE_TUNABLE", 2994, 1 },
	{ "CARMOD_UNLOCK_STOCKLEFTFENDER_EXPENDITURE_TUNABLE", 2995, 1 },
	{ "CARMOD_UNLOCK_STOCKRIGHTFENDER_EXPENDITURE_TUNABLE", 2996, 1 },
	{ "CARMOD_UNLOCK_STOCKGRILLE_EXPENDITURE_TUNABLE", 2997, 1 },
	{ "CARMOD_UNLOCK_STOCKHOOD_EXPENDITURE_TUNABLE", 2998, 1 },
	{ "CARMOD_UNLOCK_STOCKHORN_EXPENDITURE_TUNABLE", 2999, 1 },
	{ "CARMOD_UNLOCK_STOCKLIGHTS_EXPENDITURE_TUNABLE", 3000, 1 },
	{ "CARMOD_UNLOCK_PLATESBLUEONWHITE1_EXPENDITURE_TUNABLE", 3001, 1 },
	{ "CARMOD_UNLOCK_PLATESBLUEONWHITE2_EXPENDITURE_TUNABLE", 3002, 1 },
	{ "CARMOD_UNLOCK_PLATESBLUEONWHITE3_EXPENDITURE_TUNABLE", 3003, 1 },
	{ "CARMOD_UNLOCK_PLATESYELLOWONBLUE_EXPENDITURE_TUNABLE", 3004, 1 },
	{ "CARMOD_UNLOCK_PLATESYELLOWONBLACK_EXPENDITURE_TUNABLE", 3005, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORCHROME_EXPENDITURE_TUNABLE", 3006, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORCLASSIC_EXPENDITURE_TUNABLE", 3007, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORMATTE_EXPENDITURE_TUNABLE", 3008, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORMETALLIC_EXPENDITURE_TUNABLE", 3009, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORMETALS_EXPENDITURE_TUNABLE", 3010, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORPEARLESCENT_EXPENDITURE_TUNABLE", 3011, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORCREW_EXPENDITURE_TUNABLE", 3012, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORCHROME_EXPENDITURE_TUNABLE", 3013, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORCLASSIC_EXPENDITURE_TUNABLE", 3014, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORMATTE_EXPENDITURE_TUNABLE", 3015, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORMETALLIC_EXPENDITURE_TUNABLE", 3016, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORMETALS_EXPENDITURE_TUNABLE", 3017, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORPEARLESCENT_EXPENDITURE_TUNABLE", 3018, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORCREW_EXPENDITURE_TUNABLE", 3019, 1 },
	{ "CARMOD_UNLOCK_CREWEMBLEM_EXPENDITURE_TUNABLE", 3020, 1 },
	{ "CARMOD_UNLOCK_STOCKROOF_EXPENDITURE_TUNABLE", 3021, 1 },
	{ "CARMOD_UNLOCK_STOCKSKIRT_EXPENDITURE_TUNABLE", 3022, 1 },
	{ "CARMOD_UNLOCK_STOCKSPOILER_EXPENDITURE_TUNABLE", 3023, 1 },
	{ "CARMOD_UNLOCK_STOCKSUSPENSION_EXPENDITURE_TUNABLE", 3024, 1 },
	{ "CARMOD_UNLOCK_TRACKER_EXPENDITURE_TUNABLE", 3025, 1 },
	{ "CARMOD_UNLOCK_STOCKTRANSMISSION_EXPENDITURE_TUNABLE", 3026, 1 },
	{ "CARMOD_UNLOCK_NOTURBO_EXPENDITURE_TUNABLE", 3027, 1 },
	{ "CARMOD_UNLOCK_STOCKWHEELS_EXPENDITURE_TUNABLE", 3028, 1 },
	{ "CARMOD_UNLOCK_CREWSMOKE_EXPENDITURE_TUNABLE", 3029, 1 },
	{ "CARMOD_UNLOCK_WINDOWSNONE_EXPENDITURE_TUNABLE", 3030, 1 },
	{ "CARMOD_UNLOCK_BRAKES_L2_EXPENDITURE_TUNABLE", 3031, 1 },
	{ "CARMOD_UNLOCK_BRAKES_L3_EXPENDITURE_TUNABLE", 3032, 1 },
	{ "CARMOD_UNLOCK_BRAKES_L4_EXPENDITURE_TUNABLE", 3033, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_20_EXPENDITURE_TUNABLE", 3034, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_40_EXPENDITURE_TUNABLE", 3035, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_60_EXPENDITURE_TUNABLE", 3036, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_80_EXPENDITURE_TUNABLE", 3037, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_100_EXPENDITURE_TUNABLE", 3038, 1 },
	{ "CARMOD_UNLOCK_STOCK_BRAKES_EXPENDITURE_TUNABLE", 3039, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L2_EXPENDITURE_TUNABLE", 3040, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L3_EXPENDITURE_TUNABLE", 3041, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L4_EXPENDITURE_TUNABLE", 3042, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L5_EXPENDITURE_TUNABLE", 3043, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L6_EXPENDITURE_TUNABLE", 3044, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L7_EXPENDITURE_TUNABLE", 3045, 1 },
	{ "CARMOD_UNLOCK_CUSTOM_TYRES_EXPENDITURE_TUNABLE", 3046, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L2_EXPENDITURE_TUNABLE", 3047, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L3_EXPENDITURE_TUNABLE", 3048, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L4_EXPENDITURE_TUNABLE", 3049, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L5_EXPENDITURE_TUNABLE", 3050, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L6_EXPENDITURE_TUNABLE", 3051, 1 },
	{ "CARMOD_UNLOCK_GRILL_L2_EXPENDITURE_TUNABLE", 3052, 1 },
	{ "CARMOD_UNLOCK_GRILL_L3_EXPENDITURE_TUNABLE", 3053, 1 },
	{ "CARMOD_UNLOCK_GRILL_L4_EXPENDITURE_TUNABLE", 3054, 1 },
	{ "CARMOD_UNLOCK_GRILL_L5_EXPENDITURE_TUNABLE", 3055, 1 },
	{ "CARMOD_UNLOCK_GRILL_L6_EXPENDITURE_TUNABLE", 3056, 1 },
	{ "CARMOD_UNLOCK_ROOF_L1_EXPENDITURE_TUNABLE", 3057, 1 },
	{ "CARMOD_UNLOCK_ROOF_L2_EXPENDITURE_TUNABLE", 3058, 1 },
	{ "CARMOD_UNLOCK_ROOF_L3_EXPENDITURE_TUNABLE", 3059, 1 },
	{ "CARMOD_UNLOCK_ROOF_L4_EXPENDITURE_TUNABLE", 3060, 1 },
	{ "CARMOD_UNLOCK_ROOF_L5_EXPENDITURE_TUNABLE", 3061, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L1_EXPENDITURE_TUNABLE", 3062, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L2_EXPENDITURE_TUNABLE", 3063, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L3_EXPENDITURE_TUNABLE", 3064, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L4_EXPENDITURE_TUNABLE", 3065, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L5_EXPENDITURE_TUNABLE", 3066, 1 },
	{ "CARMOD_UNLOCK_WHEELS_L4_EXPENDITURE_TUNABLE", 3067, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L2_EXPENDITURE_TUNABLE", 3068, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L3_EXPENDITURE_TUNABLE", 3069, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L4_EXPENDITURE_TUNABLE", 3070, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L5_EXPENDITURE_TUNABLE", 3071, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L2_EXPENDITURE_TUNABLE", 3072, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L3_EXPENDITURE_TUNABLE", 3073, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L4_EXPENDITURE_TUNABLE", 3074, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L5_EXPENDITURE_TUNABLE", 3075, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L2_EXPENDITURE_TUNABLE", 3076, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L3_EXPENDITURE_TUNABLE", 3077, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L4_EXPENDITURE_TUNABLE", 3078, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L5_EXPENDITURE_TUNABLE", 3079, 1 },
	{ "CARMOD_UNLOCK_TIMED_BOMB_EXPENDITURE_TUNABLE", 3080, 1 },
	{ "CARMOD_UNLOCK_IGNITION_BOMB_EXPENDITURE_TUNABLE", 3081, 1 },
	{ "CARMOD_UNLOCK_L_WING_L2_EXPENDITURE_TUNABLE", 3082, 1 },
	{ "CARMOD_UNLOCK_L_WING_L3_EXPENDITURE_TUNABLE", 3083, 1 },
	{ "CARMOD_UNLOCK_L_WING_L4_EXPENDITURE_TUNABLE", 3084, 1 },
	{ "CARMOD_UNLOCK_L_WING_L5_EXPENDITURE_TUNABLE", 3085, 1 },
	{ "CARMOD_UNLOCK_R_WING_L2_EXPENDITURE_TUNABLE", 3086, 1 },
	{ "CARMOD_UNLOCK_BONNET_L2_EXPENDITURE_TUNABLE", 3087, 1 },
	{ "CARMOD_UNLOCK_BONNET_L3_EXPENDITURE_TUNABLE", 3088, 1 },
	{ "CARMOD_UNLOCK_BONNET_L4_EXPENDITURE_TUNABLE", 3089, 1 },
	{ "CARMOD_UNLOCK_BONNET_L5_EXPENDITURE_TUNABLE", 3090, 1 },
	{ "CARMOD_UNLOCK_BONNET_L6_EXPENDITURE_TUNABLE", 3091, 1 },
	{ "CARMOD_UNLOCK_BONNET_L7_EXPENDITURE_TUNABLE", 3092, 1 },
	{ "CARMOD_UNLOCK_HORN_L2_EXPENDITURE_TUNABLE", 3093, 1 },
	{ "CARMOD_UNLOCK_HORN_L3_EXPENDITURE_TUNABLE", 3094, 1 },
	{ "CARMOD_UNLOCK_HORN_L4_EXPENDITURE_TUNABLE", 3095, 1 },
	{ "CARMOD_UNLOCK_HORN_L5_EXPENDITURE_TUNABLE", 3096, 1 },
	{ "CARMOD_UNLOCK_HORN_L6_EXPENDITURE_TUNABLE", 3097, 1 },
	{ "CARMOD_UNLOCK_HORN_L7_EXPENDITURE_TUNABLE", 3098, 1 },
	{ "CARMOD_UNLOCK_HORN_L8_EXPENDITURE_TUNABLE", 3099, 1 },
	{ "CARMOD_UNLOCK_HORN_L9_EXPENDITURE_TUNABLE", 3100, 1 },
	{ "CARMOD_UNLOCK_XENON_LIGHTS_EXPENDITURE_TUNABLE", 3101, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L2_EXPENDITURE_TUNABLE", 3102, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L3_EXPENDITURE_TUNABLE", 3103, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L4_EXPENDITURE_TUNABLE", 3104, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L5_EXPENDITURE_TUNABLE", 3105, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L1_EXPENDITURE_TUNABLE", 3106, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L2_EXPENDITURE_TUNABLE", 3107, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L3_EXPENDITURE_TUNABLE", 3108, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L4_EXPENDITURE_TUNABLE", 3109, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L5_EXPENDITURE_TUNABLE", 3110, 1 },
	{ "CARMOD_UNLOCK_GEAR_BOX_L2_EXPENDITURE_TUNABLE", 3111, 1 },
	{ "CARMOD_UNLOCK_GEAR_BOX_L3_EXPENDITURE_TUNABLE", 3112, 1 },
	{ "CARMOD_UNLOCK_GEAR_BOX_L4_EXPENDITURE_TUNABLE", 3113, 1 },
	{ "CARMOD_UNLOCK_TURBO_EXPENDITURE_TUNABLE", 3114, 1 },
	{ "CARMOD_UNLOCK_BULLET_PROOF_TYRES_EXPENDITURE_TUNABLE", 3115, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_WHITE_EXPENDITURE_TUNABLE", 3116, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_ORANGE_EXPENDITURE_TUNABLE", 3117, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_RED_EXPENDITURE_TUNABLE", 3118, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_YELLOW_EXPENDITURE_TUNABLE", 3119, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_BLUE_EXPENDITURE_TUNABLE", 3120, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_BLACK_EXPENDITURE_TUNABLE", 3121, 1 },
	{ "CARMOD_UNLOCK_LIGHT_SMOKE_WINDOWS_EXPENDITURE_TUNABLE", 3122, 1 },
	{ "CARMOD_UNLOCK_DARK_SMOKE_WINDOWS_EXPENDITURE_TUNABLE", 3123, 1 },
	{ "CARMOD_UNLOCK_LIMO_WINDOWS_EXPENDITURE_TUNABLE", 3124, 1 },
	{ "CARMOD_UNLOCK_WHEELCOLOURS_EXPENDITURE_TUNABLE_SUV", 3125, 1 },
	{ "CARMOD_UNLOCK_STOCKTIRES_EXPENDITURE_TUNABLE_SUV", 3126, 1 },
	{ "CARMOD_UNLOCK_NOARMOUR_EXPENDITURE_TUNABLE_SUV", 3127, 1 },
	{ "CARMOD_UNLOCK_STOCKFRONTBUMPER_EXPENDITURE_TUNABLE_SUV", 3128, 1 },
	{ "CARMOD_UNLOCK_STOCKREARBUMPER_EXPENDITURE_TUNABLE_SUV", 3129, 1 },
	{ "CARMOD_UNLOCK_STOCKCHASSIS_EXPENDITURE_TUNABLE_SUV", 3130, 1 },
	{ "CARMOD_UNLOCK_STOCKEXHAUST_EXPENDITURE_TUNABLE_SUV", 3131, 1 },
	{ "CARMOD_UNLOCK_STOCKLEFTFENDER_EXPENDITURE_TUNABLE_SUV", 3132, 1 },
	{ "CARMOD_UNLOCK_STOCKRIGHTFENDER_EXPENDITURE_TUNABLE_SUV", 3133, 1 },
	{ "CARMOD_UNLOCK_STOCKGRILLE_EXPENDITURE_TUNABLE_SUV", 3134, 1 },
	{ "CARMOD_UNLOCK_STOCKHOOD_EXPENDITURE_TUNABLE_SUV", 3135, 1 },
	{ "CARMOD_UNLOCK_STOCKHORN_EXPENDITURE_TUNABLE_SUV", 3136, 1 },
	{ "CARMOD_UNLOCK_STOCKLIGHTS_EXPENDITURE_TUNABLE_SUV", 3137, 1 },
	{ "CARMOD_UNLOCK_PLATESBLUEONWHITE1_EXPENDITURE_TUNABLE_SUV", 3138, 1 },
	{ "CARMOD_UNLOCK_PLATESBLUEONWHITE2_EXPENDITURE_TUNABLE_SUV", 3139, 1 },
	{ "CARMOD_UNLOCK_PLATESBLUEONWHITE3_EXPENDITURE_TUNABLE_SUV", 3140, 1 },
	{ "CARMOD_UNLOCK_PLATESYELLOWONBLUE_EXPENDITURE_TUNABLE_SUV", 3141, 1 },
	{ "CARMOD_UNLOCK_PLATESYELLOWONBLACK_EXPENDITURE_TUNABLE_SUV", 3142, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORCHROME_EXPENDITURE_TUNABLE_SUV", 3143, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORCLASSIC_EXPENDITURE_TUNABLE_SUV", 3144, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORMATTE_EXPENDITURE_TUNABLE_SUV", 3145, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORMETALLIC_EXPENDITURE_TUNABLE_SUV", 3146, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORMETALS_EXPENDITURE_TUNABLE_SUV", 3147, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORPEARLESCENT_EXPENDITURE_TUNABLE_SUV", 3148, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORCREW_EXPENDITURE_TUNABLE_SUV", 3149, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORCHROME_EXPENDITURE_TUNABLE_SUV", 3150, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORCLASSIC_EXPENDITURE_TUNABLE_SUV", 3151, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORMATTE_EXPENDITURE_TUNABLE_SUV", 3152, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORMETALLIC_EXPENDITURE_TUNABLE_SUV", 3153, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORMETALS_EXPENDITURE_TUNABLE_SUV", 3154, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORPEARLESCENT_EXPENDITURE_TUNABLE_SUV", 3155, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORCREW_EXPENDITURE_TUNABLE_SUV", 3156, 1 },
	{ "CARMOD_UNLOCK_CREWEMBLEM_EXPENDITURE_TUNABLE_SUV", 3157, 1 },
	{ "CARMOD_UNLOCK_STOCKROOF_EXPENDITURE_TUNABLE_SUV", 3158, 1 },
	{ "CARMOD_UNLOCK_STOCKSKIRT_EXPENDITURE_TUNABLE_SUV", 3159, 1 },
	{ "CARMOD_UNLOCK_STOCKSPOILER_EXPENDITURE_TUNABLE_SUV", 3160, 1 },
	{ "CARMOD_UNLOCK_STOCKSUSPENSION_EXPENDITURE_TUNABLE_SUV", 3161, 1 },
	{ "CARMOD_UNLOCK_TRACKER_EXPENDITURE_TUNABLE_SUV", 3162, 1 },
	{ "CARMOD_UNLOCK_STOCKTRANSMISSION_EXPENDITURE_TUNABLE_SUV", 3163, 1 },
	{ "CARMOD_UNLOCK_NOTURBO_EXPENDITURE_TUNABLE_SUV", 3164, 1 },
	{ "CARMOD_UNLOCK_STOCKWHEELS_EXPENDITURE_TUNABLE_SUV", 3165, 1 },
	{ "CARMOD_UNLOCK_CREWSMOKE_EXPENDITURE_TUNABLE_SUV", 3166, 1 },
	{ "CARMOD_UNLOCK_WINDOWSNONE_EXPENDITURE_TUNABLE_SUV", 3167, 1 },
	{ "CARMOD_UNLOCK_BRAKES_L2_EXPENDITURE_TUNABLE_SUV", 3168, 1 },
	{ "CARMOD_UNLOCK_BRAKES_L3_EXPENDITURE_TUNABLE_SUV", 3169, 1 },
	{ "CARMOD_UNLOCK_BRAKES_L4_EXPENDITURE_TUNABLE_SUV", 3170, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_20_EXPENDITURE_TUNABLE_SUV", 3171, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_40_EXPENDITURE_TUNABLE_SUV", 3172, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_60_EXPENDITURE_TUNABLE_SUV", 3173, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_80_EXPENDITURE_TUNABLE_SUV", 3174, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_100_EXPENDITURE_TUNABLE_SUV", 3175, 1 },
	{ "CARMOD_UNLOCK_STOCK_BRAKES_EXPENDITURE_TUNABLE_SUV", 3176, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L2_EXPENDITURE_TUNABLE_SUV", 3177, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L3_EXPENDITURE_TUNABLE_SUV", 3178, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L4_EXPENDITURE_TUNABLE_SUV", 3179, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L5_EXPENDITURE_TUNABLE_SUV", 3180, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L6_EXPENDITURE_TUNABLE_SUV", 3181, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L7_EXPENDITURE_TUNABLE_SUV", 3182, 1 },
	{ "CARMOD_UNLOCK_CUSTOM_TYRES_EXPENDITURE_TUNABLE_SUV", 3183, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L2_EXPENDITURE_TUNABLE_SUV", 3184, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L3_EXPENDITURE_TUNABLE_SUV", 3185, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L4_EXPENDITURE_TUNABLE_SUV", 3186, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L5_EXPENDITURE_TUNABLE_SUV", 3187, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L6_EXPENDITURE_TUNABLE_SUV", 3188, 1 },
	{ "CARMOD_UNLOCK_GRILL_L2_EXPENDITURE_TUNABLE_SUV", 3189, 1 },
	{ "CARMOD_UNLOCK_GRILL_L3_EXPENDITURE_TUNABLE_SUV", 3190, 1 },
	{ "CARMOD_UNLOCK_GRILL_L4_EXPENDITURE_TUNABLE_SUV", 3191, 1 },
	{ "CARMOD_UNLOCK_GRILL_L5_EXPENDITURE_TUNABLE_SUV", 3192, 1 },
	{ "CARMOD_UNLOCK_GRILL_L6_EXPENDITURE_TUNABLE_SUV", 3193, 1 },
	{ "CARMOD_UNLOCK_ROOF_L1_EXPENDITURE_TUNABLE_SUV", 3194, 1 },
	{ "CARMOD_UNLOCK_ROOF_L2_EXPENDITURE_TUNABLE_SUV", 3195, 1 },
	{ "CARMOD_UNLOCK_ROOF_L3_EXPENDITURE_TUNABLE_SUV", 3196, 1 },
	{ "CARMOD_UNLOCK_ROOF_L4_EXPENDITURE_TUNABLE_SUV", 3197, 1 },
	{ "CARMOD_UNLOCK_ROOF_L5_EXPENDITURE_TUNABLE_SUV", 3198, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L1_EXPENDITURE_TUNABLE_SUV", 3199, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L2_EXPENDITURE_TUNABLE_SUV", 3200, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L3_EXPENDITURE_TUNABLE_SUV", 3201, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L4_EXPENDITURE_TUNABLE_SUV", 3202, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L5_EXPENDITURE_TUNABLE_SUV", 3203, 1 },
	{ "CARMOD_UNLOCK_WHEELS_L4_EXPENDITURE_TUNABLE_SUV", 3204, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L2_EXPENDITURE_TUNABLE_SUV", 3205, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L3_EXPENDITURE_TUNABLE_SUV", 3206, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L4_EXPENDITURE_TUNABLE_SUV", 3207, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L5_EXPENDITURE_TUNABLE_SUV", 3208, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L2_EXPENDITURE_TUNABLE_SUV", 3209, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L3_EXPENDITURE_TUNABLE_SUV", 3210, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L4_EXPENDITURE_TUNABLE_SUV", 3211, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L5_EXPENDITURE_TUNABLE_SUV", 3212, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L2_EXPENDITURE_TUNABLE_SUV", 3213, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L3_EXPENDITURE_TUNABLE_SUV", 3214, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L4_EXPENDITURE_TUNABLE_SUV", 3215, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L5_EXPENDITURE_TUNABLE_SUV", 3216, 1 },
	{ "CARMOD_UNLOCK_TIMED_BOMB_EXPENDITURE_TUNABLE_SUV", 3217, 1 },
	{ "CARMOD_UNLOCK_IGNITION_BOMB_EXPENDITURE_TUNABLE_SUV", 3218, 1 },
	{ "CARMOD_UNLOCK_L_WING_L2_EXPENDITURE_TUNABLE_SUV", 3219, 1 },
	{ "CARMOD_UNLOCK_L_WING_L3_EXPENDITURE_TUNABLE_SUV", 3220, 1 },
	{ "CARMOD_UNLOCK_L_WING_L4_EXPENDITURE_TUNABLE_SUV", 3221, 1 },
	{ "CARMOD_UNLOCK_L_WING_L5_EXPENDITURE_TUNABLE_SUV", 3222, 1 },
	{ "CARMOD_UNLOCK_R_WING_L2_EXPENDITURE_TUNABLE_SUV", 3223, 1 },
	{ "CARMOD_UNLOCK_BONNET_L2_EXPENDITURE_TUNABLE_SUV", 3224, 1 },
	{ "CARMOD_UNLOCK_BONNET_L3_EXPENDITURE_TUNABLE_SUV", 3225, 1 },
	{ "CARMOD_UNLOCK_BONNET_L4_EXPENDITURE_TUNABLE_SUV", 3226, 1 },
	{ "CARMOD_UNLOCK_BONNET_L5_EXPENDITURE_TUNABLE_SUV", 3227, 1 },
	{ "CARMOD_UNLOCK_BONNET_L6_EXPENDITURE_TUNABLE_SUV", 3228, 1 },
	{ "CARMOD_UNLOCK_BONNET_L7_EXPENDITURE_TUNABLE_SUV", 3229, 1 },
	{ "CARMOD_UNLOCK_HORN_L2_EXPENDITURE_TUNABLE_SUV", 3230, 1 },
	{ "CARMOD_UNLOCK_HORN_L3_EXPENDITURE_TUNABLE_SUV", 3231, 1 },
	{ "CARMOD_UNLOCK_HORN_L4_EXPENDITURE_TUNABLE_SUV", 3232, 1 },
	{ "CARMOD_UNLOCK_HORN_L5_EXPENDITURE_TUNABLE_SUV", 3233, 1 },
	{ "CARMOD_UNLOCK_HORN_L6_EXPENDITURE_TUNABLE_SUV", 3234, 1 },
	{ "CARMOD_UNLOCK_HORN_L7_EXPENDITURE_TUNABLE_SUV", 3235, 1 },
	{ "CARMOD_UNLOCK_HORN_L8_EXPENDITURE_TUNABLE_SUV", 3236, 1 },
	{ "CARMOD_UNLOCK_HORN_L9_EXPENDITURE_TUNABLE_SUV", 3237, 1 },
	{ "CARMOD_UNLOCK_XENON_LIGHTS_EXPENDITURE_TUNABLE_SUV", 3238, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L2_EXPENDITURE_TUNABLE_SUV", 3239, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L3_EXPENDITURE_TUNABLE_SUV", 3240, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L4_EXPENDITURE_TUNABLE_SUV", 3241, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L5_EXPENDITURE_TUNABLE_SUV", 3242, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L1_EXPENDITURE_TUNABLE_SUV", 3243, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L2_EXPENDITURE_TUNABLE_SUV", 3244, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L3_EXPENDITURE_TUNABLE_SUV", 3245, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L4_EXPENDITURE_TUNABLE_SUV", 3246, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L5_EXPENDITURE_TUNABLE_SUV", 3247, 1 },
	{ "CARMOD_UNLOCK_GEAR_BOX_L2_EXPENDITURE_TUNABLE_SUV", 3248, 1 },
	{ "CARMOD_UNLOCK_GEAR_BOX_L3_EXPENDITURE_TUNABLE_SUV", 3249, 1 },
	{ "CARMOD_UNLOCK_GEAR_BOX_L4_EXPENDITURE_TUNABLE_SUV", 3250, 1 },
	{ "CARMOD_UNLOCK_TURBO_EXPENDITURE_TUNABLE_SUV", 3251, 1 },
	{ "CARMOD_UNLOCK_BULLET_PROOF_TYRES_EXPENDITURE_TUNABLE_SUV", 3252, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_WHITE_EXPENDITURE_TUNABLE_SUV", 3253, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_ORANGE_EXPENDITURE_TUNABLE_SUV", 3254, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_RED_EXPENDITURE_TUNABLE_SUV", 3255, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_YELLOW_EXPENDITURE_TUNABLE_SUV", 3256, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_BLUE_EXPENDITURE_TUNABLE_SUV", 3257, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_BLACK_EXPENDITURE_TUNABLE_SUV", 3258, 1 },
	{ "CARMOD_UNLOCK_LIGHT_SMOKE_WINDOWS_EXPENDITURE_TUNABLE_SUV", 3259, 1 },
	{ "CARMOD_UNLOCK_DARK_SMOKE_WINDOWS_EXPENDITURE_TUNABLE_SUV", 3260, 1 },
	{ "CARMOD_UNLOCK_LIMO_WINDOWS_EXPENDITURE_TUNABLE_SUV", 3261, 1 },
	{ "CARMOD_UNLOCK_WHEELCOLOURS_EXPENDITURE_TUNABLE_SPORT", 3262, 1 },
	{ "CARMOD_UNLOCK_STOCKTIRES_EXPENDITURE_TUNABLE_SPORT", 3263, 1 },
	{ "CARMOD_UNLOCK_NOARMOUR_EXPENDITURE_TUNABLE_SPORT", 3264, 1 },
	{ "CARMOD_UNLOCK_STOCKFRONTBUMPER_EXPENDITURE_TUNABLE_SPORT", 3265, 1 },
	{ "CARMOD_UNLOCK_STOCKREARBUMPER_EXPENDITURE_TUNABLE_SPORT", 3266, 1 },
	{ "CARMOD_UNLOCK_STOCKCHASSIS_EXPENDITURE_TUNABLE_SPORT", 3267, 1 },
	{ "CARMOD_UNLOCK_STOCKEXHAUST_EXPENDITURE_TUNABLE_SPORT", 3268, 1 },
	{ "CARMOD_UNLOCK_STOCKLEFTFENDER_EXPENDITURE_TUNABLE_SPORT", 3269, 1 },
	{ "CARMOD_UNLOCK_STOCKRIGHTFENDER_EXPENDITURE_TUNABLE_SPORT", 3270, 1 },
	{ "CARMOD_UNLOCK_STOCKGRILLE_EXPENDITURE_TUNABLE_SPORT", 3271, 1 },
	{ "CARMOD_UNLOCK_STOCKHOOD_EXPENDITURE_TUNABLE_SPORT", 3272, 1 },
	{ "CARMOD_UNLOCK_STOCKHORN_EXPENDITURE_TUNABLE_SPORT", 3273, 1 },
	{ "CARMOD_UNLOCK_STOCKLIGHTS_EXPENDITURE_TUNABLE_SPORT", 3274, 1 },
	{ "CARMOD_UNLOCK_PLATESBLUEONWHITE1_EXPENDITURE_TUNABLE_SPORT", 3275, 1 },
	{ "CARMOD_UNLOCK_PLATESBLUEONWHITE2_EXPENDITURE_TUNABLE_SPORT", 3276, 1 },
	{ "CARMOD_UNLOCK_PLATESBLUEONWHITE3_EXPENDITURE_TUNABLE_SPORT", 3277, 1 },
	{ "CARMOD_UNLOCK_PLATESYELLOWONBLUE_EXPENDITURE_TUNABLE_SPORT", 3278, 1 },
	{ "CARMOD_UNLOCK_PLATESYELLOWONBLACK_EXPENDITURE_TUNABLE_SPORT", 3279, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORCHROME_EXPENDITURE_TUNABLE_SPORT", 3280, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORCLASSIC_EXPENDITURE_TUNABLE_SPORT", 3281, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORMATTE_EXPENDITURE_TUNABLE_SPORT", 3282, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORMETALLIC_EXPENDITURE_TUNABLE_SPORT", 3283, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORMETALS_EXPENDITURE_TUNABLE_SPORT", 3284, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORPEARLESCENT_EXPENDITURE_TUNABLE_SPORT", 3285, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORCREW_EXPENDITURE_TUNABLE_SPORT", 3286, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORCHROME_EXPENDITURE_TUNABLE_SPORT", 3287, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORCLASSIC_EXPENDITURE_TUNABLE_SPORT", 3288, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORMATTE_EXPENDITURE_TUNABLE_SPORT", 3289, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORMETALLIC_EXPENDITURE_TUNABLE_SPORT", 3290, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORMETALS_EXPENDITURE_TUNABLE_SPORT", 3291, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORPEARLESCENT_EXPENDITURE_TUNABLE_SPORT", 3292, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORCREW_EXPENDITURE_TUNABLE_SPORT", 3293, 1 },
	{ "CARMOD_UNLOCK_CREWEMBLEM_EXPENDITURE_TUNABLE_SPORT", 3294, 1 },
	{ "CARMOD_UNLOCK_STOCKROOF_EXPENDITURE_TUNABLE_SPORT", 3295, 1 },
	{ "CARMOD_UNLOCK_STOCKSKIRT_EXPENDITURE_TUNABLE_SPORT", 3296, 1 },
	{ "CARMOD_UNLOCK_STOCKSPOILER_EXPENDITURE_TUNABLE_SPORT", 3297, 1 },
	{ "CARMOD_UNLOCK_STOCKSUSPENSION_EXPENDITURE_TUNABLE_SPORT", 3298, 1 },
	{ "CARMOD_UNLOCK_TRACKER_EXPENDITURE_TUNABLE_SPORT", 3299, 1 },
	{ "CARMOD_UNLOCK_STOCKTRANSMISSION_EXPENDITURE_TUNABLE_SPORT", 3300, 1 },
	{ "CARMOD_UNLOCK_NOTURBO_EXPENDITURE_TUNABLE_SPORT", 3301, 1 },
	{ "CARMOD_UNLOCK_STOCKWHEELS_EXPENDITURE_TUNABLE_SPORT", 3302, 1 },
	{ "CARMOD_UNLOCK_CREWSMOKE_EXPENDITURE_TUNABLE_SPORT", 3303, 1 },
	{ "CARMOD_UNLOCK_WINDOWSNONE_EXPENDITURE_TUNABLE_SPORT", 3304, 1 },
	{ "CARMOD_UNLOCK_BRAKES_L2_EXPENDITURE_TUNABLE_SPORT", 3305, 1 },
	{ "CARMOD_UNLOCK_BRAKES_L3_EXPENDITURE_TUNABLE_SPORT", 3306, 1 },
	{ "CARMOD_UNLOCK_BRAKES_L4_EXPENDITURE_TUNABLE_SPORT", 3307, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_20_EXPENDITURE_TUNABLE_SPORT", 3308, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_40_EXPENDITURE_TUNABLE_SPORT", 3309, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_60_EXPENDITURE_TUNABLE_SPORT", 3310, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_80_EXPENDITURE_TUNABLE_SPORT", 3311, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_100_EXPENDITURE_TUNABLE_SPORT", 3312, 1 },
	{ "CARMOD_UNLOCK_STOCK_BRAKES_EXPENDITURE_TUNABLE_SPORT", 3313, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L2_EXPENDITURE_TUNABLE_SPORT", 3314, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L3_EXPENDITURE_TUNABLE_SPORT", 3315, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L4_EXPENDITURE_TUNABLE_SPORT", 3316, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L5_EXPENDITURE_TUNABLE_SPORT", 3317, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L6_EXPENDITURE_TUNABLE_SPORT", 3318, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L7_EXPENDITURE_TUNABLE_SPORT", 3319, 1 },
	{ "CARMOD_UNLOCK_CUSTOM_TYRES_EXPENDITURE_TUNABLE_SPORT", 3320, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L2_EXPENDITURE_TUNABLE_SPORT", 3321, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L3_EXPENDITURE_TUNABLE_SPORT", 3322, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L4_EXPENDITURE_TUNABLE_SPORT", 3323, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L5_EXPENDITURE_TUNABLE_SPORT", 3324, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L6_EXPENDITURE_TUNABLE_SPORT", 3325, 1 },
	{ "CARMOD_UNLOCK_GRILL_L2_EXPENDITURE_TUNABLE_SPORT", 3326, 1 },
	{ "CARMOD_UNLOCK_GRILL_L3_EXPENDITURE_TUNABLE_SPORT", 3327, 1 },
	{ "CARMOD_UNLOCK_GRILL_L4_EXPENDITURE_TUNABLE_SPORT", 3328, 1 },
	{ "CARMOD_UNLOCK_GRILL_L5_EXPENDITURE_TUNABLE_SPORT", 3329, 1 },
	{ "CARMOD_UNLOCK_GRILL_L6_EXPENDITURE_TUNABLE_SPORT", 3330, 1 },
	{ "CARMOD_UNLOCK_ROOF_L1_EXPENDITURE_TUNABLE_SPORT", 3331, 1 },
	{ "CARMOD_UNLOCK_ROOF_L2_EXPENDITURE_TUNABLE_SPORT", 3332, 1 },
	{ "CARMOD_UNLOCK_ROOF_L3_EXPENDITURE_TUNABLE_SPORT", 3333, 1 },
	{ "CARMOD_UNLOCK_ROOF_L4_EXPENDITURE_TUNABLE_SPORT", 3334, 1 },
	{ "CARMOD_UNLOCK_ROOF_L5_EXPENDITURE_TUNABLE_SPORT", 3335, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L1_EXPENDITURE_TUNABLE_SPORT", 3336, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L2_EXPENDITURE_TUNABLE_SPORT", 3337, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L3_EXPENDITURE_TUNABLE_SPORT", 3338, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L4_EXPENDITURE_TUNABLE_SPORT", 3339, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L5_EXPENDITURE_TUNABLE_SPORT", 3340, 1 },
	{ "CARMOD_UNLOCK_WHEELS_L4_EXPENDITURE_TUNABLE_SPORT", 3341, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L2_EXPENDITURE_TUNABLE_SPORT", 3342, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L3_EXPENDITURE_TUNABLE_SPORT", 3343, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L4_EXPENDITURE_TUNABLE_SPORT", 3344, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L5_EXPENDITURE_TUNABLE_SPORT", 3345, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L2_EXPENDITURE_TUNABLE_SPORT", 3346, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L3_EXPENDITURE_TUNABLE_SPORT", 3347, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L4_EXPENDITURE_TUNABLE_SPORT", 3348, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L5_EXPENDITURE_TUNABLE_SPORT", 3349, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L2_EXPENDITURE_TUNABLE_SPORT", 3350, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L3_EXPENDITURE_TUNABLE_SPORT", 3351, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L4_EXPENDITURE_TUNABLE_SPORT", 3352, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L5_EXPENDITURE_TUNABLE_SPORT", 3353, 1 },
	{ "CARMOD_UNLOCK_TIMED_BOMB_EXPENDITURE_TUNABLE_SPORT", 3354, 1 },
	{ "CARMOD_UNLOCK_IGNITION_BOMB_EXPENDITURE_TUNABLE_SPORT", 3355, 1 },
	{ "CARMOD_UNLOCK_L_WING_L2_EXPENDITURE_TUNABLE_SPORT", 3356, 1 },
	{ "CARMOD_UNLOCK_L_WING_L3_EXPENDITURE_TUNABLE_SPORT", 3357, 1 },
	{ "CARMOD_UNLOCK_L_WING_L4_EXPENDITURE_TUNABLE_SPORT", 3358, 1 },
	{ "CARMOD_UNLOCK_L_WING_L5_EXPENDITURE_TUNABLE_SPORT", 3359, 1 },
	{ "CARMOD_UNLOCK_R_WING_L2_EXPENDITURE_TUNABLE_SPORT", 3360, 1 },
	{ "CARMOD_UNLOCK_BONNET_L2_EXPENDITURE_TUNABLE_SPORT", 3361, 1 },
	{ "CARMOD_UNLOCK_BONNET_L3_EXPENDITURE_TUNABLE_SPORT", 3362, 1 },
	{ "CARMOD_UNLOCK_BONNET_L4_EXPENDITURE_TUNABLE_SPORT", 3363, 1 },
	{ "CARMOD_UNLOCK_BONNET_L5_EXPENDITURE_TUNABLE_SPORT", 3364, 1 },
	{ "CARMOD_UNLOCK_BONNET_L6_EXPENDITURE_TUNABLE_SPORT", 3365, 1 },
	{ "CARMOD_UNLOCK_BONNET_L7_EXPENDITURE_TUNABLE_SPORT", 3366, 1 },
	{ "CARMOD_UNLOCK_HORN_L2_EXPENDITURE_TUNABLE_SPORT", 3367, 1 },
	{ "CARMOD_UNLOCK_HORN_L3_EXPENDITURE_TUNABLE_SPORT", 3368, 1 },
	{ "CARMOD_UNLOCK_HORN_L4_EXPENDITURE_TUNABLE_SPORT", 3369, 1 },
	{ "CARMOD_UNLOCK_HORN_L5_EXPENDITURE_TUNABLE_SPORT", 3370, 1 },
	{ "CARMOD_UNLOCK_HORN_L6_EXPENDITURE_TUNABLE_SPORT", 3371, 1 },
	{ "CARMOD_UNLOCK_HORN_L7_EXPENDITURE_TUNABLE_SPORT", 3372, 1 },
	{ "CARMOD_UNLOCK_HORN_L8_EXPENDITURE_TUNABLE_SPORT", 3373, 1 },
	{ "CARMOD_UNLOCK_HORN_L9_EXPENDITURE_TUNABLE_SPORT", 3374, 1 },
	{ "CARMOD_UNLOCK_XENON_LIGHTS_EXPENDITURE_TUNABLE_SPORT", 3375, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L2_EXPENDITURE_TUNABLE_SPORT", 3376, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L3_EXPENDITURE_TUNABLE_SPORT", 3377, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L4_EXPENDITURE_TUNABLE_SPORT", 3378, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L5_EXPENDITURE_TUNABLE_SPORT", 3379, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L1_EXPENDITURE_TUNABLE_SPORT", 3380, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L2_EXPENDITURE_TUNABLE_SPORT", 3381, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L3_EXPENDITURE_TUNABLE_SPORT", 3382, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L4_EXPENDITURE_TUNABLE_SPORT", 3383, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L5_EXPENDITURE_TUNABLE_SPORT", 3384, 1 },
	{ "CARMOD_UNLOCK_GEAR_BOX_L2_EXPENDITURE_TUNABLE_SPORT", 3385, 1 },
	{ "CARMOD_UNLOCK_GEAR_BOX_L3_EXPENDITURE_TUNABLE_SPORT", 3386, 1 },
	{ "CARMOD_UNLOCK_GEAR_BOX_L4_EXPENDITURE_TUNABLE_SPORT", 3387, 1 },
	{ "CARMOD_UNLOCK_TURBO_EXPENDITURE_TUNABLE_SPORT", 3388, 1 },
	{ "CARMOD_UNLOCK_BULLET_PROOF_TYRES_EXPENDITURE_TUNABLE_SPORT", 3389, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_WHITE_EXPENDITURE_TUNABLE_SPORT", 3390, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_ORANGE_EXPENDITURE_TUNABLE_SPORT", 3391, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_RED_EXPENDITURE_TUNABLE_SPORT", 3392, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_YELLOW_EXPENDITURE_TUNABLE_SPORT", 3393, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_BLUE_EXPENDITURE_TUNABLE_SPORT", 3394, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_BLACK_EXPENDITURE_TUNABLE_SPORT", 3395, 1 },
	{ "CARMOD_UNLOCK_LIGHT_SMOKE_WINDOWS_EXPENDITURE_TUNABLE_SPORT", 3396, 1 },
	{ "CARMOD_UNLOCK_DARK_SMOKE_WINDOWS_EXPENDITURE_TUNABLE_SPORT", 3397, 1 },
	{ "CARMOD_UNLOCK_LIMO_WINDOWS_EXPENDITURE_TUNABLE_SPORT", 3398, 1 },
	{ "CARMOD_UNLOCK_WHEELCOLOURS_EXPENDITURE_TUNABLE_SPECIAL", 3399, 1 },
	{ "CARMOD_UNLOCK_STOCKTIRES_EXPENDITURE_TUNABLE_SPECIAL", 3400, 1 },
	{ "CARMOD_UNLOCK_NOARMOUR_EXPENDITURE_TUNABLE_SPECIAL", 3401, 1 },
	{ "CARMOD_UNLOCK_STOCKFRONTBUMPER_EXPENDITURE_TUNABLE_SPECIAL", 3402, 1 },
	{ "CARMOD_UNLOCK_STOCKREARBUMPER_EXPENDITURE_TUNABLE_SPECIAL", 3403, 1 },
	{ "CARMOD_UNLOCK_STOCKCHASSIS_EXPENDITURE_TUNABLE_SPECIAL", 3404, 1 },
	{ "CARMOD_UNLOCK_STOCKEXHAUST_EXPENDITURE_TUNABLE_SPECIAL", 3405, 1 },
	{ "CARMOD_UNLOCK_STOCKLEFTFENDER_EXPENDITURE_TUNABLE_SPECIAL", 3406, 1 },
	{ "CARMOD_UNLOCK_STOCKRIGHTFENDER_EXPENDITURE_TUNABLE_SPECIAL", 3407, 1 },
	{ "CARMOD_UNLOCK_STOCKGRILLE_EXPENDITURE_TUNABLE_SPECIAL", 3408, 1 },
	{ "CARMOD_UNLOCK_STOCKHOOD_EXPENDITURE_TUNABLE_SPECIAL", 3409, 1 },
	{ "CARMOD_UNLOCK_STOCKHORN_EXPENDITURE_TUNABLE_SPECIAL", 3410, 1 },
	{ "CARMOD_UNLOCK_STOCKLIGHTS_EXPENDITURE_TUNABLE_SPECIAL", 3411, 1 },
	{ "CARMOD_UNLOCK_PLATESBLUEONWHITE1_EXPENDITURE_TUNABLE_SPECIAL", 3412, 1 },
	{ "CARMOD_UNLOCK_PLATESBLUEONWHITE2_EXPENDITURE_TUNABLE_SPECIAL", 3413, 1 },
	{ "CARMOD_UNLOCK_PLATESBLUEONWHITE3_EXPENDITURE_TUNABLE_SPECIAL", 3414, 1 },
	{ "CARMOD_UNLOCK_PLATESYELLOWONBLUE_EXPENDITURE_TUNABLE_SPECIAL", 3415, 1 },
	{ "CARMOD_UNLOCK_PLATESYELLOWONBLACK_EXPENDITURE_TUNABLE_SPECIAL", 3416, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORCHROME_EXPENDITURE_TUNABLE_SPECIAL", 3417, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORCLASSIC_EXPENDITURE_TUNABLE_SPECIAL", 3418, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORMATTE_EXPENDITURE_TUNABLE_SPECIAL", 3419, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORMETALLIC_EXPENDITURE_TUNABLE_SPECIAL", 3420, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORMETALS_EXPENDITURE_TUNABLE_SPECIAL", 3421, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORPEARLESCENT_EXPENDITURE_TUNABLE_SPECIAL", 3422, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORCREW_EXPENDITURE_TUNABLE_SPECIAL", 3423, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORCHROME_EXPENDITURE_TUNABLE_SPECIAL", 3424, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORCLASSIC_EXPENDITURE_TUNABLE_SPECIAL", 3425, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORMATTE_EXPENDITURE_TUNABLE_SPECIAL", 3426, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORMETALLIC_EXPENDITURE_TUNABLE_SPECIAL", 3427, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORMETALS_EXPENDITURE_TUNABLE_SPECIAL", 3428, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORPEARLESCENT_EXPENDITURE_TUNABLE_SPECIAL", 3429, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORCREW_EXPENDITURE_TUNABLE_SPECIAL", 3430, 1 },
	{ "CARMOD_UNLOCK_CREWEMBLEM_EXPENDITURE_TUNABLE_SPECIAL", 3431, 1 },
	{ "CARMOD_UNLOCK_STOCKROOF_EXPENDITURE_TUNABLE_SPECIAL", 3432, 1 },
	{ "CARMOD_UNLOCK_STOCKSKIRT_EXPENDITURE_TUNABLE_SPECIAL", 3433, 1 },
	{ "CARMOD_UNLOCK_STOCKSPOILER_EXPENDITURE_TUNABLE_SPECIAL", 3434, 1 },
	{ "CARMOD_UNLOCK_STOCKSUSPENSION_EXPENDITURE_TUNABLE_SPECIAL", 3435, 1 },
	{ "CARMOD_UNLOCK_TRACKER_EXPENDITURE_TUNABLE_SPECIAL", 3436, 1 },
	{ "CARMOD_UNLOCK_STOCKTRANSMISSION_EXPENDITURE_TUNABLE_SPECIAL", 3437, 1 },
	{ "CARMOD_UNLOCK_NOTURBO_EXPENDITURE_TUNABLE_SPECIAL", 3438, 1 },
	{ "CARMOD_UNLOCK_STOCKWHEELS_EXPENDITURE_TUNABLE_SPECIAL", 3439, 1 },
	{ "CARMOD_UNLOCK_CREWSMOKE_EXPENDITURE_TUNABLE_SPECIAL", 3440, 1 },
	{ "CARMOD_UNLOCK_WINDOWSNONE_EXPENDITURE_TUNABLE_SPECIAL", 3441, 1 },
	{ "CARMOD_UNLOCK_BRAKES_L2_EXPENDITURE_TUNABLE_SPECIAL", 3442, 1 },
	{ "CARMOD_UNLOCK_BRAKES_L3_EXPENDITURE_TUNABLE_SPECIAL", 3443, 1 },
	{ "CARMOD_UNLOCK_BRAKES_L4_EXPENDITURE_TUNABLE_SPECIAL", 3444, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_20_EXPENDITURE_TUNABLE_SPECIAL", 3445, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_40_EXPENDITURE_TUNABLE_SPECIAL", 3446, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_60_EXPENDITURE_TUNABLE_SPECIAL", 3447, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_80_EXPENDITURE_TUNABLE_SPECIAL", 3448, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_100_EXPENDITURE_TUNABLE_SPECIAL", 3449, 1 },
	{ "CARMOD_UNLOCK_STOCK_BRAKES_EXPENDITURE_TUNABLE_SPECIAL", 3450, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L2_EXPENDITURE_TUNABLE_SPECIAL", 3451, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L3_EXPENDITURE_TUNABLE_SPECIAL", 3452, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L4_EXPENDITURE_TUNABLE_SPECIAL", 3453, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L5_EXPENDITURE_TUNABLE_SPECIAL", 3454, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L6_EXPENDITURE_TUNABLE_SPECIAL", 3455, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L7_EXPENDITURE_TUNABLE_SPECIAL", 3456, 1 },
	{ "CARMOD_UNLOCK_CUSTOM_TYRES_EXPENDITURE_TUNABLE_SPECIAL", 3457, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L2_EXPENDITURE_TUNABLE_SPECIAL", 3458, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L3_EXPENDITURE_TUNABLE_SPECIAL", 3459, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L4_EXPENDITURE_TUNABLE_SPECIAL", 3460, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L5_EXPENDITURE_TUNABLE_SPECIAL", 3461, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L6_EXPENDITURE_TUNABLE_SPECIAL", 3462, 1 },
	{ "CARMOD_UNLOCK_GRILL_L2_EXPENDITURE_TUNABLE_SPECIAL", 3463, 1 },
	{ "CARMOD_UNLOCK_GRILL_L3_EXPENDITURE_TUNABLE_SPECIAL", 3464, 1 },
	{ "CARMOD_UNLOCK_GRILL_L4_EXPENDITURE_TUNABLE_SPECIAL", 3465, 1 },
	{ "CARMOD_UNLOCK_GRILL_L5_EXPENDITURE_TUNABLE_SPECIAL", 3466, 1 },
	{ "CARMOD_UNLOCK_GRILL_L6_EXPENDITURE_TUNABLE_SPECIAL", 3467, 1 },
	{ "CARMOD_UNLOCK_ROOF_L1_EXPENDITURE_TUNABLE_SPECIAL", 3468, 1 },
	{ "CARMOD_UNLOCK_ROOF_L2_EXPENDITURE_TUNABLE_SPECIAL", 3469, 1 },
	{ "CARMOD_UNLOCK_ROOF_L3_EXPENDITURE_TUNABLE_SPECIAL", 3470, 1 },
	{ "CARMOD_UNLOCK_ROOF_L4_EXPENDITURE_TUNABLE_SPECIAL", 3471, 1 },
	{ "CARMOD_UNLOCK_ROOF_L5_EXPENDITURE_TUNABLE_SPECIAL", 3472, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L1_EXPENDITURE_TUNABLE_SPECIAL", 3473, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L2_EXPENDITURE_TUNABLE_SPECIAL", 3474, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L3_EXPENDITURE_TUNABLE_SPECIAL", 3475, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L4_EXPENDITURE_TUNABLE_SPECIAL", 3476, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L5_EXPENDITURE_TUNABLE_SPECIAL", 3477, 1 },
	{ "CARMOD_UNLOCK_WHEELS_L4_EXPENDITURE_TUNABLE_SPECIAL", 3478, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L2_EXPENDITURE_TUNABLE_SPECIAL", 3479, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L3_EXPENDITURE_TUNABLE_SPECIAL", 3480, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L4_EXPENDITURE_TUNABLE_SPECIAL", 3481, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L5_EXPENDITURE_TUNABLE_SPECIAL", 3482, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L2_EXPENDITURE_TUNABLE_SPECIAL", 3483, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L3_EXPENDITURE_TUNABLE_SPECIAL", 3484, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L4_EXPENDITURE_TUNABLE_SPECIAL", 3485, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L5_EXPENDITURE_TUNABLE_SPECIAL", 3486, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L2_EXPENDITURE_TUNABLE_SPECIAL", 3487, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L3_EXPENDITURE_TUNABLE_SPECIAL", 3488, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L4_EXPENDITURE_TUNABLE_SPECIAL", 3489, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L5_EXPENDITURE_TUNABLE_SPECIAL", 3490, 1 },
	{ "CARMOD_UNLOCK_TIMED_BOMB_EXPENDITURE_TUNABLE_SPECIAL", 3491, 1 },
	{ "CARMOD_UNLOCK_IGNITION_BOMB_EXPENDITURE_TUNABLE_SPECIAL", 3492, 1 },
	{ "CARMOD_UNLOCK_L_WING_L2_EXPENDITURE_TUNABLE_SPECIAL", 3493, 1 },
	{ "CARMOD_UNLOCK_L_WING_L3_EXPENDITURE_TUNABLE_SPECIAL", 3494, 1 },
	{ "CARMOD_UNLOCK_L_WING_L4_EXPENDITURE_TUNABLE_SPECIAL", 3495, 1 },
	{ "CARMOD_UNLOCK_L_WING_L5_EXPENDITURE_TUNABLE_SPECIAL", 3496, 1 },
	{ "CARMOD_UNLOCK_R_WING_L2_EXPENDITURE_TUNABLE_SPECIAL", 3497, 1 },
	{ "CARMOD_UNLOCK_BONNET_L2_EXPENDITURE_TUNABLE_SPECIAL", 3498, 1 },
	{ "CARMOD_UNLOCK_BONNET_L3_EXPENDITURE_TUNABLE_SPECIAL", 3499, 1 },
	{ "CARMOD_UNLOCK_BONNET_L4_EXPENDITURE_TUNABLE_SPECIAL", 3500, 1 },
	{ "CARMOD_UNLOCK_BONNET_L5_EXPENDITURE_TUNABLE_SPECIAL", 3501, 1 },
	{ "CARMOD_UNLOCK_BONNET_L6_EXPENDITURE_TUNABLE_SPECIAL", 3502, 1 },
	{ "CARMOD_UNLOCK_BONNET_L7_EXPENDITURE_TUNABLE_SPECIAL", 3503, 1 },
	{ "CARMOD_UNLOCK_HORN_L2_EXPENDITURE_TUNABLE_SPECIAL", 3504, 1 },
	{ "CARMOD_UNLOCK_HORN_L3_EXPENDITURE_TUNABLE_SPECIAL", 3505, 1 },
	{ "CARMOD_UNLOCK_HORN_L4_EXPENDITURE_TUNABLE_SPECIAL", 3506, 1 },
	{ "CARMOD_UNLOCK_HORN_L5_EXPENDITURE_TUNABLE_SPECIAL", 3507, 1 },
	{ "CARMOD_UNLOCK_HORN_L6_EXPENDITURE_TUNABLE_SPECIAL", 3508, 1 },
	{ "CARMOD_UNLOCK_HORN_L7_EXPENDITURE_TUNABLE_SPECIAL", 3509, 1 },
	{ "CARMOD_UNLOCK_HORN_L8_EXPENDITURE_TUNABLE_SPECIAL", 3510, 1 },
	{ "CARMOD_UNLOCK_HORN_L9_EXPENDITURE_TUNABLE_SPECIAL", 3511, 1 },
	{ "CARMOD_UNLOCK_XENON_LIGHTS_EXPENDITURE_TUNABLE_SPECIAL", 3512, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L2_EXPENDITURE_TUNABLE_SPECIAL", 3513, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L3_EXPENDITURE_TUNABLE_SPECIAL", 3514, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L4_EXPENDITURE_TUNABLE_SPECIAL", 3515, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L5_EXPENDITURE_TUNABLE_SPECIAL", 3516, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L1_EXPENDITURE_TUNABLE_SPECIAL", 3517, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L2_EXPENDITURE_TUNABLE_SPECIAL", 3518, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L3_EXPENDITURE_TUNABLE_SPECIAL", 3519, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L4_EXPENDITURE_TUNABLE_SPECIAL", 3520, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L5_EXPENDITURE_TUNABLE_SPECIAL", 3521, 1 },
	{ "CARMOD_UNLOCK_GEAR_BOX_L2_EXPENDITURE_TUNABLE_SPECIAL", 3522, 1 },
	{ "CARMOD_UNLOCK_GEAR_BOX_L3_EXPENDITURE_TUNABLE_SPECIAL", 3523, 1 },
	{ "CARMOD_UNLOCK_GEAR_BOX_L4_EXPENDITURE_TUNABLE_SPECIAL", 3524, 1 },
	{ "CARMOD_UNLOCK_TURBO_EXPENDITURE_TUNABLE_SPECIAL", 3525, 1 },
	{ "CARMOD_UNLOCK_BULLET_PROOF_TYRES_EXPENDITURE_TUNABLE_SPECIAL", 3526, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_WHITE_EXPENDITURE_TUNABLE_SPECIAL", 3527, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_ORANGE_EXPENDITURE_TUNABLE_SPECIAL", 3528, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_RED_EXPENDITURE_TUNABLE_SPECIAL", 3529, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_YELLOW_EXPENDITURE_TUNABLE_SPECIAL", 3530, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_BLUE_EXPENDITURE_TUNABLE_SPECIAL", 3531, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_BLACK_EXPENDITURE_TUNABLE_SPECIAL", 3532, 1 },
	{ "CARMOD_UNLOCK_LIGHT_SMOKE_WINDOWS_EXPENDITURE_TUNABLE_SPECIAL", 3533, 1 },
	{ "CARMOD_UNLOCK_DARK_SMOKE_WINDOWS_EXPENDITURE_TUNABLE_SPECIAL", 3534, 1 },
	{ "CARMOD_UNLOCK_LIMO_WINDOWS_EXPENDITURE_TUNABLE_SPECIAL", 3535, 1 },
	{ "CARMOD_UNLOCK_WHEELCOLOURS_EXPENDITURE_TUNABLE_BIKE", 3536, 1 },
	{ "CARMOD_UNLOCK_STOCKTIRES_EXPENDITURE_TUNABLE_BIKE", 3537, 1 },
	{ "CARMOD_UNLOCK_NOARMOUR_EXPENDITURE_TUNABLE_BIKE", 3538, 1 },
	{ "CARMOD_UNLOCK_STOCKFRONTBUMPER_EXPENDITURE_TUNABLE_BIKE", 3539, 1 },
	{ "CARMOD_UNLOCK_STOCKREARBUMPER_EXPENDITURE_TUNABLE_BIKE", 3540, 1 },
	{ "CARMOD_UNLOCK_STOCKCHASSIS_EXPENDITURE_TUNABLE_BIKE", 3541, 1 },
	{ "CARMOD_UNLOCK_STOCKEXHAUST_EXPENDITURE_TUNABLE_BIKE", 3542, 1 },
	{ "CARMOD_UNLOCK_STOCKLEFTFENDER_EXPENDITURE_TUNABLE_BIKE", 3543, 1 },
	{ "CARMOD_UNLOCK_STOCKRIGHTFENDER_EXPENDITURE_TUNABLE_BIKE", 3544, 1 },
	{ "CARMOD_UNLOCK_STOCKGRILLE_EXPENDITURE_TUNABLE_BIKE", 3545, 1 },
	{ "CARMOD_UNLOCK_STOCKHOOD_EXPENDITURE_TUNABLE_BIKE", 3546, 1 },
	{ "CARMOD_UNLOCK_STOCKHORN_EXPENDITURE_TUNABLE_BIKE", 3547, 1 },
	{ "CARMOD_UNLOCK_STOCKLIGHTS_EXPENDITURE_TUNABLE_BIKE", 3548, 1 },
	{ "CARMOD_UNLOCK_PLATESBLUEONWHITE1_EXPENDITURE_TUNABLE_BIKE", 3549, 1 },
	{ "CARMOD_UNLOCK_PLATESBLUEONWHITE2_EXPENDITURE_TUNABLE_BIKE", 3550, 1 },
	{ "CARMOD_UNLOCK_PLATESBLUEONWHITE3_EXPENDITURE_TUNABLE_BIKE", 3551, 1 },
	{ "CARMOD_UNLOCK_PLATESYELLOWONBLUE_EXPENDITURE_TUNABLE_BIKE", 3552, 1 },
	{ "CARMOD_UNLOCK_PLATESYELLOWONBLACK_EXPENDITURE_TUNABLE_BIKE", 3553, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORCHROME_EXPENDITURE_TUNABLE_BIKE", 3554, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORCLASSIC_EXPENDITURE_TUNABLE_BIKE", 3555, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORMATTE_EXPENDITURE_TUNABLE_BIKE", 3556, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORMETALLIC_EXPENDITURE_TUNABLE_BIKE", 3557, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORMETALS_EXPENDITURE_TUNABLE_BIKE", 3558, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORPEARLESCENT_EXPENDITURE_TUNABLE_BIKE", 3559, 1 },
	{ "CARMOD_UNLOCK_PRIMARYCOLORCREW_EXPENDITURE_TUNABLE_BIKE", 3560, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORCHROME_EXPENDITURE_TUNABLE_BIKE", 3561, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORCLASSIC_EXPENDITURE_TUNABLE_BIKE", 3562, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORMATTE_EXPENDITURE_TUNABLE_BIKE", 3563, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORMETALLIC_EXPENDITURE_TUNABLE_BIKE", 3564, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORMETALS_EXPENDITURE_TUNABLE_BIKE", 3565, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORPEARLESCENT_EXPENDITURE_TUNABLE_BIKE", 3566, 1 },
	{ "CARMOD_UNLOCK_SECONDARYCOLORCREW_EXPENDITURE_TUNABLE_BIKE", 3567, 1 },
	{ "CARMOD_UNLOCK_CREWEMBLEM_EXPENDITURE_TUNABLE_BIKE", 3568, 1 },
	{ "CARMOD_UNLOCK_STOCKROOF_EXPENDITURE_TUNABLE_BIKE", 3569, 1 },
	{ "CARMOD_UNLOCK_STOCKSKIRT_EXPENDITURE_TUNABLE_BIKE", 3570, 1 },
	{ "CARMOD_UNLOCK_STOCKSPOILER_EXPENDITURE_TUNABLE_BIKE", 3571, 1 },
	{ "CARMOD_UNLOCK_STOCKSUSPENSION_EXPENDITURE_TUNABLE_BIKE", 3572, 1 },
	{ "CARMOD_UNLOCK_TRACKER_EXPENDITURE_TUNABLE_BIKE", 3573, 1 },
	{ "CARMOD_UNLOCK_STOCKTRANSMISSION_EXPENDITURE_TUNABLE_BIKE", 3574, 1 },
	{ "CARMOD_UNLOCK_NOTURBO_EXPENDITURE_TUNABLE_BIKE", 3575, 1 },
	{ "CARMOD_UNLOCK_STOCKWHEELS_EXPENDITURE_TUNABLE_BIKE", 3576, 1 },
	{ "CARMOD_UNLOCK_CREWSMOKE_EXPENDITURE_TUNABLE_BIKE", 3577, 1 },
	{ "CARMOD_UNLOCK_WINDOWSNONE_EXPENDITURE_TUNABLE_BIKE", 3578, 1 },
	{ "CARMOD_UNLOCK_BRAKES_L2_EXPENDITURE_TUNABLE_BIKE", 3579, 1 },
	{ "CARMOD_UNLOCK_BRAKES_L3_EXPENDITURE_TUNABLE_BIKE", 3580, 1 },
	{ "CARMOD_UNLOCK_BRAKES_L4_EXPENDITURE_TUNABLE_BIKE", 3581, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_20_EXPENDITURE_TUNABLE_BIKE", 3582, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_40_EXPENDITURE_TUNABLE_BIKE", 3583, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_60_EXPENDITURE_TUNABLE_BIKE", 3584, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_80_EXPENDITURE_TUNABLE_BIKE", 3585, 1 },
	{ "CARMOD_UNLOCK_BODY_ARMOUR_100_EXPENDITURE_TUNABLE_BIKE", 3586, 1 },
	{ "CARMOD_UNLOCK_STOCK_BRAKES_EXPENDITURE_TUNABLE_BIKE", 3587, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L2_EXPENDITURE_TUNABLE_BIKE", 3588, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L3_EXPENDITURE_TUNABLE_BIKE", 3589, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L4_EXPENDITURE_TUNABLE_BIKE", 3590, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L5_EXPENDITURE_TUNABLE_BIKE", 3591, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L6_EXPENDITURE_TUNABLE_BIKE", 3592, 1 },
	{ "CARMOD_UNLOCK_F_BUMPER_L7_EXPENDITURE_TUNABLE_BIKE", 3593, 1 },
	{ "CARMOD_UNLOCK_CUSTOM_TYRES_EXPENDITURE_TUNABLE_BIKE", 3594, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L2_EXPENDITURE_TUNABLE_BIKE", 3595, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L3_EXPENDITURE_TUNABLE_BIKE", 3596, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L4_EXPENDITURE_TUNABLE_BIKE", 3597, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L5_EXPENDITURE_TUNABLE_BIKE", 3598, 1 },
	{ "CARMOD_UNLOCK_EXHAUST_L6_EXPENDITURE_TUNABLE_BIKE", 3599, 1 },
	{ "CARMOD_UNLOCK_GRILL_L2_EXPENDITURE_TUNABLE_BIKE", 3600, 1 },
	{ "CARMOD_UNLOCK_GRILL_L3_EXPENDITURE_TUNABLE_BIKE", 3601, 1 },
	{ "CARMOD_UNLOCK_GRILL_L4_EXPENDITURE_TUNABLE_BIKE", 3602, 1 },
	{ "CARMOD_UNLOCK_GRILL_L5_EXPENDITURE_TUNABLE_BIKE", 3603, 1 },
	{ "CARMOD_UNLOCK_GRILL_L6_EXPENDITURE_TUNABLE_BIKE", 3604, 1 },
	{ "CARMOD_UNLOCK_ROOF_L1_EXPENDITURE_TUNABLE_BIKE", 3605, 1 },
	{ "CARMOD_UNLOCK_ROOF_L2_EXPENDITURE_TUNABLE_BIKE", 3606, 1 },
	{ "CARMOD_UNLOCK_ROOF_L3_EXPENDITURE_TUNABLE_BIKE", 3607, 1 },
	{ "CARMOD_UNLOCK_ROOF_L4_EXPENDITURE_TUNABLE_BIKE", 3608, 1 },
	{ "CARMOD_UNLOCK_ROOF_L5_EXPENDITURE_TUNABLE_BIKE", 3609, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L1_EXPENDITURE_TUNABLE_BIKE", 3610, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L2_EXPENDITURE_TUNABLE_BIKE", 3611, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L3_EXPENDITURE_TUNABLE_BIKE", 3612, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L4_EXPENDITURE_TUNABLE_BIKE", 3613, 1 },
	{ "CARMOD_UNLOCK_SUSPENSION_L5_EXPENDITURE_TUNABLE_BIKE", 3614, 1 },
	{ "CARMOD_UNLOCK_WHEELS_L4_EXPENDITURE_TUNABLE_BIKE", 3615, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L2_EXPENDITURE_TUNABLE_BIKE", 3616, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L3_EXPENDITURE_TUNABLE_BIKE", 3617, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L4_EXPENDITURE_TUNABLE_BIKE", 3618, 1 },
	{ "CARMOD_UNLOCK_R_BUMPER_L5_EXPENDITURE_TUNABLE_BIKE", 3619, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L2_EXPENDITURE_TUNABLE_BIKE", 3620, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L3_EXPENDITURE_TUNABLE_BIKE", 3621, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L4_EXPENDITURE_TUNABLE_BIKE", 3622, 1 },
	{ "CARMOD_UNLOCK_CHASSIS_L5_EXPENDITURE_TUNABLE_BIKE", 3623, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L2_EXPENDITURE_TUNABLE_BIKE", 3624, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L3_EXPENDITURE_TUNABLE_BIKE", 3625, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L4_EXPENDITURE_TUNABLE_BIKE", 3626, 1 },
	{ "CARMOD_UNLOCK_ENGINE_L5_EXPENDITURE_TUNABLE_BIKE", 3627, 1 },
	{ "CARMOD_UNLOCK_TIMED_BOMB_EXPENDITURE_TUNABLE_BIKE", 3628, 1 },
	{ "CARMOD_UNLOCK_IGNITION_BOMB_EXPENDITURE_TUNABLE_BIKE", 3629, 1 },
	{ "CARMOD_UNLOCK_L_WING_L2_EXPENDITURE_TUNABLE_BIKE", 3630, 1 },
	{ "CARMOD_UNLOCK_L_WING_L3_EXPENDITURE_TUNABLE_BIKE", 3631, 1 },
	{ "CARMOD_UNLOCK_L_WING_L4_EXPENDITURE_TUNABLE_BIKE", 3632, 1 },
	{ "CARMOD_UNLOCK_L_WING_L5_EXPENDITURE_TUNABLE_BIKE", 3633, 1 },
	{ "CARMOD_UNLOCK_R_WING_L2_EXPENDITURE_TUNABLE_BIKE", 3634, 1 },
	{ "CARMOD_UNLOCK_BONNET_L2_EXPENDITURE_TUNABLE_BIKE", 3635, 1 },
	{ "CARMOD_UNLOCK_BONNET_L3_EXPENDITURE_TUNABLE_BIKE", 3636, 1 },
	{ "CARMOD_UNLOCK_BONNET_L4_EXPENDITURE_TUNABLE_BIKE", 3637, 1 },
	{ "CARMOD_UNLOCK_BONNET_L5_EXPENDITURE_TUNABLE_BIKE", 3638, 1 },
	{ "CARMOD_UNLOCK_BONNET_L6_EXPENDITURE_TUNABLE_BIKE", 3639, 1 },
	{ "CARMOD_UNLOCK_BONNET_L7_EXPENDITURE_TUNABLE_BIKE", 3640, 1 },
	{ "CARMOD_UNLOCK_HORN_L2_EXPENDITURE_TUNABLE_BIKE", 3641, 1 },
	{ "CARMOD_UNLOCK_HORN_L3_EXPENDITURE_TUNABLE_BIKE", 3642, 1 },
	{ "CARMOD_UNLOCK_HORN_L4_EXPENDITURE_TUNABLE_BIKE", 3643, 1 },
	{ "CARMOD_UNLOCK_HORN_L5_EXPENDITURE_TUNABLE_BIKE", 3644, 1 },
	{ "CARMOD_UNLOCK_HORN_L6_EXPENDITURE_TUNABLE_BIKE", 3645, 1 },
	{ "CARMOD_UNLOCK_HORN_L7_EXPENDITURE_TUNABLE_BIKE", 3646, 1 },
	{ "CARMOD_UNLOCK_HORN_L8_EXPENDITURE_TUNABLE_BIKE", 3647, 1 },
	{ "CARMOD_UNLOCK_HORN_L9_EXPENDITURE_TUNABLE_BIKE", 3648, 1 },
	{ "CARMOD_UNLOCK_XENON_LIGHTS_EXPENDITURE_TUNABLE_BIKE", 3649, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L2_EXPENDITURE_TUNABLE_BIKE", 3650, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L3_EXPENDITURE_TUNABLE_BIKE", 3651, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L4_EXPENDITURE_TUNABLE_BIKE", 3652, 1 },
	{ "CARMOD_UNLOCK_SKIRTS_L5_EXPENDITURE_TUNABLE_BIKE", 3653, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L1_EXPENDITURE_TUNABLE_BIKE", 3654, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L2_EXPENDITURE_TUNABLE_BIKE", 3655, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L3_EXPENDITURE_TUNABLE_BIKE", 3656, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L4_EXPENDITURE_TUNABLE_BIKE", 3657, 1 },
	{ "CARMOD_UNLOCK_SPOILER_L5_EXPENDITURE_TUNABLE_BIKE", 3658, 1 },
	{ "CARMOD_UNLOCK_GEAR_BOX_L2_EXPENDITURE_TUNABLE_BIKE", 3659, 1 },
	{ "CARMOD_UNLOCK_GEAR_BOX_L3_EXPENDITURE_TUNABLE_BIKE", 3660, 1 },
	{ "CARMOD_UNLOCK_GEAR_BOX_L4_EXPENDITURE_TUNABLE_BIKE", 3661, 1 },
	{ "CARMOD_UNLOCK_TURBO_EXPENDITURE_TUNABLE_BIKE", 3662, 1 },
	{ "CARMOD_UNLOCK_BULLET_PROOF_TYRES_EXPENDITURE_TUNABLE_BIKE", 3663, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_WHITE_EXPENDITURE_TUNABLE_BIKE", 3664, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_ORANGE_EXPENDITURE_TUNABLE_BIKE", 3665, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_RED_EXPENDITURE_TUNABLE_BIKE", 3666, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_YELLOW_EXPENDITURE_TUNABLE_BIKE", 3667, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_BLUE_EXPENDITURE_TUNABLE_BIKE", 3668, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_BLACK_EXPENDITURE_TUNABLE_BIKE", 3669, 1 },
	{ "CARMOD_UNLOCK_LIGHT_SMOKE_WINDOWS_EXPENDITURE_TUNABLE_BIKE", 3670, 1 },
	{ "CARMOD_UNLOCK_DARK_SMOKE_WINDOWS_EXPENDITURE_TUNABLE_BIKE", 3671, 1 },
	{ "CARMOD_UNLOCK_LIMO_WINDOWS_EXPENDITURE_TUNABLE_BIKE", 3672, 1 },
	{ "SAT_PURCHASED_VEHICLE_MOD", 3692, 2 },
	{ "SAT_DONE_STUNT_JUMP", 3720, 2 },
	{ "SAT_MADE_MONEY_BETTING", 3724, 2 },
	{ "DISABLE_PV_DUPLICATE_FIX", 3766, 2 },
	{ "CINEMA_EXPENDITURE_MODIFIER", 3948, 0 },
	{ "PROPERTY_HIGH_APT_1_EXPENDITURE_MODIFIER", 3949, 0 },
	{ "PROPERTY_HIGH_APT_2_EXPENDITURE_MODIFIER", 3950, 0 },
	{ "PROPERTY_HIGH_APT_3_EXPENDITURE_MODIFIER", 3951, 0 },
	{ "PROPERTY_HIGH_APT_4_EXPENDITURE_MODIFIER", 3952, 0 },
	{ "PROPERTY_HIGH_APT_5_EXPENDITURE_MODIFIER", 3953, 0 },
	{ "PROPERTY_HIGH_APT_6_EXPENDITURE_MODIFIER", 3954, 0 },
	{ "PROPERTY_HIGH_APT_7_EXPENDITURE_MODIFIER", 3955, 0 },
	{ "PROPERTY_HIGH_APT_8_EXPENDITURE_MODIFIER", 3956, 0 },
	{ "PROPERTY_HIGH_APT_9_EXPENDITURE_MODIFIER", 3957, 0 },
	{ "PROPERTY_HIGH_APT_10_EXPENDITURE_MODIFIER", 3958, 0 },
	{ "PROPERTY_HIGH_APT_11_EXPENDITURE_MODIFIER", 3959, 0 },
	{ "PROPERTY_HIGH_APT_12_EXPENDITURE_MODIFIER", 3960, 0 },
	{ "PROPERTY_HIGH_APT_13_EXPENDITURE_MODIFIER", 3961, 0 },
	{ "PROPERTY_HIGH_APT_14_EXPENDITURE_MODIFIER", 3962, 0 },
	{ "PROPERTY_HIGH_APT_15_EXPENDITURE_MODIFIER", 3963, 0 },
	{ "PROPERTY_HIGH_APT_16_EXPENDITURE_MODIFIER", 3964, 0 },
	{ "PROPERTY_HIGH_APT_17_EXPENDITURE_MODIFIER", 3965, 0 },
	{ "PROPERTY_MEDIUM_APT_1_EXPENDITURE_MODIFIER", 3966, 0 },
	{ "PROPERTY_MEDIUM_APT_2_EXPENDITURE_MODIFIER", 3967, 0 },
	{ "PROPERTY_MEDIUM_APT_3_EXPENDITURE_MODIFIER", 3968, 0 },
	{ "PROPERTY_MEDIUM_APT_4_EXPENDITURE_MODIFIER", 3969, 0 },
	{ "PROPERTY_MEDIUM_APT_5_EXPENDITURE_MODIFIER", 3970, 0 },
	{ "PROPERTY_MEDIUM_APT_6_EXPENDITURE_MODIFIER", 3971, 0 },
	{ "PROPERTY_MEDIUM_APT_7_EXPENDITURE_MODIFIER", 3972, 0 },
	{ "PROPERTY_MEDIUM_APT_8_EXPENDITURE_MODIFIER", 3973, 0 },
	{ "PROPERTY_MEDIUM_APT_9_EXPENDITURE_MODIFIER", 3974, 0 },
	{ "PROPERTY_LOW_APT_1_EXPENDITURE_MODIFIER", 3975, 0 },
	{ "PROPERTY_LOW_APT_2_EXPENDITURE_MODIFIER", 3976, 0 },
	{ "PROPERTY_LOW_APT_3_EXPENDITURE_MODIFIER", 3977, 0 },
	{ "PROPERTY_LOW_APT_4_EXPENDITURE_MODIFIER", 3978, 0 },
	{ "PROPERTY_LOW_APT_5_EXPENDITURE_MODIFIER", 3979, 0 },
	{ "PROPERTY_LOW_APT_6_EXPENDITURE_MODIFIER", 3980, 0 },
	{ "PROPERTY_LOW_APT_7_EXPENDITURE_MODIFIER", 3981, 0 },
	{ "PROPERTY_GARAGE_EAST_LOS_SANTOS_1_EXPENDITURE_MODIFIER", 3982, 0 },
	{ "PROPERTY_GARAGE_EAST_LOS_SANTOS_2_EXPENDITURE_MODIFIER", 3983, 0 },
	{ "PROPERTY_GARAGE_EAST_LOS_SANTOS_3_EXPENDITURE_MODIFIER", 3984, 0 },
	{ "PROPERTY_GARAGE_EAST_LOS_SANTOS_4_EXPENDITURE_MODIFIER", 3985, 0 },
	{ "PROPERTY_GARAGE_EAST_LOS_SANTOS_5_EXPENDITURE_MODIFIER", 3986, 0 },
	{ "PROPERTY_GARAGE_EAST_LOS_SANTOS_6_EXPENDITURE_MODIFIER", 3987, 0 },
	{ "PROPERTY_GARAGE_EAST_LOS_SANTOS_7_EXPENDITURE_MODIFIER", 3988, 0 },
	{ "PROPERTY_GARAGE_EAST_LOS_SANTOS_8_EXPENDITURE_MODIFIER", 3989, 0 },
	{ "PROPERTY_GARAGE_SOUTH_LOS_SANTOS_1_EXPENDITURE_MODIFIER", 3990, 0 },
	{ "PROPERTY_GARAGE_SOUTH_LOS_SANTOS_2_EXPENDITURE_MODIFIER", 3991, 0 },
	{ "PROPERTY_GARAGE_NEW_1_EXPENDITURE_MODIFIER", 3992, 0 },
	{ "PROPERTY_GARAGE_NEW_2_EXPENDITURE_MODIFIER", 3993, 0 },
	{ "PROPERTY_GARAGE_NEW_3_EXPENDITURE_MODIFIER", 3994, 0 },
	{ "PROPERTY_GARAGE_NEW_5_EXPENDITURE_MODIFIER", 3995, 0 },
	{ "PROPERTY_GARAGE_NEW_6_EXPENDITURE_MODIFIER", 3996, 0 },
	{ "PROPERTY_GARAGE_NEW_7_EXPENDITURE_MODIFIER", 3997, 0 },
	{ "PROPERTY_GARAGE_NEW_8_EXPENDITURE_MODIFIER", 3998, 0 },
	{ "PROPERTY_GARAGE_NEW_9_EXPENDITURE_MODIFIER", 3999, 0 },
	{ "PROPERTY_GARAGE_NEW_14_EXPENDITURE_MODIFIER", 4000, 0 },
	{ "PROPERTY_GARAGE_NEW_16_EXPENDITURE_MODIFIER", 4001, 0 },
	{ "PROPERTY_GARAGE_NEW_17_EXPENDITURE_MODIFIER", 4002, 0 },
	{ "PROPERTY_GARAGE_NEW_18_EXPENDITURE_MODIFIER", 4003, 0 },
	{ "PROPERTY_GARAGE_NEW_19_EXPENDITURE_MODIFIER", 4004, 0 },
	{ "PROPERTY_GARAGE_NEW_20_EXPENDITURE_MODIFIER", 4005, 0 },
	{ "PROPERTY_GARAGE_NEW_21_EXPENDITURE_MODIFIER", 4006, 0 },
	{ "PROPERTY_GARAGE_NEW_22_EXPENDITURE_MODIFIER", 4007, 0 },
	{ "PROPERTY_GARAGE_NEW_23_EXPENDITURE_MODIFIER", 4008, 0 },
	{ "ADDER_EXPENDITURE_MODIFIER", 4009, 0 },
	{ "AIRBUS_EXPENDITURE_MODIFIER", 4010, 0 },
	{ "AKUMA_EXPENDITURE_MODIFIER", 4011, 0 },
	{ "ANNIHILATOR_EXPENDITURE_MODIFIER", 4012, 0 },
	{ "BALLER2_EXPENDITURE_MODIFIER", 4013, 0 },
	{ "BARRACKS_EXPENDITURE_MODIFIER", 4014, 0 },
	{ "BATI_EXPENDITURE_MODIFIER", 4015, 0 },
	{ "BATI2_EXPENDITURE_MODIFIER", 4016, 0 },
	{ "BFINJECTION_EXPENDITURE_MODIFIER", 4017, 0 },
	{ "BISON_EXPENDITURE_MODIFIER", 4018, 0 },
	{ "BLAZER_EXPENDITURE_MODIFIER", 4019, 0 },
	{ "BMX_EXPENDITURE_MODIFIER", 4020, 0 },
	{ "BULLET_EXPENDITURE_MODIFIER", 4021, 0 },
	{ "BUS_EXPENDITURE_MODIFIER", 4022, 0 },
	{ "BUZZARD_EXPENDITURE_MODIFIER", 4023, 0 },
	{ "CARBONIZZARE_EXPENDITURE_MODIFIER", 4024, 0 },
	{ "CARBONRS_EXPENDITURE_MODIFIER", 4025, 0 },
	{ "CAVALCADE_EXPENDITURE_MODIFIER", 4026, 0 },
	{ "CHEETAH_EXPENDITURE_MODIFIER", 4027, 0 },
	{ "COACH_EXPENDITURE_MODIFIER", 4028, 0 },
	{ "COGCABRIO_EXPENDITURE_MODIFIER", 4029, 0 },
	{ "COMET2_EXPENDITURE_MODIFIER", 4030, 0 },
	{ "COQUETTE_EXPENDITURE_MODIFIER", 4031, 0 },
	{ "CRUISER_EXPENDITURE_MODIFIER", 4032, 0 },
	{ "CRUSADER_EXPENDITURE_MODIFIER", 4033, 0 },
	{ "CUBAN800_EXPENDITURE_MODIFIER", 4034, 0 },
	{ "DILETTANTE_EXPENDITURE_MODIFIER", 4035, 0 },
	{ "DOUBLE_EXPENDITURE_MODIFIER", 4036, 0 },
	{ "DUMP_EXPENDITURE_MODIFIER", 4037, 0 },
	{ "DUSTER_EXPENDITURE_MODIFIER", 4038, 0 },
	{ "ELEGY2_EXPENDITURE_MODIFIER", 4039, 0 },
	{ "ENTITYXF_EXPENDITURE_MODIFIER", 4040, 0 },
	{ "EXEMPLAR_EXPENDITURE_MODIFIER", 4041, 0 },
	{ "FAGGIO2_EXPENDITURE_MODIFIER", 4042, 0 },
	{ "FELON_EXPENDITURE_MODIFIER", 4043, 0 },
	{ "FELTZER2_EXPENDITURE_MODIFIER", 4044, 0 },
	{ "FROGGER_EXPENDITURE_MODIFIER", 4045, 0 },
	{ "FUGITIVE_EXPENDITURE_MODIFIER", 4046, 0 },
	{ "GAUNTLET_EXPENDITURE_MODIFIER", 4047, 0 },
	{ "HEXER_EXPENDITURE_MODIFIER", 4048, 0 },
	{ "HOTKNIFE_EXPENDITURE_MODIFIER", 4049, 0 },
	{ "INFERNUS_EXPENDITURE_MODIFIER", 4050, 0 },
	{ "ISSI2_EXPENDITURE_MODIFIER", 4051, 0 },
	{ "JB700_EXPENDITURE_MODIFIER", 4052, 0 },
	{ "JETMAX_EXPENDITURE_MODIFIER", 4053, 0 },
	{ "JOURNEY_EXPENDITURE_MODIFIER", 4054, 0 },
	{ "KHAMELION_EXPENDITURE_MODIFIER", 4055, 0 },
	{ "LUXOR_EXPENDITURE_MODIFIER", 4056, 0 },
	{ "MAMMATUS_EXPENDITURE_MODIFIER", 4057, 0 },
	{ "MARQUIS_EXPENDITURE_MODIFIER", 4058, 0 },
	{ "MAVERICK_EXPENDITURE_MODIFIER", 4059, 0 },
	{ "MONROE_EXPENDITURE_MODIFIER", 4060, 0 },
	{ "MULE_EXPENDITURE_MODIFIER", 4061, 0 },
	{ "NINEF_EXPENDITURE_MODIFIER", 4062, 0 },
	{ "NINEF2_EXPENDITURE_MODIFIER", 4063, 0 },
	{ "ORACLE2_EXPENDITURE_MODIFIER", 4064, 0 },
	{ "PCJ_EXPENDITURE_MODIFIER", 4065, 0 },
	{ "RAPIDGT_EXPENDITURE_MODIFIER", 4066, 0 },
	{ "RAPIDGT2_EXPENDITURE_MODIFIER", 4067, 0 },
	{ "RENTALBUS_EXPENDITURE_MODIFIER", 4068, 0 },
	{ "RHINO_EXPENDITURE_MODIFIER", 4069, 0 },
	{ "ROCOTO_EXPENDITURE_MODIFIER", 4070, 0 },
	{ "RUFFIAN_EXPENDITURE_MODIFIER", 4071, 0 },
	{ "SANCHEZ_EXPENDITURE_MODIFIER", 4072, 0 },
	{ "SANDKING_EXPENDITURE_MODIFIER", 4073, 0 },
	{ "SCHWARZER_EXPENDITURE_MODIFIER", 4074, 0 },
	{ "SCORCHER_EXPENDITURE_MODIFIER", 4075, 0 },
	{ "SEASHARK_EXPENDITURE_MODIFIER", 4076, 0 },
	{ "SHAMAL_EXPENDITURE_MODIFIER", 4077, 0 },
	{ "SQUALO_EXPENDITURE_MODIFIER", 4078, 0 },
	{ "STINGER_EXPENDITURE_MODIFIER", 4079, 0 },
	{ "STINGERGT_EXPENDITURE_MODIFIER", 4080, 0 },
	{ "STRETCH_EXPENDITURE_MODIFIER", 4081, 0 },
	{ "STUNT_EXPENDITURE_MODIFIER", 4082, 0 },
	{ "SUNTRAP_EXPENDITURE_MODIFIER", 4083, 0 },
	{ "SUPERD_EXPENDITURE_MODIFIER", 4084, 0 },
	{ "SURANO_EXPENDITURE_MODIFIER", 4085, 0 },
	{ "TITAN_EXPENDITURE_MODIFIER", 4086, 0 },
	{ "TRIBIKE_EXPENDITURE_MODIFIER", 4087, 0 },
	{ "TRIBIKE2_EXPENDITURE_MODIFIER", 4088, 0 },
	{ "TRIBIKE3_EXPENDITURE_MODIFIER", 4089, 0 },
	{ "TROPIC_EXPENDITURE_MODIFIER", 4090, 0 },
	{ "VACCA_EXPENDITURE_MODIFIER", 4091, 0 },
	{ "VADER_EXPENDITURE_MODIFIER", 4092, 0 },
	{ "VELUM_EXPENDITURE_MODIFIER", 4093, 0 },
	{ "VIGERO_EXPENDITURE_MODIFIER", 4094, 0 },
	{ "VOLTIC_EXPENDITURE_MODIFIER", 4095, 0 },
	{ "ZION_EXPENDITURE_MODIFIER", 4096, 0 },
	{ "ZION2_EXPENDITURE_MODIFIER", 4097, 0 },
	{ "ZTYPE_EXPENDITURE_MODIFIER", 4098, 0 },
	{ "ASEA_EXPENDITURE_MODIFIER", 4099, 0 },
	{ "FELON2_EXPENDITURE_MODIFIER", 4100, 0 },
	{ "REQUEST_BRUCIE_BOX_EXPENDITURE_MODIFIER", 4101, 0 },
	{ "REQUEST_LOST_BACKUP1_EXPENDITURE_MODIFIER", 4102, 0 },
	{ "REQUEST_LOST_BACKUP2_EXPENDITURE_MODIFIER", 4103, 0 },
	{ "REQUEST_LOST_BACKUP3_EXPENDITURE_MODIFIER", 4104, 0 },
	{ "REQUEST_VAGOS_BACKUP1_EXPENDITURE_MODIFIER", 4105, 0 },
	{ "REQUEST_VAGOS_BACKUP2_EXPENDITURE_MODIFIER", 4106, 0 },
	{ "REQUEST_VAGOS_BACKUP3_EXPENDITURE_MODIFIER", 4107, 0 },
	{ "REQUEST_FAMILY_BACKUP1_EXPENDITURE_MODIFIER", 4108, 0 },
	{ "REQUEST_FAMILY_BACKUP2_EXPENDITURE_MODIFIER", 4109, 0 },
	{ "REQUEST_FAMILY_BACKUP3_EXPENDITURE_MODIFIER", 4110, 0 },
	{ "REQUEST_THIEF1_EXPENDITURE_MODIFIER", 4111, 0 },
	{ "REQUEST_THIEF2_EXPENDITURE_MODIFIER", 4112, 0 },
	{ "REQUEST_THIEF3_EXPENDITURE_MODIFIER", 4113, 0 },
	{ "REQUEST_OFF_THE_RADAR_EXPENDITURE_MODIFIER", 4114, 0 },
	{ "REQUEST_AMMO_DROP_EXPENDITURE_MODIFIER", 4115, 0 },
	{ "REQUEST_BOAT_PICKUP_EXPENDITURE_MODIFIER", 4116, 0 },
	{ "REQUEST_BACKUP_HELI_EXPENDITURE_MODIFIER", 4117, 0 },
	{ "REQUEST_AIRSTRIKE_EXPENDITURE_MODIFIER", 4118, 0 },
	{ "REQUEST_ARMY_EXPENDITURE_MODIFIER", 4119, 0 },
	{ "REQUEST_HELI_PICKUP_EXPENDITURE_MODIFIER", 4120, 0 },
	{ "REQUEST_REVEAL_PLAYERS_EXPENDITURE_MODIFIER", 4121, 0 },
	{ "REQUEST_LESTER_JOB_EXPENDITURE_MODIFIER", 4122, 0 },
	{ "REQUEST_LAMAR_JOB_EXPENDITURE_MODIFIER", 4123, 0 },
	{ "REQUEST_SIMEON_JOB_EXPENDITURE_MODIFIER", 4124, 0 },
	{ "REQUEST_MARTIN_JOB_EXPENDITURE_MODIFIER", 4125, 0 },
	{ "REQUEST_REMOVE_WANTED_EXPENDITURE_MODIFIER", 4126, 0 },
	{ "REQUEST_PEGASUS_EXPENDITURE_MODIFIER", 4127, 0 },
	{ "REQUEST_LESTER_LOCATE_BOAT_EXPENDITURE_MODIFIER", 4128, 0 },
	{ "REQUEST_LESTER_LOCATE_HELI_EXPENDITURE_MODIFIER", 4129, 0 },
	{ "REQUEST_LESTER_LOCATE_CAR_EXPENDITURE_MODIFIER", 4130, 0 },
	{ "REQUEST_LESTER_LOCATE_PLANE_EXPENDITURE_MODIFIER", 4131, 0 },
	{ "TRANSITION_DELAY_MODIFIER", 4132, 0 },
	{ "TUTORIAL_CORONA_MODIFIER", 4133, 0 },
	{ "TRANSITION_STUCK_LAUNCHING_MODIFIER", 4135, 0 },
	{ "TRANSITION_STUCK_ENTERING_MODIFIER", 4136, 0 },
	{ "TRANSITION_STUCK_BEFORE_LAUNCH_MODIFIER", 4139, 0 },
	{ "EXPENSE_MODIFIER_GOLD_DECO_EARRINGS", 4140, 0 },
	{ "EXPENSE_MODIFIER_GOLD_DECO_EARRINGS", 4140, 0 },
	{ "EXPENSE_MODIFIER_SILVER_DECO_EARRINGS", 4141, 0 },
	{ "EXPENSE_MODIFIER_PEARL_DECO_EARRINGS", 4142, 0 },
	{ "EXPENSE_MODIFIER_COPPER_DECO_EARRINGS", 4143, 0 },
	{ "EXPENSE_MODIFIER_TWO_TONE_DECO_EARRINGS", 4144, 0 },
	{ "EXPENSE_MODIFIER_SAPPHIRE_DECO_EARRINGS", 4145, 0 },
	{ "EXPENSE_MODIFIER_GOLD_HOOP_EARRINGS", 4146, 0 },
	{ "EXPENSE_MODIFIER_SILVER_HOOP_EARRINGS", 4147, 0 },
	{ "EXPENSE_MODIFIER_PINK_HOOP_EARRINGS", 4148, 0 },
	{ "EXPENSE_MODIFIER_COPPER_HOOP_EARRINGS", 4149, 0 },
	{ "EXPENSE_MODIFIER_PURPLE_HOOP_EARRINGS", 4150, 0 },
	{ "EXPENSE_MODIFIER_WHITE_HOOP_EARRINGS", 4151, 0 },
	{ "EXPENSE_MODIFIER_HARSH_SOULS_SWEATBAND", 4152, 0 },
	{ "EXPENSE_MODIFIER_PROLAPS_SWEATBAND", 4153, 0 },
	{ "EXPENSE_MODIFIER_LC_SWEATBAND", 4154, 0 },
	{ "EXPENSE_MODIFIER_AQUA_STRIPED_SWEATBAND", 4155, 0 },
	{ "EXPENSE_MODIFIER_PINK_CHECK_SWEATBAND", 4156, 0 },
	{ "EXPENSE_MODIFIER_SQUEEZERS_SWEATBAND", 4157, 0 },
	{ "EXPENSE_MODIFIER_SILVER_BANGLES", 4158, 0 },
	{ "EXPENSE_MODIFIER_GOLD_BANGLES", 4159, 0 },
	{ "EXPENSE_MODIFIER_WHITE_LEATHER_STRAPS", 4160, 0 },
	{ "EXPENSE_MODIFIER_RAINBOW_LEATHER_STRAPS", 4161, 0 },
	{ "EXPENSE_MODIFIER_ONYX_PENDANT", 4162, 0 },
	{ "EXPENSE_MODIFIER_PEARL_PENDANT", 4163, 0 },
	{ "EXPENSE_MODIFIER_JADE_PENDANT", 4164, 0 },
	{ "EXPENSE_MODIFIER_CARNELIAN_PENDANT", 4165, 0 },
	{ "EXPENSE_MODIFIER_AQUAMARINE_PENDANT", 4166, 0 },
	{ "EXPENSE_MODIFIER_AMETHYST_PENDANT", 4167, 0 },
	{ "EXPENSE_MODIFIER_GOLD_NECKLACE", 4168, 0 },
	{ "EXPENSE_MODIFIER_SILVER_NECKLACE", 4169, 0 },
	{ "EXPENSE_MODIFIER_SCARF", 4170, 0 },
	{ "EXPENSE_MODIFIER_WHITE_TIE", 4171, 0 },
	{ "EXPENSE_MODIFIER_GRAY_TIE", 4172, 0 },
	{ "EXPENSE_MODIFIER_BLACK_TIE", 4173, 0 },
	{ "EXPENSE_MODIFIER_WHITE_SKINNY_TIE", 4174, 0 },
	{ "EXPENSE_MODIFIER_GRAY_SKINNY_TIE", 4175, 0 },
	{ "EXPENSE_MODIFIER_BLACK_SKINNY_TIE", 4176, 0 },
	{ "EXPENSE_MODIFIER_BLACK_BOWTIE", 4177, 0 },
	{ "Discount_Male_Special_Barely_Blue_Shirt", 4178, 0 },
	{ "Discount_Male_Special_Black_Shirt", 4179, 0 },
	{ "Discount_Male_Special_Black_Vest", 4180, 0 },
	{ "Discount_Male_Special_Blue_Check_Shirt", 4181, 0 },
	{ "Discount_Male_Special_Blue_Striped_Shirt", 4182, 0 },
	{ "Discount_Male_Special_Blue_Vest", 4183, 0 },
	{ "Discount_Male_Special_Blue_Woven_Shirt", 4184, 0 },
	{ "Discount_Male_Special_Charcoal_Shirt", 4185, 0 },
	{ "Discount_Male_Special_Dark_Salmon_Shirt", 4186, 0 },
	{ "Discount_Male_Special_Fuchsia_Shirt", 4187, 0 },
	{ "Discount_Male_Special_Gray_Vest", 4188, 0 },
	{ "Discount_Male_Special_Lemon_Shirt", 4189, 0 },
	{ "Discount_Male_Special_Mint_Shirt", 4190, 0 },
	{ "Discount_Male_Special_Ocean_Stripe_Shirt", 4191, 0 },
	{ "Discount_Male_Special_Off_White_Shirt", 4192, 0 },
	{ "Discount_Male_Special_Pale_Blue_Shirt", 4193, 0 },
	{ "Discount_Male_Special_Pale_Olive_Shirt", 4194, 0 },
	{ "Discount_Male_Special_Pink_Check_Shirt", 4195, 0 },
	{ "Discount_Male_Special_Pink_Shirt", 4196, 0 },
	{ "Discount_Male_Special_Pink_Striped_Shirt", 4197, 0 },
	{ "Discount_Male_Special_Salmon_Shirt", 4198, 0 },
	{ "Discount_Male_Special_Silver_Shirt", 4199, 0 },
	{ "Discount_Male_Special_Tan_Shirt", 4200, 0 },
	{ "Discount_Male_Special_White_Shirt", 4201, 0 },
	{ "Discount_Male_Special_White_Tshirt", 4202, 0 },
	{ "XP_TUNABLE_DAILY_DEATHMATCH", 4203, 1 },
	{ "XP_TUNABLE_DAILY_MISSION", 4204, 1 },
	{ "XP_TUNABLE_DAILY_RACE", 4205, 1 },
	{ "XP_TUNABLE_FIRST_WIN_OF_THE_DAY_BONUS", 4206, 1 },
	{ "XP_TUNABLE_PLAY_ONE_OF_EACH_GAME_TYPE_AND_MINIGAME", 4207, 1 },
	{ "XP_TUNABLE_PLAY_TEN_ROCKSTAR_VERIFIED_RACES_MISSIONS_OR_DEATHMATCHES", 4208, 1 },
	{ "XP_TUNABLE_WIN_TEN_RACES_OR_DEATHMATCHES_CREATED_BY_OTHER_PLAYERS", 4209, 1 },
	{ "XP_TUNABLE_PERFORMING_JOBS_WITH_OTHER_PLAYERS", 4210, 1 },
	{ "XP_TUNABLE_COMPLETE_FRIENDS_CREATION", 4211, 1 },
	{ "XP_TUNABLE_PLAY_YOUR_CREATIONS_AGAINST_OTHER_PLAYERS", 4212, 1 },
	{ "XP_TUNABLE_CREATE_ONE_OF_EACH_GAME_TYPE", 4213, 1 },
	{ "XP_TUNABLE_GET_A_THUMBS_UP_FOR_ONE_OF_YOUR_MISSIONS", 4214, 1 },
	{ "XP_TUNABLE_HAVE_ONE_OF_YOUR_CREATIONS_ROCKSTAR_VERIFIES", 4215, 1 },
	{ "XP_TUNABLE_LINK_YOUR_ACCOUNT_TO_THE_SOCIAL_CLUB", 4216, 1 },
	{ "XP_TUNABLE_ALL_RP_WHILE_PLAYING_IN_A_CREW", 4217, 1 },
	{ "XP_TUNABLE_ARMORED_TRUCK", 4218, 1 },
	{ "XP_TUNABLE_BOUNTIES_KILLER", 4219, 1 },
	{ "XP_TUNABLE_BOUNTIES_TARGET", 4220, 1 },
	{ "XP_TUNABLE_CRATE_DROP", 4221, 1 },
	{ "XP_TUNABLE_CRATE_DROP_ENEMY_KILLS", 4222, 1 },
	{ "XP_TUNABLE_GANG_ATTACK", 4223, 1 },
	{ "XP_TUNABLE_GANG_ATTACK_ENEMY_KILLS", 4224, 1 },
	{ "XP_TUNABLE_HOLD_UPS", 4225, 1 },
	{ "1145590141", 4226, 1 },
	{ "XP_TUNABLE_IMPORTEXPORT", 4227, 1 },
	{ "XP_TUNABLE_LESTER_NPC_TARGET", 4228, 1 },
	{ "XP_TUNABLE_MINIGAMES_ARM_WRESTLING", 4229, 1 },
	{ "XP_TUNABLE_MINIGAMES_GOLF", 4230, 1 },
	{ "XP_TUNABLE_MINIGAMES_ALL_GOLF_BONUSES", 4231, 1 },
	{ "XP_TUNABLE_MINIGAMES_SHOOTING_RANGE", 4232, 1 },
	{ "XP_TUNABLE_MINIGAMES_TENNIS_WIN", 4233, 1 },
	{ "XP_TUNABLE_MINIGAMES_TENNIS_TAKING_PART", 4234, 1 },
	{ "XP_TUNABLE_MINIGAMES_TENNIS_GAME", 4235, 1 },
	{ "XP_TUNABLE_MINIGAMES_TENNIS_SET", 4236, 1 },
	{ "XP_TUNABLE_MINIGAMES_TENNIS_RALLY", 4237, 1 },
	{ "XP_TUNABLE_RACE_TO_POINT", 4238, 1 },
	{ "XP_TUNABLE_ROCKSTAR_DEATHMATCH_KILL", 4239, 1 },
	{ "XP_TUNABLE_ROCKSTAR_DEATHMATCH_1ST_PLACE", 4240, 1 },
	{ "XP_TUNABLE_ROCKSTAR_DEATHMATCH_2ND_PLACE", 4241, 1 },
	{ "XP_TUNABLE_ROCKSTAR_DEATHMATCH_3RD_PLACE", 4242, 1 },
	{ "XP_TUNABLE_3_KILLS", 4243, 1 },
	{ "XP_TUNABLE_6_KILLS", 4244, 1 },
	{ "XP_TUNABLE_10_KILLS", 4245, 1 },
	{ "XP_TUNABLE_HEADSHOT", 4246, 1 },
	{ "XP_TUNABLE_END_KILLSTREAK", 4247, 1 },
	{ "XP_TUNABLE_REVENGE_KILLSTREAK", 4248, 1 },
	{ "XP_TUNABLE_KILL_POWER_PLAY_PLAYER", 4249, 1 },
	{ "XP_TUNABLE_PODIUM_FINISH", 4250, 1 },
	{ "XP_TUNABLE_WIN_WITHOUT_DYING", 4251, 1 },
	{ "XP_TUNABLE_ROCKSTAR_DM_POWER_PLAYS", 4252, 1 },
	{ "XP_TUNABLE_ROCKSTAR_DM_FINAL_KILL_BONUS", 4253, 1 },
	{ "XP_TUNABLE_ROCKSTAR_MISSIONS_BONUSES", 4254, 1 },
	{ "XP_TUNABLE_KILL_ALL_ENEMIES_ON_A_MISSION", 4255, 1 },
	{ "XP_TUNABLE_ONLY_KILL_ENEMIES_WITH_HEADSHOTS_INDIVIDUAL", 4256, 1 },
	{ "XP_TUNABLE_ONLY_KILL_ENEMIES_WITH_HEADSHOTS_TEAM", 4257, 1 },
	{ "XP_TUNABLE_NOT_LOSING_ANY_LIVES_BONUS", 4258, 1 },
	{ "XP_TUNABLE_DELIVER_A_PACKAGE_BONUS", 4259, 1 },
	{ "XP_TUNABLE_DIFFICULTY_BONUS", 4260, 1 },
	{ "XP_TUNABLE_LAST_TEAM_STANDING_WINNERS", 4261, 1 },
	{ "XP_TUNABLE_LAST_TEAM_STANDING_LOSERS", 4262, 1 },
	{ "XP_TUNABLE_LAST_TEAM_STANDING_SURVIVOR_BONUS", 4263, 1 },
	{ "XP_TUNABLE_ROCKSTAR_RACES_1ST_PLACE", 4264, 1 },
	{ "XP_TUNABLE_ROCKSTAR_RACES_2ND_PLACE", 4265, 1 },
	{ "XP_TUNABLE_ROCKSTAR_RACES_3RD_PLACE", 4266, 1 },
	{ "XP_TUNABLE_OVERTAKE_ANOTHER_PLAYER_5_TIMES", 4267, 1 },
	{ "XP_TUNABLE_OVERTAKE_ANOTHER_PLAYER_10_TIMES", 4268, 1 },
	{ "XP_TUNABLE_OVERTAKE_ANOTHER_PLAYER_15_TIMES", 4269, 1 },
	{ "XP_TUNABLE_SLIPSTREAM_FOR_5_SECONDS", 4270, 1 },
	{ "XP_TUNABLE_BE_IN_FIRST_PLACE_FOR_A_WHOLE_LAP", 4271, 1 },
	{ "XP_TUNABLE_GO_IN_TO_1ST_PLACE", 4272, 1 },
	{ "XP_TUNABLE_CLEAN_LAP", 4273, 1 },
	{ "XP_TUNABLE_FASTEST_LAP", 4274, 1 },
	{ "XP_TUNABLE_PERSONAL_BEST_LAP", 4275, 1 },
	{ "XP_TUNABLE_FLYING_UNDER_BRIDGES", 4276, 1 },
	{ "XP_TUNABLE_SURVIVAL_WAVE_REACHED", 4277, 1 },
	{ "XP_TUNABLE_SURVIVAL_ENEMY_KILL", 4278, 1 },
	{ "XP_TUNABLE_SURVIVAL_VEHICLE_DESTROYED", 4279, 1 },
	{ "XP_TUNABLE_AWARDS_BRONZE", 4280, 1 },
	{ "XP_TUNABLE_AWARDS_SILVER", 4281, 1 },
	{ "XP_TUNABLE_AWARDS_GOLD", 4282, 1 },
	{ "XP_TUNABLE_AWARDS_PLATINUM", 4283, 1 },
	{ "XP_TUNABLE_BUDDY_IN_CAR_RESPECT_1_BUDDY", 4284, 1 },
	{ "XP_TUNABLE_BUDDY_IN_CAR_RESPECT_2_BUDDIES", 4285, 1 },
	{ "XP_TUNABLE_BUDDY_IN_CAR_RESPECT_3_BUDDIES", 4286, 1 },
	{ "XP_TUNABLE_LOSE_WANTED_LEVEL_1_STAR", 4287, 1 },
	{ "XP_TUNABLE_LOSE_WANTED_LEVEL_2_STAR", 4288, 1 },
	{ "XP_TUNABLE_LOSE_WANTED_LEVEL_3_STAR", 4289, 1 },
	{ "XP_TUNABLE_LOSE_WANTED_LEVEL_4_STAR", 4290, 1 },
	{ "XP_TUNABLE_LOSE_WANTED_LEVEL_5_STAR", 4291, 1 },
	{ "XP_TUNABLE_TIME_WITH_5STAR_WANTED_LEVEL", 4292, 1 },
	{ "XP_TUNABLE_KILL_MUGGERS", 4293, 1 },
	{ "XP_TUNABLE_STUNT_JUMPS", 4294, 1 },
	{ "XP_TUNABLE_COLLECT_MISSION_PACKAGE", 4295, 0 },
	{ "XP_TUNABLE_VOTE_FOR_CONTENT", 4296, 0 },
	{ "XP_TUNABLE_CTF_CASH_REWARD", 4297, 0 },
	{ "XP_TUNABLE_CTF_XP_REWARD_MULTIPLIER", 4298, 1 },
	{ "XP_TUNABLE_KILL_CTF_PED", 4299, 0 },
	{ "XP_TUNABLE_DARTS_BULLSEYE", 4300, 1 },
	{ "XP_TUNABLE_DARTS_LEG_WON", 4301, 1 },
	{ "XP_TUNABLE_DARTS_TAKING_PART", 4302, 1 },
	{ "XP_TUNABLE_DARTS_MATCH_WIN", 4303, 1 },
	{ "XP_MODIFIER_BUDDY_IN_CAR", 4304, 0 },
	{ "XP_TUNABLE_KILLPLAYERMELEEATTACK", 4305, 1 },
	{ "XP_TUNABLE_RUNOVERUSINGVEHICLEDM", 4306, 1 },
	{ "XP_TUNABLE_KILL_2_WITHIN_10_SECONDSDM", 4307, 1 },
	{ "XP_TUNABLE_KILL_FIRST_30_SECONDSDM", 4308, 1 },
	{ "XP_TUNABLE_KILL_CLOSE_TO_DEATHDM", 4309, 1 },
	{ "XP_TUNABLE_LEAST_5_HEADSHOT_KILLSDM", 4310, 1 },
	{ "XP_TUNABLE_FINISH_MORE_KILLS_NO_HEALTH_PACKSDM", 4311, 1 },
	{ "XP_TUNABLE_FINISH_WITH_A_KD_RATIO_OF_AT_LEAST_2DM", 4312, 1 },
	{ "XP_TUNABLE_WIN_USING_ONLY_PISTOLDM", 4313, 1 },
	{ "XP_TUNABLE_FINISH_TOP_3DM", 4314, 1 },
	{ "XP_TUNABLE_GET_A_KILL_STREAKVDM", 4315, 1 },
	{ "XP_TUNABLE_KILL_TWO_ENEMIES_WITHIN_10SEC_OF_EACH_OTHERVDM", 4316, 1 },
	{ "XP_TUNABLE_KILL_ENEMY_WITHIN_THE_60_SECONDSVDM", 4317, 1 },
	{ "XP_TUNABLE_KILLENEMY_WHILE_YOUR_VEHICLE_IS_ON_FIREVDM", 4318, 1 },
	{ "XP_TUNABLE_RECOVER_FROM_DEATHSTREAK_FINISH_WITH_MORE_KILLS_THAN_DEATHSVDM", 4319, 1 },
	{ "XP_TUNABLE_KILLPLAYERWHENDEADVDM", 4320, 1 },
	{ "XP_TUNABLE_FINISHMOREKILLSTHANDEATHSVDM", 4321, 1 },
	{ "XP_TUNABLE_GETFIRSTKILLVDM", 4322, 1 },
	{ "XP_TUNABLE_KILLPOWERPLAYERVDM", 4323, 1 },
	{ "XP_TUNABLE_FINISHVDMINTOP3VDM", 4324, 1 },
	{ "DLC_MALE_BEARDS_CURLY", 4326, 0 },
	{ "DLC_MALE_BEARDS_CURLY_DEEP_STRANGER", 4327, 0 },
	{ "DLC_MALE_BEARDS_HANDLEBAR", 4328, 0 },
	{ "DLC_MALE_BEARDS_FAUSTIC", 4329, 0 },
	{ "DLC_MALE_BEARDS_OTTO_PATCH", 4330, 0 },
	{ "DLC_MALE_BEARDS_OTTO_FULL_STRANGER", 4331, 0 },
	{ "DLC_MALE_BEARDS_LIGHT_FRANZ", 4332, 0 },
	{ "DLC_MALE_BEARDS_LINCOLN_CURTAIN", 4333, 0 },
	{ "DLC_MALE_BEARDS_HAMPSTEAD", 4334, 0 },
	{ "DLC_MALE_BEARDS_AMBROSE", 4335, 0 },
	{ "WEAPONADDON_PISTOL_FLSH_EXPENDITURE_TUNABLE", 4336, 1 },
	{ "WEAPONADDON_PISTOL_SUPP_EXPENDITURE_TUNABLE", 4337, 1 },
	{ "WEAPONADDON_COMBATPISTOL_FLSH_EXPENDITURE_TUNABLE", 4338, 1 },
	{ "WEAPONADDON_COMBATPISTOL_SUPP_EXPENDITURE_TUNABLE", 4339, 1 },
	{ "WEAPONADDON_APPISTOL_FLSH_EXPENDITURE_TUNABLE", 4340, 1 },
	{ "WEAPONADDON_APPISTOL_SUPP_EXPENDITURE_TUNABLE", 4341, 1 },
	{ "WEAPONADDON_DLCPISTOL50_FLSH_EXPENDITURE_TUNABLE", 4342, 1 },
	{ "WEAPONADDON_DLCPISTOL50_SUPP_EXPENDITURE_TUNABLE", 4343, 1 },
	{ "WEAPONADDON_MICROSMG_FLSH_EXPENDITURE_TUNABLE", 4344, 1 },
	{ "WEAPONADDON_MICROSMG_SUPP_EXPENDITURE_TUNABLE", 4345, 1 },
	{ "WEAPONADDON_MICROSMG_SCOPE_EXPENDITURE_TUNABLE", 4346, 1 },
	{ "WEAPONADDON_SMG_FLSH_EXPENDITURE_TUNABLE", 4347, 1 },
	{ "WEAPONADDON_SMG_SUPP_EXPENDITURE_TUNABLE", 4348, 1 },
	{ "WEAPONADDON_SMG_SCOPE_EXPENDITURE_TUNABLE", 4349, 1 },
	{ "WEAPONADDON_ASSSMG_FLSH_EXPENDITURE_TUNABLE", 4350, 1 },
	{ "WEAPONADDON_ASSSMG_SUPP_EXPENDITURE_TUNABLE", 4351, 1 },
	{ "WEAPONADDON_ASSSMG_SCOPE_EXPENDITURE_TUNABLE", 4353, 1 },
	{ "WEAPONADDON_ASSRIFLE_FLSH_EXPENDITURE_TUNABLE", 4354, 1 },
	{ "WEAPONADDON_ASSRIFLE_SUPP_EXPENDITURE_TUNABLE", 4355, 1 },
	{ "WEAPONADDON_ASSRIFLE_SCOPE_EXPENDITURE_TUNABLE", 4356, 1 },
	{ "WEAPONADDON_ASSRIFLE_GRIP_EXPENDITURE_TUNABLE", 4357, 1 },
	{ "WEAPONADDON_DLCHEAVYRIFLE_FLSH_EXPENDITURE_TUNABLE", 4358, 1 },
	{ "WEAPONADDON_DLCHEAVYRIFLE_SUPP_EXPENDITURE_TUNABLE", 4359, 1 },
	{ "WEAPONADDON_DLCHEAVYRIFLE_SCOPE_EXPENDITURE_TUNABLE", 4360, 1 },
	{ "WEAPONADDON_DLCHEAVYRIFLE_GRIP_EXPENDITURE_TUNABLE", 4361, 1 },
	{ "WEAPONADDON_CARBINERRIFLE_FLSH_EXPENDITURE_TUNABLE", 4362, 1 },
	{ "WEAPONADDON_CARBINERRIFLE_SUPP_EXPENDITURE_TUNABLE", 4363, 1 },
	{ "WEAPONADDON_CARBINERRIFLE_SCOPE_EXPENDITURE_TUNABLE", 4364, 1 },
	{ "WEAPONADDON_CARBINERRIFLE_GRIP_EXPENDITURE_TUNABLE", 4365, 1 },
	{ "WEAPONADDON_CARBINERRIFLE_RAILCOVER_EXPENDITURE_TUNABLE", 4366, 1 },
	{ "WEAPONADDON_ADVANCEDRIFLE_FLSH_EXPENDITURE_TUNABLE", 4367, 1 },
	{ "WEAPONADDON_ADVANCEDRIFLE_SUPP_EXPENDITURE_TUNABLE", 4368, 1 },
	{ "WEAPONADDON_ADVANCEDRIFLE_SCOPE_EXPENDITURE_TUNABLE", 4369, 1 },
	{ "WEAPONADDON_MACHINEGUN_SCOPE_EXPENDITURE_TUNABLE", 4370, 1 },
	{ "WEAPONADDON_COMBATMG_FLSH_EXPENDITURE_TUNABLE", 4372, 1 },
	{ "WEAPONADDON_COMBATMG_SUPP_EXPENDITURE_TUNABLE", 4373, 1 },
	{ "WEAPONADDON_PUMPSHOTGUN_FLSH_EXPENDITURE_TUNABLE", 4374, 1 },
	{ "WEAPONADDON_PUMPSHOTGUN_SUPP_EXPENDITURE_TUNABLE", 4375, 1 },
	{ "WEAPONADDON_BULLPUPSHOTGUN_FLSH_EXPENDITURE_TUNABLE", 4376, 1 },
	{ "WEAPONADDON_BULLPUPSHOTGUN_SUPP_EXPENDITURE_TUNABLE", 4377, 1 },
	{ "WEAPONADDON_ASSHOTGUN_GRIP_EXPENDITURE_TUNABLE", 4378, 1 },
	{ "WEAPONADDON_ASSHOTGUN_FLSH_EXPENDITURE_TUNABLE", 4379, 1 },
	{ "WEAPONADDON_ASSHOTGUN_SUPP_EXPENDITURE_TUNABLE", 4380, 1 },
	{ "WEAPONADDON_SNIPER_SCOPE1_EXPENDITURE_TUNABLE", 4381, 1 },
	{ "WEAPONADDON_SNIPER_SCOPE2_EXPENDITURE_TUNABLE", 4382, 1 },
	{ "WEAPONADDON_SNIPER_SUPP_EXPENDITURE_TUNABLE", 4383, 1 },
	{ "WEAPONADDON_HEAVYSNIPER_SCOPE1_EXPENDITURE_TUNABLE", 4384, 1 },
	{ "WEAPONADDON_HEAVYSNIPER_SCOPE2_EXPENDITURE_TUNABLE", 4385, 1 },
	{ "WEAPONADDON_HEAVYSNIPER_SUPP_EXPENDITURE_TUNABLE", 4386, 1 },
	{ "WEAPONADDON_DLCASSSNIPER_SCOPE1_EXPENDITURE_TUNABLE", 4387, 1 },
	{ "WEAPONADDON_DLCASSSNIPER_SCOPE2_EXPENDITURE_TUNABLE", 4388, 1 },
	{ "WEAPONADDON_DLCASSSNIPER_SUPP_EXPENDITURE_TUNABLE", 4389, 1 },
	{ "WEAPONADDON_GRENADELAUNCHER_FLSH_EXPENDITURE_TUNABLE", 4390, 1 },
	{ "WEAPONADDON_GRENADELAUNCHER_SCOPE_EXPENDITURE_TUNABLE", 4391, 1 },
	{ "WEAPONADDON_COMBATMG_GRIP_EXPENDITURE_TUNABLE", 4392, 1 },
	{ "WEAPONADDON_COMBATMG_SCOPE_EXPENDITURE_TUNABLE", 4393, 1 },
	{ "WEAPONADDON_GRENADELAUNCHER_GRIP_EXPENDITURE_TUNABLE", 4394, 1 },
	{ "PLAYERKIT_RED_WEAPON_EXPENDITURE_TUNABLE", 4395, 1 },
	{ "PLAYERKIT_TAN_WEAPON_EXPENDITURE_TUNABLE", 4396, 1 },
	{ "PLAYERKIT_BLUE_WEAPON_EXPENDITURE_TUNABLE", 4397, 1 },
	{ "PLAYERKIT_PLATINUM_WEAPON_EXPENDITURE_TUNABLE", 4398, 1 },
	{ "PLAYERKIT_GREEN_WEAPON_EXPENDITURE_TUNABLE", 4399, 1 },
	{ "PLAYERKIT_PINK_WEAPON_EXPENDITURE_TUNABLE", 4400, 1 },
	{ "PLAYERKIT_GOLD_WEAPON_EXPENDITURE_TUNABLE", 4401, 1 },
	{ "ENTRANCE_FEE_CAR_RACE_EXPENDITURE_TUNABLE", 4434, 0 },
	{ "ENTRANCE_FEE_AIR_RACE_EXPENDITURE_TUNABLE", 4435, 0 },
	{ "ENTRANCE_FEE_SEA_RACE_EXPENDITURE_TUNABLE", 4436, 0 },
	{ "ENTRANCE_FEE_BIKE_RACE_EXPENDITURE_TUNABLE", 4437, 0 },
	{ "ENTRANCE_FEE_SURVIVAL_EXPENDITURE_TUNABLE", 4438, 0 },
	{ "ENTRANCE_FEE_DEATHMATCH_EXPENDITURE_TUNABLE", 4439, 0 },
	{ "ENTRANCE_FEE_PARACHUTING_EXPENDITURE_TUNABLE", 4440, 0 },
	{ "ENTRANCE_FEE_LTS_EXPENDITURE_TUNABLE", 4441, 0 },
	{ "ENTRANCE_FEE_CTF_EXPENDITURE_TUNABLE", 4442, 0 },
	{ "ENTRANCE_FEE_VERSUS_EXPENDITURE_TUNABLE", 4443, 0 },
	{ "CASH_MODIFIER_CRATE_DROP_GANG_ATTACK", 4445, 0 },
	{ "TIMESCALE_RACE_MINUTES_UNDER_1", 4446, 0 },
	{ "TIMESCALE_RACE_UNDER_1MIN_CASH_MOD_PERCENT", 4447, 0 },
	{ "TIMESCALE_RACE_MINUTES_UNDER_2", 4448, 0 },
	{ "TIMESCALE_RACE_UNDER_2MIN_CASH_MOD_PERCENT", 4449, 0 },
	{ "TIMESCALE_RACE_MINUTES_UNDER_3", 4450, 0 },
	{ "TIMESCALE_RACE_UNDER_3MIN_CASH_MOD_PERCENT", 4451, 0 },
	{ "TIMESCALE_RACE_MINUTES_UNDER_4", 4452, 0 },
	{ "TIMESCALE_RACE_UNDER_4MIN_CASH_MOD_PERCENT", 4453, 0 },
	{ "TIMESCALE_DM_MINUTES_UNDER_1", 4454, 0 },
	{ "TIMESCALE_DM_UNDER_1MIN_CASH_MOD_PERCENT", 4455, 0 },
	{ "TIMESCALE_DM_MINUTES_UNDER_2", 4456, 0 },
	{ "TIMESCALE_DM_UNDER_2MIN_CASH_MOD_PERCENT", 4457, 0 },
	{ "TIMESCALE_DM_MINUTES_UNDER_3", 4458, 0 },
	{ "TIMESCALE_DM_UNDER_3MIN_CASH_MOD_PERCENT", 4459, 0 },
	{ "TIMESCALE_DM_MINUTES_UNDER_4", 4460, 0 },
	{ "TIMESCALE_DM_UNDER_4MIN_CASH_MOD_PERCENT", 4461, 0 },
	{ "RACE_PLAYER_MULTIPLIER", 4631, 0 },
	{ "RACE_BASIC", 4632, 0 },
	{ "RACE_MAX_PLAYERS", 4633, 0 },
	{ "RACE_MAX_JOB_DECIDER", 4634, 0 },
	{ "RACE_RANK_CAP", 4635, 0 },
	{ "RACE_RANK_DIVIDER", 4636, 0 },
	{ "RACE_END_MULTIPLIER", 4637, 1 },
	{ "DM_PLAYER_MULTIPLIER", 4638, 0 },
	{ "DM_BASIC", 4639, 0 },
	{ "DM_MAX_PLAYERS", 4640, 0 },
	{ "DM_MAX_JOB_DECIDER", 4641, 0 },
	{ "DM_RANK_CAP", 4642, 0 },
	{ "DM_RANK_DIVIDER", 4643, 0 },
	{ "DM_END_MULTIPLIER", 4644, 1 },
	{ "PARACHUTING_PLAYER_MULTIPLIER", 4645, 0 },
	{ "PARACHUTING_BASIC", 4646, 0 },
	{ "PARACHUTING_MAX_PLAYERS", 4647, 0 },
	{ "PARACHUTING_MAX_JOB_DECIDER", 4648, 0 },
	{ "PARACHUTING_RANK_CAP", 4649, 0 },
	{ "PARACHUTING_RANK_DIVIDER", 4650, 0 },
	{ "PARACHUTING_END_MULTIPLIER", 4651, 1 },
	{ "LTS_PLAYER_MULTIPLIER", 4652, 0 },
	{ "LTS_BASIC", 4653, 0 },
	{ "LTS_MAX_PLAYERS", 4654, 0 },
	{ "LTS_MAX_JOB_DECIDER", 4655, 0 },
	{ "LTS_RANK_CAP", 4656, 0 },
	{ "LTS_RANK_DIVIDER", 4657, 0 },
	{ "LTS_END_MULTIPLIER", 4658, 1 },
	{ "RACE_RP_PLAYER_MULTIPLIER", 4659, 0 },
	{ "RACE_RP_BASIC", 4660, 0 },
	{ "RACE_RP_MIN_PLAYERS", 4661, 0 },
	{ "RACE_RP_MAX_PLAYERS", 4662, 0 },
	{ "RACE_RP_MAX_JOB_DECIDER", 4663, 0 },
	{ "RACE_RP_RANK_CAP", 4664, 0 },
	{ "RACE_RP_RANK_DIVIDER", 4665, 0 },
	{ "RACE_RP_END_DIVIDER", 4666, 1 },
	{ "DM_RP_PLAYER_MULTIPLIER", 4667, 0 },
	{ "DM_RP_BASIC", 4668, 0 },
	{ "DM_RP_MIN_PLAYERS", 4669, 0 },
	{ "DM_RP_MAX_PLAYERS", 4670, 0 },
	{ "DM_RP_MAX_JOB_DECIDER", 4671, 0 },
	{ "DM_RP_RANK_CAP", 4672, 0 },
	{ "DM_RP_RANK_DIVIDER", 4673, 0 },
	{ "DM_RP_END_DIVIDER", 4674, 1 },
	{ "PARACHUTING_RP_PLAYER_MULTIPLIER", 4675, 0 },
	{ "PARACHUTING_RP_BASIC", 4676, 0 },
	{ "PARACHUTING_RP_MIN_PLAYERS", 4677, 0 },
	{ "PARACHUTING_RP_MAX_PLAYERS", 4678, 0 },
	{ "PARACHUTING_RP_MAX_JOB_DECIDER", 4679, 0 },
	{ "PARACHUTING_RP_RANK_CAP", 4680, 0 },
	{ "PARACHUTING_RP_RANK_DIVIDER", 4681, 0 },
	{ "PARACHUTING_RP_END_DIVIDER", 4682, 1 },
	{ "PARACHUTING_RP_POINT_CAP", 4683, 0 },
	{ "PARACHUTING_RP_POINT_MULTIPLIER", 4684, 0 },
	{ "LTS_RP_PLAYER_MULTIPLIER", 4685, 0 },
	{ "LTS_RP_BASIC", 4686, 0 },
	{ "LTS_RP_MIN_PLAYERS", 4687, 0 },
	{ "LTS_RP_MAX_PLAYERS", 4688, 0 },
	{ "LTS_RP_MAX_JOB_DECIDER", 4689, 0 },
	{ "LTS_RP_RANK_CAP", 4690, 0 },
	{ "LTS_RP_RANK_DIVIDER", 4691, 0 },
	{ "LTS_RP_END_DIVIDER", 4692, 1 },
	{ "RACE_RP_TIME_PERIOD_MODIFIER_1", 4693, 0 },
	{ "RACE_PERCENTAGE_RP_REWARD_MODIFIER_1", 4694, 0 },
	{ "RACE_RP_TIME_PERIOD_MODIFIER_2", 4695, 0 },
	{ "RACE_PERCENTAGE_RP_REWARD_MODIFIER_2", 4696, 0 },
	{ "RACE_RP_TIME_PERIOD_MODIFIER_3", 4697, 0 },
	{ "RACE_PERCENTAGE_RP_REWARD_MODIFIER_3", 4698, 0 },
	{ "RACE_RP_TIME_PERIOD_MODIFIER_4", 4699, 0 },
	{ "RACE_PERCENTAGE_RP_REWARD_MODIFIER_4", 4700, 0 },
	{ "DM_RP_TIME_PERIOD_MODIFIER_1", 4701, 0 },
	{ "DM_PERCENTAGE_RP_REWARD_MODIFIER_1", 4702, 0 },
	{ "DM_RP_TIME_PERIOD_MODIFIER_2", 4703, 0 },
	{ "DM_PERCENTAGE_RP_REWARD_MODIFIER_2", 4704, 0 },
	{ "DM_RP_TIME_PERIOD_MODIFIER_3", 4705, 0 },
	{ "DM_PERCENTAGE_RP_REWARD_MODIFIER_3", 4706, 0 },
	{ "DM_RP_TIME_PERIOD_MODIFIER_4", 4707, 0 },
	{ "DM_PERCENTAGE_RP_REWARD_MODIFIER_4", 4708, 0 },
	{ "LTS_RP_TIME_PERIOD_MODIFIER_1", 4709, 0 },
	{ "LTS_PERCENTAGE_RP_REWARD_MODIFIER_1", 4710, 0 },
	{ "LTS_RP_TIME_PERIOD_MODIFIER_2", 4711, 0 },
	{ "LTS_PERCENTAGE_RP_REWARD_MODIFIER_2", 4712, 0 },
	{ "LTS_RP_TIME_PERIOD_MODIFIER_3", 4713, 0 },
	{ "LTS_PERCENTAGE_RP_REWARD_MODIFIER_3", 4714, 0 },
	{ "LTS_RP_TIME_PERIOD_MODIFIER_4", 4715, 0 },
	{ "LTS_PERCENTAGE_RP_REWARD_MODIFIER_4", 4716, 0 },
	{ "PARACHUTING_RP_TIME_PERIOD_MODIFIER_1", 4717, 0 },
	{ "PARACHUTING_PERCENTAGE_RP_REWARD_MODIFIER_1", 4718, 0 },
	{ "PARACHUTING_RP_TIME_PERIOD_MODIFIER_2", 4719, 0 },
	{ "PARACHUTING_PERCENTAGE_RP_REWARD_MODIFIER_2", 4720, 0 },
	{ "PARACHUTING_RP_TIME_PERIOD_MODIFIER_3", 4721, 0 },
	{ "PARACHUTING_PERCENTAGE_RP_REWARD_MODIFIER_3", 4722, 0 },
	{ "PARACHUTING_RP_TIME_PERIOD_MODIFIER_4", 4723, 0 },
	{ "PARACHUTING_PERCENTAGE_RP_REWARD_MODIFIER_4", 4724, 0 },
	{ "LTS_TIME_PERIOD_CASH_REWARD_MODIFIER_1", 4725, 0 },
	{ "LTS_PERCENTAGE_CASH_REWARD_MODIFIER_1", 4726, 0 },
	{ "LTS_TIME_PERIOD_CASH_REWARD_MODIFIER_2", 4727, 0 },
	{ "LTS_PERCENTAGE_CASH_REWARD_MODIFIER_2", 4728, 0 },
	{ "LTS_TIME_PERIOD_CASH_REWARD_MODIFIER_3", 4729, 0 },
	{ "LTS_PERCENTAGE_CASH_REWARD_MODIFIER_3", 4730, 0 },
	{ "LTS_TIME_PERIOD_CASH_REWARD_MODIFIER_4", 4731, 0 },
	{ "LTS_PERCENTAGE_CASH_REWARD_MODIFIER_4", 4732, 0 },
	{ "PARACHUTING_TIME_PERIOD_CASH_REWARD_MODIFIER_1", 4733, 0 },
	{ "PARACHUTING_PERCENTAGE_CASH_REWARD_MODIFIER_1", 4734, 0 },
	{ "PARACHUTING_TIME_PERIOD_CASH_REWARD_MODIFIER_2", 4735, 0 },
	{ "PARACHUTING_PERCENTAGE_CASH_REWARD_MODIFIER_2", 4736, 0 },
	{ "PARACHUTING_TIME_PERIOD_CASH_REWARD_MODIFIER_3", 4737, 0 },
	{ "PARACHUTING_PERCENTAGE_CASH_REWARD_MODIFIER_3", 4738, 0 },
	{ "PARACHUTING_TIME_PERIOD_CASH_REWARD_MODIFIER_4", 4739, 0 },
	{ "PARACHUTING_PERCENTAGE_CASH_REWARD_MODIFIER_4", 4740, 0 },
	{ "DELAY_LOADING_PLAYLIST", 4741, 0 },
	{ "TIMEOUT_GEN_CLONE_PEDS", 4742, 0 },
	{ "TIMEOUT_GEN_QUICK_MATCH_STUCK", 4743, 0 },
	{ "ON_CALL_TIMEOUT_MISSION_STAGE_1", 4748, 0 },
	{ "ON_CALL_TIMEOUT_DEATHMATCH_STAGE_1", 4749, 0 },
	{ "ON_CALL_TIMEOUT_RACE_STAGE_1", 4750, 0 },
	{ "ON_CALL_TIMEOUT_SURVIVAL_STAGE_1", 4751, 0 },
	{ "ON_CALL_TIMEOUT_CTF_STAGE_1", 4752, 0 },
	{ "ON_CALL_TIMEOUT_LTS_STAGE_1", 4753, 0 },
	{ "ON_CALL_TIMEOUT_BASEJUMP_STAGE_1", 4755, 0 },
	{ "ON_CALL_TIMEOUT_CONTACT_STAGE_1", 4756, 0 },
	{ "ON_CALL_TIMEOUT_VS_STAGE_1", 4757, 0 },
	{ "ON_CALL_TIMEOUT_PLAYLIST_STAGE_1", 4758, 0 },
	{ "ON_CALL_TIMEOUT_GOLF_STAGE_1", 4759, 0 },
	{ "ON_CALL_TIMEOUT_MISSION_STAGE_2", 4760, 0 },
	{ "ON_CALL_TIMEOUT_DEATHMATCH_STAGE_2", 4761, 0 },
	{ "ON_CALL_TIMEOUT_RACE_STAGE_2", 4762, 0 },
	{ "ON_CALL_TIMEOUT_SURVIVAL_STAGE_2", 4763, 0 },
	{ "ON_CALL_TIMEOUT_CTF_STAGE_2", 4764, 0 },
	{ "ON_CALL_TIMEOUT_LTS_STAGE_2", 4765, 0 },
	{ "ON_CALL_TIMEOUT_BASEJUMP_STAGE_2", 4767, 0 },
	{ "ON_CALL_TIMEOUT_CONTACT_STAGE_2", 4768, 0 },
	{ "ON_CALL_TIMEOUT_VS_STAGE_2", 4769, 0 },
	{ "ON_CALL_TIMEOUT_PLAYLIST_STAGE_2", 4770, 0 },
	{ "ON_CALL_TIMEOUT_GOLF_STAGE_2", 4771, 0 },
	{ "ON_CALL_TIMEOUT_MISSION_STAGE_3", 4772, 0 },
	{ "ON_CALL_TIMEOUT_DEATHMATCH_STAGE_3", 4773, 0 },
	{ "ON_CALL_TIMEOUT_RACE_STAGE_3", 4774, 0 },
	{ "ON_CALL_TIMEOUT_SURVIVAL_STAGE_3", 4775, 0 },
	{ "ON_CALL_TIMEOUT_CTF_STAGE_3", 4776, 0 },
	{ "ON_CALL_TIMEOUT_LTS_STAGE_3", 4777, 0 },
	{ "ON_CALL_TIMEOUT_BASEJUMP_STAGE_3", 4779, 0 },
	{ "ON_CALL_TIMEOUT_CONTACT_STAGE_3", 4780, 0 },
	{ "ON_CALL_TIMEOUT_VS_STAGE_3", 4781, 0 },
	{ "ON_CALL_TIMEOUT_PLAYLIST_STAGE_3", 4782, 0 },
	{ "ON_CALL_TIMEOUT_GOLF_STAGE_3", 4783, 0 },
	{ "ON_CALL_RATIO_MISSION_STAGE_1", 4784, 1 },
	{ "ON_CALL_RATIO_DEATHMATCH_STAGE_1", 4785, 1 },
	{ "ON_CALL_RATIO_RACE_STAGE_1", 4786, 1 },
	{ "ON_CALL_RATIO_SURVIVAL_STAGE_1", 4787, 1 },
	{ "ON_CALL_RATIO_CTF_STAGE_1", 4788, 1 },
	{ "ON_CALL_RATIO_LTS_STAGE_1", 4789, 1 },
	{ "ON_CALL_RATIO_BASEJUMP_STAGE_1", 4791, 1 },
	{ "ON_CALL_RATIO_CONTACT_STAGE_1", 4792, 1 },
	{ "ON_CALL_RATIO_VS_STAGE_1", 4793, 1 },
	{ "ON_CALL_RATIO_PLAYLIST_STAGE_1", 4794, 1 },
	{ "ON_CALL_RATIO_GOLF_STAGE_1", 4795, 1 },
	{ "ON_CALL_RATIO_MISSION_STAGE_2", 4796, 1 },
	{ "ON_CALL_RATIO_DEATHMATCH_STAGE_2", 4797, 1 },
	{ "ON_CALL_RATIO_RACE_STAGE_2", 4798, 1 },
	{ "ON_CALL_RATIO_SURVIVAL_STAGE_2", 4799, 1 },
	{ "ON_CALL_RATIO_CTF_STAGE_2", 4800, 1 },
	{ "ON_CALL_RATIO_LTS_STAGE_2", 4801, 1 },
	{ "ON_CALL_RATIO_BASEJUMP_STAGE_2", 4803, 1 },
	{ "ON_CALL_RATIO_CONTACT_STAGE_2", 4804, 1 },
	{ "ON_CALL_RATIO_VS_STAGE_2", 4805, 1 },
	{ "ON_CALL_RATIO_PLAYLIST_STAGE_2", 4806, 1 },
	{ "ON_CALL_RATIO_GOLF_STAGE_2", 4807, 1 },
	{ "ON_CALL_RATIO_MISSION_STAGE_3", 4808, 1 },
	{ "ON_CALL_RATIO_DEATHMATCH_STAGE_3", 4809, 1 },
	{ "ON_CALL_RATIO_RACE_STAGE_3", 4810, 1 },
	{ "ON_CALL_RATIO_SURVIVAL_STAGE_3", 4811, 1 },
	{ "ON_CALL_RATIO_CTF_STAGE_3", 4812, 1 },
	{ "ON_CALL_RATIO_LTS_STAGE_3", 4813, 1 },
	{ "ON_CALL_RATIO_BASEJUMP_STAGE_3", 4815, 1 },
	{ "ON_CALL_RATIO_CONTACT_STAGE_3", 4816, 1 },
	{ "ON_CALL_RATIO_VS_STAGE_3", 4817, 1 },
	{ "ON_CALL_RATIO_PLAYLIST_STAGE_3", 4818, 1 },
	{ "ON_CALL_RATIO_GOLF_STAGE_3", 4819, 1 },
	{ "ON_CALL_RATIO_MISSION_STAGE_4", 4820, 1 },
	{ "ON_CALL_RATIO_DEATHMATCH_STAGE_4", 4821, 1 },
	{ "ON_CALL_RATIO_RACE_STAGE_4", 4822, 1 },
	{ "ON_CALL_RATIO_SURVIVAL_STAGE_4", 4823, 1 },
	{ "ON_CALL_RATIO_CTF_STAGE_4", 4824, 1 },
	{ "ON_CALL_RATIO_LTS_STAGE_4", 4825, 1 },
	{ "ON_CALL_RATIO_BASEJUMP_STAGE_4", 4827, 1 },
	{ "ON_CALL_RATIO_CONTACT_STAGE_4", 4828, 1 },
	{ "ON_CALL_RATIO_VS_STAGE_4", 4829, 1 },
	{ "ON_CALL_RATIO_PLAYLIST_STAGE_4", 4830, 1 },
	{ "ON_CALL_RATIO_GOLF_STAGE_4", 4831, 1 },
	{ "TIMEOUT_GEN_ON_CALL_START", 4832, 0 },
	{ "TIMEOUT_ON_CALL_RATIO", 4833, 1 },
	{ "ON_CALL_MAX_QUICKMATCH_ATTEMPTS", 4834, 0 },
	{ "NJVS_SYNC_WINDOW", 4835, 0 },
	{ "ON_CALL_TIMEOUT_HOSTING", 4836, 0 },
	{ "ON_CALL_DISABLE_TIMEOUT_HOSTING", 4838, 2 },
	{ "ON_CALL_MAX_VALIDATE_JOB_RATING", 4839, 0 },
	{ "ON_CALL_RAND_HOST_CHANCE", 4840, 0 },
	{ "ON_CALL_JOB_RATING_THRESHOLD", 4841, 0 },
	{ "MAX_PLAYERS_ON_CALL", 4842, 0 },
	{ "ON_CALL_DISABLED", 4843, 2 },
	{ "ON_CALL_MINI_DISABLED", 4865, 2 },
	{ "RANDOM_BOOT_DISABLED", 4866, 2 },
	{ "HOSPITAL_BILL_MULTIPLIER", 4872, 1 },
	{ "CASH_DROP_MULTIPLIER", 4873, 1 },
	{ "WANTED_LEVEL_BAIL_MULTIPLIER", 4874, 1 },
	{ "OVERWRITE_CLOUD_VS_MISSION_AWARDS", 4875, 2 },
	{ "BODHI2_EXPENDITURE_MODIFIER", 4876, 0 },
	{ "DUNE_EXPENDITURE_MODIFIER", 4877, 0 },
	{ "REBEL_EXPENDITURE_MODIFIER", 4878, 0 },
	{ "SADLER_EXPENDITURE_MODIFIER", 4879, 0 },
	{ "SANCHEZ2_EXPENDITURE_MODIFIER", 4880, 0 },
	{ "SANDKING2_EXPENDITURE_MODIFIER", 4881, 0 },
	{ "RANK_RESTRICTION_CRATE_DROP", 4882, 2 },
	{ "PLAYER_RESTRICTION_CRATE_DROP", 4883, 0 },
	{ "CRATE_DROP_DISABLE_WEAPON_CHECK", 4884, 2 },
	{ "LOCAL_PLAYER_AUTOMUTE_TALKER_LIMIT", 4886, 0 },
	{ "TURN_SNOW_ON_OFF", 4887, 2 },
	{ "TURN_SNAPMATIC_ON_OFF", 4888, 2 },
	{ "BAD_SPORT_QUITTING_PLAYLIST", 4889, 1 },
	{ "BAD_SPORT_QUITTING_EVENT_PLAYLIST", 4890, 1 },
	{ "ELO_BANDING_SPACING", 4891, 0 },
	{ "DISABLE_QUICK_JOB_WITH_FRIENDS", 4892, 2 },
	{ "DISABLE_NJVS_QM", 4893, 2 },
	{ "MAX_CASH_WAGER_FOR_HEAD_TO_HEAD", 4896, 0 },
	{ "MAX_CASH_WAGER_FOR_CREW_CHALLENGES", 4897, 0 },
	{ "TOGGLE_XMAS_CONTENT", 4898, 2 },
	{ "TOGGLE_CREATORS_OFF", 4899, 2 },
	{ "TOGGLE_HEAD_TO_HEAD_OFF", 4900, 2 },
	{ "RP_REWARD_PER_LIKE", 4903, 0 },
	{ "RP_REWARD_LIKE_CAP", 4904, 0 },
	{ "Purchased_car_sale_depreciation", 4905, 1 },
	{ "Purchased_car_mod_sale_discount", 4906, 1 },
	{ "Purchased_car_sale_max_cap", 4907, 0 },
	{ "FM_CORONA_PLAYLIST_CORONA_PLAYLIST_START", 5373, 0 },
	{ "COLLISION_OFF_IN_PREMIUM_RACES", 5405, 2 },
	{ "Discount_male_special_Suit_Vest_Pale_Blue_Vest", 5407, 0 },
	{ "Discount_male_special_Suit_Vest_Olive_Vest", 5408, 0 },
	{ "Discount_male_special_Suit_Vest_Purple_Vest", 5409, 0 },
	{ "Discount_male_special_Suit_Vest_Lobster_Vest", 5410, 0 },
	{ "Discount_male_special_Suit_Vest_Subtle_Blue_Vest", 5411, 0 },
	{ "Discount_male_special_Suit_Vest_Brown_Vest", 5412, 0 },
	{ "Discount_male_special_Suit_Vest_Beige_Plaid_Vest", 5413, 0 },
	{ "Discount_male_special_Suit_Vest_Off_White_Vest", 5414, 0 },
	{ "Discount_male_special_Suit_Vest_Ash_Vest", 5415, 0 },
	{ "Discount_male_special_Suit_Vest_Navy_Plaid_Vest", 5416, 0 },
	{ "Discount_male_special_Suit_Vest_Ash_Plaid_Vest", 5417, 0 },
	{ "Discount_male_special_Suit_Vest_Blue_Plaid_Vest", 5418, 0 },
	{ "Discount_male_special_Suit_Vest_White_Vest", 5419, 0 },
	{ "Discount_male_accessories_Blue_Tie", 5420, 0 },
	{ "Discount_male_accessories_Navy_Tie", 5421, 0 },
	{ "Discount_male_accessories_Red_Tie", 5422, 0 },
	{ "Discount_male_accessories_Green_Tie", 5423, 0 },
	{ "Discount_male_accessories_Orange_Tie", 5424, 0 },
	{ "Discount_male_accessories_Yellow_Tie", 5425, 0 },
	{ "Discount_male_accessories_Purple_Tie", 5426, 0 },
	{ "Discount_male_accessories_Brown_Tie", 5427, 0 },
	{ "Discount_male_accessories_Stone_Tie", 5428, 0 },
	{ "Discount_male_accessories_Two_Tone_Plaid_Tie", 5429, 0 },
	{ "Discount_male_accessories_Tan_Plaid_Tie", 5430, 0 },
	{ "Discount_male_accessories_Gold_Striped_Tie", 5431, 0 },
	{ "Discount_male_accessories_Red_Striped_Tie", 5432, 0 },
	{ "Discount_male_accessories_White_BowTie", 5433, 0 },
	{ "Discount_male_accessories_Gray_BowTie", 5434, 0 },
	{ "Discount_male_accessories_Blue_BowTie", 5435, 0 },
	{ "Discount_male_accessories_Navy_BowTie", 5436, 0 },
	{ "Discount_male_accessories_Red_BowTie", 5437, 0 },
	{ "Discount_male_accessories_Green_BowTie", 5438, 0 },
	{ "Discount_male_accessories_Orange_BowTie", 5439, 0 },
	{ "Discount_male_accessories_Yellow_BowTie", 5440, 0 },
	{ "Discount_male_accessories_Purple_BowTie", 5441, 0 },
	{ "Discount_male_accessories_Brown_BowTie", 5442, 0 },
	{ "Discount_male_accessories_Stone_BowTie", 5443, 0 },
	{ "Discount_male_accessories_Blue_Plaid_BowTie", 5444, 0 },
	{ "Discount_male_accessories_Orange_Plaid_BowTie", 5445, 0 },
	{ "Discount_male_accessories_Earth_BowTie", 5446, 0 },
	{ "Discount_male_accessories_Red_Plaid_BowTie", 5447, 0 },
	{ "Discount_male_accessories_Blue_Skinny_Tie", 5448, 0 },
	{ "Discount_male_accessories_Navy_Skinny_Tie", 5449, 0 },
	{ "Discount_male_accessories_Red_Skinny_Tie", 5450, 0 },
	{ "Discount_male_accessories_Green_Skinny_Tie", 5451, 0 },
	{ "Discount_male_accessories_Orange_Skinny_Tie", 5452, 0 },
	{ "Discount_male_accessories_Yellow_Skinny_Tie", 5453, 0 },
	{ "Discount_male_accessories_Purple_Skinny_Tie", 5454, 0 },
	{ "Discount_male_accessories_Brown_Skinny_Tie", 5455, 0 },
	{ "Discount_male_accessories_Stone_Skinny_Tie", 5456, 0 },
	{ "Discount_male_accessories_Two_Tone_Plaid_Skinny_Tie", 5457, 0 },
	{ "Discount_male_accessories_Tan_Plaid_Skinny_Tie", 5458, 0 },
	{ "Discount_male_accessories_Gold_Striped_Skinny_Tie", 5459, 0 },
	{ "Discount_male_accessories_Red_Striped_Skinny_Tie", 5460, 0 },
	{ "BOOT_BUTTON_QUICK_MATCH_TYPE", 5461, 0 },
	{ "Dicount_female_accessories_Spotted_Bow_Scarf", 5466, 0 },
	{ "Dicount_female_accessories_Floral_Bow_Scarf", 5467, 0 },
	{ "Dicount_female_accessories_Pink_Bow_Scarf", 5468, 0 },
	{ "Dicount_female_accessories_Red_Bow_Scarf", 5469, 0 },
	{ "Dicount_female_accessories_Leopard_Bow_Scarf", 5470, 0 },
	{ "Dicount_female_accessories_White_Bow_Scarf", 5471, 0 },
	{ "BUSINESS_VEHICLES_ALPHA", 5472, 0 },
	{ "BUSINESS_VEHICLES_HUNTLEY", 5473, 0 },
	{ "BUSINESS_VEHICLES_JESTER", 5474, 0 },
	{ "BUSINESS_VEHICLES_MASSACRO", 5475, 0 },
	{ "BUSINESS_VEHICLES_TURISMOR", 5476, 0 },
	{ "business_vehicles_Zentorno", 5477, 0 },
	{ "BUSINESS_VEHICLES_ASTEROPE", 5478, 0 },
	{ "BUSINESS_VEHICLES_BOBCATXL", 5479, 0 },
	{ "BUSINESS_VEHICLES_CAVALCADE2", 5480, 0 },
	{ "BUSINESS_VEHICLES_GRANGER", 5481, 0 },
	{ "BUSINESS_VEHICLES_INGOT", 5482, 0 },
	{ "BUSINESS_VEHICLES_INTRUDER", 5483, 0 },
	{ "BUSINESS_VEHICLES_MINIVAN", 5484, 0 },
	{ "BUSINESS_VEHICLES_PREMIER", 5485, 0 },
	{ "BUSINESS_VEHICLES_RADI", 5486, 0 },
	{ "BUSINESS_VEHICLES_RANCHERXL", 5487, 0 },
	{ "BUSINESS_VEHICLES_STANIER", 5488, 0 },
	{ "BUSINESS_VEHICLES_STRATUM", 5489, 0 },
	{ "BUSINESS_VEHICLES_WASHINGTON", 5490, 0 },
	{ "CAP_MAX_AMOUNT_CASH_TO_SHARE", 5491, 0 },
	{ "CAP_MAX_AMOUNT_CASH_PICKUP", 5492, 0 },
	{ "CAP_MAX_AMOUNT_CASH_RECIEVED", 5493, 0 },
	{ "STRIPBAR_SHOTS_AT_BAR_PRICE_MODIFIER", 5494, 0 },
	{ "STRIPBAR_DANCE_PRICE_MODIFIER", 5495, 0 },
	{ "CRATEDROPLOCATION2", 5496, 0 },
	{ "CRATEDROPLOCATION3", 5497, 0 },
	{ "CRATEDROPLOCATION4", 5498, 0 },
	{ "CRATEDROPLOCATION5", 5499, 0 },
	{ "PARACHUTING_CASH_POINT_MAX_CAP", 5500, 0 },
	{ "PARACHUTING_CASH_POINT_MULTIPLIER", 5501, 0 },
	{ "VALENTINE_MODIFIER_CADDY_SEDAN", 5502, 0 },
	{ "VALENTINE_MODIFIER_CADDY_GUSENBERG", 5503, 0 },
	{ "VALENTINE_MODIFIER_CLOTHING_MULTIPLIER", 5504, 1 },
	{ "VALENTINES_MODIFIER_HAIRCUTS_MULTIPLIER", 5505, 1 },
	{ "TURN_ON_VALENTINES_EVENT", 5506, 2 },
	{ "VALENTINE_MODIFIER_VEHICLE_RATLOADER", 5507, 0 },
	{ "valentine_Gusenberg_WEAPONMOD_EXTENDED_CLIP", 5508, 0 },
	{ "valentine_Gusenberg_AMMO", 5509, 0 },
	{ "MAX_NUMBER_STOLEN_VEHICLES_SOLD_DAILY", 5516, 0 },
	{ "XP_TUNABLE_PARACHUTING_DEAD_CENTRE", 5517, 0 },
	{ "XP_TUNABLE_PARACHUTING_IN_THE_CIRCLE", 5518, 0 },
	{ "XP_TUNABLE_PARACHUTING_CLIP_THE_OUTER_RING", 5519, 0 },
	{ "SURVIVAL_CASH_REWARD", 5520, 0 },
	{ "ROCKSTAR_VERIFIED_RP_BONUS", 5521, 0 },
	{ "IDLE_DM_BOUNTY", 5522, 0 },
	{ "Selling_Stolen_Vehicle_Cap", 5523, 0 },
	{ "Selling_Stolen_Personal_Vehicle_Cap", 5524, 0 },
	{ "Selling_Purchased_Personal_Vehicle_Cap", 5525, 0 },
	{ "Lottery_ticket_cost", 5526, 0 },
	{ "BUSINESS_VEHICLE_VESTRA", 5527, 0 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_PURPLE_EXPENDITURE_TUNABLE_BIKE", 5529, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_GREEN_EXPENDITURE_TUNABLE_BIKE", 5530, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_PURPLE_EXPENDITURE_TUNABLE_SPORT", 5531, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_GREEN_EXPENDITURE_TUNABLE_SPORT", 5532, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_PURPLE_EXPENDITURE_TUNABLE", 5533, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_GREEN_EXPENDITURE_TUNABLE", 5534, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_PURPLE_EXPENDITURE_TUNABLE_SUV", 5535, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_GREEN_EXPENDITURE_TUNABLE_SUV", 5536, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_PURPLE_EXPENDITURE_TUNABLE_SPECIAL", 5537, 1 },
	{ "CARMOD_UNLOCK_TYRE_SMOKE_GREEN_EXPENDITURE_TUNABLE_SPECIAL", 5538, 1 },
	{ "TOGGLE_CTF_CONTENT", 5539, 2 },
	{ "TOGGLE_LTS_CONTENT", 5540, 2 },
	{ "COMMENDREPORT_MAX_STRENGTH", 5541, 0 },
	{ "JOB_RP_CAP", 5542, 0 },
	{ "PLAYER_KILL_RP_DM_CAP", 5543, 0 },
	{ "PLAYER_KILL_RP_RACE_CAP", 5544, 0 },
	{ "PLAYER_KILL_RP_MISSION_CAP", 5545, 0 },
	{ "MISSION_AI_KILL_RP", 5546, 0 },
	{ "MISSION_AI_KILL_AMOUNT_CAP", 5547, 0 },
	{ "RACE_WORLD_RECORD_RP", 5548, 0 },
	{ "KILL_A_MUGGER_RP", 5549, 0 },
	{ "SING_IN_SHOWER_RP", 5550, 0 },
	{ "PLAYLIST_WINNER_RP", 5551, 0 },
	{ "LESTER_BOUNTY_CUT", 5552, 0 },
	{ "REQUEST_A_JOB_FEE", 5553, 0 },
	{ "MECHANIC_DAILY_FEE", 5554, 0 },
	{ "PLAYER_CASHDROP_CAP", 5555, 0 },
	{ "PLAYLIST_ENTRY_FEE", 5556, 0 },
	{ "MUGGER_AMOUNT_STEAL", 5557, 0 },
	{ "MUGGER_STEAL_CAP", 5558, 0 },
	{ "LOSE_WANTED_LEVEL_1_CAP", 5559, 0 },
	{ "LOSE_WANTED_LEVEL_2_CAP", 5560, 0 },
	{ "LOSE_WANTED_LEVEL_3_CAP", 5561, 0 },
	{ "LOSE_WANTED_LEVEL_4_CAP", 5562, 0 },
	{ "LOSE_WANTED_LEVEL_5_CAP", 5563, 0 },
	{ "BUSINESS2_THRUST_PRICE", 5565, 0 },
	{ "RP_REWARD_LIKE_CAP_PER_AWARD", 5566, 0 },
	{ "DISABLE_EVENT_CRATE_DROP", 5567, 2 },
	{ "DISABLE_EVENT_ARMOURED_TRUCK", 5568, 2 },
	{ "DISABLE_EVENT_HIGH_PRIORITY_VEHICLE", 5569, 2 },
	{ "DISABLE_EVENT_JOYRIDER", 5570, 2 },
	{ "PLAYLIST_EVENT_GIFT_ACTIVE", 5571, 2 },
	{ "VERSUS_MISSION_TIME_1", 5572, 1 },
	{ "VERSUS_MISSION_TIME_2", 5573, 1 },
	{ "VERSUS_MISSION_TIME_3", 5574, 1 },
	{ "VERSUS_MISSION_TIME_4", 5575, 1 },
	{ "VERSUS_MISSION_TIME_5", 5576, 1 },
	{ "VERSUS_MISSION_TIME_6", 5577, 1 },
	{ "VERSUS_WINNER_RP_DIVIDER_TIME_1", 5578, 1 },
	{ "VERSUS_WINNER_RP_DIVIDER_TIME_2", 5579, 1 },
	{ "VERSUS_WINNER_RP_DIVIDER_TIME_3", 5580, 1 },
	{ "VERSUS_WINNER_RP_DIVIDER_TIME_4", 5581, 1 },
	{ "VERSUS_WINNER_RP_DIVIDER_TIME_5", 5582, 1 },
	{ "VERSUS_WINNER_RP_DIVIDER_TIME_6", 5583, 1 },
	{ "VERSUS_WINNER_CASH_DIVIDER_TIME_1", 5584, 1 },
	{ "VERSUS_WINNER_CASH_DIVIDER_TIME_2", 5585, 1 },
	{ "VERSUS_WINNER_CASH_DIVIDER_TIME_3", 5586, 1 },
	{ "VERSUS_WINNER_CASH_DIVIDER_TIME_4", 5587, 1 },
	{ "VERSUS_WINNER_CASH_DIVIDER_TIME_5", 5588, 1 },
	{ "VERSUS_WINNER_CASH_DIVIDER_TIME_6", 5589, 1 },
	{ "VERSUS_LOSER_1_RP_DIVIDER_TIME_1", 5590, 1 },
	{ "VERSUS_LOSER_1_RP_DIVIDER_TIME_2", 5591, 1 },
	{ "VERSUS_LOSER_1_RP_DIVIDER_TIME_3", 5592, 1 },
	{ "VERSUS_LOSER_1_RP_DIVIDER_TIME_4", 5593, 1 },
	{ "VERSUS_LOSER_1_RP_DIVIDER_TIME_5", 5594, 1 },
	{ "VERSUS_LOSER_1_RP_DIVIDER_TIME_6", 5595, 1 },
	{ "VERSUS_LOSER_1_CASH_DIVIDER_TIME_1", 5596, 1 },
	{ "VERSUS_LOSER_1_CASH_DIVIDER_TIME_2", 5597, 1 },
	{ "VERSUS_LOSER_1_CASH_DIVIDER_TIME_3", 5598, 1 },
	{ "VERSUS_LOSER_1_CASH_DIVIDER_TIME_4", 5599, 1 },
	{ "VERSUS_LOSER_1_CASH_DIVIDER_TIME_5", 5600, 1 },
	{ "VERSUS_LOSER_1_CASH_DIVIDER_TIME_6", 5601, 1 },
	{ "VERSUS_LOSER_2_RP_DIVIDER_TIME_1", 5602, 1 },
	{ "VERSUS_LOSER_2_RP_DIVIDER_TIME_2", 5603, 1 },
	{ "VERSUS_LOSER_2_RP_DIVIDER_TIME_3", 5604, 1 },
	{ "VERSUS_LOSER_2_RP_DIVIDER_TIME_4", 5605, 1 },
	{ "VERSUS_LOSER_2_RP_DIVIDER_TIME_5", 5606, 1 },
	{ "VERSUS_LOSER_2_RP_DIVIDER_TIME_6", 5607, 1 },
	{ "VERSUS_LOSER_2_CASH_DIVIDER_TIME_1", 5608, 1 },
	{ "VERSUS_LOSER_2_CASH_DIVIDER_TIME_2", 5609, 1 },
	{ "VERSUS_LOSER_2_CASH_DIVIDER_TIME_3", 5610, 1 },
	{ "VERSUS_LOSER_2_CASH_DIVIDER_TIME_4", 5611, 1 },
	{ "VERSUS_LOSER_2_CASH_DIVIDER_TIME_5", 5612, 1 },
	{ "VERSUS_LOSER_2_CASH_DIVIDER_TIME_6", 5613, 1 },
	{ "VERSUS_LOSER_3_RP_DIVIDER_TIME_1", 5614, 1 },
	{ "VERSUS_LOSER_3_RP_DIVIDER_TIME_2", 5615, 1 },
	{ "VERSUS_LOSER_3_RP_DIVIDER_TIME_3", 5616, 1 },
	{ "VERSUS_LOSER_3_RP_DIVIDER_TIME_4", 5617, 1 },
	{ "VERSUS_LOSER_3_RP_DIVIDER_TIME_5", 5618, 1 },
	{ "VERSUS_LOSER_3_RP_DIVIDER_TIME_6", 5619, 1 },
	{ "VERSUS_LOSER_3_CASH_DIVIDER_TIME_1", 5620, 1 },
	{ "VERSUS_LOSER_3_CASH_DIVIDER_TIME_2", 5621, 1 },
	{ "VERSUS_LOSER_3_CASH_DIVIDER_TIME_3", 5622, 1 },
	{ "VERSUS_LOSER_3_CASH_DIVIDER_TIME_4", 5623, 1 },
	{ "VERSUS_LOSER_3_CASH_DIVIDER_TIME_5", 5624, 1 },
	{ "VERSUS_LOSER_3_CASH_DIVIDER_TIME_6", 5625, 1 },
	{ "DLC_FEMALE_HAIR_MESSY_BUN_CHESTNUT", 5930, 0 },
	{ "DLC_FEMALE_HAIR_MESSY_BUN_BLONDE", 5931, 0 },
	{ "DLC_FEMALE_HAIR_MESSY_BUN_AUBURN", 5932, 0 },
	{ "DLC_FEMALE_HAIR_MESSY_BUN_BLACK", 5933, 0 },
	{ "DLC_FEMALE_HAIR_MESSY_BUN_BROWN", 5934, 0 },
	{ "DLC_FEMALE_HAIR_PIN_UP_GIRL_CHESTNUT", 5935, 0 },
	{ "DLC_FEMALE_HAIR_PIN_UP_GIRL_BLONDE", 5936, 0 },
	{ "DLC_FEMALE_HAIR_PIN_UP_GIRL_AUBURN", 5937, 0 },
	{ "DLC_FEMALE_HAIR_PIN_UP_GIRL_BLACK", 5938, 0 },
	{ "DLC_FEMALE_HAIR_PIN_UP_GIRL_BROWN", 5939, 0 },
	{ "DLC_FEMALE_HAIR_TWISTED_BOB_CHESTNUT", 5940, 0 },
	{ "DLC_FEMALE_HAIR_TWISTED_BOB_BLACK", 5941, 0 },
	{ "DLC_FEMALE_HAIR_TWISTED_BOB_AUBURN", 5942, 0 },
	{ "DLC_FEMALE_HAIR_TWISTED_BOB_BROWN", 5943, 0 },
	{ "DLC_FEMALE_HAIR_TWISTED_BOB_BLONDE", 5944, 0 },
	{ "DLC_FEMALE_HAIR_TIGHT_BUN_CHESTNUT", 5945, 0 },
	{ "DLC_FEMALE_HAIR_TIGHT_BUN_BLONDE", 5946, 0 },
	{ "DLC_FEMALE_HAIR_TIGHT_BUN_AUBURN", 5947, 0 },
	{ "DLC_FEMALE_HAIR_TIGHT_BUN_BLACK", 5948, 0 },
	{ "DLC_FEMALE_HAIR_TIGHT_BUN_BROWN", 5949, 0 },
	{ "DLC_MALE_HAIR_SURFER_DUDE_DARK_BROWN", 5950, 0 },
	{ "DLC_MALE_HAIR_SURFER_DUDE_LIGHT_BROWN", 5951, 0 },
	{ "DLC_MALE_HAIR_SURFER_DUDE_AUBURN", 5952, 0 },
	{ "DLC_MALE_HAIR_SURFER_DUDE_BLONDE", 5953, 0 },
	{ "DLC_MALE_HAIR_SURFER_DUDE_BLACK", 5954, 0 },
	{ "DLC_MALE_HAIR_SHAGGY_CURLS_DARK_BROWN", 5955, 0 },
	{ "DLC_MALE_HAIR_SHAGGY_CURLS_LIGHT_BROWN", 5956, 0 },
	{ "DLC_MALE_HAIR_SHAGGY_CURLS_AUBURN", 5957, 0 },
	{ "DLC_MALE_HAIR_SHAGGY_CURLS_BLONDE", 5958, 0 },
	{ "DLC_MALE_HAIR_SHAGGY_CURLS_BLACK", 5959, 0 },
	{ "DLC_MALE_HAIR_HIGH_SLICKED_SIDES_DARK_BROWN", 5960, 0 },
	{ "DLC_MALE_HAIR_HIGH_SLICKED_SIDES_LIGHT_BROWN", 5961, 0 },
	{ "DLC_MALE_HAIR_HIGH_SLICKED_SIDES_AUBURN", 5962, 0 },
	{ "DLC_MALE_HAIR_HIGH_SLICKED_SIDES_BLONDE", 5963, 0 },
	{ "DLC_MALE_HAIR_HIGH_SLICKED_SIDES_BLACK", 5964, 0 },
	{ "DLC_MALE_HAIR_SHORT_SIDE_PART_DARK_BROWN", 5965, 0 },
	{ "DLC_MALE_HAIR_SHORT_SIDE_PART_LIGHT_BROWN", 5966, 0 },
	{ "DLC_MALE_HAIR_SHORT_SIDE_PART_AUBURN", 5967, 0 },
	{ "DLC_MALE_HAIR_SHORT_SIDE_PART_BLONDE", 5968, 0 },
	{ "DLC_MALE_HAIR_SHORT_SIDE_PART_BLACK", 5969, 0 },
	{ "DLC_WEAPON_TINT_GOLD_SNS_PISTOL", 5970, 0 },
	{ "DLC_WEAPON_TINT_PLATINUM_SNS_PISTOL", 5971, 0 },
	{ "DLC_WEAPON_TINT_ARMY_SNS_PISTOL", 5972, 0 },
	{ "DLC_WEAPON_TINT_GREEN_SNS_PISTOL", 5973, 0 },
	{ "DLC_WEAPON_TINT_ORANGE_SNS_PISTOL", 5974, 0 },
	{ "DLC_WEAPON_TINT_LSPD_SNS_PISTOL", 5975, 0 },
	{ "DLC_WEAPON_TINT_PINK_SNS_PISTOL", 5976, 0 },
	{ "DLC_WEAPON_TINT_GOLD_SPECIAL_CARBINE", 5977, 0 },
	{ "DLC_WEAPON_TINT_PLATINUM_SPECIAL_CARBINE", 5978, 0 },
	{ "DLC_WEAPON_TINT_ARMY_SPECIAL_CARBINE", 5979, 0 },
	{ "DLC_WEAPON_TINT_GREEN_SPECIAL_CARBINE", 5980, 0 },
	{ "DLC_WEAPON_TINT_ORANGE_SPECIAL_CARBINE", 5981, 0 },
	{ "DLC_WEAPON_TINT_LSPD_SPECIAL_CARBINE", 5982, 0 },
	{ "DLC_WEAPON_TINT_PINK_SPECIAL_CARBINE", 5983, 0 },
	{ "DLC_WEAPON_TINT_GOLD_HEAVY_PISTOL", 5984, 0 },
	{ "DLC_WEAPON_TINT_PLATINUM_HEAVY_PISTOL", 5985, 0 },
	{ "DLC_WEAPON_TINT_ARMY_HEAVY_PISTOL", 5986, 0 },
	{ "DLC_WEAPON_TINT_GREEN_HEAVY_PISTOL", 5987, 0 },
	{ "DLC_WEAPON_TINT_ORANGE_HEAVY_PISTOL", 5988, 0 },
	{ "DLC_WEAPON_TINT_LSPD_HEAVY_PISTOL", 5989, 0 },
	{ "DLC_WEAPON_TINT_PINK_HEAVY_PISTOL", 5990, 0 },
	{ "DLC_WEAPON_TINT_GOLD_BULLPUP_RIFLE", 5991, 0 },
	{ "DLC_WEAPON_TINT_PLATINUM_BULLPUP_RIFLE", 5992, 0 },
	{ "DLC_WEAPON_TINT_ARMY_BULLPUP_RIFLE", 5993, 0 },
	{ "DLC_WEAPON_TINT_GREEN_BULLPUP_RIFLE", 5994, 0 },
	{ "DLC_WEAPON_TINT_ORANGE_BULLPUP_RIFLE", 5995, 0 },
	{ "DLC_WEAPON_TINT_LSPD_BULLPUP_RIFLE", 5996, 0 },
	{ "DLC_WEAPON_TINT_PINK_BULLPUP_RIFLE", 5997, 0 },
	{ "DLC_APPARTMENTS_ECLIPSE_TOWERS_APT_3", 5998, 0 },
	{ "DLC_APPARTMENTS_DEL_PERRO_HEIGHTS_APT_4", 5999, 0 },
	{ "DLC_APPARTMENTS_RICHARDS_MAJESTIC_APT_2", 6000, 0 },
	{ "DLC_APPARTMENTS_TINSEL_TOWERS_APT_42", 6001, 0 },
	{ "DLC_FEMALE_TATTOOS_LOS_SANTOS_WREATH", 6003, 0 },
	{ "DLC_FEMALE_TATTOOS_HIBISCUS_FLOWER_DUO", 6004, 0 },
	{ "DLC_FEMALE_TATTOOS_TRIBAL_FLOWER", 6005, 0 },
	{ "DLC_FEMALE_TATTOOS_ROCK_SOLID", 6006, 0 },
	{ "DLC_FEMALE_TATTOOS_CATFISH", 6007, 0 },
	{ "DLC_FEMALE_TATTOOS_SHRIMP", 6008, 0 },
	{ "DLC_FEMALE_TATTOOS_LOVE_DAGGER", 6009, 0 },
	{ "DLC_FEMALE_TATTOOS_SCHOOL_OF_FISH", 6010, 0 },
	{ "DLC_FEMALE_TATTOOS_TRIBAL_BUTTERFLY", 6011, 0 },
	{ "DLC_FEMALE_TATTOOS_HIBISCUS_FLOWER", 6012, 0 },
	{ "DLC_FEMALE_TATTOOS_DOLPHIN", 6013, 0 },
	{ "DLC_FEMALE_TATTOOS_SEA_HORSES", 6014, 0 },
	{ "DLC_FEMALE_TATTOOS_ANCHOR", 6015, 0 },
	{ "DLC_FEMALE_TATTOOS_SWALLOW", 6016, 0 },
	{ "DLC_FEMALE_TATTOOS_TRIBAL_FISH", 6017, 0 },
	{ "DLC_FEMALE_TATTOOS_PARROT", 6018, 0 },
	{ "DLC_FEMALE_TATTOOS_HIGH_ROLLER", 6019, 0 },
	{ "DLC_FEMALE_TATTOOS_RESPECT", 6020, 0 },
	{ "DLC_FEMALE_TATTOOS_SINGLE", 6021, 0 },
	{ "DLC_FEMALE_TATTOOS_VALDEGRACE_LOGO", 6022, 0 },
	{ "DLC_FEMALE_TATTOOS_MONEY_ROSE", 6023, 0 },
	{ "DLC_FEMALE_TATTOOS_DIAMOND_CROWN", 6024, 0 },
	{ "DLC_FEMALE_TATTOOS_DOLLAR_SIGN", 6025, 0 },
	{ "DLC_FEMALE_TATTOOS_DIAMOND_JACK", 6026, 0 },
	{ "DLC_FEMALE_TATTOOS_MAKIN_MONEY", 6027, 0 },
	{ "DLC_FEMALE_TATTOOS_GOLD_DIGGER", 6028, 0 },
	{ "DLC_FEMALE_TATTOOS_GREED_IS_GOOD", 6029, 0 },
	{ "DLC_FEMALE_TATTOOS_LOVE_MONEY", 6030, 0 },
	{ "DLC_FEMALE_TATTOOS_SANTO_CAPRA_LOGO", 6031, 0 },
	{ "DLC_FEMALE_TATTOOS_MONEY_BAG", 6032, 0 },
	{ "DLC_FEMALE_TATTOOS_CREW_EMBLEM_CHEST", 6033, 0 },
	{ "DLC_FEMALE_TATTOOS_CREW_EMBLEM_ARM", 6034, 0 },
	{ "DLC_MALE_TATTOO_MERMAID_LS", 6035, 0 },
	{ "DLC_MALE_TATTOO_SHIP_ARMS", 6036, 0 },
	{ "DLC_MALE_TATTOO_TRIBAL_HAMMERHEAD", 6037, 0 },
	{ "DLC_MALE_TATTOO_TRIBAL_SHARK", 6038, 0 },
	{ "DLC_MALE_TATTOO_PIRATE_SKULL", 6039, 0 },
	{ "DLC_MALE_TATTOO_SURF_LS", 6040, 0 },
	{ "DLC_MALE_TATTOO_SWORDFISH", 6041, 0 },
	{ "DLC_MALE_TATTOO_TIKI_TOWER", 6042, 0 },
	{ "DLC_MALE_TATTOO_TRIBAL_TIKI_TOWER", 6043, 0 },
	{ "DLC_MALE_TATTOO_TRIBAL_SUN", 6044, 0 },
	{ "DLC_MALE_TATTOO_TRIBAL_STAR", 6045, 0 },
	{ "DLC_MALE_TATTOO_LITTLE_FISH", 6046, 0 },
	{ "DLC_MALE_TATTOO_SURFS_UP", 6047, 0 },
	{ "DLC_MALE_TATTOO_VESPUCCI_BEAUTY", 6048, 0 },
	{ "DLC_MALE_TATTOO_SHARK", 6049, 0 },
	{ "DLC_MALE_TATTOO_WHEEL", 6050, 0 },
	{ "DLC_MALE_TATTOO_CASH_KING", 6051, 0 },
	{ "DLC_MALE_TATTOO_HUSTLER", 6053, 0 },
	{ "DLC_MALE_TATTOO_MAKIN_PAPER", 6054, 0 },
	{ "DLC_MALE_TATTOO_BOLD_DOLLAR_SIGN", 6055, 0 },
	{ "DLC_MALE_TATTOO_SCRIPT_DOLLAR_SIGN", 6056, 0 },
	{ "DLC_MALE_TATTOO_DOLLAR_SKULL", 6058, 0 },
	{ "DLC_MALE_TATTOO_RICH", 6059, 0 },
	{ "DLC_MALE_TATTOO_DOLLAR_SIGNS", 6060, 0 },
	{ "DLC_MALE_TATTOO_ALLSEEING_EYE", 6061, 0 },
	{ "DLC_MALE_TATTOO_GREEN", 6062, 0 },
	{ "DLC_MALE_TATTOO_CREW_EMBLEM_CHEST", 6063, 0 },
	{ "DLC_MALE_TATTOO_CREW_EMBLEM_ARM", 6064, 0 },
	{ "DLC_CAR_MODS_CLASSICAL_HORN_1", 6065, 0 },
	{ "DLC_CAR_MODS_CLASSICAL_HORN_2", 6066, 0 },
	{ "DLC_CAR_MODS_CLASSICAL_HORN_3", 6067, 0 },
	{ "DLC_CAR_MODS_CLASSICAL_HORN_4", 6068, 0 },
	{ "DLC_CAR_MODS_CLASSICAL_HORN_5", 6069, 0 },
	{ "DLC_CAR_MODS_CLASSICAL_HORN_6", 6070, 0 },
	{ "DLC_CAR_MODS_CLASSICAL_HORN_7", 6071, 0 },
	{ "DLC_VEHICLE_BF_BIFTA", 6072, 0 },
	{ "DLC_VEHICLE_CANIS_KALAHARI", 6073, 0 },
	{ "DLC_VEHICLE_BRAVADO_PARADISE", 6074, 0 },
	{ "DLC_VEHICLE_PEGASSI_SPEEDER", 6075, 0 },
	{ "DLC_VEHICLE_DINKA_THRUST", 6076, 0 },
	{ "DLC_VEHICLE_COIL_VOLTIC_TOPLESS", 6077, 0 },
	{ "DLC_VEHICLE_BRAVADO_BANSHEE_TOPLESS", 6078, 0 },
	{ "DLC_VEHICLE_INVERTO_COQUETTE_TOPLESS", 6079, 0 },
	{ "DLC_VEHICLE_GROTTI_STINGER_TOPLESS", 6080, 0 },
	{ "DLC_VEHICLE_VAPID_DOMINATOR", 6081, 0 },
	{ "DLC_VEHICLE_SCHYSTER_FUSILADE", 6083, 0 },
	{ "DLC_VEHICLE_MAIBATSU_PENUMBRA", 6084, 0 },
	{ "DLC_VEHICLE_UBERMACHT_SENTINEL_XS", 6085, 0 },
	{ "DLC_VEHICLE_UBERMACHT_SENTINEL", 6086, 0 },
	{ "DLC_WEAPON_ADDON_SNS_PISTOL_EXTENDED_CLIP", 6087, 0 },
	{ "DLC_WEAPON_ADDON_SPECIAL_CARBINE_SUPPRESSOR", 6089, 0 },
	{ "DLC_WEAPON_ADDON_HEAVY_PISTOL_SUPPRESSOR", 6090, 0 },
	{ "DLC_WEAPON_ADDON_SPECIAL_CARBINE_SCOPE", 6091, 0 },
	{ "DLC_WEAPON_ADDON_SPECIAL_CARBINE_EXTENDED_CLIP", 6092, 0 },
	{ "DLC_WEAPON_ADDON_HEAVY_PISTOL_EXTENDED_CLIP", 6093, 0 },
	{ "DLC_WEAPON_ADDON_SPECIAL_CARBINE_GRIP", 6094, 0 },
	{ "DLC_WEAPON_ADDON_SPECIAL_CARBINE_FLASHLIGHT", 6095, 0 },
	{ "DLC_WEAPON_ADDON_HEAVY_PISTOL_FLASHLIGHT", 6097, 0 },
	{ "DLC_WEAPON_ADDON_BULLPUP_RIFLE_SUPPRESSOR", 6098, 0 },
	{ "DLC_WEAPON_ADDON_BULLPUP_RIFLE_SCOPE", 6099, 0 },
	{ "DLC_WEAPON_ADDON_BULLPUP_RIFLE_EXTENDED_CLIP", 6100, 0 },
	{ "DLC_WEAPON_ADDON_BULLPUP_RIFLE_GRIP", 6101, 0 },
	{ "DLC_WEAPON_ADDON_BULLPUP_RIFLE_FLASHLIGHT", 6103, 0 },
	{ "DLC_WEAPON_ADDON_SNS_PISTOL_AMMO", 6104, 0 },
	{ "DLC_WEAPON_ADDON_SPECIAL_CARBINE_AMMO", 6105, 0 },
	{ "DLC_WEAPON_ADDON_HEAVY_PISTOL_AMMO", 6106, 0 },
	{ "DLC_WEAPON_ADDON_BULLPUP_RIFLE_AMMO", 6107, 0 },
	{ "DLC_WEAPON_BROKEN_BOTTLE", 6108, 0 },
	{ "DLC_WEAPON_SNS_PISTOL", 6109, 0 },
	{ "DLC_WEAPON_HEAVY_PISTOL", 6110, 0 },
	{ "DLC_WEAPON_SPECIAL_CARBINE", 6111, 0 },
	{ "DLC_WEAPON_BULLPUP_RIFLE", 6112, 0 },
	{ "DLC_WEAPON_VINTAGE_PISTOL", 6113, 0 },
	{ "DLC_WEAPON_VINTAGE_PISTOL", 6113, 0 },
	{ "DLC_WEAPON_DAGGER", 6114, 0 },
	{ "DLC_WEAPON_DAGGER", 6114, 0 },
	{ "DLC_WEAPON_ADDON_VINTAGE_PISTOL_AMMO", 6115, 0 },
	{ "DLC_WEAPON_ADDON_VINTAGE_PISTOL_AMMO", 6115, 0 },
	{ "DLC_WEAPON_ADDON_DAGGER_AMMO", 6116, 0 },
	{ "DLC_WEAPON_TINT_ARMY_ASSUALTSMG", 6118, 0 },
	{ "DLC_WEAPON_TINT_GREEN_ASSUALTSMG", 6119, 0 },
	{ "DLC_WEAPON_TINT_ORANGE_ASSUALTSMG", 6120, 0 },
	{ "DLC_WEAPON_TINT_LSPD_ASSUALTSMG", 6121, 0 },
	{ "DLC_WEAPON_TINT_PINK_ASSUALTSMG", 6122, 0 },
	{ "DLC_WEAPON_TINT_GOLD_ASSUALTSMG", 6123, 0 },
	{ "DLC_WEAPON_TINT_PLATINUM_ASSUALTSMG", 6124, 0 },
	{ "LOTTERY_WEEK", 6125, 0 },
	{ "DISABLE_LOTTERY", 6126, 2 },
	{ "MAX_NUMBER_LOTTERY_TICKETS", 6127, 0 },
	{ "REQUEST_COPS_TURN_BLIND_EYE_FEE", 6128, 0 },
	{ "HORN_CNOTE_C1", 6136, 0 },
	{ "SPEC_CHANGE_SESSION_TIME", 6137, 0 },
	{ "MENTAL_STATE_RP_DIVIDER", 6138, 1 },
	{ "MENTAL_STATE_RP_MIN_THRESHOLD", 6139, 0 },
	{ "TOGGLE_RACE_CREATOR", 6140, 2 },
	{ "TOGGLE_DEATHMATCH_CREATOR", 6141, 2 },
	{ "DISABLE_JOB_BETTING", 6144, 2 },
	{ "SURVIVAL_RP_CAP_PER_WAVE", 6145, 0 },
	{ "DLC_hipster_modifier_Vulcar_Pigalle", 6549, 0 },
	{ "DLC_HIPSTER_CAR_MOD_VAPID_BLADE", 6550, 0 },
	{ "DLC_HIPSTER_CAR_MOD_BENEFACTOR_GLENDA", 6551, 0 },
	{ "DLC_HIPSTER_CAR_MOD_DECLASSE_RHAPSODY", 6552, 0 },
	{ "DLC_HIPSTER_CAR_MOD_VULCAR_WARRENER", 6553, 0 },
	{ "DLC_HIPSTER_CAR_MOD_BENEFACTOR_PANTO", 6554, 0 },
	{ "DLC_HIPSTER_CAR_MOD_DUBSTA3", 6555, 0 },
	{ "DLC_HIPSTER_CAR_MOD_BLAZER3", 6556, 0 },
	{ "DLC_HIPSTER_CAR_MOD_BUFFALO", 6557, 0 },
	{ "DLC_HIPSTER_CAR_MOD_BUFFALO2", 6558, 0 },
	{ "DLC_HIPSTER_CAR_MOD_PICADOR", 6559, 0 },
	{ "DLC_HIPSTER_CAR_MOD_PRIMO", 6560, 0 },
	{ "DLC_HIPSTER_CAR_MOD_REBEL2", 6561, 0 },
	{ "DLC_HIPSTER_CAR_MOD_REGINA", 6562, 0 },
	{ "DLC_HIPSTER_CAR_MOD_SURFER", 6563, 0 },
	{ "DLC_HIPSTER_CAR_MOD_TAILGATER", 6564, 0 },
	{ "DLC_HIPSTER_CAR_MOD_YOUGA", 6565, 0 },
	{ "DLC_HIPSTER_CAR_MOD_PURE_BLACK", 6566, 0 },
	{ "DLC_HIPSTER_CAR_MOD_JAZZ_HORN_1", 6567, 0 },
	{ "DLC_HIPSTER_CAR_MOD_JAZZ_HORN_2", 6568, 0 },
	{ "DLC_HIPSTER_CAR_MOD_JAZZ_HORN_3", 6569, 0 },
	{ "DLC_HIPSTER_CAR_MOD_JAZZ_HORN_4", 6570, 0 },
	{ "DLC_HIPSTER_CAR_MOD_PINK_TIRE_SMOKE", 6571, 0 },
	{ "DLC_HIPSTER_CAR_MOD_BROWN_TIRE_SMOKE", 6572, 0 },
	{ "DLC_HIPSTER_WEAPON_MOD_VINTAGE_PISTOL_EXTENDED_CLIP", 6573, 0 },
	{ "DLC_HIPSTER_WEAPON_MOD_VINTAGE_PISTOL_SUPPRESSOR", 6574, 0 },
	{ "DLC_HIPSTER_MALE_MASK_GREY_CAT", 6575, 0 },
	{ "DLC_HIPSTER_MALE_MASK_TABBY_CAT", 6576, 0 },
	{ "DLC_HIPSTER_MALE_MASK_RED_FOX", 6577, 0 },
	{ "DLC_HIPSTER_MALE_MASK_BROWN_FOX", 6578, 0 },
	{ "DLC_HIPSTER_MALE_MASK_BROWN_OWL", 6579, 0 },
	{ "DLC_HIPSTER_MALE_MASK_WHITE_OWL", 6580, 0 },
	{ "DLC_HIPSTER_MALE_MASK_GRAY_RACOON", 6581, 0 },
	{ "DLC_HIPSTER_MASK_BLACK_RACOON", 6582, 0 },
	{ "DLC_HIPSTER_FEMALE_MASK_GRAY_CAT", 6583, 0 },
	{ "DLC_HIPSTER_FEMALE_MASK_TABBY_CAT", 6584, 0 },
	{ "DLC_HIPSTER_FEMALE_MASK_RED_FOX", 6585, 0 },
	{ "DLC_HIPSTER_FEMALE_MASK_BROWN_FOX", 6586, 0 },
	{ "DLC_HIPSTER_FEMALE_MASK_BROWN_OWL", 6587, 0 },
	{ "DLC_HIPSTER_FEMALE_MASK_WHITE_OWL", 6588, 0 },
	{ "DLC_HIPSTER_FEMALE_MASK_GRAY_RACOON", 6589, 0 },
	{ "DLC_HIPSTER_FEMALE_MASK_BLACK_RACOON", 6590, 0 },
	{ "SET_ALL_PHONE_SERVICES_AVAILABLE", 6591, 2 },
	{ "TURN_ON_PROMOTIONAL_EYEFIND_HOMEPAGE", 6592, 2 },
	{ "REQUEST_A_HEIST_FEE", 6593, 0 },
	{ "EARNINGS_HEISTS_FINALE_FIRST_PLAY_CASH_REWARD", 6594, 1 },
	{ "EARNINGS_HEISTS_FINALE_REPLAY_CASH_REWARD", 6595, 1 },
	{ "EARNINGS_HEISTS_FINALE_MINIMUM_TOTAL_CASH_TAKE", 6596, 0 },
	{ "EARNINGS_HEISTS_FINALE_MAXIMUM_TOTAL_CASH_TAKE", 6597, 0 },
	{ "RP_HEISTS_HEIST_FAIL_RP_TIME_PERIOD_1", 6598, 0 },
	{ "RP_HEISTS_HEIST_FAIL_RP_TIME_PERIOD_2", 6599, 0 },
	{ "RP_HEISTS_HEIST_FAIL_RP_TIME_PERIOD_3", 6600, 0 },
	{ "RP_HEISTS_HEIST_FAIL_RP_TIME_PERIOD_4", 6601, 0 },
	{ "RP_HEISTS_HEIST_FAIL_RP_TIME_PERIOD_5", 6602, 0 },
	{ "RP_HEISTS_HEIST_FAIL_RP_TIME_PERIOD_6", 6603, 0 },
	{ "RP_HEISTS_GOLD_MEDAL_RP_MULTIPLIER", 6618, 1 },
	{ "RP_HEISTS_SILVER_MEDAL_RP_MULTIPLIER", 6619, 1 },
	{ "RP_HEISTS_BRONZE_MEDAL_RP_MULTIPLIER", 6620, 1 },
	{ "EXPENSES_HEIST_COST_PERCENTAGE_SERIES_A", 6624, 1 },
	{ "TOGGLE_HEISTS_OFF", 6626, 2 },
	{ "MAX_NONE_ROCK_PAYOUT", 6627, 0 },
	{ "UnlockbitchndogfoodtshirtEvent", 6628, 2 },
	{ "UnlockvinylcountdowntshirtEvent", 6629, 2 },
	{ "UnlockhomiessharptshirtEvent", 6630, 2 },
	{ "MENTAL_STATE_KILL_PLAYER_INCREASE_THRESHOLD", 6631, 1 },
	{ "MENTAL_STATE_KILL_PLAYER_INCREASE_AMOUNT", 6632, 1 },
	{ "MENTAL_STATE_KILL_PLAYER_INCREASE_UNDER_THRESHOLD", 6633, 1 },
	{ "MENTAL_STATE_KILL_PLAYER_INCREASE_DIVIDER", 6634, 1 },
	{ "MENTAL_STATE_BLOW_UP_VEHICLE_INCREASE_AMOUNT", 6635, 1 },
	{ "MENTAL_STATE_KILL_PED_INCREASE_AMOUNT", 6636, 1 },
	{ "MENTAL_STATE_DECREASE_AMOUNT", 6637, 1 },
	{ "MENTAL_STATE_DECREASE_RATE", 6638, 1 },
	{ "HIPSTER_MALE_OUTFIT_THE_ECO", 6639, 1 },
	{ "HIPSTER_MALE_OUTFIT_THE_IRONIC", 6640, 1 },
	{ "HIPSTER_MALE_OUTFIT_THE_AFICIONADO", 6641, 1 },
	{ "HIPSTER_MALE_OUTFIT_THE_NATURAL", 6642, 1 },
	{ "HIPSTER_MALE_OUTFIT_THE_POP_UP", 6643, 1 },
	{ "HIPSTER_MALE_OUTFIT_THE_ARTIST", 6644, 1 },
	{ "HIPSTER_MALE_OUTFIT_THE_ELITIST", 6645, 1 },
	{ "HIPSTER_MALE_OUTFIT_THE_ACTIVIST", 6646, 1 },
	{ "HIPSTER_MALE_OUTFIT_THE_URBAN_HIPPY", 6647, 1 },
	{ "HIPSTER_MALE_OUTFIT_THE_FITNESS", 6648, 1 },
	{ "HIPSTER_FEMALE_OUTFIT_THE_YUPPIE", 6649, 1 },
	{ "HIPSTER_FEMALE_OUTFIT_THE_PALMS", 6650, 1 },
	{ "HIPSTER_FEMALE_OUTFIT_THE_BUBBLEGUM", 6651, 1 },
	{ "HIPSTER_FEMALE_OUTFIT_THE_SAFARI", 6652, 1 },
	{ "HIPSTER_FEMALE_OUTFIT_THE_JUNGLE", 6653, 1 },
	{ "HIPSTER_FEMALE_OUTFIT_THE_VINTAGE", 6654, 1 },
	{ "HIPSTER_FEMALE_OUTFIT_THE_YOUTH", 6655, 1 },
	{ "HIPSTER_FEMALE_OUTFIT_THE_CRAZE", 6656, 1 },
	{ "HIPSTER_FEMALE_OUTFIT_THE_TROPICS", 6657, 1 },
	{ "HIPSTER_FEMALE_OUTFIT_THE_ROAR", 6658, 1 },
	{ "HIPSTER_VEHICLE_PURE_GOLD_METAL_RESPRAY", 6660, 0 },
	{ "HIPSTER_VEHICLE_BRUSHED_GOLD_METAL_RESPRAY", 6661, 0 },
	{ "NUMBER_OF_CHALLENGES_PER_DAY", 6662, 0 },
	{ "Car_impound_fee", 6663, 0 },
	{ "PILOT_SCHOOL_VEHICLE_HYDRA", 6664, 0 },
	{ "PILOT_SCHOOL_VEHICLE_BESRA", 6665, 0 },
	{ "PILOT_SCHOOL_VEHICLE_MILJET", 6666, 0 },
	{ "PILOT_SCHOOL_VEHICLE_COQUETTE2", 6667, 0 },
	{ "PILOT_SCHOOL_PLAYER_KIT_PARACHUTE_CANOPY_COLOR_1", 6668, 0 },
	{ "PILOT_SCHOOL_PLAYER_KIT_PARACHUTE_CANOPY_COLOR_2", 6669, 0 },
	{ "PILOT_SCHOOL_PLAYER_KIT_PARACHUTE_CANOPY_COLOR_3", 6670, 0 },
	{ "PILOT_SCHOOL_PLAYER_KIT_NAVY_CHUTE_BAG", 6671, 0 },
	{ "PILOT_SCHOOL_PLAYER_KIT_ORANGE_CHUTE_BAG", 6672, 0 },
	{ "PILOT_SCHOOL_PLAYER_KIT_YELLOW_CHUTE_BAG", 6673, 0 },
	{ "PILOT_SCHOOL_PLAYER_KIT_GREEN_CHUTE_BAG", 6674, 0 },
	{ "PILOT_SCHOOL_PLAYER_KIT_TEAL_CHUTE_BAG", 6675, 0 },
	{ "PILOT_SCHOOL_PLAYER_KIT_PINK_CHUTE_BAG", 6676, 0 },
	{ "PILOT_SCHOOL_PLAYER_KIT_RED_CHUTE_BAG", 6677, 0 },
	{ "ConstrainedKick_Warning1", 6678, 0 },
	{ "ConstrainedKick_Warning2", 6679, 0 },
	{ "ConstrainedKick_Warning3", 6680, 0 },
	{ "ConstrainedKick_Kick", 6681, 0 },
	{ "ROLLERCOASTERRIDECOST", 6682, 0 },
	{ "FERRISWHEELCOST", 6683, 0 },
	{ "rollercoasterridescreamrewardxp", 6684, 0 },
	{ "rollercoasterridescreamrewardcap", 6685, 0 },
	{ "KILLAGGRESSIVEPEDINCREASEAMOUNT", 6686, 1 },
	{ "KILLCOPINCREASEAMOUNT", 6687, 1 },
	{ "TOGGLE_ACTIVATE_INDEPENDENCE_PACK", 6688, 2 },
	{ "MAX_CARRIED_FIREWORKS", 6689, 0 },
	{ "PURCHASED_TATTOO_APPLICATION_FEE", 6691, 0 },
	{ "SURVIVAL_COMPLETE_BONUS", 6692, 1 },
	{ "INDEPENDENCE_DAY_FIREWORKS_TYPE_1", 6693, 0 },
	{ "INDEPENDENCE_DAY_FIREWORKS_TYPE_2", 6694, 0 },
	{ "INDEPENDENCE_DAY_FIREWORKS_TYPE_3", 6695, 0 },
	{ "INDEPENDENCE_DAY_FIREWORKS_TYPE_4", 6696, 0 },
	{ "INDEPENDENCE_DAY_DEACTIVATE_FIREWORKS_LAUNCHER", 6697, 2 },
	{ "INDEPENDENCE_DAY_DEACTIVATE_PLACED_FIREWORKS", 6698, 2 },
	{ "DISABLEROLLERCOASTER", 6699, 2 },
	{ "DISABLEFERRISWHEEL", 6700, 2 },
	{ "DISABLEFIREWORKS", 6701, 2 },
	{ "Toggle_activate_Western_sovereign", 6702, 2 },
	{ "Toggle_activate_Monster_truck", 6703, 2 },
	{ "CLOTHING_INDEPENDENCEDAY_GROUP", 6704, 1 },
	{ "HAIR_MAKEUP_INDEPENDENCEDAY_GROUP", 6705, 1 },
	{ "MASKS_INDEPENDENCEDAY_MASKS_GROUP", 6706, 1 },
	{ "VEHICLE_INDEPENDENCEDAY_MONSTER", 6707, 0 },
	{ "VEHICLE_INDEPENDENCEDAY_SOVEREIGN", 6708, 0 },
	{ "VEHICLEKIT_INDEPENDENCEDAY_PATRIOT_TIRE_SMOKE", 6709, 0 },
	{ "VEHICLEKIT_INDEPENDENCEDAY_HORN_1", 6710, 0 },
	{ "VEHICLEKIT_INDEPENDENCEDAY_HORN_2", 6711, 0 },
	{ "VEHICLEKIT_INDEPENDENCEDAY_HORN_3", 6712, 0 },
	{ "VEHICLEKIT_INDEPENDENCEDAY_HORN_4", 6713, 0 },
	{ "WEAPONS_INDEPENDENCEDAY_MUSKET", 6714, 0 },
	{ "WEAPONS_INDEPENDENCEDAY_MUSKET_AMMO", 6715, 0 },
	{ "WEAPONS_INDEPENDENCEDAY_FIREWORKLAUNCHER", 6716, 0 },
	{ "WEAPONS_INDEPENDENCEDAY_FIREWORKLAUNCHER_AMMO", 6717, 0 },
	{ "WEAPONS_INDEPENDENCEDAY_PATRIOT_PARACHUTE_SMOKE", 6718, 0 },
	{ "PROPERTY_3_ACE_JONES_DR", 6719, 0 },
	{ "PROPERTY_12_SUSTANCIA_RD", 6720, 0 },
	{ "PROPERTY_4584_PROCOPIO_DR", 6721, 0 },
	{ "PROPERTY_1893_GRAPESEED_AVE", 6725, 0 },
	{ "UNLOCKINDEPENDENCE_BEER_HAT_1", 6726, 2 },
	{ "UNLOCKINDEPENDENCE_BEER_HAT_2", 6727, 2 },
	{ "UNLOCKINDEPENDENCE_BEER_HAT_3", 6728, 2 },
	{ "UNLOCKINDEPENDENCE_BEER_HAT_4", 6729, 2 },
	{ "UNLOCKINDEPENDENCE_BEER_HAT_5", 6730, 2 },
	{ "UNLOCKINDEPENDENCE_BEER_HAT_6", 6731, 2 },
	{ "UNLOCKINDEPENDENCE_STATUE_HAPPINESS_SHIRT", 6732, 2 },
	{ "HEISTS_PREP_PERCENTAGE_CUT_SERIES_A", 6756, 1 },
	{ "MENTAL_BLOW_UP_AGGRESSIVE_VEH", 6759, 1 },
	{ "MENTAL_BLOW_UP_COP_VEH", 6760, 1 },
	{ "Contact_Mission_Time_Period_1", 6761, 0 },
	{ "Contact_Mission_Time_Period_2", 6762, 0 },
	{ "Contact_Mission_Time_Period_3", 6763, 0 },
	{ "Contact_Mission_Time_Period_4", 6764, 0 },
	{ "Contact_Mission_Time_Period_5", 6765, 0 },
	{ "Contact_Mission_Time_Period_6", 6766, 0 },
	{ "Contact_Mission_Time_Period_7", 6767, 0 },
	{ "Contact_Mission_Time_Period_8", 6768, 0 },
	{ "Contact_Mission_Time_Period_9", 6769, 0 },
	{ "Contact_Mission_Cash_Time_Period_1_PERCENTAGE", 6770, 1 },
	{ "Contact_Mission_Cash_Time_Period_2_PERCENTAGE", 6771, 1 },
	{ "Contact_Mission_Cash_Time_Period_3_PERCENTAGE", 6772, 1 },
	{ "Contact_Mission_Cash_Time_Period_4_PERCENTAGE", 6773, 1 },
	{ "Contact_Mission_Cash_Time_Period_5_PERCENTAGE", 6774, 1 },
	{ "Contact_Mission_Cash_Time_Period_6_PERCENTAGE", 6775, 1 },
	{ "Contact_Mission_Cash_Time_Period_7_PERCENTAGE", 6776, 1 },
	{ "Contact_Mission_Cash_Time_Period_8_PERCENTAGE", 6777, 1 },
	{ "Contact_Mission_Cash_Time_Period_9_PERCENTAGE", 6778, 1 },
	{ "Contact_Mission_Cash_Time_Period_10_PERCENTAGE", 6779, 1 },
	{ "CONTACT_MISSION_CASH_PLAYER_MULTIPLIER_1", 6780, 1 },
	{ "CONTACT_MISSION_CASH_PLAYER_MULTIPLIER_2", 6781, 1 },
	{ "CONTACT_MISSION_CASH_PLAYER_MULTIPLIER_3", 6782, 1 },
	{ "CONTACT_MISSION_CASH_PLAYER_MULTIPLIER_4", 6783, 1 },
	{ "CONTACT_MISSION_CASH_BASE_MULTIPLIER", 6784, 1 },
	{ "CONTACT_MISSION_CASH_RANK_CAP", 6785, 0 },
	{ "CONTACT_MISSION_CASH_BASIC_VALUE", 6786, 0 },
	{ "CONTACT_MISSION_CASH_DIFFICULTY_MULTIPLIER_EASY", 6787, 1 },
	{ "CONTACT_MISSION_CASH_DIFFICULTY_MULTIPLIER_NORMAL", 6788, 1 },
	{ "CONTACT_MISSION_CASH_DIFFICULTY_MULTIPLIER_HARD", 6789, 1 },
	{ "CONTACT_MISSION_FAIL_CASH_MINIMUM", 6790, 0 },
	{ "CONTACT_MISSION_FAIL_CASH_TIME_PERIOD_2_DIVIDER", 6791, 1 },
	{ "CONTACT_MISSION_FAIL_CASH_TIME_PERIOD_3_DIVIDER", 6792, 1 },
	{ "CONTACT_MISSION_FAIL_CASH_TIME_PERIOD_4_DIVIDER", 6793, 1 },
	{ "CONTACT_MISSION_FAIL_CASH_TIME_PERIOD_5_DIVIDER", 6794, 1 },
	{ "CONTACT_MISSION_FAIL_CASH_TIME_PERIOD_6_DIVIDER", 6795, 1 },
	{ "CONTACT_MISSION_FAIL_CASH_TIME_PERIOD_7_DIVIDER", 6796, 1 },
	{ "CONTACT_MISSION_FAIL_CASH_TIME_PERIOD_8_DIVIDER", 6797, 1 },
	{ "CONTACT_MISSION_FAIL_CASH_TIME_PERIOD_9_DIVIDER", 6798, 1 },
	{ "CONTACT_MISSION_FAIL_RP_MINIMUM", 6800, 0 },
	{ "CONTACT_MISSION_FAIL_RP_TIME_PERIOD_2_DIVIDER", 6801, 1 },
	{ "CONTACT_MISSION_FAIL_RP_TIME_PERIOD_3_DIVIDER", 6802, 1 },
	{ "CONTACT_MISSION_FAIL_RP_TIME_PERIOD_4_DIVIDER", 6803, 1 },
	{ "CONTACT_MISSION_FAIL_RP_TIME_PERIOD_5_DIVIDER", 6804, 1 },
	{ "CONTACT_MISSION_FAIL_RP_TIME_PERIOD_6_DIVIDER", 6805, 1 },
	{ "CONTACT_MISSION_FAIL_RP_TIME_PERIOD_7_DIVIDER", 6806, 1 },
	{ "CONTACT_MISSION_FAIL_RP_TIME_PERIOD_8_DIVIDER", 6807, 1 },
	{ "CONTACT_MISSION_FAIL_RP_TIME_PERIOD_9_DIVIDER", 6808, 1 },
	{ "TURNOFFSPECIALCRATES", 6810, 2 },
	{ "CONTACT_MISSION_RP_TIME_PERIOD_1_PERCENTAGE", 6811, 1 },
	{ "CONTACT_MISSION_RP_TIME_PERIOD_2_PERCENTAGE", 6812, 1 },
	{ "CONTACT_MISSION_RP_TIME_PERIOD_3_PERCENTAGE", 6813, 1 },
	{ "CONTACT_MISSION_RP_TIME_PERIOD_4_PERCENTAGE", 6814, 1 },
	{ "CONTACT_MISSION_RP_TIME_PERIOD_5_PERCENTAGE", 6815, 1 },
	{ "CONTACT_MISSION_RP_TIME_PERIOD_6_PERCENTAGE", 6816, 1 },
	{ "CONTACT_MISSION_RP_TIME_PERIOD_7_PERCENTAGE", 6817, 1 },
	{ "CONTACT_MISSION_RP_TIME_PERIOD_8_PERCENTAGE", 6818, 1 },
	{ "CONTACT_MISSION_RP_TIME_PERIOD_9_PERCENTAGE", 6819, 1 },
	{ "CONTACT_MISSION_RP_TIME_PERIOD_10_PERCENTAGE", 6820, 1 },
	{ "CONTACT_MISSION_RP_BASE_MULTIPLIER", 6821, 1 },
	{ "CONTACT_MISSION_RP_DIFFICULTY_MULTIPLIER_EASY", 6822, 1 },
	{ "CONTACT_MISSION_RP_DIFFICULTY_MULTIPLIER_NORMAL", 6823, 1 },
	{ "CONTACT_MISSION_RP_DIFFICULTY_MULTIPLIER_HARD", 6824, 1 },
	{ "CONTACT_MISSION_RP_RANK_CAP", 6825, 0 },
	{ "CONTACT_MISSION_RP_BASIC_VALUE", 6826, 0 },
	{ "PS_DEFAULT_RP_VALUE_MULTIPLIER", 6929, 1 },
	{ "PS_BRONZE_RP_MULTIPLIER", 6930, 1 },
	{ "PS_SILVER_RP_MULTIPLIER", 6931, 1 },
	{ "PS_GOLD_RP_MULTIPLIER", 6932, 1 },
	{ "PS_DEFAULT_CASH_VALUE_MULTIPLIER", 6933, 1 },
	{ "PS_BRONZE_CASH_MULTIPLIER", 6934, 1 },
	{ "PS_SILVER_CASH_MULTIPLIER", 6935, 1 },
	{ "PS_GOLD_CASH_MULTIPLIER", 6936, 1 },
	{ "PS_FIRST_CASH_BONUS_MULTIPLIER", 6937, 1 },
	{ "MUGGER_CASH_DROP_CAP", 6938, 0 },
	{ "PS_FLIGHT_CAP", 6939, 0 },
	{ "PS_FLIGHT_SUIT", 6940, 0 },
	{ "PS_EVENT_ITEM_ELITAS_TSHIRT", 6941, 0 },
	{ "PS_EVENT_ITEM_ELITAS_TOP", 6942, 0 },
	{ "PS_INVERTO_COQUETTE_CLASSIC", 6943, 0 },
	{ "PS_INVERTO_COQUETTE_CLASSIC_TOPLESS", 6944, 0 },
	{ "PS_WESTERN_BESRA", 6945, 0 },
	{ "PS_BUCKINGHAM_MILJET", 6946, 0 },
	{ "PS_SWIFT_LIVERY_1", 6947, 0 },
	{ "PS_SWIFT_LIVERY_2", 6948, 0 },
	{ "PS_AIR_FORCE_CHUTE", 6949, 0 },
	{ "PS_DESERT_CHUTE", 6950, 0 },
	{ "PS_SHADOW_CHUTE", 6951, 0 },
	{ "PS_HIGH_ALTITUDE_CHUTE", 6952, 0 },
	{ "PS_AIRBORNE_CHUTE", 6953, 0 },
	{ "PS_SUNRISE_CHUTE", 6954, 0 },
	{ "PS_USA_CHUTE_BAG", 6955, 0 },
	{ "PS_UNITED_KINGDOM_CHUTE_BAG", 6956, 0 },
	{ "PS_SCOTLAND_CHUTE_BAG", 6957, 0 },
	{ "PS_CANADA_CHUTE_BAG", 6958, 0 },
	{ "PS_FRANCE_CHUTE_BAG", 6959, 0 },
	{ "PS_GERMANY_CHUTE_BAG", 6960, 0 },
	{ "PS_SPAIN_CHUTE_BAG", 6961, 0 },
	{ "PS_AUSTRALIA_CHUTE_BAG", 6962, 0 },
	{ "PS_JAPAN_CHUTE_BAG", 6963, 0 },
	{ "PS_BRAZIL_CHUTE_BAG", 6964, 0 },
	{ "PS_ELITAS_CHUTE_BAG", 6965, 0 },
	{ "PS_FLIGHT_SCHOOL_CHUTE_BAG", 6966, 0 },
	{ "PS_EVENT_ITEM_HIGH_FLYER_CHUTE_BAG", 6967, 0 },
	{ "BLOCK_SELLING_VEHICLES", 6968, 2 },
	{ "DISABLE_EVENT_PLANE_TAKEDOWN", 6969, 2 },
	{ "DISABLE_EVENT_PLANE_TAKEDOWN", 6969, 2 },
	{ "PLANE_TAKEDOWN_REWARDS_CASH", 6970, 0 },
	{ "PLANE_TAKEDOWN_REWARDS_CASH", 6970, 0 },
	{ "PLANE_TAKEDOWN_REWARDS_XP", 6971, 0 },
	{ "PLANE_TAKEDOWN_REWARDS_XP", 6971, 0 },
	{ "DISABLE_EVENT_DISTRACT_COPS", 6974, 2 },
	{ "DISABLE_EVENT_DISTRACT_COPS", 6974, 2 },
	{ "DISABLEDESTROYVEHICLE", 6979, 2 },
	{ "NUMBER_OF_SCRIPTS_IN_HISTORY_LIST", 6985, 0 },
	{ "TIME_EVENT_FREQUENCY_AMBIENT_LAUNCHER", 6987, 0 },
	{ "GRENADE_AMMO_GIFTING", 6988, 0 },
	{ "SMKGRENADE_AMMO_GIFTING", 6989, 0 },
	{ "STKYBMB_AMMO_GIFTING", 6990, 0 },
	{ "MOLOTOV_AMMO_GIFTING", 6991, 0 },
	{ "PISTOL_AMMO_GIFTING", 6992, 0 },
	{ "SMG_AMMO_GIFTING", 6993, 0 },
	{ "RIFLE_AMMO_GIFTING", 6994, 0 },
	{ "MG_AMMO_GIFTING", 6995, 0 },
	{ "SHOTGUN_AMMO_GIFTING", 6996, 0 },
	{ "SNIPER_AMMO_GIFTING", 6997, 0 },
	{ "RPG_AMMO_GIFTING", 6998, 0 },
	{ "MINIGUNS_AMMO_GIFTING", 6999, 0 },
	{ "PETROLCAN_AMMO_GIFTING", 7000, 0 },
	{ "GRNLAUNCH_AMMO_GIFTING", 7002, 0 },
	{ "FIREWRK_AMMO_GIFTING", 7009, 0 },
	{ "ELEGY2_WEB_PRICE_MODIFIER", 7017, 0 },
	{ "KHAMELION_WEB_PRICE_MODIFIER", 7018, 0 },
	{ "HOTKNIFE_WEB_PRICE_MODIFIER", 7019, 0 },
	{ "CARBONRS_WEB_PRICE_MODIFIER", 7020, 0 },
	{ "CRATEDROPBASEWEIGHTING", 7024, 1 },
	{ "SECURITYVANBASEWEIGHTING", 7025, 1 },
	{ "IMPORTEXPORTBASEWEIGHTING", 7026, 1 },
	{ "JOYRIDERBASEWEIGHTING", 7027, 1 },
	{ "LESTERKILLTARGETBASEWEIGHTING", 7028, 1 },
	{ "PLANETAKEDOWNBASEWEIGHTING", 7029, 1 },
	{ "DISTRACTPOLICEBASEWEIGHTING", 7030, 1 },
	{ "PS_ITALY_CHUTE_BAG", 7063, 0 },
	{ "PS_SWITZERLAND_CHUTE_BAG", 7064, 0 },
	{ "PS_JAMAICA_CHUTE_BAG", 7065, 0 },
	{ "PS_COLOMBIA_CHUTE_BAG", 7066, 0 },
	{ "PS_NORWAY_CHUTE_BAG", 7067, 0 },
	{ "PS_SWEDEN_CHUTE_BAG", 7068, 0 },
	{ "PS_BELGIUM_CHUTE_BAG", 7069, 0 },
	{ "PS_MEXICO_CHUTE_BAG", 7070, 0 },
	{ "PS_AUSTRIA_CHUTE_BAG", 7071, 0 },
	{ "PS_RUSSIA_CHUTE_BAG", 7072, 0 },
	{ "PS_ARGENTINA_CHUTE_BAG", 7073, 0 },
	{ "PS_TURKEY_CHUTE_BAG", 7074, 0 },
	{ "PS_IRELAND_CHUTE_BAG", 7075, 0 },
	{ "PS_WALES_CHUTE_BAG", 7076, 0 },
	{ "PS_ENGLAND_CHUTE_BAG", 7077, 0 },
	{ "DISABLE_EVENT_KILL_TARGET", 7078, 2 },
	{ "toggle_on_bet_stake_gift_DM", 7092, 2 },
	{ "toggle_on_bet_stake_gift_RACES_CAR", 7093, 2 },
	{ "toggle_on_bet_stake_gift_RACES_CYCLE", 7094, 2 },
	{ "toggle_on_bet_stake_gift_RACES_AIR", 7095, 2 },
	{ "toggle_on_bet_stake_gift_RACES_SEA", 7096, 2 },
	{ "toggle_on_bet_stake_gift_MISSIONS", 7097, 2 },
	{ "toggle_on_bet_stake_gift_SURVIAL", 7098, 2 },
	{ "toggle_on_bet_stake_gift_BASEJUMP", 7099, 2 },
	{ "toggle_on_bet_stake_gift_CAPTURE", 7100, 2 },
	{ "toggle_on_bet_stake_gift_LTS", 7101, 2 },
	{ "CASH_REWARD_BET_STAKE_GIFT", 7102, 0 },
	{ "clothingcrewemblemsmall", 7104, 0 },
	{ "clothingcrewemblemlarge", 7105, 0 },
	{ "clothingcrewemblemback", 7106, 0 },
	{ "DISABLE_SCTV_FRIENDS_SPECTATE", 7107, 2 },
	{ "DISABLE_SCTV_GTAO_TV", 7108, 2 },
	{ "DISABLE_SCTV_DEV_SPECTATE", 7109, 2 },
	{ "LTS_M_BLACK_BULLETPROOF", 7112, 0 },
	{ "LTS_M_GRAY_BULLETPROOF", 7113, 0 },
	{ "LTS_M_CHARCOAL_BULLETPROOF", 7114, 0 },
	{ "LTS_M_TAN_BULLETPROOF", 7115, 0 },
	{ "LTS_M_FOREST_BULLETPROOF", 7116, 0 },
	{ "LTS_M_BLACK_COMBAT_PANTS", 7117, 0 },
	{ "LTS_M_GRAY_COMBAT_PANTS", 7118, 0 },
	{ "LTS_M_CHARCOAL_COMBAT_PANTS", 7119, 0 },
	{ "LTS_M_TAN_COMBAT_PANTS", 7120, 0 },
	{ "LTS_M_FOREST_COMBAT_PANTS", 7121, 0 },
	{ "LTS_M_BLACK_COMBAT_TOP", 7122, 0 },
	{ "LTS_M_GRAY_COMBAT_TOP", 7123, 0 },
	{ "LTS_M_CHARCOAL_COMBAT_TOP", 7124, 0 },
	{ "LTS_M_TAN_COMBAT_TOP", 7125, 0 },
	{ "LTS_M_FOREST_COMBAT_TOP", 7126, 0 },
	{ "LTS_M_BLACK_COMBAT_SWEATER", 7127, 0 },
	{ "LTS_M_GRAY_COMBAT_SWEATER", 7128, 0 },
	{ "LTS_M_CHARCOAL_COMBAT_SWEATER", 7129, 0 },
	{ "LTS_M_TAN_COMBAT_SWEATER", 7130, 0 },
	{ "LTS_M_GREEN_COMBAT_SWEATER", 7131, 0 },
	{ "LTS_M_BLACK_COMBAT_MASK", 7132, 0 },
	{ "LTS_M_GRAY_COMBAT_MASK", 7133, 0 },
	{ "LTS_M_CHARCOAL_COMBAT_MASK", 7134, 0 },
	{ "LTS_M_TAN_COMBAT_MASK", 7135, 0 },
	{ "LTS_M_FOREST_COMBAT_MASK", 7136, 0 },
	{ "LTS_M_BLACK_SKELETAL", 7137, 0 },
	{ "LTS_M_GRAY_SKELETAL", 7138, 0 },
	{ "LTS_M_CHARCOAL_SKELETAL", 7139, 0 },
	{ "LTS_M_TAN_SKELETAL", 7140, 0 },
	{ "LTS_M_GREEN_SKELETAL", 7141, 0 },
	{ "LTS_M_BLACK_TACT_GLOVES", 7142, 0 },
	{ "LTS_M_GRAY_TACT_GLOVES", 7143, 0 },
	{ "LTS_M_CHARCOAL_TACT_GLOVES", 7144, 0 },
	{ "LTS_M_TAN_TACT_GLOVES", 7145, 0 },
	{ "LTS_M_FOREST_TACT_GLOVES", 7146, 0 },
	{ "LTS_M_BLACK_WOOL_GLOVES", 7147, 0 },
	{ "LTS_M_GRAY_WOOL_GLOVES", 7148, 0 },
	{ "LTS_M_CHARCOAL_WOOL_GLOVES", 7149, 0 },
	{ "LTS_M_TAN_WOOL_GLOVES", 7150, 0 },
	{ "LTS_M_GREEN_WOOL_GLOVES", 7151, 0 },
	{ "LTS_F_BLACK_BULLETPROOF", 7152, 0 },
	{ "LTS_F_GRAY_BULLETPROOF", 7153, 0 },
	{ "LTS_F_CHARCOAL_BULLETPROOF", 7154, 0 },
	{ "LTS_F_TAN_BULLETPROOF", 7155, 0 },
	{ "LTS_F_FOREST_BULLETPROOF", 7156, 0 },
	{ "LTS_F_BLACK_COMBAT_PANTS", 7157, 0 },
	{ "LTS_F_GRAY_COMBAT_PANTS", 7158, 0 },
	{ "LTS_F_CHARCOAL_COMBAT_PANTS", 7159, 0 },
	{ "LTS_F_TAN_COMBAT_PANTS", 7160, 0 },
	{ "LTS_F_FOREST_COMBAT_PANTS", 7161, 0 },
	{ "LTS_F_BLACK_COMBAT_TOP", 7162, 0 },
	{ "LTS_F_GRAY_COMBAT_TOP", 7163, 0 },
	{ "LTS_F_CHARCOAL_COMBAT_TOP", 7164, 0 },
	{ "LTS_F_TAN_COMBAT_TOP", 7165, 0 },
	{ "LTS_F_FOREST_COMBAT_TOP", 7166, 0 },
	{ "LTS_F_BLACK_COMBAT_SWEATER", 7167, 0 },
	{ "LTS_F_GRAY_COMBAT_SWEATER", 7168, 0 },
	{ "LTS_F_CHARCOAL_COMBAT_SWEATER", 7169, 0 },
	{ "LTS_F_TAN_COMBAT_SWEATER", 7170, 0 },
	{ "LTS_F_GREEN_COMBAT_SWEATER", 7171, 0 },
	{ "LTS_F_BLACK_COMBAT_MASK", 7172, 0 },
	{ "LTS_F_GRAY_COMBAT_MASK", 7173, 0 },
	{ "LTS_F_CHARCOAL_COMBAT_MASK", 7174, 0 },
	{ "LTS_F_TAN_COMBAT_MASK", 7175, 0 },
	{ "LTS_F_FOREST_COMBAT_MASK", 7176, 0 },
	{ "LTS_F_BLACK_SKELETAL", 7177, 0 },
	{ "LTS_F_GRAY_SKELETAL", 7178, 0 },
	{ "LTS_F_CHARCOAL_SKELETAL", 7179, 0 },
	{ "LTS_F_TAN_SKELETAL", 7180, 0 },
	{ "LTS_F_GREEN_SKELETAL", 7181, 0 },
	{ "LTS_F_BLACK_TACT_GLOVES", 7182, 0 },
	{ "LTS_F_GRAY_TACT_GLOVES", 7183, 0 },
	{ "LTS_F_CHARCOAL_TACT_GLOVES", 7184, 0 },
	{ "LTS_F_TAN_TACT_GLOVES", 7185, 0 },
	{ "LTS_F_FOREST_TACT_GLOVES", 7186, 0 },
	{ "LTS_F_BLACK_WOOL_GLOVES", 7187, 0 },
	{ "LTS_F_GRAY_WOOL_GLOVES", 7188, 0 },
	{ "LTS_F_CHARCOAL_WOOL_GLOVES", 7189, 0 },
	{ "LTS_F_TAN_WOOL_GLOVES", 7190, 0 },
	{ "LTS_F_GREEN_WOOL_GLOVES", 7191, 0 },
	{ "LTS_M_THE_HEAVY_NIGHT", 7192, 1 },
	{ "LTS_M_THE_HEAVY_URBAN", 7193, 1 },
	{ "LTS_M_THE_HEAVY_STEEL", 7194, 1 },
	{ "LTS_M_THE_HEAVY_TUNDRA", 7195, 1 },
	{ "LTS_M_THE_HEAVY_FOREST", 7196, 1 },
	{ "LTS_M_THE_MASKED_NIGHT", 7197, 1 },
	{ "LTS_M_THE_MASKED_URBAN", 7198, 1 },
	{ "LTS_M_THE_MASKED_STEEL", 7199, 1 },
	{ "LTS_M_THE_MASKED_TUNDRA", 7200, 1 },
	{ "LTS_M_THE_MASKED_FOREST", 7201, 1 },
	{ "LTS_M_THE_NIGHT", 7202, 1 },
	{ "LTS_M_THE_URBAN", 7203, 1 },
	{ "LTS_M_THE_STEEL", 7204, 1 },
	{ "LTS_M_THE_TUNDRA", 7205, 1 },
	{ "LTS_M_THE_FOREST", 7206, 1 },
	{ "LTS_F_THE_HEAVY_NIGHT", 7207, 1 },
	{ "LTS_F_THE_HEAVY_URBAN", 7208, 1 },
	{ "LTS_F_THE_HEAVY_STEEL", 7209, 1 },
	{ "LTS_F_THE_HEAVY_TUNDRA", 7210, 1 },
	{ "LTS_F_THE_HEAVY_FOREST", 7211, 1 },
	{ "LTS_F_THE_MASKED_NIGHT", 7212, 1 },
	{ "LTS_F_THE_MASKED_URBAN", 7213, 1 },
	{ "LTS_F_THE_MASKED_STEEL", 7214, 1 },
	{ "LTS_F_THE_MASKED_TUNDRA", 7215, 1 },
	{ "LTS_F_THE_MASKED_FOREST", 7216, 1 },
	{ "LTS_F_THE_NIGHT", 7217, 1 },
	{ "LTS_F_THE_URBAN", 7218, 1 },
	{ "LTS_F_THE_STEEL", 7219, 1 },
	{ "LTS_F_THE_TUNDRA", 7220, 1 },
	{ "LTS_F_THE_FOREST", 7221, 1 },
	{ "LTS_M_EVENT_ITEM_VICTORY_FIST_TSHIRT", 7222, 0 },
	{ "LTS_F_EVENT_ITEM_VICTORY_FIST_TOP", 7223, 0 },
	{ "LTS_M_EVENT_ITEM_PLEASE_STOP_ME_HOCKEY", 7224, 0 },
	{ "LTS_LCC_INNOVATION", 7225, 0 },
	{ "LTS_SHITZU_HAKUCHOU", 7226, 0 },
	{ "LTS_LAMPADATI_FURORE_GT", 7227, 0 },
	{ "LTS_CANIS_KALAHARI_TOPLESS", 7228, 0 },
	{ "LTS_HEAVY_SHOTGUN", 7229, 0 },
	{ "LTS_HEAVY_SHOTGUN_EXTENDED_CLIP", 7230, 0 },
	{ "LTS_HEAVY_SHOTGUN_FLASHLIGHT", 7231, 0 },
	{ "LTS_HEAVY_SHOTGUN_SUPPRESSOR", 7232, 0 },
	{ "LTS_HEAVY_SHOTGUN_GRIP", 7233, 0 },
	{ "LTS_HEAVY_SHOTGUN_AMMO", 7234, 0 },
	{ "LTS_MARKSMAN_RIFLE", 7235, 0 },
	{ "LTS_MARKSMAN_RIFLE_EXTENDED_CLIP", 7236, 0 },
	{ "LTS_MARKSMAN_RIFLE_FLASHLIGHT", 7237, 0 },
	{ "LTS_MARKSMAN_RIFLE_SCOPE", 7238, 0 },
	{ "LTS_MARKSMAN_RIFLE_SUPPRESSOR", 7239, 0 },
	{ "LTS_MARKSMAN_RIFLE_GRIP", 7240, 0 },
	{ "LTS_MARKSMAN_RIFLE_AMMO", 7242, 0 },
	{ "LTS_FINLAND_CHUTE_BAG", 7243, 0 },
	{ "LTS_DENMARK_CHUTE_BAG", 7244, 0 },
	{ "LTS_NETHERLANDS_CHUTE_BAG", 7245, 0 },
	{ "LTS_PORTUGAL_CHUTE_BAG", 7246, 0 },
	{ "LTS_CHINA_CHUTE_BAG", 7247, 0 },
	{ "LTS_CROATIA_CHUTE_BAG", 7248, 0 },
	{ "LTS_CZECH_REPUBLIC_CHUTE_BAG", 7249, 0 },
	{ "LTS_HUNGARY_CHUTE_BAG", 7250, 0 },
	{ "LTS_LIECHTENSTEIN_CHUTE_BAG", 7251, 0 },
	{ "LTS_MALTA_CHUTE_BAG", 7252, 0 },
	{ "LTS_NEW_ZEALAND_CHUTE_BAG", 7253, 0 },
	{ "LTS_NIGERIA_CHUTE_BAG", 7254, 0 },
	{ "LTS_POLAND_CHUTE_BAG", 7255, 0 },
	{ "LTS_PUERTO_RICO_CHUTE_BAG", 7256, 0 },
	{ "LTS_SLOVAKIA_CHUTE_BAG", 7257, 0 },
	{ "LTS_SLOVENIA_CHUTE_BAG", 7258, 0 },
	{ "LTS_SOUTH_AFRICA_CHUTE_BAG", 7259, 0 },
	{ "LTS_SOUTH_KOREA_CHUTE_BAG", 7260, 0 },
	{ "LTS_PALESTINE_CHUTE_BAG", 7261, 0 },
	{ "LTS_ISRAEL_CHUTE_BAG", 7262, 0 },
	{ "DLC_WEAPON_TINT_GOLD_VINTAGE_PISTOL", 7264, 0 },
	{ "DLC_WEAPON_TINT_PLATINUM_VINTAGE_PISTOL", 7265, 0 },
	{ "DLC_WEAPON_TINT_ARMY_VINTAGE_PISTOL", 7266, 0 },
	{ "DLC_WEAPON_TINT_GREEN_VINTAGE_PISTOL", 7267, 0 },
	{ "DLC_WEAPON_TINT_ORANGE_VINTAGE_PISTOL", 7268, 0 },
	{ "DLC_WEAPON_TINT_LSPD_VINTAGE_PISTOL", 7269, 0 },
	{ "DLC_WEAPON_TINT_PINK_VINTAGE_PISTOL", 7270, 0 },
	{ "DLC_WEAPON_TINT_GOLD_MARKSMAN_RIFLE", 7271, 0 },
	{ "DLC_WEAPON_TINT_PLATINUM_MARKSMAN_RIFLE", 7272, 0 },
	{ "DLC_WEAPON_TINT_ARMY_MARKSMAN_RIFLE", 7273, 0 },
	{ "DLC_WEAPON_TINT_GREEN_MARKSMAN_RIFLE", 7274, 0 },
	{ "DLC_WEAPON_TINT_ORANGE_MARKSMAN_RIFLE", 7275, 0 },
	{ "DLC_WEAPON_TINT_LSPD_MARKSMAN_RIFLE", 7276, 0 },
	{ "DLC_WEAPON_TINT_PINK_MARKSMAN_RIFLE", 7277, 0 },
	{ "DLC_WEAPON_TINT_GOLD_HEAVY_SHOTGUN", 7278, 0 },
	{ "DLC_WEAPON_TINT_PLATINUM_HEAVY_SHOTGUN", 7279, 0 },
	{ "DLC_WEAPON_TINT_ARMY_HEAVY_SHOTGUN", 7280, 0 },
	{ "DLC_WEAPON_TINT_GREEN_HEAVY_SHOTGUN", 7281, 0 },
	{ "DLC_WEAPON_TINT_ORANGE_HEAVY_SHOTGUN", 7282, 0 },
	{ "DLC_WEAPON_TINT_LSPD_HEAVY_SHOTGUN", 7283, 0 },
	{ "DLC_WEAPON_TINT_PINK_HEAVY_SHOTGUN", 7284, 0 },
	{ "OBJECTIVE_POOL_SIZE", 7288, 0 },
	{ "DISABLE_QUEUING_SYSTEM", 7405, 2 },
	{ "DESTROYVEHICLEBASEWEIGHTING", 7411, 1 },
	{ "DISABLE_QUICK_FIX_VEH", 7412, 2 },
	{ "SKIP_SAVE_MIGRATION_STATUS", 7413, 2 },
	{ "USE_DAILY_OBJECTIVE_LIMITED_POOL", 7417, 2 },
	{ "NUM_JOB_OBJECTIVES_IN_POOL", 7418, 0 },
	{ "VEHICLES_HEIST_BRUTE_BOXVILLE", 7458, 0 },
	{ "VEHICLES_HEIST_DINKA_ENDURO", 7461, 0 },
	{ "VEHICLES_HEIST_MAMMOTH_HYDRA", 7464, 0 },
	{ "VEHICLES_HEIST_HVY_INSURGENT_PICKUP", 7465, 0 },
	{ "VEHICLES_HEIST_HVY_INSURGENT", 7466, 0 },
	{ "VEHICLES_HEIST_PRINCIPE_LECTRO", 7469, 0 },
	{ "VEHICLES_HEIST_MAIBATSU_MULE", 7470, 0 },
	{ "VEHICLES_HEIST_SAVAGE", 7471, 0 },
	{ "VEHICLES_HEIST_KARIN_TECHNICAL", 7472, 0 },
	{ "VEHICLES_HEIST_BUCKINGHAM_VALKYRIE", 7473, 0 },
	{ "Vehicles_Heist_Pbus", 7475, 0 },
	{ "VEHICLES_HEIST_MESA3", 7476, 0 },
	{ "DLC_WEAPON_MARKSMAN_PISTOL_AMMO", 7486, 0 },
	{ "DLC_WEAPON_REVOLVER_AMMO", 7494, 0 },
	{ "HEIST_SERIES_A_FUNDING_CASH_REWARD", 7504, 0 },
	{ "CASH_REWARD_OVERRIDE_ELITE_OBJECTIVES_SERIES_A", 7509, 0 },
	{ "toggle_gift_to_player_when_logging_on", 7548, 2 },
	{ "CGTONG_CHEVAL_MARSHALL", 7554, 0 },
	{ "VEHICLEWEBSITE_SALE", 7564, 2 },
	{ "DISABLE_PURCHASE_OF_THIRD_PROPERTY", 7751, 2 },
	{ "DISABLE_TRANSFER_VEHICLE_BETWEEN_GARAGE", 7752, 2 },
	{ "DISABLE_SNOWBALLS", 7753, 2 },
	{ "DISABLE_CHRISTMAS_TREE_PERISHING_SQUARE_SNOW", 7754, 2 },
	{ "DISABLE_CHRISTMAS_TREE_PERISHING_SQUARE", 7755, 2 },
	{ "DISABLE_CHRISTMAS_TREE_APARTMENT", 7756, 2 },
	{ "DISABLE_CHRISTMAS_CLOTHING", 7757, 2 },
	{ "DISABLE_CHRISTMAS_MASKS", 7758, 2 },
	{ "DISABLE_CHRISTMAS_VEHICLES", 7759, 2 },
	{ "MAX_NUMBER_OF_SNOWBALLS", 7760, 0 },
	{ "PICK_UP_NUMBER_OF_SNOWBALLS", 7761, 0 },
	{ "VEHICLE_XMAS14_DINKA_JESTER_RACECAR", 7762, 0 },
	{ "VEHICLE_XMAS14_DEWBAUCHEE_MASSACRO_RACECAR", 7763, 0 },
	{ "VEHICLE_XMAS14_RAT_TRUCK", 7764, 0 },
	{ "VEHICLE_XMAS14_SLAMVAN", 7765, 0 },
	{ "VEHICLE_XMAS14_BRAVADO_SPRUNK_BUFFALO", 7766, 0 },
	{ "VEHICLE_XMAS14_VAPID_PISSWASSER_DOMINATOR", 7767, 0 },
	{ "VEHICLE_XMAS14_BRAVADO_REDWOOD_GAUNTLET", 7768, 0 },
	{ "VEHICLE_XMAS14_DECLASSE_BURGER_SHOT_STALLION", 7769, 0 },
	{ "WEAPONS_XMAS14_HOMING_LAUNCHER", 7770, 0 },
	{ "WEAPONS_XMAS14_HOMING_LAUNCHER_AMMO", 7771, 0 },
	{ "WEAPONS_XMAS14_PROXIMITY_MINE", 7772, 0 },
	{ "WEAPONS_XMAS14_BLACK_COMBAT_CHUTE_BAG", 7773, 0 },
	{ "WEAPONS_XMAS14_GRAY_COMBAT_CHUTE_BAG", 7774, 0 },
	{ "WEAPONS_XMAS14_CHARCOAL_COMBAT_CHUTE_BAG", 7775, 0 },
	{ "WEAPONS_XMAS14_TAN_COMBAT_CHUTE_BAG", 7776, 0 },
	{ "WEAPONS_XMAS14_FOREST_COMBAT_CHUTE_BAG", 7777, 0 },
	{ "TATTOOS_XMAS14_SKULL_RIDER", 7778, 0 },
	{ "TATTOOS_XMAS14_SPIDER_OUTLINE", 7779, 0 },
	{ "TATTOOS_XMAS14_SPIDER_COLOR", 7780, 0 },
	{ "TATTOOS_XMAS14_SNAKE_OUTLINE", 7781, 0 },
	{ "TATTOOS_XMAS14_SNAKE_SHADED", 7782, 0 },
	{ "TATTOOS_XMAS14_CARP_OUTLINE", 7783, 0 },
	{ "TATTOOS_XMAS14_CARP_SHADED", 7784, 0 },
	{ "TATTOOS_XMAS14_LOS_MUERTOS", 7785, 0 },
	{ "TATTOOS_XMAS14_DEATH_BEFORE_DISHONOR", 7786, 0 },
	{ "TATTOOS_XMAS14_TIME_TO_DIE", 7787, 0 },
	{ "TATTOOS_XMAS14_ELECTRIC_SNAKE", 7788, 0 },
	{ "TATTOOS_XMAS14_ROARING_TIGER", 7789, 0 },
	{ "TATTOOS_XMAS14_8_BALL_SKULL", 7790, 0 },
	{ "TATTOOS_XMAS14_LIZARD", 7791, 0 },
	{ "TATTOOS_XMAS14_FLORAL_DAGGER", 7792, 0 },
	{ "TATTOOS_XMAS14_JAPANESE_WARRIOR", 7793, 0 },
	{ "TATTOOS_XMAS14_LOOSE_LIPS_OUTLINE", 7794, 0 },
	{ "TATTOOS_XMAS14_LOOSE_LIPS_COLOR", 7795, 0 },
	{ "TATTOOS_XMAS14_ROYAL_DAGGER_OUTLINE", 7796, 0 },
	{ "TATTOOS_XMAS14_ROYAL_DAGGER_COLOR", 7797, 0 },
	{ "TATTOOS_XMAS14_TIMES_UP_OUTLINE", 7798, 0 },
	{ "TATTOOS_XMAS14_TIMES_UP_COLOR", 7799, 0 },
	{ "TATTOOS_XMAS14_YOURE_NEXT_OUTLINE", 7800, 0 },
	{ "TATTOOS_XMAS14_YOURE_NEXT_COLOR", 7801, 0 },
	{ "TATTOOS_XMAS14_SNAKE_HEAD_OUTLINE", 7802, 0 },
	{ "TATTOOS_XMAS14_SNAKE_HEAD_COLOR", 7803, 0 },
	{ "TATTOOS_XMAS14_FUCK_LUCK_OUTLINE", 7804, 0 },
	{ "TATTOOS_XMAS14_FUCK_LUCK_COLOR", 7805, 0 },
	{ "TATTOOS_XMAS14_EXECUTIONER", 7806, 0 },
	{ "TATTOOS_XMAS14_BEAUTIFUL_DEATH", 7807, 0 },
	{ "TOGGLE_CHRISTMAS_EVE_GIFT", 7808, 2 },
	{ "TOGGLE_NEW_YEARS_EVE_GIFT", 7809, 2 },
	{ "TOGGLE_NEW_YEARS_DAY_GIFT", 7810, 2 },
	{ "HESIT_VEHICLE_PRICE_PRINCIPLE_NEMESIS", 8256, 0 },
	{ "HESIT_GEAR_PRICE_NIGHT_VISION", 8262, 0 },
	{ "HESIT_GEAR_PRICE_REBREATHER", 8263, 0 },
	{ "HESIT_GEAR_PRICE_LCD_EARPIECE", 8264, 0 },
	{ "HESIT_GEAR_PRICE_RED_EARPIECE", 8265, 0 },
	{ "HESIT_GEAR_PRICE_GRAY_EARPIECE", 8266, 0 },
	{ "MALE_UPPERS_STEALTH_UTILITY_VEST", 8302, 0 },
	{ "MALE_UPPERS_HEAVY_UTILITY_VEST", 8303, 0 },
	{ "FEMALE_UPPERS_STEALTH_UTILITY_VEST", 8429, 0 },
	{ "FEMALE_UPPERS_HEAVY_UTILITY_VEST", 8430, 0 },
	{ "MALE_AND_FEMALE_OUTFITS_THE_SCIENTIST", 8516, 0 },
	{ "MALE_AND_FEMALE_OUTFITS_THE_HAZARD", 8517, 0 },
	{ "MALE_AND_FEMALE_OUTFITS_THE_QUARANTINE", 8519, 0 },
	{ "MALE_AND_FEMALE_OUTFITS_FLIGHT_SUITS_THE_FIGHTER", 8548, 1 },
	{ "FEMALE_UPPERS_BLACK_HEAVY_UTILITY_VEST", 8761, 0 },
	{ "NUMBER_OF_VEHICLES_SOLD_IN_A_DAY", 8784, 0 },
	{ "CAPS_ARE_ENFORED", 8841, 2 },
	{ "THRESHOLD_NO_OF_CARS", 8842, 0 },
	{ "THRESHOLD_NO_OF_MINUTES", 8843, 0 },
	{ "CAP_FOR_EXPLOIT_LEVEL_1", 8846, 0 },
	{ "CAP_FOR_EXPLOIT_LEVEL_2", 8847, 0 },
	{ "CAP_FOR_EXPLOIT_LEVEL_3", 8848, 0 },
	{ "CAP_FOR_EXPLOIT_LEVEL_4", 8849, 0 },
	{ "CAP_FOR_EXPLOIT_LEVEL_5", 8850, 0 },
	{ "CAP_FOR_EXPLOIT_LEVEL_6", 8851, 0 },
	{ "CAP_FOR_EXPLOIT_LEVEL_7", 8852, 0 },
	{ "NUMBER_OF_MINUTES_FOR_CAP_RECOVERY", 8853, 0 },
	{ "CURRENTVEHICLESALESSEASON", 8862, 0 },
	{ "REPEAT_OFFENDERS_CAPS_ARE_ENFORCED", 8869, 2 },
	{ "CURRENTVEHICLESALESTUSEASON", 8880, 0 },
	{ "PERMANENTCAPREPEATOFFENDER1", 8881, 0 },
	{ "PERMANENTCAPREPEATOFFENDER2", 8882, 0 },
	{ "LUXE1_WEBSITE_BUCKINGHAM_LUXOR_DELUXE", 9227, 0 },
	{ "LUXE1_AMMO_COMBAT_PDW_AMMO", 9241, 0 },
	{ "ENABLEPVCLEANUP", 9244, 2 },
	{ "LUXE2_DINKA_VINDICATOR", 9518, 0 },
	{ "CHALLENGE_EOM_DEFAULT_RP_REWARD", 9559, 0 },
	{ "HOT_PROPERTY_EOM_DEFAULT_RP_REWARD", 9592, 0 },
	{ "KING_OF_THE_CASTLE_EOM_DEFAULT_RP_REWARD", 9621, 0 },
	{ "PASS_THE_PARCEL_EOM_DEFAULT_RP_REWARD", 9637, 0 },
	{ "PENNED_IN_PEN_FINISHING_SIZE", 9773, 1 },
	{ "KING_OF_THE_CASTLE_DISABLE_VARIANT_1", 9822, 2 },
	{ "KING_OF_THE_CASTLE_DISABLE_VARIANT_2", 9823, 2 },
	{ "KING_OF_THE_CASTLE_DISABLE_VARIANT_3", 9824, 2 },
	{ "KING_OF_THE_CASTLE_DISABLE_VARIANT_4", 9825, 2 },
	{ "KING_OF_THE_CASTLE_DISABLE_VARIANT_5", 9826, 2 },
	{ "KING_OF_THE_CASTLE_DISABLE_VARIANT_6", 9827, 2 },
	{ "KING_OF_THE_CASTLE_DISABLE_VARIANT_7", 9828, 2 },
	{ "KING_OF_THE_CASTLE_DISABLE_VARIANT_8", 9829, 2 },
	{ "HOT_TARGET_MINIMUM_PARTICIPATION_RP", 9876, 0 },
	{ "KILL_LIST_MINIMUM_PARTICIPATION_RP", 9883, 0 },
	{ "CHECKPOINT_MINIMUM_PARTICIPATION_RP", 9904, 0 },
	{ "HELICOPTER_HOT_TARGET_MINIMUM_PARTICIPATION_RP", 9910, 0 },
	{ "DEAD_DROP_MINIMUM_PARTICIPATION_RP", 9937, 0 },
	{ "COMP_KILL_LIST_MINIMUM_PARTICIPATION_RP", 9944, 0 },
	{ "HUNT_THE_BEAST_MINIMUM_PARTICIPATION_RP", 9964, 0 },
	{ "CRIMINAL_DAMAGE_EVENT_MULTIPLIER_RP", 10064, 1 },
	{ "HUNT_THE_BEAST_EVENT_MULTIPLIER_RP", 10066, 1 },
	{ "KILL_LIST_EVENT_MULTIPLIER_RP", 10068, 1 },
	{ "KILL_LIST_COMPETITIVE_EVENT_MULTIPLIER_RP", 10070, 1 },
	{ "PENNED_IN_EVENT_MULTIPLIER_RP", 10072, 1 },
	{ "CHECKPOINTS_EVENT_MULTIPLIER_RP", 10074, 1 },
	{ "CHALLENGE_EVENT_MULTIPLIER_RP", 10076, 1 },
	{ "MOVING_TARGET_EVENT_MULTIPLIER_RP", 10080, 1 },
	{ "HELI_MOVING_TARGET_EVENT_MULTIPLIER_RP", 10082, 1 },
	{ "HOLD_THE_WHEEL_EVENT_MULTIPLIER_RP", 10084, 1 },
	{ "HOT_PROPERTY_EVENT_MULTIPLIER_RP", 10086, 1 },
	{ "DEAD_DROP_EVENT_MULTIPLIER_RP", 10088, 1 },
	{ "KING_OF_THE_CASTLE_EVENT_MULTIPLIER_RP", 10090, 1 },
	{ "DLC_SHIRT_NELSON_IN_NAPLES", 10112, 2 },
	{ "DLC_SHIRT_AN_AMERICAN_DIVORCE", 10114, 2 },
	{ "TURN_ON_VALENTINE_WEAPON", 10182, 2 },
	{ "TURN_ON_VALENTINE_VEHICLE", 10183, 2 },
	{ "TURN_ON_VALENTINE_MASKS", 10184, 2 },
	{ "TURN_ON_VALENTINE_HAIR", 10185, 2 },
	{ "TURN_ON_VALENTINE_CLOTHING", 10186, 2 },
	{ "TURN_ON_HALLOWEEN_WEAPONS", 10203, 2 },
	{ "TURN_ON_HALLOWEEN_ANIMS", 10210, 2 },
	{ "CAR_MODS_BLACK_MARIACHI_BOBBLEHEAD", 10501, 0 },
	{ "CAR_MODS_GREEN_MARIACHI_BOBBLEHEAD", 10502, 0 },
	{ "CAR_MODS_BLUE_MARIACHI_BOBBLEHEAD", 10503, 0 },
	{ "CAR_MODS_BOARS_BOBBLEHEAD", 10504, 0 },
	{ "CAR_MODS_CORKERS_BOBBLEHEAD", 10505, 0 },
	{ "CAR_MODS_FEUD_BOBBLEHEAD", 10506, 0 },
	{ "CAR_MODS_PANIC_BOBBLEHEAD", 10507, 0 },
	{ "CAR_MODS_SALAMANDERS_BOBBLEHEAD", 10508, 0 },
	{ "CAR_MODS_LIBERTY_BOBBLEHEAD", 10509, 0 },
	{ "CAR_MODS_LS_SHRIMPS_BOBBLEHEAD", 10510, 0 },
	{ "CAR_MODS_LC_WRATH_BOBBLEHEAD", 10511, 0 },
	{ "CAR_MODS_POUNDERS_BOBBLEHEAD", 10512, 0 },
	{ "CAR_MODS_BOOKWORMS_BOBBLEHEAD", 10513, 0 },
	{ "CAR_MODS_MAGNETICS_BOBBLEHEAD", 10514, 0 },
	{ "CAR_MODS_LSC_BOBBLEHEAD", 10515, 0 },
	{ "CAR_MODS_OG_BOBBLEHEAD", 10516, 0 },
	{ "CAR_MODS_IMPOTENT_RAGE_BOBBLEHEAD", 10517, 0 },
	{ "CAR_MODS_VINTAGE_IMPOTENT_RAGE_BOBBLEHEAD", 10518, 0 },
	{ "CAR_MODS_WHITE_POGO_BOBBLEHEAD", 10519, 0 },
	{ "CAR_MODS_RED_POGO_BOBBLEHEAD", 10520, 0 },
	{ "CAR_MODS_GRIM_REAPER_BOBBLEHEAD", 10521, 0 },
	{ "CAR_MODS_SUPERMOD_SLOT_STOCK_COLUMN_SHIFT_LEVER", 10530, 0 },
	{ "CAR_MODS_SUPERMOD_SLOT_STOCK_PLAQUE", 10531, 0 },
	{ "PRIMARY_MACHINE_PISTOL", 10570, 0 },
	{ "AMMO_MACHINE_PISTOL_AMMO", 10572, 0 },
	{ "HALLOWEEN_2015_BRUNETTE_CORPSE_BRIDE_BOBBLEHEAD", 10708, 0 },
	{ "HALLOWEEN_2015_WHITE_CORPSE_BRIDE_BOBBLEHEAD", 10709, 0 },
	{ "HALLOWEEN_2015_PINK_CORPSE_BRIDE_BOBBLEHEAD", 10710, 0 },
	{ "HALLOWEEN_2015_WHITE_MASK_SLASHER_BOBBLEHEAD", 10711, 0 },
	{ "HALLOWEEN_2015_RED_MASK_SLASHER_BOBBLEHEAD", 10712, 0 },
	{ "HALLOWEEN_2015_YELLOW_MASK_SLASHER_BOBBLEHEAD", 10713, 0 },
	{ "HALLOWEEN_2015_BLUE_ZOMBIE_BOBBLEHEAD", 10714, 0 },
	{ "HALLOWEEN_2015_GREEN_ZOMBIE_BOBBLEHEAD", 10715, 0 },
	{ "HALLOWEEN_2015_PALE_ZOMBIE_BOBBLEHEAD", 10716, 0 },
	{ "HALLOWEEN_2015_POSSESSED_URCHIN_BOBBLEHEAD", 10717, 0 },
	{ "HALLOWEEN_2015_DEMONIC_URCHIN_BOBBLEHEAD", 10718, 0 },
	{ "HALLOWEEN_2015_GRUESOME_URCHIN_BOBBLEHEAD", 10719, 0 },
	{ "HALLOWEEN_2015_TUXEDO_FRANK_BOBBLEHEAD", 10720, 0 },
	{ "HALLOWEEN_2015_PURPLE_SUIT_FRANK_BOBBLEHEAD", 10721, 0 },
	{ "HALLOWEEN_2015_STRIPED_SUIT_FRANK_BOBBLEHEAD", 10722, 0 },
	{ "HALLOWEEN_2015_BLACK_MUMMY_BOBBLEHEAD", 10723, 0 },
	{ "HALLOWEEN_2015_WHITE_MUMMY_BOBBLEHEAD", 10724, 0 },
	{ "HALLOWEEN_2015_BROWN_MUMMY_BOBBLEHEAD", 10725, 0 },
	{ "HALLOWEEN_2015_PALE_WEREWOLF_BOBBLEHEAD", 10726, 0 },
	{ "HALLOWEEN_2015_DARK_WEREWOLF_BOBBLEHEAD", 10727, 0 },
	{ "HALLOWEEN_2015_GREY_WEREWOLF_BOBBLEHEAD", 10728, 0 },
	{ "HALLOWEEN_2015_FLESHY_VAMPIRE_BOBBLEHEAD", 10729, 0 },
	{ "TURN_ON_HALLOWEEN_SOUNDS", 10847, 2 },
	{ "XMAS2015_VEHICLE", 10855, 2 },
	{ "PROPERTYWEBSITE_SALE", 11325, 2 },
	{ "APARTMENT_WEBSITE_BENEFACTOR_SCHAFTER_TURRETED_LIMO", 11409, 0 },
	{ "APARTMENT_WEBSITE_BUCKINGHAM_SUPERVOLITO", 11417, 0 },
	{ "APARTMENT_WEBSITE_BUCKINGHAM_SUPERVOLITO_CARBON", 11418, 0 },
	{ "APARTMENT_CAR_MODSECLIPSE_TOWERS_PENTHOUSE_SUITE_1", 11457, 0 },
	{ "APARTMENT_CAR_MODSECLIPSE_TOWERS_PENTHOUSE_SUITE_2", 11458, 0 },
	{ "APARTMENT_CAR_MODSECLIPSE_TOWERS_PENTHOUSE_SUITE_3", 11459, 0 },
	{ "APARTMENT_CAR_MODSSTILT_3655_WILD_OATS_DRIVE", 11460, 0 },
	{ "APARTMENT_CAR_MODSSTILT_2044_NORTH_CONKER_AVENUE", 11461, 0 },
	{ "APARTMENT_CAR_MODSSTILT_2868_HILLCREST_AVENUE", 11462, 0 },
	{ "APARTMENT_CAR_MODSSTILT_2862_HILLCREST_AVENUE", 11463, 0 },
	{ "APARTMENT_CAR_MODSSTILT_3677_WHISPYMOUND_DRIVE", 11464, 0 },
	{ "APARTMENT_CAR_MODSSTILT_2117_MILTON_ROAD", 11465, 0 },
	{ "APARTMENT_CAR_MODSSTILT_2866_HILLCREST_AVENUE", 11466, 0 },
	{ "APARTMENT_CAR_MODSSTILT_2874_HILLCREST_AVENUE", 11467, 0 },
	{ "APARTMENT_CAR_MODSSTILT_2113_MAD_WAYNE_THUNDER_DRIVE", 11468, 0 },
	{ "APARTMENT_CAR_MODSSTILT_2045_NORTH_CONKER_AVENUE", 11469, 0 },
	{ "TURN_ON_VALENTINE_2016_CLOTHING", 11529, 2 },
	{ "TURN_ON_VALENTINE_2016_VEHICLE", 11530, 2 },
	{ "OPTOUT_VEHICLEWEBSITE_SALE0", 11541, 0 },
	{ "OPTOUT_VEHICLEWEBSITE_SALE1", 11542, 0 },
	{ "TURN_ON_BE_MY_VALENTINE", 11581, 2 },
	{ "TURN_ON_BE_MY_VALENTINE_JOBS_POSIX", 11582, 0 },
	{ "BE_MY_VALENTINE_INVITE_WEIGHT", 11584, 1 },
	{ "DAVIDS_VS_GOLIATH_INVITE_WEIGHT", 11780, 1 },
	{ "TURN_ON_DAVIDS_VS_GOLIATH", 11781, 2 },
	{ "TURN_ON_DAVIDS_VS_GOLIATH_JOBS_POSIX", 11782, 0 },
	{ "NPCFLOWINVITE1", 11786, 0 },
	{ "NPCFLOWINVITE2", 11787, 0 },
	{ "NPCFLOWINVITE3", 11788, 0 },
	{ "NPCFLOWINVITE4", 11789, 0 },
	{ "NPCFLOWINVITE5", 11790, 0 },
	{ "NPCFLOWINVITE6", 11791, 0 },
	{ "NPCFLOWINVITE7", 11792, 0 },
	{ "NPCFLOWINVITE8", 11793, 0 },
	{ "NPCFLOWINVITE9", 11794, 0 },
	{ "NPCFLOWINVITE10", 11795, 0 },
	{ "NPCFLOWINVITE11", 11796, 0 },
	{ "NPCFLOWINVITE12", 11797, 0 },
	{ "NPCFLOWINVITESTARTPOSIX", 11798, 0 },
	{ "NPCFLOWINVITEINTERVALINSECONDS", 11799, 0 },
	{ "NPCFLOWINVITETIMEUNTILINVITEINSECONDS", 11800, 0 },
	{ "NPCFLOWINVITEPLAYLISTACTIVE", 11801, 2 },
	{ "SALE_CLOTHING_MENU_LOCATE_TYPE_BODYARMOUR", 11946, 2 },
	{ "ENABLE_LOWRIDER2_VIRGO3", 12338, 2 },
	{ "ENABLE_LOWRIDER2_FACTION", 12342, 2 },
	{ "ENABLE_LOWRIDER2_SLAMVAN", 12343, 2 },
	{ "ENABLE_LOWRIDER2_VIRGO3_POSIX", 12350, 0 },
	{ "ENABLE_LOWRIDER2_SABREGT_POSIX", 12351, 0 },
	{ "ENABLE_LOWRIDER2_TORNADO5_POSIX", 12352, 0 },
	{ "ENABLE_LOWRIDER2_MINIVAN_POSIX", 12353, 0 },
	{ "ENABLE_LOWRIDER2_FACTION_POSIX", 12354, 0 },
	{ "ENABLE_LOWRIDER2_SLAMVAN_POSIX", 12355, 0 },
	{ "AMMO_COMPACT_RIFLE_AMMO", 12671, 0 },
	{ "AMMO_DOUBLE_BARREL_SHOTGUN_AMMO", 12674, 0 },
	{ "TURN_ON_SUMO", 12697, 2 },
	{ "TURN_ON_SUMO_POSIX", 12699, 0 },
	{ "PISTOL_AMMO_DISPLAY_SALES", 13686, 2 },
	{ "SMG_AMMO_DISPLAY_SALES", 13687, 2 },
	{ "RIFLE_AMMO_DISPLAY_SALES", 13688, 2 },
	{ "MG_AMMO_DISPLAY_SALES", 13689, 2 },
	{ "SHOTGUN_AMMO_DISPLAY_SALES", 13690, 2 },
	{ "SNIPER_AMMO_DISPLAY_SALES", 13691, 2 },
	{ "FLAREGUN_AMMO_DISPLAY_SALES", 13692, 2 },
	{ "GRENADELAUNCHER_AMMO_DISPLAY_SALES", 13693, 2 },
	{ "RPG_AMMO_DISPLAY_SALES", 13694, 2 },
	{ "MINIGUN_AMMO_DISPLAY_SALES", 13695, 2 },
	{ "HOMINGLAUNCHER_AMMO_DISPLAY_SALES", 13696, 2 },
	{ "Disable_Stunt_Tracks_and_Props_DM", 13713, 2 },
	{ "Disable_Stunt_Tracks_and_Props_CAPTURE", 13714, 2 },
	{ "Disable_Stunt_Tracks_and_Props_LTS", 13715, 2 },
	{ "NPCFLOWINVITETIMEUNTILINVITEINSECONDSFORCEO", 14391, 0 },
	{ "AVAILABLE_PURCHASE_JUMPSUIT_GOLD", 14436, 2 },
	{ "AVAILABLE_PURCHASE_JUMPSUIT_BLACK", 14437, 2 },
	{ "AVAILABLE_PURCHASE_JUMPSUIT_SILVER", 14439, 2 },
	{ "ENABLE_BIKER_PROPERTY", 15098, 2 },
	{ "CREATOR_ENABLE_BIKER_DEFILER", 15099, 2 },
	{ "CREATOR_ENABLE_BIKER_NIGHTBLADE", 15100, 2 },
	{ "CREATOR_ENABLE_BIKER_ZOMBIEA", 15101, 2 },
	{ "CREATOR_ENABLE_BIKER_AVARUS", 15103, 2 },
	{ "CREATOR_ENABLE_BIKER_ZOMBIEB", 15104, 2 },
	{ "CREATOR_ENABLE_BIKER_HAKUCHOU2", 15105, 2 },
	{ "CREATOR_ENABLE_BIKER_VORTEX", 15106, 2 },
	{ "CREATOR_ENABLE_BIKER_SHOTARO", 15107, 2 },
	{ "CREATOR_ENABLE_BIKER_CHIMERA", 15108, 2 },
	{ "CREATOR_ENABLE_BIKER_RAPTOR", 15109, 2 },
	{ "CREATOR_ENABLE_BIKER_WESTERNDAEMON", 15110, 2 },
	{ "CREATOR_ENABLE_BIKER_BLAZER4", 15111, 2 },
	{ "CREATOR_ENABLE_BIKER_MANCHEZ", 15113, 2 },
	{ "CREATOR_ENABLE_BIKER_YOUGA2", 15114, 2 },
	{ "CREATOR_ENABLE_BIKER_WOLFSBANE", 15115, 2 },
	{ "CREATOR_ENABLE_BIKER_FAGGIO3", 15116, 2 },
	{ "CREATOR_ENABLE_BIKER_FAGGIO", 15117, 2 },
	{ "CREATOR_ENABLE_BIKER_FAGGIO", 15117, 2 },
	{ "CREATOR_ENABLE_BIKER_TORNADO6", 15118, 2 },
	{ "CREATOR_ENABLE_BIKER_BAGGER", 15119, 2 },
	{ "CREATOR_ENABLE_BIKER_RATBIKE", 15120, 2 },
	{ "ENABLE_BIKER_DEFILER", 15121, 2 },
	{ "ENABLE_BIKER_NIGHTBLADE", 15122, 2 },
	{ "ENABLE_BIKER_ZOMBIEA", 15123, 2 },
	{ "ENABLE_BIKER_ESSKEY", 15124, 2 },
	{ "ENABLE_BIKER_AVARUS", 15125, 2 },
	{ "ENABLE_BIKER_ZOMBIEB", 15126, 2 },
	{ "ENABLE_BIKER_FAGGIO", 15127, 2 },
	{ "ENABLE_BIKER_FAGGIO", 15127, 2 },
	{ "ENABLE_BIKER_HAKUCHOU2", 15128, 2 },
	{ "ENABLE_BIKER_VORTEX", 15129, 2 },
	{ "ENABLE_BIKER_SHOTARO", 15130, 2 },
	{ "ENABLE_BIKER_CHIMERA", 15131, 2 },
	{ "ENABLE_BIKER_RAPTOR", 15132, 2 },
	{ "ENABLE_BIKER_WESTERNDAEMON", 15133, 2 },
	{ "ENABLE_BIKER_BLAZER4", 15134, 2 },
	{ "ENABLE_BIKER_MANCHEZ", 15136, 2 },
	{ "ENABLE_BIKER_YOUGA2", 15137, 2 },
	{ "ENABLE_BIKER_WOLFSBANE", 15138, 2 },
	{ "ENABLE_BIKER_FAGGIO3", 15139, 2 },
	{ "ENABLE_BIKER_TORNADO6", 15140, 2 },
	{ "ENABLE_BIKER_BAGGER", 15141, 2 },
	{ "ENABLE_BIKER_RATBIKE", 15142, 2 },
	{ "ENABLE_BIKER_DEFILER_POSIX", 15143, 0 },
	{ "ENABLE_BIKER_NIGHTBLADE_POSIX", 15144, 0 },
	{ "ENABLE_BIKER_ZOMBIEA_POSIX", 15145, 0 },
	{ "ENABLE_BIKER_ESSKEY_POSIX", 15146, 0 },
	{ "ENABLE_BIKER_AVARUS_POSIX", 15147, 0 },
	{ "ENABLE_BIKER_ZOMBIEB_POSIX", 15148, 0 },
	{ "ENABLE_BIKER_HAKUCHOU2_POSIX", 15149, 0 },
	{ "ENABLE_BIKER_VORTEX_POSIX", 15150, 0 },
	{ "ENABLE_BIKER_SHOTARO_POSIX", 15151, 0 },
	{ "ENABLE_BIKER_CHIMERA_POSIX", 15152, 0 },
	{ "ENABLE_BIKER_RAPTOR_POSIX", 15153, 0 },
	{ "ENABLE_BIKER_WESTERNDAEMON_POSIX", 15154, 0 },
	{ "ENABLE_BIKER_BLAZER4_POSIX", 15155, 0 },
	{ "ENABLE_BIKER_SANCTUS_POSIX", 15156, 0 },
	{ "ENABLE_BIKER_MANCHEZ_POSIX", 15157, 0 },
	{ "ENABLE_BIKER_YOUGA2_Posix", 15158, 0 },
	{ "ENABLE_BIKER_WOLFSBANE_Posix", 15159, 0 },
	{ "ENABLE_BIKER_FAGGIO3_Posix", 15160, 0 },
	{ "ENABLE_BIKER_FAGGIO_Posix", 15161, 0 },
	{ "ENABLE_BIKER_TORNADO6_Posix", 15162, 0 },
	{ "ENABLE_BIKER_RATBIKE_POSIX", 15164, 0 },
	{ "ENABLE_AUTOSHOTGUN", 15165, 2 },
	{ "ENABLE_AUTOSHOTGUN", 15165, 2 },
	{ "ENABLE_MINISMG", 15166, 2 },
	{ "ENABLE_MINISMG", 15166, 2 },
	{ "ENABLE_COMPACTLAUNCHER", 15167, 2 },
	{ "ENABLE_COMPACTLAUNCHER", 15167, 2 },
	{ "ENABLE_PIPEBOMB", 15168, 2 },
	{ "ENABLE_PIPEBOMB", 15168, 2 },
	{ "ENABLE_POOLCUE", 15169, 2 },
	{ "ENABLE_POOLCUE", 15169, 2 },
	{ "ENABLE_BATTLEAXE", 15170, 2 },
	{ "ENABLE_BATTLEAXE", 15170, 2 },
	{ "ENABLE_WRENCH", 15171, 2 },
	{ "ENABLE_WRENCH", 15171, 2 },
	{ "ENABLE_AUTOSHOTGUN_POSIX", 15172, 0 },
	{ "ENABLE_AUTOSHOTGUN_POSIX", 15172, 0 },
	{ "ENABLE_MINISMG_POSIX", 15173, 0 },
	{ "ENABLE_MINISMG_POSIX", 15173, 0 },
	{ "ENABLE_COMPACTLAUNCHER_POSIX", 15174, 0 },
	{ "ENABLE_COMPACTLAUNCHER_POSIX", 15174, 0 },
	{ "ENABLE_PIPEBOMB_POSIX", 15175, 0 },
	{ "ENABLE_PIPEBOMB_POSIX", 15175, 0 },
	{ "ENABLE_POOLCUE_POSIX", 15176, 0 },
	{ "ENABLE_POOLCUE_POSIX", 15176, 0 },
	{ "ENABLE_BATTLEAXE_POSIX", 15177, 0 },
	{ "ENABLE_BATTLEAXE_POSIX", 15177, 0 },
	{ "ENABLE_WRENCH_POSIX", 15178, 0 },
	{ "ENABLE_WRENCH_POSIX", 15178, 0 },
	{ "BIKER_AMMO_COMPACT_GRENADE_LAUNCHER_AMMO", 15553, 0 },
	{ "BIKER_AMMO_SWEEPER_SHOTGUN_AMMO", 15555, 0 },
	{ "BIKER_AMMO_MINI_SMG_AMMO", 15557, 0 },
	{ "BIKER_PRIMARY_PIPE_BOMB", 15558, 0 },
	{ "BIKER_WEBSITE_NAGASAKI_SHOTARO", 15577, 0 },
	{ "BIKER_BUSINESS_PAID_RESUPPLY_BASE", 15744, 0 },
	{ "BIKER_MC_POINTS_COMMIT_SUICIDE", 15814, 0 },
	{ "BIKER_PURCHASE_SUPPLIES_COST_PER_SEGMENT", 16592, 0 },
	{ "ENABLE_IE_VOLTIC2", 16770, 2 },
	{ "ENABLE_IE_VOLTIC2", 16770, 2 },
	{ "ENABLE_IE_RUINER2", 16771, 2 },
	{ "ENABLE_IE_RUINER2", 16771, 2 },
	{ "ENABLE_IE_DUNE4", 16772, 2 },
	{ "ENABLE_IE_DUNE4", 16772, 2 },
	{ "ENABLE_IE_DUNE5", 16773, 2 },
	{ "ENABLE_IE_DUNE5", 16773, 2 },
	{ "ENABLE_IE_PHANTOM2", 16774, 2 },
	{ "ENABLE_IE_PHANTOM2", 16774, 2 },
	{ "ENABLE_IE_TECHNICAL2", 16775, 2 },
	{ "ENABLE_IE_TECHNICAL2", 16775, 2 },
	{ "ENABLE_IE_BOXVILLE5", 16776, 2 },
	{ "ENABLE_IE_BOXVILLE5", 16776, 2 },
	{ "ENABLE_IE_WASTELANDER", 16777, 2 },
	{ "ENABLE_IE_WASTELANDER", 16777, 2 },
	{ "ENABLE_IE_BLAZER5", 16778, 2 },
	{ "ENABLE_IE_BLAZER5", 16778, 2 },
	{ "ENABLE_IE_DIABLOUS", 16781, 2 },
	{ "ENABLE_IE_DIABLOUS", 16781, 2 },
	{ "ENABLE_IE_DIABLOUS2", 16782, 2 },
	{ "ENABLE_IE_DIABLOUS2", 16782, 2 },
	{ "ENABLE_IE_ELEGY", 16783, 2 },
	{ "ENABLE_IE_ELEGY", 16783, 2 },
	{ "ENABLE_IE_ELEGY2", 16784, 2 },
	{ "ENABLE_IE_ELEGY2", 16784, 2 },
	{ "ENABLE_IE_PENETRATOR", 16791, 2 },
	{ "ENABLE_IE_PENETRATOR", 16791, 2 },
	{ "ENABLE_IE_TEMPESTA", 16794, 2 },
	{ "ENABLE_IE_TEMPESTA", 16794, 2 },
	{ "CREATOR_ENABLE_IE_COMET2", 16795, 2 },
	{ "CREATOR_ENABLE_IE_COMET2", 16795, 2 },
	{ "CREATOR_ENABLE_IE_DIABLOUS", 16797, 2 },
	{ "CREATOR_ENABLE_IE_DIABLOUS", 16797, 2 },
	{ "CREATOR_ENABLE_IE_DIABLOUS2", 16798, 2 },
	{ "CREATOR_ENABLE_IE_DIABLOUS2", 16798, 2 },
	{ "CREATOR_ENABLE_IE_ELEGY", 16799, 2 },
	{ "CREATOR_ENABLE_IE_ELEGY", 16799, 2 },
	{ "CREATOR_ENABLE_IE_ELEGY2", 16800, 2 },
	{ "CREATOR_ENABLE_IE_ELEGY2", 16800, 2 },
	{ "CREATOR_ENABLE_IE_PENETRATOR", 16807, 2 },
	{ "CREATOR_ENABLE_IE_PENETRATOR", 16807, 2 },
	{ "CREATOR_ENABLE_IE_TEMPESTA", 16810, 2 },
	{ "CREATOR_ENABLE_IE_TEMPESTA", 16810, 2 },
	{ "ENABLE_IE_VOLTIC2_POSIX", 16811, 0 },
	{ "ENABLE_IE_VOLTIC2_POSIX", 16811, 0 },
	{ "ENABLE_IE_RUINER2_POSIX", 16812, 0 },
	{ "ENABLE_IE_RUINER2_POSIX", 16812, 0 },
	{ "ENABLE_IE_DUNE4_POSIX", 16813, 0 },
	{ "ENABLE_IE_DUNE4_POSIX", 16813, 0 },
	{ "ENABLE_IE_DUNE5_POSIX", 16814, 0 },
	{ "ENABLE_IE_DUNE5_POSIX", 16814, 0 },
	{ "ENABLE_IE_PHANTOM2_POSIX", 16815, 0 },
	{ "ENABLE_IE_PHANTOM2_POSIX", 16815, 0 },
	{ "ENABLE_IE_TECHNICAL2_POSIX", 16816, 0 },
	{ "ENABLE_IE_TECHNICAL2_POSIX", 16816, 0 },
	{ "ENABLE_IE_BOXVILLE5_POSIX", 16817, 0 },
	{ "ENABLE_IE_BOXVILLE5_POSIX", 16817, 0 },
	{ "ENABLE_IE_WASTELANDER_POSIX", 16818, 0 },
	{ "ENABLE_IE_WASTELANDER_POSIX", 16818, 0 },
	{ "ENABLE_IE_BLAZER5_POSIX", 16819, 0 },
	{ "ENABLE_IE_BLAZER5_POSIX", 16819, 0 },
	{ "ENABLE_IE_COMET2_POSIX", 16820, 0 },
	{ "ENABLE_IE_COMET2_POSIX", 16820, 0 },
	{ "ENABLE_IE_DIABLOUS_POSIX", 16822, 0 },
	{ "ENABLE_IE_DIABLOUS_POSIX", 16822, 0 },
	{ "ENABLE_IE_DIABLOUS2_POSIX", 16823, 0 },
	{ "ENABLE_IE_DIABLOUS2_POSIX", 16823, 0 },
	{ "ENABLE_IE_ELEGY_POSIX", 16824, 0 },
	{ "ENABLE_IE_ELEGY_POSIX", 16824, 0 },
	{ "ENABLE_IE_ELEGY2_POSIX", 16825, 0 },
	{ "ENABLE_IE_ELEGY2_POSIX", 16825, 0 },
	{ "ENABLE_IE_PENETRATOR_POSIX", 16832, 0 },
	{ "ENABLE_IE_PENETRATOR_POSIX", 16832, 0 },
	{ "ENABLE_IE_TEMPESTA_POSIX", 16835, 0 },
	{ "ENABLE_IE_TEMPESTA_POSIX", 16835, 0 },
	{ "TURN_ON_TURFWARS", 16876, 2 },
	{ "IMPEXP_RUINER2_MISSILES", 17260, 0 },
	{ "IMPEXP_SELL_POST_MOD_TRANS_TIMEOUT", 17271, 0 },
	{ "ENABLE_VEHICLE_HELP_IELAUNCH", 17651, 2 },
};


int hhh = 0;
int mmm = 0;
int sss = 0;
bool loadScripts = true;
vector<string> scripts;
int scriptNumber;
bool reportdisplay = false;
bool ipdisplay = false;
int playerAlpha = 255;
bool versionnumber = false;
bool lsc_primary = true;
bool lsc_secondary = true;

//std::vector<std::string> StringVector{ "test", "testing", "testing123" };
//int StringVectorPosition = 0;
std::vector<char*> CharVector{ "test1", "testing1", "testing1231" };
int CharVectorPosition = 0;
std::vector<int> IntVector{ 1, 2, 3, 5, 6, 7, 1234, 13041 };
int IntVectorPosition = 0;
std::vector<float> FloatVector{ 1.2345f, 5.1234f, 5.1237f, 8.3124f };
int FloatVectorPosition = 0;
bool risky = false;
std::string namech;



static char* Boats1[] = {
	"DINGHY", "DINGHY2", "DINGHY3", "DINGHY4", "JETMAX",
	"MARQUIS", "PREDATOR", "SEASHARK", "SEASHARK2", "SEASHARK3",
	"SPEEDER", "SPEEDER2", "SQUALO", "SUBMERSIBLE", "SUBMERSIBLE2",
	"SUNTRAP", "TORO", "TORO2", "TROPIC", "TROPIC2",
	"TUG"
};
static char* Commercial1[] = {
	"BENSON", "BIFF", "HAULER", "MULE", "MULE2",
	"MULE3", "PACKER", "PHANTOM", "POUNDER", "STOCKADE",
	"STOCKADE3", "MULE4", "POUNDER2", "TERBYTE", "CEREBUS2", "CEREBUS3",
	"CEREBUS"
};
static char* Compacts1[] = {
	"BLISTA", "BRIOSO", "DILETTANTE", "DILETTANTE2", "ISSI2",
	"PANTO", "PRAIRIE", "RHAPSODY", "ISSI3", "ISSI6", "ISSI4", "ISSI5",
	"ISSI7", "ASBO", "KANJO"
};
static char* Coupes1[] = {
	"COGCABRIO", "EXEMPLAR", "F620", "FELON", "FELON2",
	"JACKAL", "ORACLE", "ORACLE2", "SENTINEL", "SENTINEL2",
	"WINDSOR", "WINDSOR2", "ZION", "ZION2"
};
static char* Cycles1[] = {
	"BMX", "CRUISER", "FIXTER", "SCORCHER", "TRIBIKE",
	"TRIBIKE2", "TRIBIKE3"
};
static char* Emergency1[] = {
	"AMBULANCE", "FBI", "FBI2", "FIRETRUK", "LGUARD",
	"PBUS", "PRANGER", "POLICE", "POLICE2", "POLICE3",
	"POLICE4", "POLICEB", "POLICEOLD1", "POLICEOLD2", "POLICET",
	"SHERIFF", "SHERIFF2", "RIOT", "RIOT2", "MINITANK"
};
static char* Helicopters1[] = {
	"ANNIHILATOR", "BLIMP", "BLIMP2", "BUZZARD", "BUZZARD2",
	"CARGOBOB", "CARGOBOB2", "CARGOBOB3", "CARGOBOB4", "FROGGER",
	"FROGGER2", "MAVERICK", "POLMAV", "SAVAGE", "SKYLIFT",
	"SUPERVOLITO", "SUPERVOLITO2", "SWIFT", "SWIFT2", "VALKYRIE",
	"VALKYRIE2", "VOLATUS", "HUNTER", "HAVOK", "AKULA", "SEASPARROW",
	"BLIMP3"
};
static char* Industrial1[] = {
	"BULLDOZER", "CUTTER", "DUMP", "FLATBED", "GUARDIAN",
	"HANDLER", "MIXER", "MIXER2", "RUBBLE", "TIPTRUCK",
	"TIPTRUCK2"
};
static char* Military1[] = {
	"BARRACKS", "BARRACKS2", "BARRACKS3", "CRUSADER", "RHINO", "BARRAGE", "CHERNOBOG", "KHANJALI", "THRUSTER", "SCARAB", "SCARAB2", "SCARAB3"

};
static char* Motorcycles1[] = {
	"AKUMA", "AVARUS", "BAGGER", "BATI", "BATI2",
	"BF400", "CARBONRS", "CHIMERA", "CLIFFHANGER", "DAEMON",
	"DAEMON2", "DEFILER", "DOUBLE", "ENDURO", "ESSKEY",
	"FAGGIO", "FAGGIO2", "FAGGIO3", "GARGOYLE", "HAKUCHOU",
	"HAKUCHOU2", "HEXER", "INNOVATION", "LECTRO", "MANCHEZ",
	"NEMESIS", "NIGHTBLADE", "PCJ", "RATBIKE", "RUFFIAN",
	"SANCHEZ", "SANCHEZ2", "SANCTUS", "SHOTARO", "SOVEREIGN",
	"THRUST", "VADER", "VINDICATOR", "VORTEX", "WOLFSBANE",
	"ZOMBIEA", "ZOMBIEB", "DIABLOUS", "DIABLOUS2", "FCR",
	"FCR2", "OPPRESSOR", "AVENGER", "OPPRESSOR2", "DEATHBIKE2",
	"DEATHBIKE3", "DEATHBIKE", "RROCKET", "STRYDER"
};
static char* Muscle1[] = {
	"BLADE", "BUCCANEER", "BUCCANEER2", "CHINO", "CHINO2",
	"COQUETTE3", "DOMINATOR", "DOMINATOR2", "DUKES", "DUKES2",
	"GAUNTLET", "GAUNTLET2", "FACTION", "FACTION2", "FACTION3",
	"HOTKNIFE", "LURCHER", "MOONBEAM", "MOONBEAM2", "NIGHTSHADE",
	"PHOENIX", "PICADOR", "RATLOADER", "RATLOADER2", "RUINER", "RUINER2", "RUINER3",
	"SABREGT", "SABREGT2", "SLAMVAN", "SLAMVAN2", "SLAMVAN3",
	"STALION", "STALION2", "TAMPA", "VIGERO", "VIRGO",
	"VIRGO2", "VIRGO3", "VOODOO", "VOODOO2", "HERMES", "HUSTLER", "YOSEMITE", "DOMINATOR3", "ELLIE",
	"IMPALER3", "SLAMVAN6", "DOMINATOR6", "IMPALER4","SLAMVAN4","SLAMVAN5",
	"DOMINATOR4", "DOMINATOR5", "BRUISER", "BRUISER2", "BRUISER3", "RCBANDITO", "IMPALER2",
	"TULIP", "CLIQUE", "VAMOS", "IMPERATOR", "IMPERATOR2", "IMPERATOR3",
	"DEVIANT", "IMPALER", "GAUNTLET3", "GAUNTLET4", "YOSEMITE2",
};
static char* OffRoad1[] = {
	"BFINJECTION", "BIFTA", "BLAZER", "BLAZER2", "BLAZER3",
	"BLAZER4", "BODHI2", "BRAWLER", "DLOADER", "DUBSTA3",
	"DUNE", "DUNE2", "INSURGENT", "INSURGENT2", "KALAHARI",
	"MARSHALL", "MESA3", "MONSTER", "RANCHERXL", "RANCHERXL2",
	"REBEL", "REBEL2", "SANDKING", "SANDKING2", "TECHNICAL",
	"TROPHYTRUCK", "TROPHYTRUCK2", "TECHNICAL2", "DUNE4", "DUNE5",
	"BLAZER5", "KAMACHO", "RIATA", "CARACARA", "FREECRAWLER", "MENACER",
	"MONSTER4", "MONSTER5", "BRUTUS", "BRUTUS2", "BRUTUS3", "MONSTER3",
	"CARACARA2", "HELLION", "EVERON", "NIGHTSHARK", "OUTLAW", "VAGRANT", "ZHABA"
};
static char* Planes1[] = {
	"BESRA", "CARGOPLANE", "CUBAN800", "DODO", "DUSTER",
	"HYDRA", "JET", "LAZER", "LUXOR", "LUXOR2",
	"MAMMATUS", "MILJET", "NIMBUS", "SHAMAL", "STUNT",
	"TITAN", "VELUM", "VELUM2", "VESTRA", "BOMBUSHKA",
	"ALPHAZ1", "TULA", "ROGUE", "PYRO", "MOGUL",
	"NOKOTA", "MOLOTOK", "SEABREEZE", "MICROLIGHT", "HOWARD",
	"STARLING", "AVENGER2", "VOLATOL", "STRIKEFORCE"
};
static char* Sedans1[] = {
	"ASEA", "ASEA2", "ASTEROPE", "COG55", "COG552",
	"COGNOSCENTI", "COGNOSCENTI2", "EMPEROR", "EMPEROR2", "EMPEROR3",
	"FUGITIVE", "GLENDALE", "INGOT", "INTRUDER", "LIMO2",
	"PREMIER", "PRIMO", "PRIMO2", "REGINA", "ROMERO",
	"SCHAFTER2", "SCHAFTER5", "SCHAFTER6", "STANIER", "STRATUM",
	"STRETCH", "SUPERD", "SURGE", "TAILGATER", "WARRENER",
	"WASHINGTON", "STAFFORD", "NEBULA"
};
static char* Sports1[] = {
	"ALPHA", "BANSHEE", "BESTIAGTS", "BLISTA2", "BLISTA3",
	"BUFFALO", "BUFFALO2", "BUFFALO3", "CARBONIZZARE", "COMET2",
	"COQUETTE", "ELEGY", "ELEGY2", "FELTZER2", "FUROREGT", "FUSILADE",
	"FUTO", "JESTER", "JESTER2", "KHAMELION", "KURUMA",
	"KURUMA2", "LYNX", "MASSACRO", "MASSACRO2", "NINEF",
	"NINEF2", "OMNIS", "PENUMBRA", "RAPIDGT", "RAPIDGT2",
	"RAPTOR", "SCHAFTER3", "SCHAFTER4", "SCHWARZE", "SEVEN70",
	"SULTAN", "SURANO", "SPECTER", "SPECTER2", "TAMPA2", "TROPOS", "VERLIERER2",
	"RUINER2", "PHANTOM2", "RUSTON", "COMET4", "COMET5", "NEON", "PARIAH", "RAIDEN", "REVOLTER", "SENTINEL3", "STREITER", "Z190",
	"GB200", "HOTRING", "ITALIGTO", "SCHLAGEN", "ZR380", "ZR3802", "ZR3803",
	"DRAFTER", "JUGULAR", "LOCUST", "NEO", "PARAGON", "PARAGON2", "IMORGON", "KOMODA", "SUGOI", "SULTAN2", "VSTR"
};
static char* SportsClassics1[] = {
	"BTYPE", "BTYPE2", "BTYPE3", "CASCO", "COQUETTE2",
	"FELTZER3", "JB700", "MAMBA", "MANANA", "MONROE",
	"PEYOTE", "PIGALLE", "STINGER", "STINGERGT", "TORNADO",
	"TORNADO2", "TORNADO3", "TORNADO4", "TORNADO5", "TORNADO6",
	"ZTYPE", "INFERNUS2", "TURISMO2", "RAPIDGT3", "RETINUE", "DELUXO", "GT500",
	"SAVESTRA", "STROMBERG", "VISERIS", "CHEBUREK", "FAGALOA", "JESTER3", "MICHELLI", "SWINGER",
	"DYNASTY", "PEYOTE2", "ZION3", "JB7002", "RETINUE2"
};
static char* Super1[] = {
	"ADDER", "BANSHEE2", "BULLET", "CHEETAH", "ENTITYXF",
	"FMJ", "SHEAVA", "INFERNUS", "NERO", "NERO2","OSIRIS", "LE7B",
	"ITALIGTB", "ITALIGTB2", "PFISTER811", "PROTOTIPO", "REAPER", "SULTANRS", "T20",
	"TEMPESTA", "TURISMOR", "TYRUS", "VACCA", "VOLTIC", "ZENTORNO", "VOLTIC2", "PENETRATOR", "GP1", "XA21", "VIGILANTE",
	"CYCLONE", "VISIONE", "AUTARCH", "SC1", "ENTITY2", "TAIPAN", "TEZERACT", "TYRANT", "SCRAMJET", "DEVESTE",
	"EMERUS", "KRIEGER", "S80", "THRAX", "ZORRUSSO", "FURIA", "FORMULA", "FORMULA2"
};
static char* SUVs1[] = {
	"BALLER", "BALLER2", "BALLER3", "BALLER4", "BALLER5",
	"BALLER6", "BJXL", "CAVALCADE", "CAVALCADE2", "CONTENDER",
	"DUBSTA", "DUBSTA2", "FQ2", "GRANGER", "GRESLEY",
	"HABANERO", "HUNTLEY", "LANDSTALKER", "MESA", "MESA2",
	"PATRIOT", "RADI", "ROCOTO", "SEMINOLE", "SERRANO",
	"XLS", "XLS2", "PATRIOT2", "TOROS", "NOVAK", "REBLA"
};
static char* Trailer1[] = {
	"ARMYTANKER", "ARMYTRAILER", "ARMYTRAILER2", "BALETRAILER", "BOATTRAILER",
	"DOCKTRAILER", "FREIGHTTRAILER", "GRAINTRAILER", "PROPTRAILER", "RAKETRAILER",
	"TANKER", "TANKER2", "TR2", "TR3", "TR4",
	"TRAILERLOGS", "TRAILERS", "TRAILERS2", "TRAILERS3", "TRAILERSMALL",
	"TRFLAT", "TVTRAILER"
};
static char* Trains1[] = {
	"CABLECAR", "FREIGHT", "FREIGHTCAR", "FREIGHTCONT1", "FREIGHTCONT2",
	"FREIGHTGRAIN", "METROTRAIN", "TANKERCAR"
};
static char* Utility1[] = {
	"AIRTUG", "CADDY", "CADDY2", "DOCKTUG", "FORKLIFT",
	"MOWER", "RIPLEY", "SADLER", "SADLER2", "SCRAP",
	"TOWTRUCK", "TOWTRUCK2", "TRACTOR", "TRACTOR2", "TRACTOR3",
	"UTILLITRUCK", "UTILLITRUCK2", "UTILLITRUCK3"
};
static char* Vans1[] = {
	"BISON", "BISON2", "BISON3", "BOBCATXL", "BOXVILLE",
	"BOXVILLE2", "BOXVILLE3", "BOXVILLE4", "BURRITO", "BURRITO2",
	"BURRITO3", "BURRITO4", "BURRITO5", "CAMPER", "GBURRITO",
	"GBURRITO2", "JOURNEY", "MINIVAN", "MINIVAN2", "PARADISE",
	"PONY", "PONY2", "RUMPO", "RUMPO2", "RUMPO3",
	"SPEEDO", "SPEEDO2", "SURFER", "SURFER2", "TACO",
	"YOUGA", "YOUGA2", "SPEEDO4"
};
static char* Service1[] = {
"AIRBUS", "BRICKADE", "BUS", "COACH", "RALLYTRUCK",
	"RENTALBUS", "TAXI", "TOURBUS", "TRASH", "TRASH2",
	"WASTELANDER", "PBUS2"
};
static char* trucks1[] = {
	"boxville","stockade","stockade2","tiptruck","tiptruck2",
	"cutter","handler","docktug","dump","biff","hauler","phantom",
	"rubble","mule","mixer","mixer2","flatbed","packer","pounder",
	"benson","scrap","phantom2","hauler2","phantom3","pounder2",
	"speedo4","mule4","terbyte","caracara"
};
std::string Features::VEHICLE_NAMES[656] = {
	"DINGHY", "DINGHY2", "DINGHY3", "DINGHY4", "JETMAX",
	"MARQUIS", "PREDATOR", "SEASHARK", "SEASHARK2", "SEASHARK3",
	"SPEEDER", "SPEEDER2", "SQUALO", "SUBMERSIBLE", "SUBMERSIBLE2",
	"SUNTRAP", "TORO", "TORO2", "TROPIC", "TROPIC2",
	"TUG", "BENSON", "BIFF", "HAULER", "MULE", "MULE2",
	"MULE3", "PACKER", "PHANTOM", "POUNDER", "STOCKADE",
	"STOCKADE3", "cerberus", "cerberus2", "cerberus3",
	"BLISTA", "BRIOSO", "DILETTANTE", "DILETTANTE2", "ISSI2",
	"PANTO", "PRAIRIE", "RHAPSODY", "issi3", "issi4", "issi5",
	"issi6", "COGCABRIO", "EXEMPLAR", "F620", "FELON", "FELON2",
	"JACKAL", "ORACLE", "ORACLE2", "SENTINEL", "SENTINEL2",
	"WINDSOR", "WINDSOR2", "ZION", "ZION2", "sentinel3",
	"BMX", "CRUISER", "FIXTER", "SCORCHER", "TRIBIKE",
	"TRIBIKE2", "TRIBIKE3", "ANNIHILATOR", "BLIMP", "BLIMP2", "BUZZARD", "BUZZARD2",
	"CARGOBOB", "CARGOBOB2", "CARGOBOB3", "CARGOBOB4", "FROGGER",
	"FROGGER2", "MAVERICK", "POLMAV", "SAVAGE", "SKYLIFT",
	"SUPERVOLITO", "SUPERVOLITO2", "SWIFT", "SWIFT2", "VALKYRIE",
	"VALKYRIE2", "VOLATUS", "HUNTER", "havok", "blimp3", "seasparrow",
	"AMBULANCE", "FBI", "FBI2", "FIRETRUK", "LGUARD",
	"PBUS", "PRANGER", "POLICE", "POLICE2", "POLICE3",
	"POLICE4", "POLICEB", "POLICEOLD1", "POLICEOLD2", "POLICET",
	"SHERIFF", "SHERIFF2", "RIOT", "riot2", "BULLDOZER", "CUTTER", "DUMP",
	"FLATBED", "GUARDIAN", "HANDLER", "MIXER", "MIXER2", "RUBBLE", "TIPTRUCK",
	"TIPTRUCK2", "BARRACKS", "BARRACKS2", "BARRACKS3", "CRUSADER", "RHINO",
	"APC", "DUNE3", "HALFTRACK", "chernobog", "khanjali",
	"scarab", "scarab2", "scarab3", "thruster", "AKUMA", "AVARUS",  "BF400",
	"CARBONRS", "CHIMERA", "CLIFFHANGER", "DAEMON",
	"DAEMON2", "DEFILER", "DOUBLE", "ENDURO", "ESSKEY",
	"FAGGIO", "FAGGIO2", "FAGGIO3", "GARGOYLE", "HAKUCHOU",
	"HAKUCHOU2", "HEXER", "INNOVATION", "LECTRO", "MANCHEZ",
	"NEMESIS", "NIGHTBLADE", "PCJ", "RATBIKE", "RUFFIAN",
	"SANCHEZ", "SANCHEZ2", "SANCTUS", "SHOTARO", "SOVEREIGN",
	"THRUST", "VADER", "VINDICATOR", "VORTEX", "WOLFSBANE",
	"ZOMBIEA", "ZOMBIEB", "DIABLOUS", "DIABLOUS2", "FCR",
	"FCR2", "OPPRESSOR", "oppressor2", "deathbike", "deathbike2",
	"deathbike3", "BTYPE", "BTYPE2", "BTYPE3", "CASCO", "COQUETTE2",
	"FELTZER3", "JB700", "MAMBA", "MANANA", "MONROE",
	"PEYOTE", "PIGALLE", "STINGER", "STINGERGT", "TORNADO",
	"TORNADO2", "TORNADO3", "TORNADO4", "TORNADO5", "TORNADO6",
	"ZTYPE", "INFERNUS2", "TURISMO2", "rapidgt3", "retinue",
	"swinger", "ARDENT", "TORERO", "fagaloa", "flashgt",
	"michelli", "deluxo", "stromberg", "savestra", "viseris",
	"gt500", "z190", "BLADE", "BUCCANEER", "BUCCANEER2", "CHINO", "CHINO2",
	"COQUETTE3", "DOMINATOR", "DOMINATOR2", "DUKES", "DUKES2",
	"GAUNTLET", "GAUNTLET2", "FACTION", "FACTION2", "FACTION3",
	"HOTKNIFE", "LURCHER", "MOONBEAM", "MOONBEAM2", "NIGHTSHADE",
	"PHOENIX", "PICADOR", "RATLOADER", "RATLOADER2", "RUINER", "RUINER2", "RUINER3",
	"SABREGT", "SABREGT2", "SLAMVAN", "SLAMVAN2", "SLAMVAN3",
	"STALION", "STALION2", "TAMPA", "VIGERO", "VIRGO",
	"VIRGO2", "VIRGO3", "VOODOO", "VOODOO2", "TAMPA3", "hermes", "dominator3",
	"dominator4", "dominator5", "dominator6", "slamvan4", "slamvan5", "slamvan6",
	"ellie", "impaler", "impaler2", "impaler3", "clique", "deviant", "tulip", "vamos",
	"hustler", "yosemite", "BFINJECTION", "BIFTA", "BLAZER", "BLAZER2", "BLAZER3",
	"BLAZER4", "BODHI2", "BRAWLER", "DLOADER", "DUBSTA3",
	"DUNE", "DUNE2", "INSURGENT", "INSURGENT2", "KALAHARI",
	"MARSHALL", "MESA3", "MONSTER", "RANCHERXL", "RANCHERXL2",
	"REBEL", "REBEL2", "SANDKING", "SANDKING2", "TECHNICAL",
	"TROPHYTRUCK", "TROPHYTRUCK2", "TECHNICAL2", "DUNE4", "DUNE5",
	"BLAZER5", "TECHNICAL3", "INSURGENT3", "NIGHTSHARK", "freecrawler",
	"menacer", "patriot2", "barrage", "monster3",
	"monster4", "monster5", "bruiser", "bruiser2", "bruiser3",
	"brutus", "brutus2", "brutus3", "kamacho", "riata",
	"BESRA", "CARGOPLANE", "CUBAN800", "DODO", "DUSTER",
	"HYDRA", "JET", "LAZER", "LUXOR", "LUXOR2",
	"MAMMATUS", "MILJET", "NIMBUS", "SHAMAL", "STUNT",
	"TITAN", "VELUM", "VELUM2", "VESTRA", "BOMBUSHKA",
	"MOLOTOK", "NOKOTA", "PYRO", "ROGUE", "SEABREEZE",
	"HOWARD", "MICROLIGHT", "TULA", "MOGUL", "STARLING",
	"ALPHAZ1", "strikeforce", "avenger", "volatol",
	"ASEA", "ASEA2", "ASTEROPE", "COG55", "COG552",
	"COGNOSCENTI", "COGNOSCENTI2", "EMPEROR", "EMPEROR2", "EMPEROR3",
	"FUGITIVE", "GLENDALE", "INGOT", "INTRUDER", "LIMO2",
	"PREMIER", "PRIMO", "PRIMO2", "REGINA", "ROMERO",
	"SCHAFTER2", "SCHAFTER5", "SCHAFTER6", "STANIER", "STRATUM",
	"STRETCH", "SUPERD", "SURGE", "TAILGATER", "WARR", "stafford",
	"cheburek", "ALPHA", "BANSHEE", "BESTIAGTS", "BLISTA2", "BLISTA3",
	"BUFFALO", "BUFFALO2", "BUFFALO3", "CARBONIZZARE", "COMET2",
	"COQUETTE", "ELEGY", "ELEGY2", "FELTZER2", "FUROREGT", "FUSILADE",
	"FUTO", "JESTER", "JESTER2", "KHAMELION", "KURUMA",
	"KURUMA2", "LYNX", "MASSACRO", "MASSACRO2", "NINEF",
	"NINEF2", "OMNIS", "PENUMBRA", "RAPIDGT", "RAPIDGT2",
	"RAPTOR", "SCHAFTER3", "SCHAFTER4", "SCHWARTZER", "SEVEN70",
	"SULTAN", "SURANO", "SPECTER", "SPECTER2", "TAMPA2", "TROPOS", "VERLIERER2",
	"RUINER2", "PHANTOM2", "RUSTON", "comet4", "comet5", "jester3", "gb200",
	"hotring", "zr380", "zr3802", "zr3803", "schlagen", "italigto", "neon",
	"pariah", "raiden", "revolter", "ADDER", "BANSHEE2", "BULLET", "CHEETAH", "ENTITYXF",
	"FMJ", "SHEAVA", "INFERNUS", "NERO", "NERO2","OSIRIS", "LE7B",
	"ITALIGTB", "ITALIGTB2", "PFISTER811", "PROTOTIPO", "REAPER", "SULTANRS", "T20",
	"TEMPESTA", "TURISMOR", "TYRUS", "VACCA", "VOLTIC", "ZENTORNO", "VOLTIC2", "PENETRATOR", "GP1",
	"vigilante", "visione", "cyclone", "scramjet", "CHEETAH2", "VAGNER", "XA21", "autarch", "entity2",
	"taipan", "tezeract", "tyrant", "deveste", "sc1",
	"BALLER", "BALLER2", "BALLER3", "BALLER4", "BALLER5",
	"BALLER6", "BJXL", "CAVALCADE", "CAVALCADE2", "CONTENDER",
	"DUBSTA", "DUBSTA2", "FQ2", "GRANGER", "GRESLEY",
	"HABANERO", "HUNTLEY", "LANDSTALKER", "MESA", "MESA2",
	"PATRIOT", "RADI", "ROCOTO", "SEMINOLE", "SERRANO",
	"XLS", "XLS2", "streiter", "toros", "CABLECAR", "FREIGHT",
	"FREIGHTCAR", "FREIGHTCONT1", "FREIGHTCONT2",
	"FREIGHTGRAIN", "METROTRAIN", "TANKERCAR",
	"ARMYTANKER", "ARMYTRAILER", "ARMYTRAILER2", "BALETRAILER", "BOATTRAILER",
	"DOCKTRAILER", "FREIGHTTRAILER", "GRAINTRAILER", "PROPTRAILER", "RAKETRAILER",
	"TANKER", "TANKER2", "TR2", "TR3", "TR4",
	"TRAILERLOGS", "TRAILERS", "TRAILERS2", "TRAILERS3", "TRAILERSMALL",
	"TRFLAT", "TVTRAILER", "TRAILERLARGE", "TRAILERS4", "TRAILERSMALL2",
	"AIRBUS", "BRICKADE", "BUS", "COACH", "RALLYTRUCK",
	"RENTALBUS", "TAXI", "TOURBUS", "TRASH", "TRASH2",
	"WASTELANDER", "pbus2", "AIRTUG", "CADDY", "CADDY2", "DOCKTUG", "FORKLIFT",
	"MOWER", "RIPLEY", "SADLER", "SADLER2", "SCRAP",
	"TOWTRUCK", "TOWTRUCK2", "TRACTOR", "TRACTOR2", "TRACTOR3",
	"UTILLITRUCK", "UTILLITRUCK2", "UTILLITRUCK3", "CADDY3",
	"rcbandito", "BISON", "BISON2", "BISON3", "BOBCATXL", "BOXVILLE",
	"BOXVILLE2", "BOXVILLE3", "BOXVILLE4", "BURRITO", "BURRITO2",
	"BURRITO3", "BURRITO4", "BURRITO5", "CAMPER", "GBURRITO",
	"GBURRITO2", "JOURNEY", "MINIVAN", "MINIVAN2", "PARADISE",
	"PONY", "PONY2", "RUMPO", "RUMPO2", "RUMPO3",
	"SPEEDO", "SPEEDO2", "SURFER", "SURFER2", "TACO",
	"YOUGA", "YOUGA2", "boxville", "stockade", "stockade2", "tiptruck", "tiptruck2",
	"cutter", "handler", "docktug", "dump", "biff", "hauler", "phantom",
	"rubble", "mule", "mixer", "mixer2", "flatbed", "packer", "pounder",
	"benson", "scrap", "phantom2", "hauler2", "phantom3", "pounder2",
	"speedo4", "mule4", "terbyte", "caracara"
};

int inipos = 0;
std::vector<char*> ini1 =
{
	"2wheeler",
	"Airship",
	"custom zentorno",
	"German Tank",
	"Robot",
	"AAA_True_Ghostrider",
	"AirborneZentorno",
	"AtomicFrogger",
	"Military_TANK_TRANSPORT",
	"MOBILE_WINDMILL",
	"Nazi_Duke",
	"SCOOPER",
	"SecretMilitaryRobot",
	"SecretMilitaryRobot2",
	"TANKMAN",
	"TugBoatSpeeder",
	"TURISMOBEAST",
	"ZENTORNOHUNTER",
	"ZentoroExtraEngine",
	"ROCKET_Nero",
	"Destroyer",
	"Machine",
	"Robot2",
	"FUN_Ramp_Truck",
	"BIKES_Dildo_BMX",
	"BIKES_Bati-Arcade",
	"XMAS_Christmas_Joy",
	"NSA_Truck",
	"True_Ghostrider",
	"Trippy_Blimp",
	"Flying_Yacht",
	"RoadCleaner",
	"rOverpowered_RoadCleaner",
	"pFutureX80",
	"0CleanerRampCar",
	"ZCUFO_Flying",
	"00Delorean",
	"pFLY_BacktoTheFuture_Deluxo_",
	"pFutureZentorno",
	"Peepee_Hydra",




};

char* weathers[] = {
	"Clear", "Clearing","Snowlight", "Thunder", "Blizzard", "Overcast", "Foggy", "Smog", "Clouds"
};

char* pedModels[] = {
	"A_C_Boar","A_C_Chickenhawk","A_C_Chimp","A_C_Chop","A_C_Cormorant","A_C_Cow","A_C_Coyote","A_C_Crow","A_C_Deer","A_C_Fish","A_C_Hen","A_C_Husky","A_C_MtLion","A_C_Pig","A_C_Pigeon","A_C_Rat","A_C_Retriever",
	"A_C_Rhesus","A_C_Rottweiler","A_C_Seagull","A_C_SharkTiger","A_C_shepherd","A_F_M_Beach_01","A_F_M_BevHills_01","A_F_M_BevHills_02","A_F_M_BodyBuild_01","A_F_M_Business_02","A_F_M_Downtown_01","A_F_M_EastSA_01",
	"A_F_M_EastSA_02","A_F_M_FatBla_01","A_F_M_FatCult_01","A_F_M_FatWhite_01","A_F_M_KTown_01","A_F_M_KTown_02","A_F_M_ProlHost_01","A_F_M_Salton_01","A_F_M_SkidRow_01","A_F_M_SouCentMC_01","A_F_M_SouCent_01","A_F_M_SouCent_02",
	"A_F_M_Tourist_01","A_F_M_TrampBeac_01","A_F_M_Tramp_01","A_F_O_GenStreet_01","A_F_O_Indian_01","A_F_O_KTown_01","A_F_O_Salton_01","A_F_O_SouCent_01","A_F_O_SouCent_02","A_F_Y_Beach_01","A_F_Y_BevHills_01","A_F_Y_BevHills_02",
	"A_F_Y_BevHills_03","A_F_Y_BevHills_04","A_F_Y_Business_01","A_F_Y_Business_02","A_F_Y_Business_03","A_F_Y_Business_04","A_F_Y_EastSA_01","A_F_Y_EastSA_02","A_F_Y_EastSA_03","A_F_Y_Epsilon_01","A_F_Y_Fitness_01",
	"A_F_Y_Fitness_02","A_F_Y_GenHot_01","A_F_Y_Golfer_01","A_F_Y_Hiker_01","A_F_Y_Hippie_01","A_F_Y_Hipster_01","A_F_Y_Hipster_02","A_F_Y_Hipster_03","A_F_Y_Hipster_04","A_F_Y_Indian_01","A_F_Y_Juggalo_01","A_F_Y_Runner_01",
	"A_F_Y_RurMeth_01","A_F_Y_SCDressy_01","A_F_Y_Skater_01","A_F_Y_SouCent_01","A_F_Y_SouCent_02","A_F_Y_SouCent_03","A_F_Y_Tennis_01","A_F_Y_Topless_01","A_F_Y_Tourist_01","A_F_Y_Tourist_02","A_F_Y_Vinewood_01",
	"A_F_Y_Vinewood_02","A_F_Y_Vinewood_03","A_F_Y_Vinewood_04","A_F_Y_Yoga_01","A_M_M_ACult_01","A_M_M_AfriAmer_01","A_M_M_Beach_01","A_M_M_Beach_02","A_M_M_BevHills_01","A_M_M_BevHills_02","A_M_M_Business_01",
	"A_M_M_EastSA_01","A_M_M_EastSA_02","A_M_M_Farmer_01","A_M_M_FatLatin_01","A_M_M_GenFat_01","A_M_M_GenFat_02","A_M_M_Golfer_01","A_M_M_HasJew_01","A_M_M_Hillbilly_01","A_M_M_Hillbilly_02","A_M_M_Indian_01",
	"A_M_M_KTown_01","A_M_M_Malibu_01","A_M_M_MexCntry_01","A_M_M_MexLabor_01","A_M_M_OG_Boss_01","A_M_M_Paparazzi_01","A_M_M_Polynesian_01","A_M_M_ProlHost_01","A_M_M_RurMeth_01","A_M_M_Salton_01","A_M_M_Salton_02",
	"A_M_M_Salton_03","A_M_M_Salton_04","A_M_M_Skater_01","A_M_M_Skidrow_01","A_M_M_SoCenLat_01","A_M_M_SouCent_01","A_M_M_SouCent_02","A_M_M_SouCent_03","A_M_M_SouCent_04","A_M_M_StLat_02","A_M_M_Tennis_01",
	"A_M_M_Tourist_01","A_M_M_TrampBeac_01","A_M_M_Tramp_01","A_M_M_TranVest_01","A_M_M_TranVest_02","A_M_O_ACult_01","A_M_O_ACult_02","A_M_O_Beach_01","A_M_O_GenStreet_01","A_M_O_KTown_01","A_M_O_Salton_01",
	"A_M_O_SouCent_01","A_M_O_SouCent_02","A_M_O_SouCent_03","A_M_O_Tramp_01","A_M_Y_ACult_01","A_M_Y_ACult_02","A_M_Y_BeachVesp_01","A_M_Y_BeachVesp_02","A_M_Y_Beach_01","A_M_Y_Beach_02","A_M_Y_Beach_03","A_M_Y_BevHills_01",
	"A_M_Y_BevHills_02","A_M_Y_BreakDance_01","A_M_Y_BusiCas_01","A_M_Y_Business_01","A_M_Y_Business_02","A_M_Y_Business_03","A_M_Y_Cyclist_01","A_M_Y_DHill_01","A_M_Y_Downtown_01","A_M_Y_EastSA_01","A_M_Y_EastSA_02",
	"A_M_Y_Epsilon_01","A_M_Y_Epsilon_02","A_M_Y_Gay_01","A_M_Y_Gay_02","A_M_Y_GenStreet_01","A_M_Y_GenStreet_02","A_M_Y_Golfer_01","A_M_Y_HasJew_01","A_M_Y_Hiker_01","A_M_Y_Hippy_01","A_M_Y_Hipster_01","A_M_Y_Hipster_02",
	"A_M_Y_Hipster_03","A_M_Y_Indian_01","A_M_Y_Jetski_01","A_M_Y_Juggalo_01","A_M_Y_KTown_01","A_M_Y_KTown_02","A_M_Y_Latino_01","A_M_Y_MethHead_01","A_M_Y_MexThug_01","A_M_Y_MotoX_01","A_M_Y_MotoX_02","A_M_Y_MusclBeac_01",
	"A_M_Y_MusclBeac_02","A_M_Y_Polynesian_01","A_M_Y_RoadCyc_01","A_M_Y_Runner_01","A_M_Y_Runner_02","A_M_Y_Salton_01","A_M_Y_Skater_01","A_M_Y_Skater_02","A_M_Y_SouCent_01","A_M_Y_SouCent_02","A_M_Y_SouCent_03","A_M_Y_SouCent_04",
	"A_M_Y_StBla_01","A_M_Y_StBla_02","A_M_Y_StLat_01","A_M_Y_StWhi_01","A_M_Y_StWhi_02","A_M_Y_Sunbathe_01","A_M_Y_Surfer_01","A_M_Y_VinDouche_01","A_M_Y_Vinewood_01","A_M_Y_Vinewood_02","A_M_Y_Vinewood_03","A_M_Y_Vinewood_04",
	"A_M_Y_Yoga_01","CSB_Abigail","CSB_Anita","CSB_Anton","CSB_BallasOG","CSB_Bride","CSB_BurgerDrug","CSB_Car3guy1","CSB_Car3guy2","CSB_Chef","CSB_Chin_goon","CSB_Cletus","CSB_Cop","CSB_Customer","CSB_Denise_friend",
	"CSB_FOS_rep","CSB_G","CSB_Groom","CSB_Grove_str_dlr","CSB_Hao","CSB_Hugh","CSB_Imran","CSB_Janitor","CSB_Maude","CSB_MWeather","CSB_Ortega","CSB_Oscar","CSB_PornDudes","CSB_PrologueDriver","CSB_ProlSec","CSB_Ramp_gang",
	"CSB_Ramp_hic","CSB_Ramp_hipster","CSB_Ramp_marine","CSB_Ramp_mex","CSB_Reporter","CSB_RoccoPelosi","CSB_Screen_Writer","CSB_Stripper_01","CSB_Stripper_02","CSB_Tonya","CSB_TrafficWarden","CS_AmandaTownley","CS_Andreas",
	"cs_ashley","CS_Bankman","CS_Barry","CS_Beverly","CS_Brad","CS_BradCadaver","CS_Carbuyer","CS_Casey","CS_ChengSr","CS_ChrisFormage","CS_Clay","CS_Dale","CS_DaveNorton","cs_debra","cs_denise","CS_Devin","CS_Dom","CS_Dreyfuss",
	"CS_DrFriedlander","CS_Fabien","CS_FBISuit_01","CS_Floyd","CS_Guadalope","cs_gurk","CS_Hunter","CS_Janet","CS_JewelAss","CS_JimmyBoston","CS_JimmyDiSanto","CS_JoeMinuteMan","CS_JohnnyKlebitz","CS_Josef","CS_Josh","CS_LamarDavis",
	"CS_Lazlow","CS_LesterCrest","CS_LifeInvad_01","CS_Magenta","CS_Manuel","CS_Marnie","CS_MartinMadrazo","CS_MaryAnn","CS_Michelle","CS_Milton","CS_Molly","CS_MovPremF_01","CS_MovPremMale","CS_MRK","CS_MrsPhillips","CS_MRS_Thornhill",
	"CS_Natalia","CS_NervousRon","CS_Nigel","CS_Old_Man1A","CS_Old_Man2","CS_Omega","CS_Orleans","CS_Paper","CS_Patricia","CS_Priest","CS_ProlSec_02","CS_RussianDrunk","CS_SiemonYetarian","CS_Solomon","CS_SteveHains","CS_Stretch",
	"CS_Tanisha","CS_TaoCheng","CS_TaosTranslator","CS_TennisCoach","CS_Terry","CS_Tom","CS_TomEpsilon","CS_TracyDiSanto","CS_Wade","CS_Zimbor","G_F_Y_ballas_01","G_F_Y_Families_01","G_F_Y_Lost_01","G_F_Y_Vagos_01","G_M_M_ArmBoss_01",
	"G_M_M_ArmGoon_01","G_M_M_ArmLieut_01","G_M_M_ChemWork_01","G_M_M_ChiBoss_01","G_M_M_ChiCold_01","G_M_M_ChiGoon_01","G_M_M_ChiGoon_02","G_M_M_KorBoss_01","G_M_M_MexBoss_01","G_M_M_MexBoss_02","G_M_Y_ArmGoon_02","G_M_Y_Azteca_01",
	"G_M_Y_BallaEast_01","G_M_Y_BallaOrig_01","G_M_Y_BallaSout_01","G_M_Y_FamCA_01","G_M_Y_FamDNF_01","G_M_Y_FamFor_01","G_M_Y_Korean_01","G_M_Y_Korean_02","G_M_Y_KorLieut_01","G_M_Y_Lost_01","G_M_Y_Lost_02","G_M_Y_Lost_03",
	"G_M_Y_MexGang_01","G_M_Y_MexGoon_01","G_M_Y_MexGoon_02","G_M_Y_MexGoon_03","G_M_Y_PoloGoon_01","G_M_Y_PoloGoon_02","G_M_Y_SalvaBoss_01","G_M_Y_SalvaGoon_01","G_M_Y_SalvaGoon_02","G_M_Y_SalvaGoon_03","G_M_Y_StrPunk_01","G_M_Y_StrPunk_02",
	"HC_Driver","HC_Gunman","HC_Hacker","IG_Abigail","IG_AmandaTownley","IG_Andreas","IG_Ashley","IG_BallasOG","IG_Bankman","IG_Barry","IG_BestMen","IG_Beverly","IG_Brad","IG_Bride","IG_Car3guy1","IG_Car3guy2","IG_Casey",
	"IG_Chef","IG_ChengSr","IG_ChrisFormage","IG_Clay","IG_ClayPain","IG_Cletus","IG_Dale","IG_DaveNorton","IG_Denise","IG_Devin","IG_Dom","IG_Dreyfuss","IG_DrFriedlander","IG_Fabien","IG_FBISuit_01","IG_Floyd","IG_Groom",
	"IG_Hao","IG_Hunter","IG_Janet","ig_JAY_Norris","IG_JewelAss","IG_JimmyBoston","IG_JimmyDiSanto","IG_JoeMinuteMan","ig_JohnnyKlebitz","IG_Josef","IG_Josh","IG_KerryMcIntosh","IG_LamarDavis","IG_Lazlow","IG_LesterCrest",
	"IG_LifeInvad_01","IG_LifeInvad_02","IG_Magenta","IG_Manuel","IG_Marnie","IG_MaryAnn","IG_Maude","IG_Michelle","IG_Milton","IG_Molly","IG_MRK","IG_MrsPhillips","IG_MRS_Thornhill","IG_Natalia","IG_NervousRon","IG_Nigel",
	"IG_Old_Man1A","IG_Old_Man2","IG_Omega","IG_ONeil","IG_Orleans","IG_Ortega","IG_Paper","IG_Patricia","IG_Priest","IG_ProlSec_02","IG_Ramp_Gang","IG_Ramp_Hic","IG_Ramp_Hipster","IG_Ramp_Mex","IG_RoccoPelosi","IG_RussianDrunk",
	"IG_Screen_Writer","IG_SiemonYetarian","IG_Solomon","IG_SteveHains","IG_Stretch","IG_Talina","IG_Tanisha","IG_TaoCheng","IG_TaosTranslator","ig_TennisCoach","IG_Terry","IG_TomEpsilon","IG_Tonya","IG_TracyDiSanto","IG_TrafficWarden",
	"IG_TylerDix","IG_Wade","IG_Zimbor","MP_F_DeadHooker","MP_F_Freemode_01","MP_F_Misty_01","MP_F_StripperLite","MP_G_M_Pros_01","MP_HeadTargets","MP_M_Claude_01","MP_M_ExArmy_01","MP_M_FamDD_01","MP_M_FIBSec_01","MP_M_Freemode_01",
	"MP_M_Marston_01","MP_M_Niko_01","MP_M_ShopKeep_01","MP_S_M_Armoured_01","Player_One","Player_Two","Player_Zero","slod_human","slod_large_quadped","slod_small_quadped","S_F_M_Fembarber","S_F_M_Maid_01","S_F_M_Shop_HIGH",
	"S_F_M_SweatShop_01","S_F_Y_AirHostess_01","S_F_Y_Bartender_01","S_F_Y_Baywatch_01","S_F_Y_Cop_01","S_F_Y_Factory_01","S_F_Y_Hooker_01","S_F_Y_Hooker_02","S_F_Y_Hooker_03","S_F_Y_Migrant_01","S_F_Y_MovPrem_01","S_F_Y_Ranger_01",
	"S_F_Y_Scrubs_01","S_F_Y_Sheriff_01","S_F_Y_Shop_LOW","S_F_Y_Shop_MID","S_F_Y_StripperLite","S_F_Y_Stripper_01","S_F_Y_Stripper_02","S_F_Y_SweatShop_01","S_M_M_AmmuCountry","S_M_M_Armoured_01","S_M_M_Armoured_02","S_M_M_AutoShop_01",
	"S_M_M_AutoShop_02","S_M_M_Bouncer_01","S_M_M_ChemSec_01","S_M_M_CIASec_01","S_M_M_CntryBar_01","S_M_M_DockWork_01","S_M_M_Doctor_01","S_M_M_FIBOffice_01","S_M_M_FIBOffice_02","S_M_M_Gaffer_01","S_M_M_Gardener_01","S_M_M_GenTransport",
	"S_M_M_HairDress_01","S_M_M_HighSec_01","S_M_M_HighSec_02","S_M_M_Janitor","S_M_M_LatHandy_01","S_M_M_LifeInvad_01","S_M_M_Linecook","S_M_M_LSMetro_01","S_M_M_Mariachi_01","S_M_M_Marine_01","S_M_M_Marine_02","S_M_M_Migrant_01",
	"S_M_M_MovAlien_01","S_M_M_MovPrem_01","S_M_M_MovSpace_01","S_M_M_Paramedic_01","S_M_M_Pilot_01","S_M_M_Pilot_02","S_M_M_Postal_01","S_M_M_Postal_02","S_M_M_PrisGuard_01","S_M_M_Scientist_01","S_M_M_Security_01","S_M_M_SnowCop_01",
	"S_M_M_StrPerf_01","S_M_M_StrPreach_01","S_M_M_StrVend_01","S_M_M_Trucker_01","S_M_M_UPS_01","S_M_M_UPS_02","S_M_O_Busker_01","S_M_Y_AirWorker","S_M_Y_AmmuCity_01","S_M_Y_ArmyMech_01","S_M_Y_Autopsy_01","S_M_Y_Barman_01","S_M_Y_BayWatch_01",
	"S_M_Y_BlackOps_01","S_M_Y_BlackOps_02","S_M_Y_BlackOps_03","S_M_Y_BusBoy_01","S_M_Y_Chef_01","S_M_Y_Clown_01","S_M_Y_Construct_01","S_M_Y_Construct_02","S_M_Y_Cop_01","S_M_Y_Dealer_01","S_M_Y_DevinSec_01","S_M_Y_DockWork_01","S_M_Y_Doorman_01",
	"S_M_Y_DWService_01","S_M_Y_DWService_02","S_M_Y_Factory_01","S_M_Y_Fireman_01","S_M_Y_Garbage","S_M_Y_Grip_01","S_M_Y_HwayCop_01","S_M_Y_Marine_01","S_M_Y_Marine_02","S_M_Y_Marine_03","S_M_Y_Mime","S_M_Y_PestCont_01",
	"S_M_Y_Pilot_01","S_M_Y_PrisMuscl_01","S_M_Y_Prisoner_01","S_M_Y_Ranger_01","S_M_Y_Robber_01","S_M_Y_Sheriff_01","S_M_Y_Shop_MASK","S_M_Y_StrVend_01","S_M_Y_Swat_01","S_M_Y_USCG_01","S_M_Y_Valet_01","S_M_Y_Waiter_01",
	"S_M_Y_WinClean_01","S_M_Y_XMech_01","S_M_Y_XMech_02","U_F_M_Corpse_01","U_F_M_Miranda","U_F_M_ProMourn_01","U_F_O_MovieStar","U_F_O_ProlHost_01","U_F_Y_BikerChic","U_F_Y_COMJane","U_F_Y_corpse_01","U_F_Y_corpse_02",
	"U_F_Y_HotPosh_01","U_F_Y_JewelAss_01","U_F_Y_Mistress","U_F_Y_PoppyMich","U_F_Y_Princess","U_F_Y_SpyActress","U_M_M_Aldinapoli","U_M_M_BankMan","U_M_M_BikeHire_01","U_M_M_FIBArchitect","U_M_M_FilmDirector","U_M_M_GlenStank_01",
	"U_M_M_Griff_01","U_M_M_Jesus_01","U_M_M_JewelSec_01","U_M_M_JewelThief","U_M_M_MarkFost","U_M_M_PartyTarget","U_M_M_ProlSec_01","U_M_M_ProMourn_01","U_M_M_RivalPap","U_M_M_SpyActor","U_M_M_WillyFist","U_M_O_FinGuru_01",
	"U_M_O_TapHillBilly","U_M_O_Tramp_01","U_M_Y_Abner","U_M_Y_AntonB",	"U_M_Y_BabyD","U_M_Y_Baygor","U_M_Y_BurgerDrug_01","U_M_Y_Chip","U_M_Y_Cyclist_01","U_M_Y_FIBMugger_01","U_M_Y_Guido_01","U_M_Y_GunVend_01","U_M_Y_Hippie_01",
	"U_M_Y_ImpoRage","U_M_Y_Justin","U_M_Y_Mani","U_M_Y_MilitaryBum","U_M_Y_Paparazzi","U_M_Y_Party_01","U_M_Y_Pogo_01","U_M_Y_Prisoner_01","U_M_Y_ProlDriver_01","U_M_Y_RSRanger_01","U_M_Y_SBike","U_M_Y_StagGrm_01","U_M_Y_Tattoo_01",
	"U_M_Y_Zombie_01",
};
void wait() {
	WAIT(0);
}

#define OFFSET_PLAYER_NAME_LOCAL        0x7C



MODULEINFO g_MainModuleInfo = { 0 };
void SetName(char* name)
{
	DWORD64 start = DWORD64(g_MainModuleInfo.lpBaseOfDll);

	uintptr_t nameOffset1 = Memory::get_base_offsetted(0x28B59BC);
	uintptr_t nameOffset2 = Memory::get_base_offsetted(0x28BB8C4);
	uintptr_t nameOffset3 = Memory::get_base_offsetted(0x2CE7FEC); // go test okay boss
	uintptr_t nameOffset4 = Memory::get_base_offsetted(0x2CEAFBF);
	uintptr_t nameOffset5 = Memory::get_base_offsetted(0x2CEE3BF);
	uintptr_t nameOffset6 = Memory::get_base_offsetted(0x2CEE654);
	uintptr_t nameOffset7 = Memory::get_multilayer_pointer(Hooking::getWorldPtr(), { OFFSET_PLAYER, OFFSET_PLAYER_INFO, OFFSET_PLAYER_NAME_LOCAL });

	memcpy(reinterpret_cast<void*>(nameOffset1), name, 16);
	memcpy(reinterpret_cast<void*>(nameOffset2), name, 16);
	memcpy(reinterpret_cast<void*>(nameOffset3), name, 16);
	memcpy(reinterpret_cast<void*>(nameOffset4), name, 16);
	memcpy(reinterpret_cast<void*>(nameOffset5), name, 16);
	memcpy(reinterpret_cast<void*>(nameOffset6), name, 16);
	memcpy(reinterpret_cast<void*>(nameOffset7), name, 16);

	notifyMap(Menu::Tools::StringToChar("~c~Setting Ingame Name To " + (std::string)name));
	notifyMap("~c~Join a new session to apply the name change");
}



Vector3 TPCoords;
Cam cameraHandle;
int TeleportH = 1000;
int RenderT = 3500;
int RenderT1 = 3500;
int TeleportID = 0;
int TeleportID1 = 115;
float PosX, PosY, PosZ;
float PosX2, PosY2, PosZ2;
bool TeleportSelf = false;
bool TeleportAnimation = true;
bool CameraTeleport = false;

bool lool = true;
void DoTeleport(Cam *Cam)
{
	if (lool == true) {
		*Cam = CAM::CREATE_CAMERA(26379945, false);
		CAM::SET_CAM_ACTIVE(*Cam, true);
		CAM::SET_CAM_COORD(*Cam, PosX, PosY, PosZ + TeleportH);
	}
}

void TPto(Vector3 Coords)
{
	if (TeleportAnimation)
	{
		GRAPHICS::_START_SCREEN_EFFECT("MP_intro_logo", 3, 0);
		PosX = Coords.x; PosY = Coords.y; PosZ = Coords.z;
		STREAMING::LOAD_ALL_OBJECTS_NOW();
		CameraTeleport = true;
	}
	int Handle = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_IN_ANY_VEHICLE(Handle, 0))
	{
		NETWORK::NETWORK_FADE_IN_ENTITY(Handle, 0);
		ENTITY::SET_ENTITY_COORDS(PED::GET_VEHICLE_PED_IS_IN(Handle, false), Coords.x, Coords.y, Coords.z, 0, 0, 0, 1);
	}
	else
		ENTITY::SET_ENTITY_COORDS(Handle, Coords.x, Coords.y, Coords.z, 0, 0, 0, 1);
}

std::string statusText;
DWORD statusTextDrawTicksMax;
bool statusTextGxtEntry;

void set_status_text(std::string str, DWORD time = 2500, bool isGxtEntry = false)
{

	statusText = str;
	statusTextDrawTicksMax = GetTickCount() + time;
	statusTextGxtEntry = isGxtEntry;
}


void shit(char* text, int font, float x, float y, float scalex, float scaley, int r, int b, int g, int a, bool center)
{
	UI::SET_TEXT_FONT(font);
	UI::SET_TEXT_SCALE(scalex, scaley);
	UI::SET_TEXT_COLOUR(r, g, b, a);
	UI::SET_TEXT_WRAP(0.0f, 1.0f);
	UI::SET_TEXT_CENTRE(center);
	UI::SET_TEXT_DROPSHADOW(0, 0, 0, 0, 0);
	UI::SET_TEXT_OUTLINE();
	UI::_SET_TEXT_ENTRY("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING(text);
	UI::_DRAW_TEXT(x, y);
}

int titleTextRed = 255;
int titleTextGreen = 255;
int titleTextBlue = 255;
int titleTextOpacity = 255;
int selectedPlayer;
int smooth_scroll_kek = 10;



class intructions {
private:
	int32_t bc = 0;
	int32_t handle = 0;
public:
	void setup()
	{
		handle = GRAPHICS::REQUEST_SCALEFORM_MOVIE("instructional_buttons");
		GRAPHICS::DRAW_SCALEFORM_MOVIE_FULLSCREEN(handle, 255, 255, 255, 255, 0);
		GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "CLEAR_ALL");
		GRAPHICS::END_SCALEFORM_MOVIE_METHOD();

		GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SET_CLEAR_SPACE");
		GRAPHICS::_ADD_SCALEFORM_MOVIE_METHOD_PARAMETER_INT(200);
		GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
	}

	void text_component(char* text)
	{
		GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRING");
		UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME((LPSTR)text);
		GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
	}

	void add(char* text, int button)
	{
		GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SET_DATA_SLOT");
		GRAPHICS::_ADD_SCALEFORM_MOVIE_METHOD_PARAMETER_INT(bc);
		GRAPHICS::_ADD_SCALEFORM_MOVIE_METHOD_PARAMETER_INT(button);
		text_component(text);
		GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
		bc++;
	}

	void add(char* text, char* button)
	{
		GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SET_DATA_SLOT");
		GRAPHICS::_ADD_SCALEFORM_MOVIE_METHOD_PARAMETER_INT(bc);
		text_component(button);
		text_component(text);
		GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
		bc++;
	}

	void draw() {
		GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "DRAW_INSTRUCTIONAL_BUTTONS");
		GRAPHICS::END_SCALEFORM_MOVIE_METHOD();

		GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SET_BACKGROUND_COLOUR");
		GRAPHICS::_ADD_SCALEFORM_MOVIE_METHOD_PARAMETER_INT(0);  // R = red
		GRAPHICS::_ADD_SCALEFORM_MOVIE_METHOD_PARAMETER_INT(0);  // G = green
		GRAPHICS::_ADD_SCALEFORM_MOVIE_METHOD_PARAMETER_INT(0);  // B = blue
		GRAPHICS::_ADD_SCALEFORM_MOVIE_METHOD_PARAMETER_INT(80); // A = alpha
		GRAPHICS::END_SCALEFORM_MOVIE_METHOD();

		bc = 0;
	}

	void success() {

		AUDIO::PLAY_SOUND_FRONTEND(-1, "ScreenFlash", "WastedSounds", true);
		handle = GRAPHICS::REQUEST_SCALEFORM_MOVIE("MP_BIG_MESSAGE_FREEMODE");
		GRAPHICS::DRAW_SCALEFORM_MOVIE_FULLSCREEN(handle, 255, 255, 255, 255, 0);
		GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_SHARD_WASTED_MP_MESSAGE");
		GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
		GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD(handle, "SHOW_SHARD_WASTED_MP_MESSAGE");
		GRAPHICS::_ADD_SCALEFORM_MOVIE_METHOD_PARAMETER_STRING("SHADE");
		GRAPHICS::_ADD_SCALEFORM_MOVIE_METHOD_PARAMETER_STRING("Welcome To SHADE VIP!");
		GRAPHICS::_ADD_SCALEFORM_MOVIE_METHOD_PARAMETER_INT(5);
		GRAPHICS::END_SCALEFORM_MOVIE_METHOD();
	}

};
std::unique_ptr<intructions> buttons = std::make_unique<intructions>();




int TestInt = 0;
BOOL TestToggle = false;
float TestFloat = 0;
BOOL nig28wen = false;

BOOL dropCash = false;
Player player = PLAYER::PLAYER_ID();

bool load() {
	notifyBottom("~g~Loading SHADE, press * or F8...");
	WAIT(2);
	return true;
}

BOOL firstload = true;
void main() {

	notifyBottom("Welcome to SHADE, please enter your username");
	GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Please enter your username", "Username", "", "", "", "", 90);
	while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
	notifyBottom("Welcome to SHADE, please enter your password");
	std::string playerUsername = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
	GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Please enter your password", "Password", "", "", "", "", 90);
	while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
	std::string playerPassword = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
	if (playerPassword == "CAT1" && playerUsername == "Insight" //Developer aka Lo Mein
		|| (playerPassword == "Bainchot" && playerUsername == "Madarchot") //random username and password xD so u create a new one of these and name them to what the buyer chose
		|| (playerPassword == "Skgamer" && playerUsername == "Gamer")) //so the usernames and passwords are being created & used here, as u can see 'CAT1 and Dev is a username and password also this is your username and password
	{
		UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
		UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~g~Press F4 ~g~or RB AND LEFT DPAD ~g~To Open");
		UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 1, 8, "SHADE", "~g~GRAND THEFT AUTO ~o~V", 1, "SHADE", 9, 0);
		UI::_DRAW_NOTIFICATION(FALSE, FALSE);
		//GRAPHICS::_START_SCREEN_EFFECT("RaceTurbo", 0, 0); //Same as in Horn boost
	}
	else
	{
		Log::Msg("2DGC4485VGFCVVS9ZHSZGNTSGMGP48FKWKUQMCZSHQ87JTRH");
		Log::Fatal("ERROR CODE = 2DGC4485VGFCVVS9ZHSZGNTSGMGP48FKWKUQMCZSHQ87JTRH PLEASE CONTACT THE DEVELOPER IF YOUR USERNAME AND PASSWORD DOESNT WORK");

	}
	while (true) {
		scrollbar();
		Menu::Checks::Keys();
		Features::UpdateLoop();
		switch (Menu::Settings::currentMenu) {

		case mainmenu:
		{

			{
				Menu::Title("");
				Menu::MainTitle("~c~[Shade 1.0]                             ");
				Menu::MenuOption("Self", playermenu);
				Menu::MenuOption("Weapon", weapon);
				Menu::MenuOption("Spawn", Spawners);
				Menu::MenuOption("Vehicle", vehicle);
				Menu::MenuOption("Session", SessionO);
				Menu::MenuOption("Teleport", teleports);	}
				Menu::MenuOption("Recovery", recover);
				Menu::MenuOption("Miscellaneous", misc);
				Menu::MenuOption("Protection", protection);
				Menu::MenuOption("Settings", settingsmenu);





		}
		
		break;

		


		case SessionO:
		{
			Menu::Title("Session");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			Menu::MenuOption("Playerlist", onlinemenu_playerlist);
			Menu::MenuOption("Online Options", allplayers);
			Menu::MenuOption("Name Changer", namechange);
			if (Menu::Option("Remove Everyone")) {
				Sleep(10000);
				WAIT(250);
				notifyMap("~g~Everyone has been removed without them kicking or crashing!");
			}
		//	Menu::Int("Player Count", Features::playerCount, 1, 30); /*doesnt work*/
		//	Menu::Toggle("Set Max Players", Features::maxPlayers); /*doesnt work*/
			Menu::Toggle("See joining players", Features::joinMsg, [] { Features::joinMessage(Features::joinMsg); });





			
		}

		break;
		case Spawners:

		{
			Menu::Title("Spawners");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			Menu::MenuOption("Vehicle", vehspawner);
			//Menu::MenuOption("Map Mods", mapmods);
			Menu::MenuOption("Spawn Animals", ride);
			Menu::MenuOption("Object Spawner", objSpawner);
			Menu::MenuOption("Pedastrian spawner", pet);
			Menu::MenuOption("Spawn Ghost Bike", ghostw);





		}

		break;


		case outfitss:
		{
			Menu::Title("Outfit Menu");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::MenuOption("Outfit Changer", cocplll);
			Menu::MenuOption("Outfits", outfits);

		}
		break;






		case zoomi:
		{
			Menu::Title("zoomi");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Zomm in Mini Map"))
			{
				UI::SET_RADAR_ZOOM(Zoom);
			}
			if (Menu::Float("Camera Zoom", Features::gameCamZoomInt, 0.0f, 100.0f)) { Features::gameCamZoom = true; }


			if (Menu::Int("<Change Zoom Mini Map>", Zoom, 0, 1))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Menu::Settings::alpha2 = NumberKeyboard();
				}
			}


		}
		break;

		case trainii:
		{
			Menu::Title("Super Menu");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::Option("Spawn Train", [] {
				train->spawn_train();
			});
			Menu::Option("Delete Train", [] {
				train->delete_train();
			});
			Menu::Toggle("Controll it", control_veh);
			Menu::Int("<Speed>", speed_train, -350, 350);

		}
		break;



#pragma region LSC
		case lsc1:
		{
			Menu::Title("LSC");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
#define playerPedId	PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID())


			if (Menu::Option("Paint Chrome")) {
				VEHICLE::SET_VEHICLE_COLOURS(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 120, 120);
			}
			if (Menu::Option("Paint Random")) {
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), rand() % 255, rand() % 255, rand() % 255);
				if (VEHICLE::GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID())))
					VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), rand() % 255, rand() % 255, rand() % 255);
			}
			if (Menu::Option("Paint Random + Chrome")) {
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), rand() % 255, rand() % 255, rand() % 255);
				if (VEHICLE::GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID())))
					VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), rand() % 255, rand() % 255, rand() % 255);
				VEHICLE::SET_VEHICLE_COLOURS(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 120, 120);
			}
			if (Menu::Option("Black")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 0, 0, 0);
			}
			if (Menu::Option("White")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 255, 255, 255);
			}
			if (Menu::Option("Red")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 255, 0, 0);
			}
			if (Menu::Option("Green")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 0, 255, 0);
			}
			if (Menu::Option("Blue")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 0, 0, 255);
			}
			if (Menu::Option("Orange")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 255, 128, 0);
			}
			if (Menu::Option("Yellow")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 255, 255, 0);
			}
			if (Menu::Option("Purple")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 204, 0, 204);
			}
			if (Menu::Option("Grey")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 96, 96, 96);
			}
			if (Menu::Option("Brown")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 165, 42, 42);
			}
			if (Menu::Option("Pink")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 255, 51, 255);
			}
			if (Menu::Option("Cool Green")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 0, 255, 196);
			}
			if (Menu::Option("Hot Pink")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 255, 0, 145);
			}
			if (Menu::Option("Lime")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 128, 255, 0);
			}
			if (Menu::Option("Lava Red")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 255, 60, 0);
			}
			if (Menu::Option("Mint Green")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 0, 255, 119);
			}
			if (Menu::Option("Neon Green")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 187, 255, 0);
			}
			if (Menu::Int("<Armor>", armor, -1, 4))
			{
				Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_USING(playerPedId);
				VEHICLE::SET_VEHICLE_MOD_KIT(playerVeh, 0);
				VEHICLE::SET_VEHICLE_MOD(playerVeh, 16, armor, 0);
			}
			if (Menu::Int("<Engine>", engine, -1, 3))
			{
				Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_USING(playerPedId);
				VEHICLE::SET_VEHICLE_MOD_KIT(playerVeh, 0);
				VEHICLE::SET_VEHICLE_MOD(playerVeh, 11, engine, 0);
			}
			if (Menu::Int("<Brakes>", brakes, -1, 2))
			{
				Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_USING(playerPedId);
				VEHICLE::SET_VEHICLE_MOD_KIT(playerVeh, 0);
				VEHICLE::SET_VEHICLE_MOD(playerVeh, 12, brakes, 0);
			}
			if (Menu::Int("<Exhaust>", exhaust, -1, 4))
			{
				Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_USING(playerPedId);
				VEHICLE::SET_VEHICLE_MOD_KIT(playerVeh, 0);
				VEHICLE::SET_VEHICLE_MOD(playerVeh, 4, exhaust, 0);
			}
			if (Menu::Int("<Plate>", plate, -1, 3))
			{
				Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_USING(playerPedId);
				VEHICLE::SET_VEHICLE_MOD_KIT(playerVeh, 0);
				VEHICLE::SET_VEHICLE_MOD(playerVeh, 62, plate, 0);
			}
			if (Menu::Int("<Grille>", grille, -1, 0))
			{
				Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_USING(playerPedId);
				VEHICLE::SET_VEHICLE_MOD_KIT(playerVeh, 0);
				VEHICLE::SET_VEHICLE_MOD(playerVeh, 6, grille, 0);
			}
			if (Menu::Int("<Hood>", hood, -1, 0))
			{
				Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_USING(playerPedId);
				VEHICLE::SET_VEHICLE_MOD_KIT(playerVeh, 0);
				VEHICLE::SET_VEHICLE_MOD(playerVeh, 7, hood, 0);
			}
			if (Menu::Int("<Roof>", roof, -1, 0))
			{
				Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_USING(playerPedId);
				VEHICLE::SET_VEHICLE_MOD_KIT(playerVeh, 0);
				VEHICLE::SET_VEHICLE_MOD(playerVeh, 10, roof, 0);
			}
			if (Menu::Int("<Skirt>", skirt, -1, 0))
			{
				Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_USING(playerPedId);
				VEHICLE::SET_VEHICLE_MOD_KIT(playerVeh, 0);
				VEHICLE::SET_VEHICLE_MOD(playerVeh, 3, skirt, 0);
			}
			if (Menu::Int("<Turbo>", turbo, -1, 0))
			{
				Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_USING(playerPedId);
				VEHICLE::SET_VEHICLE_MOD_KIT(playerVeh, 0);
				VEHICLE::SET_VEHICLE_MOD(playerVeh, 18, turbo, 0);
			}
			if (Menu::Int("<Window Tint>", windowtint, -1, 2))
			{
				Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_USING(playerPedId);
				VEHICLE::SET_VEHICLE_MOD_KIT(playerVeh, 0);
				VEHICLE::SET_VEHICLE_MOD(playerVeh, 46, windowtint, 0);
			}
		}
		break;
#pragma endregion

		//Weapons 
		case weapon:
		{
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			Menu::Title("Weapons");


			if (Menu::Option("Give All Weapons")) {
				uint Weapons[] = { 0x99B507EA, 0x678B81B1, 0x4E875F73, 0x958A4A8F, 0x440E4788, 0x84BD7BFD, 0x1B06D571, 0x5EF9FEC4, 0x22D8FE39, 0x99AEEB3B, 0x13532244, 0x2BE6766B, 0xEFE7E2DF, 0xBFEFFF6D, 0x83BF0278, 0xAF113F99, 0x9D07F764, 0x7FD62962, 0x1D073A89, 0x7846A318, 0xE284C527, 0x9D61E50F, 0x3656C8C1, 0x05FC3C11, 0x0C472FE2, 0x33058E22, 0xA284510B, 0x4DD2DC56, 0xB1CA77B1, 0x687652CE, 0x42BF8A85, 0x93E220BD, 0x2C3731D9, 0xFDBC8A50, 0x24B17070, 0x060EC506, 0x34A67B97, 0xFDBADCED, 0x23C9F95C, 0x497FACC3, 0xF9E6AA4B, 0x61012683, 0xC0A3098D, 0xD205520E, 0xBFD21232, 0x7F229F94, 0x92A27487, 0x083839C4, 0x7F7497E5, 0xA89CB99E, 0x3AABBBAA, 0xC734385A, 0x787F0BB, 0x47757124, 0xD04C944D, 0xAF3696A1, 0x476BF155, 0xB62D1F67 };
				for (int i = 0; i < (sizeof(Weapons) / 4); i++) {
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), Weapons[i], 9999, 1);
				}
			}
			if (Menu::Option("Upgrade Into MK2")) {
				std::vector<Hash> pistolMk2{
				   1329061674, 2396306288, 1140676955, 1709866683, 568543123, 2467084625
				};
				std::vector<Hash> smgMk2{
				   190476639, 2076495324, 2681951826, 3842157419, 1038927834, 1303784126, 2774849419, 966612367
				};
				std::vector<Hash> assltRifleMk2{
				   1675665560, 2640679034, 2076495324, 1108334355, 77277509, 3328927042, 2805810788, 1303784126, 1447477866, 3115408816
				};
				std::vector<Hash> carbineRifleMk2{
				   1141059345, 2640679034, 2076495324, 1108334355, 77277509, 3328927042, 2205435306, 1303784126, 2335983627, 3663056191
				};
				std::vector<Hash> combatMgMk2{
				   1475288264, 2640679034, 1108334355, 1060929921, 3328927042, 1303784126, 3051509595, 3607349581
				};
				std::vector<Hash> heavySniperMk2{
				   2313935527, 2193687427, 3159677559, 3061846192, 776198721, 2890063729, 1764221345, 277524638, 1815270123
				};

				std::vector<Hash> WeaponHash{
				   0xBFE256D4, 0x78A97CD0, 0xDBBD7280, 0x394F415C, 0xFAD1F1C9, 0xA914799
				};


				for (Hash hash : pistolMk2)
					WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL_MK2"), hash);

				for (Hash hash : smgMk2)
					WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("WEAPON_SMG_MK2"), hash);

				for (Hash hash : assltRifleMk2)
					WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("WEAPON_ASSAULTRIFLE_MK2"), hash);

				for (Hash hash : carbineRifleMk2)
					WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("WEAPON_CARBINERIFLE_MK2"), hash);

				for (Hash hash : combatMgMk2)
					WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("WEAPON_COMBATMG_MK2"), hash);

				for (Hash hash : heavySniperMk2)
					WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("WEAPON_HEAVYSNIPER_MK2"), hash);

				for (Hash hash : WeaponHash)
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), hash, 9999, 0);
			}
			Menu::Toggle("Fire Ammo", Features::fixfire, [] { Features::firefix(Features::fixfire); });
			Menu::Toggle("Explosive Ammo", Features::Penis, [] { Features::penis(Features::Penis); });
			Menu::Toggle("Shoot Molotov", Features::MOLOTOV, [] { Features::molotov(Features::MOLOTOV); });
			Menu::Toggle("Shoot Ball", Features::BALL, [] { Features::ball(Features::BALL); });
			Menu::Toggle("Shoot RPG Rockets", Features::RPG, [] { Features::rpg(Features::RPG); });
			Menu::Toggle("Shoot Grenades", Features::Grenade, [] { Features::grenade(Features::Grenade); });
			Menu::Toggle("Shoot Smoke Grenades", Features::Smoke, [] { Features::smoke(Features::Smoke); });
			Menu::Toggle("Shoot flamethrower", Features::Flare, [] { Features::flare(Features::Flare); });
			Menu::Toggle("Cartoon Gun", Features::CLOWNGUN, [] { Features::clowngun(Features::CLOWNGUN); });
			Menu::Toggle("Money Gun", Features::moneyGun, [] { Features::MoneyGun(Features::moneyGun); });
			Menu::Toggle("Rope Gun", Features::ROPEGUN, [] { Features::ropegun(); });
			Menu::Toggle("Airstrike Gun", Features::Air, [] { Features::air(Features::Air); });
			Menu::Toggle("Valkyire Rocket", Features::VALKYIREROCKET, [] { Features::valkyirerocket(Features::VALKYIREROCKET); });
			Menu::Toggle("Trigger Bot", Features::Trigger, [] { Features::TriggerAim(Features::Trigger); });
			Menu::Toggle("Aimbot", Features::Aimbot, [] { Features::aimbot(Features::Aimbot); });
			Menu::Toggle("Infinite Ammo", Features::infammo, [] { Features::noreloadv(Features::infammo); });
			Menu::Toggle("Asteroid Gun", Features::Weapontest, [] { Features::weapontest(Features::Weapontest); });
			Menu::Toggle("Rainbow Gun", Features::rbgun, [] { Features::RBGuner(Features::rbgun); });
			Menu::Toggle("One Shot Kill", Features::osk, [] { Features::OSKR(Features::osk); });
			Menu::Toggle("Gravity Gun", Features::GravityGun, [] { Features::gravitygun(Features::GravityGun); });
			Menu::Toggle("Delete Gun", Features::delgun, [] { Features::DelGun(Features::delgun); });
			Menu::Toggle("Water Gun", Features::waterGun, [] { Features::WaterGun(Features::waterGun); });
			Menu::Toggle("Minecraft Gun", Features::mgun, [] { Features::Mcgun(); });
			Menu::Toggle("Rapid Fire", Features::rapidfirer);
			Menu::Toggle("Ped Gun", Features::pedGun, [] { Features::PedGun(Features::pedGun); });
			Menu::Toggle("Shoot clown appears", Features::particlee1, [] { Features::ParticlEE1(Features::particlee1); });
			Menu::Toggle("Shoot trucks_crash", Features::particlee, [] { Features::ParticllE(Features::particlee); });
			Menu::Toggle("Shoot alien teleport", Features::particle3, [] { Features::ParticlE3(Features::particle3); });
			Menu::Toggle("Shoot sniper impact", Features::particle4, [] { Features::ParticlE4(Features::particle4); });
			Menu::Toggle("Shoot banknotes", Features::particle5, [] { Features::ParticlE5(Features::particle5); });
			Menu::Toggle("Shoot Blood", Features::particle6, [] { Features::ParticlE6(Features::particle6); });
			Menu::Toggle("Shoot Firework", Features::particle7, [] { Features::ParticlE7(Features::particle7); });
			Menu::Toggle("Shoot Water Splash", Features::particle8, [] { Features::ParticlE8(Features::particle8); });
			Menu::Toggle("Shoot to Vehicle", Features::Testgun, [] { Features::testgun(Features::Testgun); });
			Menu::Toggle("Vehicle Gun", Features::Vehgun, [] { Features::vehgun(Features::Vehgun); });
		}
		break;


		//IPLs
		case ipl:
		{
			Menu::Title("IPLs");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("North Yankton")) {
				STREAMING::REQUEST_IPL("prologue01");
				STREAMING::REQUEST_IPL("Prologue01c");
				STREAMING::REQUEST_IPL("Prologue01d");
				STREAMING::REQUEST_IPL("Prologue01e");
				STREAMING::REQUEST_IPL("Prologue01f");
				STREAMING::REQUEST_IPL("Prologue01g");
				STREAMING::REQUEST_IPL("prologue01h");
				STREAMING::REQUEST_IPL("prologue01i");
				STREAMING::REQUEST_IPL("prologue01j");
				STREAMING::REQUEST_IPL("prologue01k");
				STREAMING::REQUEST_IPL("prologue01z");
				STREAMING::REQUEST_IPL("prologue02");
				STREAMING::REQUEST_IPL("prologue03");
				STREAMING::REQUEST_IPL("prologue03b");
				STREAMING::REQUEST_IPL("prologue03_grv_cov");
				STREAMING::REQUEST_IPL("prologue03_grv_dug");
				STREAMING::REQUEST_IPL("prologue03_grv_fun");
				STREAMING::REQUEST_IPL("prologue04");
				STREAMING::REQUEST_IPL("prologue04b");
				STREAMING::REQUEST_IPL("prologue04_cover");
				STREAMING::REQUEST_IPL("prologue05");
				STREAMING::REQUEST_IPL("prologue05b");
				STREAMING::REQUEST_IPL("prologue06");
				STREAMING::REQUEST_IPL("prologue06b");
				STREAMING::REQUEST_IPL("prologue06_int");
				STREAMING::REQUEST_IPL("prologuerd");
				STREAMING::REQUEST_IPL("prologuerdb");
				STREAMING::REQUEST_IPL("prologue_DistantLights");
				STREAMING::REQUEST_IPL("prologue_grv_torch");
				STREAMING::REQUEST_IPL("prologue_m2_door");
				STREAMING::REQUEST_IPL("prologue_LODLights");
				STREAMING::REQUEST_IPL("DES_ProTree_start");
				Vector3 Coords;
				Coords.x = 3595.39673f; Coords.y = -4893.727f; Coords.z = 115.838394f;
				TPto(Coords);
			}
			if (Menu::Option("Porn Yacht")) {
				STREAMING::REQUEST_IPL("smboat");
				Vector3 Coords;
				Coords.x = -2045.8f; Coords.y = -1031.2f; Coords.z = 11.9f;
				TPto(Coords);
			}
			if (Menu::Option("Aircraft Carrier")) {
				STREAMING::REQUEST_IPL("hei_carrier");
				STREAMING::REQUEST_IPL("hei_carrier_DistantLights");
				STREAMING::REQUEST_IPL("hei_Carrier_int1");
				STREAMING::REQUEST_IPL("hei_Carrier_int2");
				STREAMING::REQUEST_IPL("hei_Carrier_int3");
				STREAMING::REQUEST_IPL("hei_Carrier_int4");
				STREAMING::REQUEST_IPL("hei_Carrier_int5");
				STREAMING::REQUEST_IPL("hei_Carrier_int6");
				STREAMING::REQUEST_IPL("hei_carrier_LODLights");
				Vector3 Coords;
				Coords.x = 3069.330f; Coords.y = -4632.4f; Coords.z = 15.043f;
				TPto(Coords);
			}
			if (Menu::Option("Sunken Cargoship")) {
				STREAMING::REQUEST_IPL("sunkcargoship");
				Vector3 Coords;
				Coords.x = -162.8918f; Coords.y = -2365.769f; Coords.z = 0.0f;
				TPto(Coords);
			}
			if (Menu::Option("Hospital")) {
				STREAMING::REQUEST_IPL("RC12B_HospitalInterior");
				STREAMING::REQUEST_IPL("RC12B_Destroyed");
				Vector3 Coords;
				Coords.x = 356.8f; Coords.y = -590.1f; Coords.z = 43.3f;
				TPto(Coords);
			}
			if (Menu::Option("Oneil Farm")) {
				STREAMING::REMOVE_IPL("farm_burnt");
				STREAMING::REMOVE_IPL("farm_burnt_props");
				STREAMING::REQUEST_IPL("farm");
				STREAMING::REQUEST_IPL("farm_props");
				STREAMING::REQUEST_IPL("farmint");
				STREAMING::REQUEST_IPL("farmint_cap");
				Vector3 Coords;
				Coords.x = 2441.2f; Coords.y = 4968.5f; Coords.z = 51.7f;
				TPto(Coords);
			}
			if (Menu::Option("Life Invader Office")) {
				STREAMING::REQUEST_IPL("facelobby");
				STREAMING::REQUEST_IPL("facelobbyfake");
				Vector3 Coords;
				Coords.x = -1047.9f; Coords.y = -233.0f; Coords.z = 39.0f;
				TPto(Coords);
			}
			if (Menu::Option("Cargoship")) {
				STREAMING::REQUEST_IPL("cargoship");
				Vector3 Coords;
				Coords.x = -162.8918f; Coords.y = -2365.769f; Coords.z = 9.3192f;
				TPto(Coords);
			}
			if (Menu::Option("Jewelry Store")) {
				STREAMING::REQUEST_IPL("jewel2fake");
				STREAMING::REQUEST_IPL("post_hiest_unload");
				STREAMING::REQUEST_IPL("bh1_16_refurb");
				Vector3 Coords;
				Coords.x = -630.4f; Coords.y = -236.7f; Coords.z = 40.0f;
				TPto(Coords);
			}
			if (Menu::Option("Morgue")) {
				STREAMING::REQUEST_IPL("Coroner_Int_on");
				Vector3 Coords;
				Coords.x = 244.9f; Coords.y = -1374.7f; Coords.z = 39.5f;
				TPto(Coords);
			}

		}
		break;

		case dropOnline22:
		{
			Menu::Title("Cyrcle Drop");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(29, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 1, 1, 1, 0, 255, 255, 200, 1, 1, 1, 0, 0, 0, 0);
			}
			Menu::Toggle("Cyrcle Drop", Features::cyrclenew, [] { Features::CyrcleNew(Features::cyrclenew); });
			if (Menu::Int("Amount", Features::DropAmount, 1, 2500))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropAmount = NumberKeyboard();
				}
			}


			if (Menu::Int("Height", Features::DropHeight, 1, 50))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropHeight = NumberKeyboard();
				}
			}


			if (Menu::Int("Delay", Features::DropDelay, 50, 1000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropDelay = NumberKeyboard();
				}
			}


			//Menu::Break("Models");
			dropModelsSelect();


		}
		break;

		case ptfxpp:
		{
			Menu::Title("PTFX");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::Float("PTFX Scale", Menu::Settings::bulletp, 0.f, 10.f);
			Menu::Toggle("Lightning", Features::moneyeffect);
			Menu::Toggle("Clown Effects", Features::ClownLoop);
			Menu::Toggle("Firework", Features::fireworkloop);
			Menu::Toggle("Alien 1", Features::alien1);
			Menu::Toggle("Alien 2", Features::alien2);
			Menu::Toggle("Electric Boosh", Features::electricberox);
			Menu::Toggle("Water Splash", Features::watereffect);
			Menu::Toggle("Smoke", Features::smokeeffect);
			Menu::Toggle("Burial Dirt", Features::moneyeffect10);
			Menu::Toggle("~w~Ghost Rider", Features::ghosterr);

		}
		break;

		case ptfxveh:
		{
			Menu::Title("~w~PTFX Vehicle");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::Toggle("Lightning", Features::CarLightning);
			Menu::Toggle("Clown Effects", Features::CarClownLoop);
			Menu::Toggle("Firework", Features::Carfireworkloop);
			Menu::Toggle("Alien 1", Features::Caralien1);
			Menu::Toggle("Alien 2", Features::Caralien2);
			Menu::Toggle("Electric", Features::Carelectric);
			Menu::Toggle("Burial Dirt", Features::moneyeffect15);


		}
		break;

		case landmarks:
		{

			Menu::Title("LANDMARKS");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Aircraft Carrier")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 3084.7302f, -4770.709f, 15.2617f);
			}
			if (Menu::Option("Airport Runway")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -1336.000f, -3044.000f, 13.9393f);
			}
			if (Menu::Option("Altruist Cult Camp")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -1170.840f, 4926.6460f, 224.2953f);
			}
			if (Menu::Option("Calafia Train Bridege")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -517.8690f, 4425.2842f, 89.7951f);
			}
			if (Menu::Option("Cargo Ship")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 899.6780f, -2882.190f, 19.0130f);
			}
			if (Menu::Option("Chumash Pier")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -3426.683f, 967.7380f, 8.3468f);
			}
			if (Menu::Option("Dell Perro Pier")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -1850.127f, -1231.751f, 13.0172f);
			}
			if (Menu::Option("El Burro Heights")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 1384.0000f, -2057.100f, 51.9993f);
			}
			if (Menu::Option("Elysian Island")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 338.2000f, -2715.899f, 38.4785f);
			}
			if (Menu::Option("North San Andreas")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 24.7750f, 7644.1021f, 19.0559f);
			}
			if (Menu::Option("Ferris Wheel")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -1670.700f, -1125.000f, 13.0379f);
			}
			if (Menu::Option("Fort Zancudo")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -2047.400f, 3132.1001f, 32.8043f);
			}
			if (Menu::Option("Fort Zancudo Tower")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -2358.132f, 3249.7539f, 101.4508f);
			}
			if (Menu::Option("Jetsam")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 760.4000f, -2943.200f, 5.8004f);
			}
			if (Menu::Option("Ghost 23:00am")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 3059.6201f, 5564.2461f, 197.0906f);
				NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(0, 0, 0);
			}
			if (Menu::Option("Merryweather Dock")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 486.4170f, -3339.691f, 6.0699f);
			}
			if (Menu::Option("Mount Chiliad")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 450.7180f, 5566.6138f, 806.1831f);
			}
			if (Menu::Option("Pacific Standart Bank")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 235.0460f, 216.4340f, 106.2869f);
			}
			if (Menu::Option("Police Station")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 436.4910f, -982.1720f, 30.6989f);
			}
			if (Menu::Option("Sandy Shores Airfiled")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 1747.0000f, 3273.7000f, 41.1277f);
			}
		}
		break;

		case Night:
		{
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::Title("Nights");

			if (Menu::Option("Downtown Vinewood")) {
				Vector3 Coords;
				Coords.x = 373.260f; Coords.y = 254.730f; Coords.z = 102.954f;
				TPto(Coords);
			}
			if (Menu::Option("Vinewood Middle")) {
				Vector3 Coords;
				Coords.x = 7.939f; Coords.y = 218.331f; Coords.z = 107.607f;
				TPto(Coords);
			}
			if (Menu::Option("Del Perro")) {
				Vector3 Coords;
				Coords.x = -1289.758f; Coords.y = -647.775f; Coords.z = 26.573f;
				TPto(Coords);
			}
			if (Menu::Option("Vespucci")) {
				Vector3 Coords;
				Coords.x = -1164.017f; Coords.y = -1199.575f; Coords.z = 3.772f;
				TPto(Coords);
			}
			if (Menu::Option("Airport")) {
				Vector3 Coords;
				Coords.x = -664.626f; Coords.y = -2462.964f; Coords.z = 13.944;
				TPto(Coords);
			}
			if (Menu::Option("Strawberry")) {
				Vector3 Coords;
				Coords.x = 82.522f; Coords.y = -1298.378f; Coords.z = 29.293f;
				TPto(Coords);
			}
			if (Menu::Option("Cypress Flats")) {
				Vector3 Coords;
				Coords.x = 377.244f; Coords.y = -1111.520f; Coords.z = 29.406f;
				TPto(Coords);
			}
			if (Menu::Option("La Mesa")) {
				Vector3 Coords;
				Coords.x = 784.305f; Coords.y = -1279.764f; Coords.z = 26.358f;
				TPto(Coords);
			}
			if (Menu::Option("Misson Row")) {
				Vector3 Coords;
				Coords.x = 865.235f; Coords.y = -2094.451f; Coords.z = 30.241f;
				TPto(Coords);
			}
			if (Menu::Option("Elysian Island")) {
				Vector3 Coords;
				Coords.x = 188.878f; Coords.y = -3161.526f; Coords.z = 5.787f;
				TPto(Coords);
			}
		}
		break;

		case safehouses:
		{

			Menu::Title("SAFEHOUSES");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Michaels House")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -813.6030f, 179.4740f, 72.1572f);
			}
			if (Menu::Option("Franklins House1")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 7.1190f, 536.6150f, 176.0280f);
			}
			if (Menu::Option("Franklins House2")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -14.3803f, -1483.510f, 31.1044f);
			}
			if (Menu::Option("Trevors House1")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 1972.6100f, 3817.0400f, 33.4283f);
			}
			if (Menu::Option("Trevors House2")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -1151.770f, 1518.140f, 10.6327f);
			}
			if (Menu::Option("Trevors Office")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 97.2707f, -1290.994f, 29.2688f);
			}
		}
		break;

		case underwater:
		{

			Menu::Title("UNDERWATER");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Hatch")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 4274.2334f, 2975.4146f, -169.5375f);
			}
			if (Menu::Option("Sea Monster")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -3373.730f, 504.7139f, -23.7034f);
			}
			if (Menu::Option("Sunken Body")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -3161.077f, 3001.9915f, -36.8034f);
			}
			if (Menu::Option("Sunken Plane")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -942.3652f, 6608.7627f, -19.5568f);
			}
			if (Menu::Option("Tank")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 4201.6323f, 3643.8167f, -37.6158f);
			}
			if (Menu::Option("Humane Labs Tunnel")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 3838.4746f, 3673.0667f, -18.8467f);
			}
			if (Menu::Option("UFO")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 762.4217f, 7380.3682f, -110.3537f);
			}
		}
		break;

		case StandardLocation:
		{
			Menu::Title("Weather Options");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("Ghost 23:00am")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 3059.6201f, 5564.2461f, 197.0906f);
				NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(0, 0, 0);
			}

			if (Menu::Option("Mount Chiliad")) {
				Vector3 Coords;
				Coords.x = 496.75f; Coords.y = 5591.17f; Coords.z = 795.03f;
				TPto(Coords);
			}
			Features::drawMap(5, "mount_chiliad");
			if (Menu::Option("Maze Bank")) {
				Vector3 Coords;
				Coords.x = -74.94243f; Coords.y = -818.63446f; Coords.z = 326.174347f;
				TPto(Coords);
			}
			Features::drawMap(6, "maze_bank");
			if (Menu::Option("Military Base")) {
				Vector3 Coords;
				Coords.x = -2012.8470f; Coords.y = 2956.5270f; Coords.z = 32.8101f;
				TPto(Coords);
			}
			Features::drawMap(7, "m_base");
			if (Menu::Option("Zancudo Tower")) {
				Vector3 Coords;
				Coords.x = -2356.0940; Coords.y = 3248.645; Coords.z = 101.4505;
				TPto(Coords);
			}
			Features::drawMap(8, "zancudo_tower");
			if (Menu::Option("Mask Shop")) {
				Vector3 Coords;
				Coords.x = -1338.16; Coords.y = -1278.11; Coords.z = 4.87;
				TPto(Coords);
			}
			Features::drawMap(9, "mask_shop");
			if (Menu::Option("LS Customs")) {
				Vector3 Coords;
				Coords.x = -373.01; Coords.y = -124.91; Coords.z = 38.31;
				TPto(Coords);
			}
			Features::drawMap(10, "l_s_c");
			if (Menu::Option("Ammunation")) {
				Vector3 Coords;
				Coords.x = 247.3652; Coords.y = -45.8777; Coords.z = 69.9411;
				TPto(Coords);
			}
			Features::drawMap(11, "ammu_nation");
			if (Menu::Option("Airport")) {
				Vector3 Coords;
				Coords.x = -1102.2910f; Coords.y = -2894.5160f; Coords.z = 13.9467f;
				TPto(Coords);
			}
			Features::drawMap(12, "airport");
			if (Menu::Option("Ponsonbys")) {
				Vector3 Coords;
				Coords.x = -718.91; Coords.y = -158.16; Coords.z = 37.00;
				TPto(Coords);
			}
			Features::drawMap(13, "shop");
			if (Menu::Option("Waterfall")) {
				Vector3 Coords;
				Coords.x = -597.9525f; Coords.y = 4475.2910f; Coords.z = 25.6890f;
				TPto(Coords);
			}
			Features::drawMap(14, "waterfall");
			if (Menu::Option("FBI")) {
				Vector3 Coords;
				Coords.x = 135.5220f; Coords.y = -749.0003f; Coords.z = 260.0000f;
				TPto(Coords);
			}
			Features::drawMap(15, "fib");
			if (Menu::Option("Human Labs")) {
				Vector3 Coords;
				Coords.x = 3617.231f; Coords.y = 3739.871f; Coords.z = 28.6901f;
				TPto(Coords);
			}
			Features::drawMap(16, "h_labs");
			if (Menu::Option("MMI")) {
				Vector3 Coords;
				Coords.x = -222.1977; Coords.y = -1185.8500; Coords.z = 23.0294;
				TPto(Coords);
			}
			Features::drawMap(17, "mmi");
			if (Menu::Option("Sandy Shores Airfield")) {
				Vector3 Coords;
				Coords.x = 1741.4960f; Coords.y = 3269.2570f; Coords.z = 41.6014f;
				TPto(Coords);
			}
			Features::drawMap(18, "airport2");
			if (Menu::Option("Bennys Garage")) {
				Vector3 Coords;
				Coords.x = -196.349442f; Coords.y = -1303.103271f; Coords.z = 30.650515f;
				TPto(Coords);
			}
			Features::drawMap(19, "benny");
			if (Menu::Option("Strip Club")) {
				Vector3 Coords;
				Coords.x = 135.548096f; Coords.y = -1308.388306f; Coords.z = 28.344141f;
				TPto(Coords);
			}
			Features::drawMap(20, "club");
		}
		break;

		case TowerLocation:
		{
			Menu::Title("Weather Options");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("Secret Army Tower")) {
				Vector3 Coords;
				Coords.x = -2358.946045f; Coords.y = 3252.216797f; Coords.z = 101.450424f;
				TPto(Coords);
			}
			if (Menu::Option("Eclipse Tower Apartment")) {
				Vector3 Coords;
				Coords.x = -810.110901f; Coords.y = 300.467865f; Coords.z = 86.118515f;
				TPto(Coords);
			}
			if (Menu::Option("Tinsel Tower Apartment")) {
				Vector3 Coords;
				Coords.x = -641.864624f; Coords.y = 24.014740f; Coords.z = 39.351025f;
				TPto(Coords);
			}
			if (Menu::Option("Maze Tower")) {
				Vector3 Coords;
				Coords.x = -73.92588f; Coords.y = -818.455078f; Coords.z = 326.174377f;
				TPto(Coords);
			}
			if (Menu::Option("Construction Tower")) {
				Vector3 Coords;
				Coords.x = -143.881927f; Coords.y = -984.810852f; Coords.z = 269.134308f;
				TPto(Coords);
			}
			if (Menu::Option("Clock Tower")) {
				Vector3 Coords;
				Coords.x = -1238.675537f; Coords.y = -847.954590f; Coords.z = 85.161690f;
				TPto(Coords);
			}
			if (Menu::Option("Sniper Tower")) {
				Vector3 Coords;
				Coords.x = -550.989380f; Coords.y = -193.862366f; Coords.z = 76.499336f;
				TPto(Coords);
			}
			if (Menu::Option("Prison Tower")) {
				Vector3 Coords;
				Coords.x = 1541.6290f; Coords.y = 2470.1400f; Coords.z = 62.8751f;
				TPto(Coords);
			}
			if (Menu::Option("Creek(Mountain Tower)")) {
				Vector3 Coords;
				Coords.x = 2784.6060f; Coords.y = 6000.8770f; Coords.z = 357.2007f;
				TPto(Coords);
			}
			if (Menu::Option("Eclipse Towers")) {
				Vector3 Coords;
				Coords.x = -773.351990f; Coords.y = 309.809235f; Coords.z = 85.699196f;
				TPto(Coords);
			}
			if (Menu::Option("Tinsel Towers")) {
				Vector3 Coords;
				Coords.x = -641.864624f; Coords.y = 24.014740f; Coords.z = 39.351025f;
				TPto(Coords);
			}
			if (Menu::Option("Zancudo Tower")) {
				Vector3 Coords;
				Coords.x = -2356.0940; Coords.y = 3248.645; Coords.z = 101.4505;
				TPto(Coords);
			}
		}
		break;

		//Teleport 
		case teleports:
		{
			Menu::Title("Weather Options");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("F5 To Teleport")) {
				notifyMap("Press F5 To Teleport");

			}
			if (Menu::Option("Teleport Forward")) {
				Features::TPForward();

			}
			if (Menu::Option("Ammunation")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 247.3652f, -45.8777f, 69.9411f);
			}
			if (Menu::Option("Barber Shop")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -1293.231f, -1117.002f, 6.6402f);
			}
			if (Menu::Option("Bennys")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -205.3417f, -1305.824f, 31.3527f);
			}
			if (Menu::Option("LSC")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -367.7336f, -130.8588f, 38.6772f);
			}
			if (Menu::Option("Clothing Shop")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -159.2996f, -304.3292f, 39.7333f);
			}
			if (Menu::Option("Tattoo Shop")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 319.7877f, 172.2311f, 103.7454f);
			}
			if (Menu::Option("Impound Lot")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 391.4746f, -1637.975f, 29.3148f);
			}
			if (Menu::Option("LSPD Char Creator")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 402.6675f, -1003.000f, -99.0040f);
			}
			if (Menu::Option("Mission Carpark")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 405.9359f, -954.0912f, -99.0041f);
			}
			if (Menu::Option("Mors Mutuals")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -222.1977f, -1185.850f, 23.0294f);
			}
			if (Menu::Option("Crane Top")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -119.8790f, -977.3570f, 304.2491f);
			}
			if (Menu::Option("FIB Building Roof")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 150.1260f, -754.5910f, 262.8650f);
			}
			if (Menu::Option("Galileo Roof")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -438.8040f, 1076.0970f, 352.4106f);
			}
			if (Menu::Option("IAA Building Roof")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 134.0850f, -637.8590f, 262.8510f);
			}
			if (Menu::Option("Maze Bank Roof")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -75.0150f, -818.2150f, 326.1757f);
			}
			if (Menu::Option("Satellite Dish")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 2034.9880f, 2953.1050f, 74.6007f);
			}
			if (Menu::Option("UFO (Fort Zacudo)")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -2052.000f, 3237.0000f, 1456.9756f);
			}
			if (Menu::Option("Windmill Top")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 2026.6754f, 1824.6824f, 133.3133f);
			}



		}
		break;













		//World 
		case weatheroptions:
		{
			Menu::Title("Weather Options");
			Menu::MainTitle("~c~[Shade 1.0]                              ");


			if (Menu::Option("EXTRASUNNY")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("EXTRASUNNY"); }
			if (Menu::Option("CLEAR")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("CLEAR"); }
			if (Menu::Option("CLOUDS")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("CLOUDS"); }
			if (Menu::Option("SMOG")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("SMOG"); }
			if (Menu::Option("FOGGY")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("FOGGY"); }
			if (Menu::Option("OVERCAST")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("OVERCAST"); }
			if (Menu::Option("RAIN")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("RAIN"); }
			if (Menu::Option("THUNDER")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("THUNDER"); }
			if (Menu::Option("CLEARING")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("CLEARING"); }
			if (Menu::Option("NEUTRAL")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("NEUTRAL"); }
			if (Menu::Option("SNOW")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("SNOW"); }
			if (Menu::Option("BLIZZARD")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("BLIZZARD"); }
			if (Menu::Option("SNOWLIGHT")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("SNOWLIGHT"); }
			if (Menu::Option("XMAS")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("XMAS"); }
			if (Menu::Option("HALLOWEEN")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("HALLOWEEN"); }
			if (Menu::Option("BLACK SCREEN")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("BLACK SCREEN"); }


			if (Menu::Int("~g~Waves Intensity", Features::WaterIntense, 0, 100)) {
				WATER::_SET_CURRENT_INTENSITY(Features::WaterIntense);

			}
			if (Menu::Int("Rain Intensity", RainIntensity, 0, 100)) {
				GAMEPLAY::_SET_RAIN_FX_INTENSITY(RainIntensity);
			}
			if (Menu::Int("Cloud Opacity", wind, 0, 100)) {
				GAMEPLAY::_SET_CLOUD_HAT_OPACITY(cloud);
			}
			if (Menu::Option("Create Lighting")) {
				GAMEPLAY::_CREATE_LIGHTNING_THUNDER();
			}

			Menu::Toggle("Loop Lighting", Features::Light, [] { Features::light(Features::Light); });



		}
		break;

		case sessweather:
		{

			Menu::Title("sessweather");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("Sunny")) {


				SCRIPT::SET_PLAYER_WEATHER(1, 1, 76, 0);
			}

			if (Menu::Option("Clear")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 2, 76, 0);
			}

			if (Menu::Option("Clearing 1")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 3, 76, 0);
			}

			if (Menu::Option("Clearing 2")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 4, 76, 0);
			}
			if (Menu::Option("Cloudy")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 5, 76, 0);
			}
			if (Menu::Option("Rain")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 6, 76, 0);
			}
			if (Menu::Option("Thunder")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 7, 76, 0);
			}
			if (Menu::Option("Light Rain")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 8, 76, 0);
			}
			if (Menu::Option("Polluted Rain")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 9, 76, 0);
			}
			if (Menu::Option("Light Snow")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 10, 76, 0);
			}
			if (Menu::Option("Snow")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 11, 76, 0);
			}
			if (Menu::Option("Light Snow")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 12, 76, 0);
			}
			if (Menu::Option("XMAS Snow")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 13, 76, 0);
			}
			if (Menu::Option("Helloween")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 14, 76, 0);
			}
			if (Menu::Option("Black Weather")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 15, 76, 0);
			}
		}

		break;





		case VehWeapon:
		{
			Menu::Title("Vehicle Weapons");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::Toggle("Shoot Rockets", Features::ShootR, [] { Features::ShootRocket(Features::ShootR); });
			Menu::Toggle("Shoot FireWorks", Features::ShootT, [] { Features::ShootTanks(Features::ShootT); });
			Menu::Toggle("Shoot Tank Rounds", Features::ShootTankR, [] { Features::ShootTankRounds(Features::ShootTankR); });
			Menu::Toggle("Shoot Balls", Features::ShootBall, [] { Features::ShootBalls(Features::ShootBall); });
			Menu::Toggle("Shoot flamethrower", Features::ShootFlare, [] { Features::Shootflare(Features::ShootFlare); });
			Menu::Toggle("Shoot Bullet", Features::ShootMini, [] { Features::ShootMiniGun(Features::ShootMini); });

		}
		break;

		//Misc Options 
		case misc:
		{
			Menu::Title("World Options");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			Menu::MenuOption("Weather Options", weatheroptions);
			Menu::MenuOption("Ghost Rider", ghostw);
			Menu::MenuOption("Zoom Options", zoomi);
			if (Menu::Option("Rapair near Vehicles")) {

				Features::repairnearbyvehicles();


			}
			if (Menu::Option("Remove 'Transaction Pending' Error")) {
				if (UI::_IS_LOADING_PROMPT_BEING_DISPLAYED()) {
					UI::_REMOVE_LOADING_PROMPT();
				}
			}
			if (Menu::Option("6 Stars")) {
				Memory::set_value<int>({ (2 * 4 * 2) / 2, 4 * 1000 + 280, 500 * 4 - 70 + 70 + 72 }, 5);
				GAMEPLAY::SET_FAKE_WANTED_LEVEL(6);
			}
			if (Menu::Option("Max Singleplayer Money")) {
				Hash stat0 = $("SP0_TOTAL_CASH");
				Hash stat1 = $("SP1_TOTAL_CASH");
				Hash stat2 = $("SP2_TOTAL_CASH");
				STATS::STAT_SET_INT(stat0, INT_MAX, 1);
				STATS::STAT_SET_INT(stat1, INT_MAX, 1);
				STATS::STAT_SET_INT(stat2, INT_MAX, 1);
			}
			if (Menu::Option("Is this Account flagged?")) {
				if (Features::isBanned()) {
					notifyMap("~g~Account is NOT flagged!");
				}
				else {
					notifyMap("~r~[DANGER!] Account is flagged!");
				}
			}
			if (Menu::Option("Rapair near Vehicles")) {

				Features::repairnearbyvehicles();


			}
			Menu::Toggle("Kill Peds", Features::killpedsbool);
			Menu::Toggle("Create BlackHole", Features::blackhole);
			Menu::Toggle("Explode Peds", Features::explodepedsbool);
			Menu::Int("Fake Wanted Level", Features::timeerlevelcc, 0, 5, [] { Features::settimechangcc(Features::timeerlevelcc); });
			Menu::Toggle("Disable Phone", Features::phonedisable, [] { Features::disablephone(); });
			Menu::Toggle("Forcefield", Features::flxneav, [] { Features::nearbflx(Features::flxneav); });
			Menu::Toggle("Chaos Mode", Features::ChaosMode, [] { Features::Chaos(Features::ChaosMode); });
			Menu::Toggle("Meteor Shower", Features::AsteroidShower, [] { Features::AsteroidShowerToggle(Features::AsteroidShower); });
			Menu::Toggle("Airstrike Mode", Features::AirstrikeShower, [] { Features::AirstrikehowerToggle(Features::AirstrikeShower); });
			Menu::Toggle("Free Cam", Features::free, [] { Features::freeCam(Features::free); });
			Menu::Toggle("Unlimited Orbital cannon", Features::Orbital, [] { Features::Orbi(Features::Orbital); });
			Menu::Toggle("Unlimited Vehicle Sell Time", Features::Sell, [] { Features::Sel(Features::Sell); });
			Menu::Toggle("Explode Cars", Features::explodenearbyvehiclesbool);
			Menu::Toggle("destroy tire", Features::explodenearbytiresbool, [] { Features::explodenearbytires(Features::explodenearbytiresbool); });
			Menu::Toggle("Make cars horn", Features::hornnearbyvehiclesbool, [] { Features::hornnearbyvehicles(Features::hornnearbyvehiclesbool); });
			Menu::Toggle("Delete Cars", Features::deletenearbyvehiclesbool);
			Menu::Toggle("Freeze Time", Features::Freezetime, [] { Features::freezetime(Features::Freezetime); });
			if (Menu::Toggle("Moon Gravity", MoonGravity)) {
				GAMEPLAY::SET_GRAVITY_LEVEL(MoonGravity ? 2 : 0);
			}



		}
		break;

		case mapmods:
		{
			Menu::Title("~w~All Players");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			Menu::MenuOption("Maze Bank Small Ramp", ramp1);
			Menu::MenuOption("Maze Bank Roof Ramp", ramp2);
			Menu::MenuOption("Beach Ramp", ramp3);
			Menu::MenuOption("Mount Chilliad Ramp", ramp4);
			Menu::MenuOption("Airport Mini Ramp", ramp5);
			Menu::MenuOption("Airport Gate Ramp", ramp6);
			Menu::MenuOption("Space Tower", ramp7);
			Menu::MenuOption("Exploit Quad Ramp", ramp8);
			Menu::MenuOption("Exploit Fort", ramp9);
			Menu::MenuOption("Halfpipe", ramp10);
			Menu::MenuOption("Airport Loop Ramp", ramp11);
			Menu::MenuOption("Mega Ramp", ramp12);
		}
		break;
		case ramp1:
			Menu::Title("~w~All Players");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(2475986526, -80.9087, -830.357, 325.097, -14.4264, -8.53774, 152.209, -1, 0);
				Features::PlaceObjectByHash(2475986526, -79.2316, -831.297, 325.108, -14.4054, 4.26887, 164.271, -1, 0);
				Features::PlaceObjectByHash(2475986526, -76.7563, -831.549, 325.123, -14.4263, -0, 171.818, -1, 0);
				Features::PlaceObjectByHash(2475986526, -74.2595, -831.691, 325.09, -14.2059, -1.06722, -176.517, -1, 0);
				Features::PlaceObjectByHash(2475986526, -71.9478, -831.257, 325.113, -14.4264, 2.13443, -166.006, -1, 0);
				Features::PlaceObjectByHash(2475986526, -69.5981, -830.542, 325.066, -14.5918, -4.26887, -155.474, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.4174, -829.035, 325.097, -14.4263, -4.26887, -140.651, -1, 0);
				Features::PlaceObjectByHash(2475986526, -65.7121, -827.409, 325.068, -14.3048, -1.70755, -130.667, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.2717, -825.422, 325.112, -14.4263, -0, -121.256, -1, 0);
				Features::PlaceObjectByHash(2475986526, -63.2876, -823.434, 325.114, -14.5345, -0, -111.446, -1, 0);
				Features::PlaceObjectByHash(2475986526, -62.4924, -821.128, 325.082, -14.5467, 2.13443, -102.385, -1, 0);
				Features::PlaceObjectByHash(2475986526, -62.233, -818.528, 325.065, -14.6184, -8.00413, -88.1861, -1, 0);
				Features::PlaceObjectByHash(2475986526, -62.8694, -815.926, 325.118, -14.4265, -6.4033, -76.5979, -1, 0);
				Features::PlaceObjectByHash(2475986526, -63.6142, -813.68, 325.112, -14.3655, 8.53774, -66.7885, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.9883, -811.439, 325.107, -14.4263, 1.28066, -52.8494, -1, 0);
				Features::PlaceObjectByHash(2475986526, -66.5913, -808.328, 325.238, -12.4517, -0, -40.3246, -1, 0);
				Features::PlaceObjectByHash(2475986526, -68.2603, -807.899, 325.336, -13.8689, -0, -33.062, -1, 0);
				Features::PlaceObjectByHash(2475986526, -71.1526, -807.598, 325.153, -12.0416, 4.26887, -28.0523, -1, 0);
				Features::PlaceObjectByHash(2475986526, -73.2853, -806.628, 325.151, -11.7962, -0, -19.1717, -1, 0);
				Features::PlaceObjectByHash(2475986526, -75.2243, -806.286, 325.164, -12.0419, -0, 1.55726, -1, 0);
				Features::PlaceObjectByHash(2475986526, -77.5757, -806.312, 325.088, -14.1843, -0, 12.6263, -1, 0);
				Features::PlaceObjectByHash(2475986526, -79.8704, -807.22, 325.143, -14.049, -4.26887, 21.4769, -1, 0);
				Features::PlaceObjectByHash(2475986526, -82.0222, -807.83, 325.036, -14.1422, -4.26887, 32.7605, -1, 0);
				Features::PlaceObjectByHash(2475986526, -83.8934, -809.424, 325.073, -14.5264, -8.53774, 46.5132, -1, 0);
				Features::PlaceObjectByHash(2475986526, -85.2523, -810.983, 325.043, -14.859, -0, 53.5324, -1, 0);
				Features::PlaceObjectByHash(2475986526, -86.5177, -813.202, 325.089, -14.5267, 4.26887, 64.6634, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.6645, -815.707, 325.059, -14.8589, 4.26887, 73.157, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.7973, -817.987, 325.119, -14.8468, -1.33402, 89.3982, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.5801, -821.034, 325.059, -14.8593, -0, 95.4435, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.2815, -822.239, 325.126, -15.6308, -4.26887, 100.311, -1, 0);
				Features::PlaceObjectByHash(2475986526, -86.7602, -824.03, 325.044, -15.9224, -0, 116.957, -1, 0);
				Features::PlaceObjectByHash(2475986526, -85.3743, -826.099, 325.136, -15.7025, 2.56132, 124.307, -1, 0);
				Features::PlaceObjectByHash(2475986526, -83.4737, -828.611, 325.076, -15.0688, -0, 132.538, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.9554, -832.877, 325.894, -14.1563, 4.26887, 132.995, -1, 0);
				Features::PlaceObjectByHash(2475986526, -89.3865, -831.322, 325.887, -14.1562, -0, 126.154, -1, 0);
				Features::PlaceObjectByHash(2475986526, -86.4247, -834.407, 325.915, -14.2701, 4.26887, 143.277, -1, 0);
				Features::PlaceObjectByHash(2475986526, -85.1736, -833.789, 325.653, -14.4072, -4.26887, 145.777, -1, 0);
				Features::PlaceObjectByHash(2475986526, -83.8118, -835.765, 326.063, -12.243, 4.26887, 151.527, -1, 0);
				Features::PlaceObjectByHash(2475986526, -80.7015, -837.145, 326.059, -12.3172, 2.13443, 162.332, -1, 0);
				Features::PlaceObjectByHash(2475986526, -77.6428, -837.649, 326.163, -10.8391, 3.20165, 171.297, -1, 0);
				Features::PlaceObjectByHash(2475986526, -75.479, -837.909, 326.025, -12.3172, -1.06722, 174.574, -1, 0);
				Features::PlaceObjectByHash(2475986526, -73.861, -837.826, 326.061, -12.3173, 5.33609, -176.632, -1, 0);
				Features::PlaceObjectByHash(2475986526, -70.4799, -837.265, 326.09, -12.3173, -0, -166.182, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.0415, -836.185, 326.018, -12.3171, -0, -156.039, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.8504, -834.996, 325.951, -11.5263, -0, -145.834, -1, 0);
				Features::PlaceObjectByHash(2475986526, -63.5702, -833.725, 326.1, -11.2947, -0, -140.961, -1, 0);
				Features::PlaceObjectByHash(2475986526, -60.9992, -831.419, 326.075, -11.5262, -4.26887, -130.963, -1, 0);
				Features::PlaceObjectByHash(2475986526, -58.9923, -828.729, 326.116, -11.5262, 4.26887, -121.973, -1, 0);
				Features::PlaceObjectByHash(2475986526, -57.5045, -825.626, 326.114, -11.5263, -0, -110.959, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.5533, -822.397, 326.08, -11.1311, -6.4033, -102, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.0911, -820.05, 326.049, -11.0325, 2.13443, -100.794, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.0681, -818.32, 326.087, -11.1312, -2.66804, -87.9469, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.2989, -816.237, 326.048, -11.0324, 2.13443, -83.2139, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.8952, -814.518, 326.142, -11.0324, -2.13443, -76.5476, -1, 0);
				Features::PlaceObjectByHash(2475986526, -58.1209, -811.23, 326.116, -10.9697, -0, -66.7674, -1, 0);
				Features::PlaceObjectByHash(2475986526, -59.0622, -809.17, 326.095, -11.0574, 4.26887, -62.782, -1, 0);
				Features::PlaceObjectByHash(2475986526, -60.096, -807.639, 326.119, -11.5544, -0, -52.7596, -1, 0);
				Features::PlaceObjectByHash(2475986526, -62.081, -805.317, 326.116, -11.1035, -0, -40.7682, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.1466, -804.55, 326.283, -11.1035, -0, -30.477, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.9795, -798.8, 326.717, -10.1561, -0, -29.3495, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.5734, -802.52, 326.262, -10.471, -8.53774, -31.2185, -1, 0);
				Features::PlaceObjectByHash(2475986526, -70.9341, -800.541, 326.198, -10.5317, -0, -20.0064, -1, 0);
				Features::PlaceObjectByHash(2475986526, -75.3309, -801.285, 325.849, -10.2407, -0, 1.58401, -1, 0);
				Features::PlaceObjectByHash(2475986526, -74.0222, -799.865, 326.177, -10.7327, -0, -5.98314, -1, 0);
				Features::PlaceObjectByHash(2475986526, -76.5167, -797.998, 326.32, -12.4969, -2.66804, 1.58883, -1, 0);
				Features::PlaceObjectByHash(2475986526, -79.2787, -800.531, 326.011, -12.9433, 4.26887, 13.0054, -1, 0);
				Features::PlaceObjectByHash(2475986526, -81.6721, -801.017, 325.9, -12.4601, 2.13443, 17.3792, -1, 0);
				Features::PlaceObjectByHash(2475986526, -83.6027, -801.744, 325.971, -12.9433, -0, 26.3052, -1, 0);
				Features::PlaceObjectByHash(2475986526, -85.6586, -802.789, 325.95, -12.8791, 1.28066, 32.5856, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.5086, -804.25, 325.978, -12.9432, 4.26887, 42.3279, -1, 0);
				Features::PlaceObjectByHash(2475986526, -88.9923, -805.73, 325.89, -11.9333, -4.26887, 46.0613, -1, 0);
				Features::PlaceObjectByHash(2475986526, -90.167, -807.318, 325.946, -13.0244, -0, 53.178, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.5987, -807.353, 326.343, -11.5713, 4.26887, 60.8753, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.5166, -813.963, 325.942, -13.4341, -4.26887, 73.0256, -1, 0);
				Features::PlaceObjectByHash(2475986526, -92.121, -810.584, 325.996, -13.4339, -4.26887, 64.9353, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.9931, -815.866, 325.924, -13.0519, -0, 79.5966, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.8716, -817.904, 325.988, -13.4339, -0, 88.8361, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.7912, -821.777, 325.946, -13.6946, -2.66804, 91.1427, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.2951, -823.554, 325.966, -13.157, -0, 101.424, -1, 0);
				Features::PlaceObjectByHash(2475986526, -92.5757, -827.033, 325.87, -13.5323, -0, 104.668, -1, 0);
				Features::PlaceObjectByHash(2475986526, -91.53, -828.342, 325.842, -14.1563, 4.26887, 120.328, -1, 0);
				Features::PlaceObjectByHash(2475986526, -90.5203, -829.611, 325.936, -14.1563, -0, 124.573, -1, 0);
				Features::PlaceObjectByHash(2475986526, -95.5355, -833.068, 327.049, -9.63525, 1.70755, 124.512, -1, 0);
				Features::PlaceObjectByHash(2475986526, -94.2445, -835.1, 326.976, -9.27617, -1.28066, 128.396, -1, 0);
				Features::PlaceObjectByHash(2475986526, -92.513, -837.087, 327.008, -9.63523, -4.26887, 132.871, -1, 0);
				Features::PlaceObjectByHash(2475986526, -90.07, -839.341, 327.025, -9.63574, 4.26887, 143.545, -1, 0);
				Features::PlaceObjectByHash(2475986526, -86.7336, -841.135, 327.284, -9.63566, -0, 150.983, -1, 0);
				Features::PlaceObjectByHash(2475986526, -84.8343, -842.167, 327.254, -9.36742, -4.26887, 152.377, -1, 0);
				Features::PlaceObjectByHash(2475986526, -90.0883, -842.661, 327.589, -7.98782, -8.53774, 146.409, -1, 0);
				Features::PlaceObjectByHash(2475986526, -82.595, -843.001, 327.277, -9.6352, -0, 161.654, -1, 0);
				Features::PlaceObjectByHash(2475986526, -80.8027, -843.618, 327.263, -9.36755, -2.13443, 165.215, -1, 0);
				Features::PlaceObjectByHash(2475986526, -78.5619, -843.703, 327.458, -9.63545, -2.13443, 171.015, -1, 0);
				Features::PlaceObjectByHash(2475986526, -76.2479, -844.026, 327.261, -9.36765, 1.06722, 175.986, -1, 0);
				Features::PlaceObjectByHash(2475986526, -73.5382, -843.999, 327.285, -9.6355, -0, -177.212, -1, 0);
				Features::PlaceObjectByHash(2475986526, -71.2047, -843.988, 327.3, -9.36764, -1.06722, -172.013, -1, 0);
				Features::PlaceObjectByHash(2475986526, -69.036, -843.266, 327.309, -9.63525, 4.26887, -166.686, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.2981, -840.996, 326.756, -9.37509, -2.13443, -159.014, -1, 0);
				Features::PlaceObjectByHash(2475986526, -66.7067, -842.714, 327.222, -9.37501, 2.13443, -159.27, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.5693, -841.792, 327.24, -9.63515, 4.26887, -156.16, -1, 0);
				Features::PlaceObjectByHash(2475986526, -61.8874, -840.436, 327.231, -9.37483, 4.26887, -146.534, -1, 0);
				Features::PlaceObjectByHash(2475986526, -59.7118, -838.501, 327.384, -9.63533, -0, -141.372, -1, 0);
				Features::PlaceObjectByHash(2475986526, -57.9491, -837.16, 327.309, -9.37471, 4.26887, -135.839, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.3494, -835.471, 327.34, -9.63578, 4.26887, -131.675, -1, 0);
				Features::PlaceObjectByHash(2475986526, -54.9387, -833.93, 327.334, -9.37482, -0, -127.887, -1, 0);
				Features::PlaceObjectByHash(2475986526, -53.727, -832.032, 327.367, -9.63521, -4.26887, -122.142, -1, 0);
				Features::PlaceObjectByHash(2475986526, -52.5928, -830.077, 327.332, -9.37496, -0, -116.843, -1, 0);
				Features::PlaceObjectByHash(2475986526, -51.7552, -827.819, 327.385, -9.63569, 6.4033, -111.077, -1, 0);
				Features::PlaceObjectByHash(2475986526, -51.0061, -825.839, 327.369, -9.37494, 4.26887, -107.054, -1, 0);
				Features::PlaceObjectByHash(2475986526, -50.5468, -823.622, 327.378, -9.63572, 4.26887, -101.598, -1, 0);
				Features::PlaceObjectByHash(2475986526, -50.0992, -820.896, 327.345, -9.47333, -1.06722, -95.7976, -1, 0);
				Features::PlaceObjectByHash(2475986526, -49.9295, -818.102, 327.381, -9.63531, -8.00413, -88.2146, -1, 0);
				Features::PlaceObjectByHash(2475986526, -50.1895, -815.816, 327.358, -9.4734, -0, -82.8649, -1, 0);
				Features::PlaceObjectByHash(2475986526, -50.9164, -813.132, 327.442, -9.63524, 2.13443, -76.865, -1, 0);
				Features::PlaceObjectByHash(2475986526, -51.1585, -811.568, 327.373, -9.58574, -0, -69.3402, -1, 0);
				Features::PlaceObjectByHash(2475986526, -52.0622, -809.533, 327.354, -9.63541, 2.13443, -65.7624, -1, 0);
				Features::PlaceObjectByHash(2475986526, -53.4048, -806.624, 327.376, -9.63526, 2.13443, -65.3971, -1, 0);
				Features::PlaceObjectByHash(2475986526, -55.2978, -803.815, 327.389, -9.63524, 4.26887, -52.2107, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.5179, -802.266, 327.366, -9.51013, 4.26887, -50.6537, -1, 0);
				Features::PlaceObjectByHash(2475986526, -57.9995, -800.68, 327.42, -9.6353, 1.28066, -41.7027, -1, 0);
				Features::PlaceObjectByHash(2475986526, -61.0278, -799.404, 327.549, -9.63516, 8.53774, -31.016, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.37, -797.284, 327.603, -9.6351, -0, -31.6732, -1, 0);
				Features::PlaceObjectByHash(2475986526, -66.3998, -795.965, 327.526, -9.42422, 8.53773, -29.018, -1, 0);
				Features::PlaceObjectByHash(2475986526, -68.8079, -794.744, 327.535, -9.63558, -2.13443, -20.0341, -1, 0);
				Features::PlaceObjectByHash(2475986526, -72.1225, -793.825, 327.497, -9.57894, -2.13443, -12.2336, -1, 0);
				Features::PlaceObjectByHash(2475986526, -75.6415, -795.169, 327.2, -9.63555, -1.60083, 2.8097, -1, 0);
				Features::PlaceObjectByHash(2475986526, -77.9613, -794.235, 327.223, -8.9769, -5.33608, 4.53814, -1, 0);
				Features::PlaceObjectByHash(2475986526, -75.3695, -789.507, 328.306, -8.84722, -8.33763, -0.0879073, -1, 0);
				Features::PlaceObjectByHash(2475986526, -80.6908, -794.505, 327.217, -9.63537, 4.26887, 13.0745, -1, 0);
				Features::PlaceObjectByHash(2475986526, -83.5673, -795.148, 327.101, -9.92985, 2.13443, 17.5819, -1, 0);
				Features::PlaceObjectByHash(2475986526, -86.3087, -796.203, 327.177, -9.63542, -4.26887, 25.9296, -1, 0);
				Features::PlaceObjectByHash(2475986526, -88.9655, -797.634, 327.118, -9.92994, -4.26887, 33.0571, -1, 0);
				Features::PlaceObjectByHash(2475986526, -91.6251, -799.702, 327.176, -9.63539, -0, 42.2513, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.414, -801.299, 327.124, -9.92995, -0, 48.7085, -1, 0);
				Features::PlaceObjectByHash(2475986526, -95.1453, -803.637, 327.147, -9.63537, -8.53774, 53.6544, -1, 0);
				Features::PlaceObjectByHash(2475986526, -96.5885, -805.701, 327.144, -9.8947, -0, 60.5096, -1, 0);
				Features::PlaceObjectByHash(2475986526, -97.6945, -807.971, 327.174, -9.63569, 4.26887, 64.7568, -1, 0);
				Features::PlaceObjectByHash(2475986526, -98.7075, -809.885, 327.026, -8.13758, -0, 67.8881, -1, 0);
				Features::PlaceObjectByHash(2475986526, -99.394, -812.176, 327.105, -9.63525, -4.26887, 73.0223, -1, 0);
				Features::PlaceObjectByHash(2475986526, -100.025, -814.868, 327.097, -9.97277, 2.13443, 83.1537, -1, 0);
				Features::PlaceObjectByHash(2475986526, -100.012, -817.789, 327.15, -9.63535, -1.33402, 88.8234, -1, 0);
				Features::PlaceObjectByHash(2475986526, -100.069, -819.76, 327.099, -9.95297, -1.33402, 90.8729, -1, 0);
				Features::PlaceObjectByHash(2475986526, -99.969, -821.91, 327.11, -9.63541, -2.66804, 91.5501, -1, 0);
				Features::PlaceObjectByHash(2475986526, -99.3358, -824.801, 327.138, -9.63539, 2.13443, 101.678, -1, 0);
				Features::PlaceObjectByHash(2475986526, -98.5443, -828.598, 327.033, -9.63553, -0, 104.64, -1, 0);
				Features::PlaceObjectByHash(2475986526, -97.0896, -831.054, 326.937, -10.0741, 4.26887, 118.72, -1, 0);
				Features::PlaceObjectByHash(2475986526, -102.435, -833.952, 328.506, -5.26399, -0, 118.502, -1, 0);
				Features::PlaceObjectByHash(2475986526, -103.536, -831.932, 328.513, -5.42142, 4.26887, 111.099, -1, 0);
				Features::PlaceObjectByHash(2475986526, -100.644, -836.571, 328.636, -5.26398, -0, 124.006, -1, 0);
				Features::PlaceObjectByHash(2475986526, -99.0448, -838.912, 328.589, -5.26395, -2.13443, 128.175, -1, 0);
				Features::PlaceObjectByHash(2475986526, -96.9401, -841.184, 328.589, -5.26384, -2.13443, 132.615, -1, 0);
				Features::PlaceObjectByHash(2475986526, -95.4409, -842.718, 328.551, -5.01006, -2.13443, 136.57, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.6584, -844.231, 328.606, -5.26388, -0, 143.429, -1, 0);
				Features::PlaceObjectByHash(2475986526, -92.1044, -845.82, 328.655, -5.01307, -2.13443, 147.428, -1, 0);
				Features::PlaceObjectByHash(2475986526, -89.6061, -846.328, 328.851, -5.26389, -0, 150.62, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.5884, -847.552, 328.829, -5.6777, -0, 153.36, -1, 0);
				Features::PlaceObjectByHash(2475986526, -84.5215, -848.802, 328.867, -5.26405, 5.33608, 161.164, -1, 0);
				Features::PlaceObjectByHash(2475986526, -81.9779, -849.605, 328.821, -5.67769, 1.06722, 166.961, -1, 0);
				Features::PlaceObjectByHash(2475986526, -79.5282, -849.717, 329.046, -5.26392, 1.06722, 170.517, -1, 0);
				Features::PlaceObjectByHash(2475986526, -76.7555, -850.113, 328.885, -4.93224, 2.66804, 175.995, -1, 0);
				Features::PlaceObjectByHash(2475986526, -73.2336, -850.06, 328.883, -5.26397, -0, -177.431, -1, 0);
				Features::PlaceObjectByHash(2475986526, -70.4067, -849.836, 328.854, -4.82287, -5.33608, -172.2, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.6252, -849.166, 328.911, -5.26394, -0, -166.741, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.6525, -848.331, 328.792, -4.82267, -2.13443, -160.74, -1, 0);
				Features::PlaceObjectByHash(2475986526, -62.1086, -847.355, 328.837, -5.26389, 2.13443, -156.346, -1, 0);
				Features::PlaceObjectByHash(2475986526, -60.2755, -846.895, 328.808, -5.97307, -2.13443, -151.031, -1, 0);
				Features::PlaceObjectByHash(2475986526, -58.5152, -845.543, 328.833, -5.26392, 1.06722, -147.129, -1, 0);
				Features::PlaceObjectByHash(2475986526, -55.9339, -843.258, 328.987, -5.26394, 2.13443, -141.8, -1, 0);
				Features::PlaceObjectByHash(2475986526, -53.6636, -841.564, 328.905, -5.18348, -0, -136.192, -1, 0);
				Features::PlaceObjectByHash(2475986526, -51.8013, -839.526, 328.926, -5.26393, -2.13443, -131.788, -1, 0);
				Features::PlaceObjectByHash(2475986526, -49.9112, -837.51, 328.916, -5.18352, -8.53774, -125.894, -1, 0);
				Features::PlaceObjectByHash(2475986526, -48.5833, -835.261, 328.968, -5.26388, 2.13443, -122.598, -1, 0);
				Features::PlaceObjectByHash(2475986526, -47.1369, -832.806, 328.936, -5.18352, -0, -117.146, -1, 0);
				Features::PlaceObjectByHash(2475986526, -46.1092, -830.019, 328.985, -5.26389, -0, -111.097, -1, 0);
				Features::PlaceObjectByHash(2475986526, -45.2549, -827.659, 328.957, -5.18353, -1.06722, -105.915, -1, 0);
				Features::PlaceObjectByHash(2475986526, -44.5598, -824.856, 328.973, -5.26387, -0, -101.582, -1, 0);
				Features::PlaceObjectByHash(2475986526, -44.0346, -821.522, 328.953, -5.26387, 5.33608, -95.978, -1, 0);
				Features::PlaceObjectByHash(2475986526, -43.8673, -817.92, 328.98, -5.26387, -4.00206, -88.1556, -1, 0);
				Features::PlaceObjectByHash(2475986526, -44.1983, -815.072, 328.956, -5.26387, -0, -82.8806, -1, 0);
				Features::PlaceObjectByHash(2475986526, -45.0463, -811.788, 329.021, -5.26392, -0, -77.2513, -1, 0);
				Features::PlaceObjectByHash(2475986526, -45.6154, -809.566, 328.95, -5.25705, -2.13443, -72.2094, -1, 0);
				Features::PlaceObjectByHash(2475986526, -46.5685, -807.149, 328.929, -5.26395, -2.13443, -66.9958, -1, 0);
				Features::PlaceObjectByHash(2475986526, -47.9752, -804.122, 328.959, -5.26398, -0, -65.1505, -1, 0);
				Features::PlaceObjectByHash(2475986526, -49.0785, -802.078, 328.914, -5.31539, 4.26887, -57.7224, -1, 0);
				Features::PlaceObjectByHash(2475986526, -50.5092, -800.141, 328.99, -5.26406, -0, -52.4683, -1, 0);
				Features::PlaceObjectByHash(2475986526, -52.041, -798.134, 329.001, -5.31536, -2.13443, -49.2493, -1, 0);
				Features::PlaceObjectByHash(2475986526, -53.8808, -796.134, 329.041, -5.26389, -0, -42.3308, -1, 0);
				Features::PlaceObjectByHash(2475986526, -55.4375, -794.682, 329.045, -5.32055, 2.13443, -37.3601, -1, 0);
				Features::PlaceObjectByHash(2475986526, -57.7537, -794.2, 329.16, -5.26393, 2.13443, -32.2267, -1, 0);
				Features::PlaceObjectByHash(2475986526, -61.0299, -792.042, 329.172, -5.26389, -2.13443, -32.1174, -1, 0);
				Features::PlaceObjectByHash(2475986526, -63.5163, -790.736, 329.085, -5.04535, -4.26887, -29.2933, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.7324, -789.882, 329.081, -4.987, -2.13443, -27.7917, -1, 0);
				Features::PlaceObjectByHash(2475986526, -66.7775, -788.94, 329.155, -5.04558, 1.06722, -19.5666, -1, 0);
				Features::PlaceObjectByHash(2475986526, -68.6555, -788.272, 329.103, -5.30654, 3.20165, -16.9146, -1, 0);
				Features::PlaceObjectByHash(2475986526, -70.8259, -787.837, 329.128, -5.04546, 1.06722, -12.2941, -1, 0);
				Features::PlaceObjectByHash(2475986526, -74.5572, -787.022, 329.08, -4.61724, 1.06722, -10.7316, -1, 0);
				Features::PlaceObjectByHash(2475986526, -75.8754, -788.646, 328.671, -6.78921, -0, 2.98721, -1, 0);
				Features::PlaceObjectByHash(2475986526, -78.4, -788.132, 328.83, -5.91899, 2.66804, 3.75875, -1, 0);
				Features::PlaceObjectByHash(2475986526, -80.5351, -788.179, 328.782, -5.80051, -0, 7.26539, -1, 0);
				Features::PlaceObjectByHash(2475986526, -82.1189, -788.558, 328.793, -5.9192, 1.06722, 12.7168, -1, 0);
				Features::PlaceObjectByHash(2475986526, -85.4054, -789.317, 328.666, -5.79433, -0, 17.1877, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.4651, -789.98, 328.647, -5.63204, -0, 20.2315, -1, 0);
				Features::PlaceObjectByHash(2475986526, -88.9795, -790.697, 328.76, -5.79416, -0, 25.9501, -1, 0);
				Features::PlaceObjectByHash(2475986526, -90.9922, -791.487, 328.684, -6.26149, -0, 27.0819, -1, 0);
				Features::PlaceObjectByHash(2475986526, -92.3298, -792.474, 328.677, -5.79412, -0, 33.3113, -1, 0);
				Features::PlaceObjectByHash(2475986526, -94.2322, -793.73, 328.669, -5.58479, -2.13443, 37.4974, -1, 0);
				Features::PlaceObjectByHash(2475986526, -95.7282, -795.2, 328.764, -5.79431, -0, 41.8672, -1, 0);
				Features::PlaceObjectByHash(2475986526, -97.9782, -797.316, 328.695, -5.58488, -0, 48.9171, -1, 0);
				Features::PlaceObjectByHash(2475986526, -100.042, -800.063, 328.731, -5.79425, 2.13443, 53.7039, -1, 0);
				Features::PlaceObjectByHash(2475986526, -101.884, -802.718, 328.706, -5.5848, 2.13443, 60.3613, -1, 0);
				Features::PlaceObjectByHash(2475986526, -103.09, -805.421, 328.718, -5.79425, -0, 64.506, -1, 0);
				Features::PlaceObjectByHash(2475986526, -104.284, -807.711, 328.691, -5.58488, -2.13443, 65.966, -1, 0);
				Features::PlaceObjectByHash(2475986526, -105.262, -810.369, 328.729, -5.26384, 1.06722, 73.2414, -1, 0);
				Features::PlaceObjectByHash(2475986526, -105.769, -812.146, 328.645, -5.25205, -1.06722, 75.8091, -1, 0);
				Features::PlaceObjectByHash(2475986526, -106.155, -814.128, 328.687, -5.26388, -1.06722, 82.8157, -1, 0);
				Features::PlaceObjectByHash(2475986526, -106.062, -817.685, 328.758, -5.26388, 2.66804, 88.7458, -1, 0);
				Features::PlaceObjectByHash(2475986526, -106.154, -819.723, 328.716, -5.25204, -0, 90.1628, -1, 0);
				Features::PlaceObjectByHash(2475986526, -106.082, -822.072, 328.729, -5.26387, -1.33402, 91.2972, -1, 0);
				Features::PlaceObjectByHash(2475986526, -105.911, -823.815, 328.7, -5.52135, 5.33608, 99.4393, -1, 0);
				Features::PlaceObjectByHash(2475986526, -105.28, -826.029, 328.734, -5.26391, 1.06722, 101.615, -1, 0);
				Features::PlaceObjectByHash(2475986526, -105.06, -827.904, 328.644, -5.29978, 1.06722, 102.515, -1, 0);
				Features::PlaceObjectByHash(2475986526, -104.327, -830.112, 328.614, -5.26391, -2.13443, 104.719, -1, 0);
				Features::PlaceObjectByHash(3291218330, -108.551, -853.416, 327.387, 2.94456, 89.1111, -166.155, -1, 0);
				Features::PlaceObjectByHash(3291218330, -80.2509, -866.418, 327.301, 3.7405, 89.3, 146.641, -1, 0);
				Features::PlaceObjectByHash(3291218330, -55.8513, -863.921, 327.333, 6.87468, 89.6184, 149.776, -1, 0);
				Features::PlaceObjectByHash(3291218330, -37.3907, -848.122, 327.717, 2.33633, 88.8797, -16.2595, -1, 0);
				Features::PlaceObjectByHash(3291218330, -26.1908, -818.332, 328.76, 0.490556, 84.6598, -18.107, -1, 0);
				Features::PlaceObjectByHash(3291218330, -37.891, -789.138, 328.134, 1.11673, 87.6571, 42.7186, -1, 0);
				Features::PlaceObjectByHash(3291218330, -63.492, -772.044, 327.866, 3.09962, 89.1556, 44.702, -1, 0);
				Features::PlaceObjectByHash(3291218330, -93.4916, -774.848, 327.398, 2.73771, 89.0443, 122.539, -1, 0);
				Features::PlaceObjectByHash(3291218330, -115.991, -795.259, 327.27, 3.28432, 89.2033, 123.086, -1, 0);
				Features::PlaceObjectByHash(3291218330, -122.551, -825.074, 327.213, 173.37, 89.6048, 4.27077, -1, 0);
				Features::PlaceObjectByHash(118627012, -74.8438, -819.617, 323.685, 0, 0, -3.37511, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.6253, -820.244, 323.793, -14.4263, -8.53774, -100.02, -1, 0);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -74.94243f, -818.63446f, 326.174347f, 1, 0, 0, 1);
			}
			break;
		case ramp2:
			Menu::Title("~w~All Players");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(1600026313, -78.4864, -807.943, 323.202, 109.364, -89.9209, 0, -1, 1);
				Features::PlaceObjectByHash(1600026313, -79.2766, -805.701, 323.204, 109.364, -89.9209, 0, -1, 1);
				Features::PlaceObjectByHash(1600026313, -79.8373, -803.709, 323.205, 109.364, -89.9209, 0, -1, 1);
				Features::PlaceObjectByHash(1600026313, -80.4295, -801.947, 323.207, 109.364, -89.9209, 0, -1, 1);
				Features::PlaceObjectByHash(4143853297, -97.4731, -778.557, 308.877, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(1087520462, -84.2429, -793.182, 321.08, -63.5625, -0, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -83.5429, -795.106, 322.073, -63.5625, -0, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -84.9429, -791.108, 319.956, -62.6673, 8.53774e-007, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -85.8122, -788.585, 318.638, -63.5625, -0, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -89.1589, -779.487, 313.336, -59.5389, 0.0405551, -160.567, -1, 1);
				Features::PlaceObjectByHash(1087520462, -90.7065, -774.863, 310.09, -57.4959, 0.322988, -160.758, -1, 1);
				Features::PlaceObjectByHash(1087520462, -91.4887, -772.564, 308.403, -55.1692, 0.383369, -161.049, -1, 1);
				Features::PlaceObjectByHash(1087520462, -91.7565, -771.74, 307.844, -56.4466, 0.0442451, -160.565, -1, 1);
				Features::PlaceObjectByHash(1087520462, -93.6941, -766.245, 302.736, -45.9996, 0.0556114, -160.556, -1, 1);
				Features::PlaceObjectByHash(1087520462, -94.2969, -764.648, 301.067, -44.7623, -1.70755e-006, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -94.2969, -764.648, 301.067, -44.7623, -1.70755e-006, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -94.886, -762.996, 298.741, -36.7051, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -95.4855, -761.334, 296.406, -36.7051, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -95.4855, -761.334, 296.406, -36.7051, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -96.1606, -759.499, 294.259, -42.0766, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -96.0707, -759.689, 293.709, -36.7051, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -96.0707, -759.689, 293.709, -36.7051, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -96.0707, -759.689, 293.46, -36.7051, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -96.8807, -757.391, 292.506, -51.0291, -8.53774e-007, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -96.8807, -757.391, 292.506, -51.0291, -8.53774e-007, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -97.3203, -756.159, 291.688, -57.2958, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -97.9597, -754.358, 290.78, -62.6673, 8.53774e-007, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -97.9597, -754.358, 290.78, -62.6673, 8.53774e-007, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -98.7192, -752.356, 290.042, -69.9278, 3.20165e-005, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -99.0244, -751.684, 290.499, -90, -8.46346e-007, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -99.3223, -750.534, 290.479, -90, -8.46346e-007, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -100.348, -747.881, 290.452, -89.5256, -1.33402e-008, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -100.26, -748.154, 290.462, -76.096, 4.26887e-007, 19.6954, -1, 1);
				Features::PlaceObjectByHash(1087520462, -100.687, -747.053, 290.731, -62.6673, -8.53774e-007, 20.5907, -1, 1);
				Features::PlaceObjectByHash(1087520462, -101.346, -745.387, 291.611, -58.191, 1.70755e-006, 19.6954, -1, 1);
				Features::PlaceObjectByHash(1087520462, -102.234, -743.119, 293.091, -52.2249, 0.00051141, 21.3426, -1, 1);
				Features::PlaceObjectByHash(2475986526, -102.154, -739.285, 294.83, 9.80014, 0.295618, 18.7802, -1, 1);
				Features::PlaceObjectByHash(2475986526, -105.054, -740.282, 294.827, 9.80014, 0.295618, 18.7802, -1, 1);
				Features::PlaceObjectByHash(1087520462, -103.071, -741.047, 294.832, -48.0666, 0.000519094, 21.3419, -1, 1);
				Features::PlaceObjectByHash(1087520462, -103.75, -739.405, 296.413, -45.1472, 0.000547269, 21.3416, -1, 1);
				Features::PlaceObjectByHash(4143853297, -90.3515, -798.112, 319.893, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -93.2293, -790.348, 317.189, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -95.3479, -784.483, 313.696, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -100.01, -771.31, 304.367, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -101.829, -766.277, 299.666, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -103.318, -762.175, 293.966, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -104.948, -757.681, 288.866, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -108.146, -748.798, 288.866, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -108.146, -748.798, 295.608, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -108.225, -748.694, 302.608, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(3167053133, -103.451, -740.541, 307.317, -0.900199, -1.19985, 20.9076, -1, 1);
				Features::PlaceObjectByHash(2375650849, -102.454, -742.6, 309.309, 0, 0, 20.9393, -1, 1);
				Features::PlaceObjectByHash(4143853297, -101.483, -746.044, 305.602, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -94.7458, -743.402, 295.608, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -94.7566, -743.406, 288.866, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -94.7426, -743.595, 302.651, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(1157292806, -99.7732, -750.516, 309.575, 0, 0, 24.1761, -1, 1);
				Features::PlaceObjectByHash(4143853297, -89.9785, -756.476, 293.966, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -91.5378, -752.285, 288.866, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -87.9094, -762.07, 299.666, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -86.2094, -766.939, 304.367, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -84.0215, -772.971, 309.575, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -81.6733, -779.348, 313.696, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -79.5187, -785.083, 317.189, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -76.5616, -793.191, 319.493, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(1998517203, -81.0993, -790.139, 326.57, 0, 0, -82.6177, -1, 1);
				Features::PlaceObjectByHash(1998517203, -88.8988, -792.911, 326.95, 0, 0, -82.6177, -1, 1);
				Features::PlaceObjectByHash(803874239, -88.3376, -794.173, 327.042, 0, 0, 31.5501, -1, 1);
				Features::PlaceObjectByHash(803874239, -90.0376, -795.174, 327.262, 0, 0, 31.5501, -1, 1);
				Features::PlaceObjectByHash(803874239, -91.6375, -796.175, 327.482, 0, 0, 31.5501, -1, 1);
				Features::PlaceObjectByHash(803874239, -79.0283, -791.31, 326.763, 0, -0, 100.953, -1, 1);
				Features::PlaceObjectByHash(803874239, -76.8377, -790.87, 326.823, 0, -0, 100.953, -1, 1);
				Features::PlaceObjectByHash(803874239, -81.0088, -791.22, 326.713, 0, -0, 100.953, -1, 1);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -74.94243f, -818.63446f, 326.174347f, 1, 0, 0, 1);
			}
			break;
		case ramp3:
			Menu::Title("~w~All Players");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(1952396163, -1497.76, -1113.84, -3.08, -90, 6.14715e-007, 165.792, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1461.92, -1216.88, 2.5836, -2.3048, -0, -154.878, -1, 2);
				Features::PlaceObjectByHash(3291218330, -1465.62, -1217.64, 18, 166.516, -5.12264e-006, 24.1717, -1, 2);
				Features::PlaceObjectByHash(3291218330, -1458.89, -1214.4, 18, -38.4956, 8.53774e-007, -153.982, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1460.32, -1219.97, 4.3801, 12.6953, -0, -154.878, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1457, -1226.67, 11.8772, 31.7229, -0, -154.382, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1458.4, -1223.77, 7.9937, 23.6001, -0.0916355, -154.918, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1456.4, -1228.27, 14.9608, 48.674, -0, -153.982, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1456, -1229.07, 19.7441, 68.6628, -0, -153.982, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1456.2, -1228.47, 24.8276, 82.6252, 3.80938, -152.828, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1456.9, -1226.47, 28.9111, 108.498, -8.51368, -157.244, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1458.59, -1223.37, 31.5945, 130.616, -4.72983, -155.087, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1460.59, -1218.38, 33.5779, 143.744, -3.95611, -152.581, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1462.79, -1214.28, 34.161, 163.63, -2.68302, -155.763, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1465.3, -1209.78, 32.5228, -172.187, 4.69576e-006, -152.192, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1465.3, -1209.78, 32.5228, -172.187, 4.69576e-006, -152.192, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1466.9, -1205.68, 29.0062, -155.178, 9.47689e-005, -153.087, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1468.3, -1202.98, 24.1897, -131.11, 6.74481e-005, -153.088, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1468.59, -1202.68, 19.3732, -107.429, 3.07358e-005, -153.087, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1467.99, -1203.88, 13.5732, -89.6528, -0.153235, -155.853, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1467.11, -1205.68, 10.7072, -63.5491, 8.53774e-007, -156.504, -1, 2);
				Features::PlaceObjectByHash(4109455646, -1465.05, -1210.03, 7.9503, 9.53319, 1.38057, 24.2606, -1, 2);
				Features::PlaceObjectByHash(2975320548, -1460.95, -1218.79, 7.66, -29.9323, -0.173323, 24.7221, -1, 2);
				Features::PlaceObjectByHash(2975320548, -1463.05, -1214.19, 6.7879, -6.50192, 1.391, 24.2651, -1, 2);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -1513.0f, -1192.0f, 1.0f, 1, 0, 0, 1);
			}
			break;
		case ramp4:
			Menu::Title("~w~All Players");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(1952396163, -1497.76, -1113.84, -3.08, -90, -0, 165.792, 90, 3);
				Features::PlaceObjectByHash(2475986526, -1461.92, -1216.88, 2.5836, -2.3048, 0, -154.878, 205.14, 3);
				Features::PlaceObjectByHash(3291218330, -1458.89, -1214.4, 18, -38.4956, 0, -153.982, 211.95, 3);
				Features::PlaceObjectByHash(2475986526, -1460.32, -1219.97, 4.3801, 12.6953, 0, -154.878, 205.672, 3);
				Features::PlaceObjectByHash(2975320548, -1463.05, -1214.19, 6.7879, -6.5, -1.391, 24.2651, 24.4244, 3);
				Features::PlaceObjectByHash(3291218330, -1465.62, -1217.64, 18, 166.516, 180, 24.1717, 155.224, 3);
				Features::PlaceObjectByHash(4109455646, -1465.05, -1210.03, 7.9503, 9.5304, -1.3806, 24.2606, 24.5148, 3);
				Features::PlaceObjectByHash(2975320548, -1460.95, -1218.79, 7.66, -29.9322, 0.1733, 24.7221, 27.9617, 3);
				Features::PlaceObjectByHash(2475986526, -1458.4, -1223.77, 7.9937, 23.6001, 0.0916, -154.918, 207.065, 3);
				Features::PlaceObjectByHash(2475986526, -1467.11, -1205.68, 10.7072, -63.5491, 0, -156.505, 224.303, 3);
				Features::PlaceObjectByHash(2475986526, -1457, -1226.67, 11.8772, 31.7229, 0, -154.382, 209.411, 3);
				Features::PlaceObjectByHash(2475986526, -1456.4, -1228.27, 14.9608, 48.674, 0, -153.982, 216.471, 3);
				Features::PlaceObjectByHash(2475986526, -1456, -1229.07, 19.7441, 68.6628, 0, -153.982, 233.298, 3);
				Features::PlaceObjectByHash(2475986526, -1456.2, -1228.47, 24.8276, 81.7043, -3.8094, -152.828, 252.429, 3);
				Features::PlaceObjectByHash(2475986526, -1456.9, -1226.47, 28.9111, 110.301, 171.486, -157.244, 312.201, 3);
				Features::PlaceObjectByHash(2475986526, -1458.59, -1223.37, 31.5945, 130.843, 175.27, -155.087, 325.759, 3);
				Features::PlaceObjectByHash(2475986526, -1460.59, -1218.38, 33.5779, 143.844, 176.044, -152.581, 327.979, 3);
				Features::PlaceObjectByHash(2475986526, -1462.79, -1214.28, 34.161, 163.648, 177.317, -155.763, 335.024, 3);
				Features::PlaceObjectByHash(2475986526, -1465.3, -1209.78, 32.5228, -172.187, -180, -152.192, 331.971, 3);
				Features::PlaceObjectByHash(2475986526, -1466.9, -1205.68, 29.0062, -155.178, -180, -153.087, 330.783, 3);
				Features::PlaceObjectByHash(2475986526, -1468.3, -1202.98, 24.1897, -131.11, -180, -153.088, 322.332, 3);
				Features::PlaceObjectByHash(2475986526, -1468.59, -1202.68, 19.3732, -107.429, -180, -153.087, 300.544, 3);
				Features::PlaceObjectByHash(2475986526, -1467.99, -1203.88, 13.5732, -89.6205, 0.1532, -155.853, 269.072, 3);
				Features::PlaceObjectByHash(3966705493, 509.842, 5589.24, 791.066, 0.141, 0, 65.3998, 65.3999, 3);
				Features::PlaceObjectByHash(3966705493, 520.5, 5584.38, 790.503, 5.441, 0, 65.3998, 65.4976, 3);
				Features::PlaceObjectByHash(3966705493, 531.057, 5579.54, 788.691, 12.441, 0, 65.3998, 65.9111, 3);
				Features::PlaceObjectByHash(3966705493, 568.672, 5562.32, 767.428, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 576.972, 5558.53, 759.566, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 560.174, 5566.2, 774.698, 35.0403, 0, 65.3998, 69.4512, 3);
				Features::PlaceObjectByHash(3966705493, 541.325, 5574.84, 785.49, 19.4409, 0, 65.3998, 66.6484, 3);
				Features::PlaceObjectByHash(3966705493, 551.066, 5570.37, 780.799, 27.5407, 0, 65.3998, 67.9049, 3);
				Features::PlaceObjectByHash(3966705493, 585.249, 5554.75, 751.745, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 618.334, 5539.62, 720.386, 40.7936, 0, 65.3998, 70.8829, 3);
				Features::PlaceObjectByHash(3966705493, 626.602, 5535.85, 712.547, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 610.065, 5543.4, 728.217, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 601.777, 5547.19, 736.076, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 593.507, 5550.97, 743.917, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 634.862, 5532.07, 704.725, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 643.121, 5528.29, 696.894, 40.7936, 0, 65.3998, 70.8829, 3);
				Features::PlaceObjectByHash(3966705493, 651.391, 5524.51, 689.053, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 659.651, 5520.73, 681.221, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 667.911, 5516.94, 673.389, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 676.171, 5513.17, 665.558, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 684.431, 5509.38, 657.727, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 692.691, 5505.61, 649.905, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 700.95, 5501.83, 642.074, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 709.22, 5498.05, 634.243, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 717.46, 5494.28, 626.431, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 725.72, 5490.5, 618.6, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 733.98, 5486.72, 610.778, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 742.6, 5482.78, 603.167, 36.9395, 0, 65.3998, 69.9005, 3);
				Features::PlaceObjectByHash(3966705493, 751.83, 5478.55, 596.335, 31.0392, 0, 65.3998, 68.5807, 3);
				Features::PlaceObjectByHash(3966705493, 761.71, 5474.02, 590.613, 24.5989, 0, 65.3998, 67.3986, 3);
				Features::PlaceObjectByHash(3966705493, 772.07, 5469.28, 586.08, 18.9288, 0, 65.3998, 66.5835, 3);
				Features::PlaceObjectByHash(3966705493, 782.84, 5464.34, 582.86, 11.5788, 0, 65.3998, 65.8427, 3);
				Features::PlaceObjectByHash(3966705493, 793.89, 5459.28, 581.117, 5.0787, 0, 65.3998, 65.485, 3);
				Features::PlaceObjectByHash(3966705493, 805.1, 5454.15, 580.876, -2.5212, 0, 65.3998, 65.4208, 3);
				Features::PlaceObjectByHash(3966705493, 816.17, 5449.08, 581.975, -7.6213, 0, 65.3998, 65.5917, 3);
				Features::PlaceObjectByHash(3966705493, 827.191, 5444.04, 584.582, -16.6212, 0, 65.3998, 66.3125, 3);
				Features::PlaceObjectByHash(3966705493, 837.681, 5439.24, 588.899, -24.421, 0, 65.3998, 67.3698, 3);
				Features::PlaceObjectByHash(2580877897, 522.61, 5584.49, 779.214, 79.7153, -9.2252, 55.7018, 77.7612, 3);
				Features::PlaceObjectByHash(3862788492, 522.445, 5583.69, 779.551, -0.9197, -69.229, -167.468, 184.555, 3);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 500, 5593, 795, 1, 0, 0, 1);
			}
			break;
		case ramp5:
			Menu::Title("~w~All Players");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(2475986526, -1242.08, -2931.15, 12.9924, -0.1046, -3.33505e-009, 61.0607, -1, 4);
				Features::PlaceObjectByHash(2475986526, -1247.11, -2928.46, 15.013, -0.1046, -3.33505e-009, 61.0607, -1, 4);
				Features::PlaceObjectByHash(2475986526, -1251.58, -2926.05, 16.7865, -0.1046, -3.33505e-009, 61.0607, -1, 4);
				Features::PlaceObjectByHash(2475986526, -1254.69, -2924.35, 18.25, -0.1046, -3.33505e-009, 61.0607, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1276.69, -2912.99, 23.0019, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(2475986526, -1258.35, -2922.28, 20.2135, -0.1046, -3.33505e-009, 61.0607, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1270.89, -2916.22, 23.0123, 0, 0, 60.8909, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1270.25, -2914.99, 23.0137, 0, 0, 60.8909, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1274.87, -2909.4, 23.0049, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1269.01, -2912.64, 22.9993, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1267.87, -2915.44, 28.3632, 0, -0, 147.299, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1272.13, -2918.33, 28.4791, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1272.11, -2918.35, 25.6708, -0.48, 0.0499982, 60.9701, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1277.93, -2915.14, 25.604, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1279.69, -2909.85, 25.6358, 0, -0, -151.239, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1279.69, -2909.85, 28.4844, 0, -0, -151.239, -1, 4);
				Features::PlaceObjectByHash(2475986526, -1261.82, -2920.38, 21.767, -0.1046, -3.33505e-009, 61.0607, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1273.65, -2907.11, 22.9763, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1267.77, -2910.37, 22.9978, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1266.49, -2908.08, 22.9987, 0, -0, -119.462, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1265.15, -2905.8, 23.0042, 0, -0, -119.462, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1266.44, -2905.21, 25.6255, 0, -0, -118.761, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1265.66, -2911.99, 25.6968, 0, 0, -30.9603, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1264.88, -2910.66, 25.6982, 0, 0, -30.9603, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1264.84, -2905.14, 25.624, 0, -0, -118.761, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1272.37, -2900.96, 25.6199, 0, -0, -118.761, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1276.35, -2903.91, 25.6214, 0, -0, -151.239, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1276.35, -2903.91, 28.4329, 0, -0, -151.239, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1272.37, -2900.96, 28.4385, 0, -0, -118.761, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1266.44, -2905.21, 28.437, 0, -0, -118.761, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1265.17, -2905.14, 28.3426, 0, -0, -118.861, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1271.09, -2902.58, 23.0057, 0, -0, -119.462, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1272.37, -2904.83, 22.9972, 0, -0, -119.462, -1, 4);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -1208, -2950, 13, 1, 0, 0, 1);
			}
			break;
		case ramp6:
			Menu::Title("~w~All Players");
			Menu::MainTitle("~c~[Shade 1.0]                             ");			Menu::Break(" ");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(2475986526, -1098.36, -2631.17, 19, 0, -0, 152.671, -1, 5);
				Features::PlaceObjectByHash(2475986526, -1100.26, -2634.64, 21.1976, 16.2002, 0.192059, 150.427, -1, 5);
				Features::PlaceObjectByHash(2475986526, -1102.26, -2638.02, 25.01, 26.7003, 0.178675, 149.261, -1, 5);
				Features::PlaceObjectByHash(2475986526, -1103.96, -2640.91, 29.04, 28.3717, -0, 146.82, -1, 5);
				Features::PlaceObjectByHash(1952396163, -1119.61, -2670.96, -5.125, 0, -0, 150.514, -1, 5);
				Features::PlaceObjectByHash(1952396163, -1119.61, -2670.96, -5.125, 0, -0, 150.401, -1, 5);
				Features::PlaceObjectByHash(3137065507, -1044.69, -2530.08, 20.4011, 94.8962, 4.26887e-007, 147.716, -1, 5);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -1046, -2538, 20, 1, 0, 0, 1);
			}
			break;
		case ramp7:
			Menu::Title("~w~All Players");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 654.365, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 646.186, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 638.008, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 629.829, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 621.65, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 613.471, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 605.292, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 597.114, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 588.935, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 580.756, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 572.577, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 564.399, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 556.22, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 662.544, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 548.041, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 539.862, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 531.683, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 523.505, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 515.326, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 507.147, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 498.968, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 490.79, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 482.611, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 474.432, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 466.253, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 458.074, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 449.896, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 441.717, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 433.538, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 425.359, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 417.18, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 409.001, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 400.823, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 392.644, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 384.465, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 376.286, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 368.107, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 359.929, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 351.75, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 343.571, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 335.392, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 327.213, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 319.035, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 310.856, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 302.677, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 294.498, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 286.319, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 278.141, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 269.962, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 261.783, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 253.604, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 245.425, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 237.247, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 229.068, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 220.889, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 212.71, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 204.531, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 196.353, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 188.174, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 179.995, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 171.816, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 163.637, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 155.459, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 147.28, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 139.101, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 130.922, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 122.743, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 114.565, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 106.386, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 98.207, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 90.0282, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 81.8494, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 73.6706, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 65.4918, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 57.313, 0.660085, -0.919939, -109.32, -1, 6);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 70, -674, 680, 1, 0, 0, 1);
			}
			break;
		case ramp8:
			Menu::Title("~w~All Players");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(3522933110, -81.3886, -814.648, 325.169, 0, -0, 180, -1, 7);
				Features::PlaceObjectByHash(3681122061, -81.7456, -809.064, 324.799, 0.500021, 2.66804, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -86.1333, -802.279, 321.92, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -89.7406, -796.701, 316.539, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -93.601, -790.725, 310.777, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -97.4741, -784.73, 304.997, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -101.373, -778.696, 299.179, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -105.233, -772.72, 293.417, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -109.106, -766.725, 287.637, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -112.954, -760.769, 281.894, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -116.827, -754.773, 276.113, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -120.687, -748.798, 270.352, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -124.518, -742.868, 264.636, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -128.358, -736.925, 258.909, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -132.22, -730.949, 253.151, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -136.081, -724.974, 247.394, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -139.943, -718.998, 241.636, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -143.826, -712.99, 235.846, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -147.667, -707.047, 230.12, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -151.508, -701.104, 224.394, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -155.369, -695.128, 218.636, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -159.252, -689.12, 212.846, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -163.072, -683.209, 207.152, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -166.976, -677.168, 201.331, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -170.838, -671.193, 195.573, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -174.7, -665.217, 189.815, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -178.583, -659.209, 184.026, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -182.444, -653.233, 178.268, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -186.327, -647.225, 172.479, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -190.189, -641.249, 166.721, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -194.03, -635.306, 160.994, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -197.871, -629.363, 155.268, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -201.711, -623.42, 149.542, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -205.552, -617.477, 143.815, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -209.393, -611.534, 138.089, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -213.255, -605.559, 132.331, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -217.095, -599.616, 126.605, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -220.957, -593.64, 120.847, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -222.245, -591.648, 118.928, -33.8999, 1.02453, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -223.349, -589.94, 117.561, -29.31, 1.79292, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -224.58, -588.036, 116.288, -26.25, 5.12264, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -225.869, -586.04, 115.116, -24.7199, -1.10991, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -227.127, -584.095, 114.05, -21.6599, 1.8783, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -228.615, -581.794, 112.961, -19.6199, 1.02453, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -230.201, -579.341, 111.92, -17.0699, -0, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -232.121, -576.369, 110.833, -12.9899, 4.26887, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -234.105, -573.302, 109.991, -9.9299, -2.98821, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -236.628, -569.396, 109.329, -7.3799, -4.26887, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -239.81, -564.475, 108.721, -4.3199, 1.28066, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -241.76, -561.459, 108.549, -0.7499, -1.12058, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -244.04, -557.932, 108.494, 2.82011, -2.77476, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -246.372, -554.326, 108.705, 5.8801, -2.77476, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -248.668, -550.777, 109.14, 10.4701, 8.96462, 32.8806, -1, 7);
				Features::PlaceObjectByHash(3681122061, -251.664, -546.138, 110.313, 13.5301, 1.15259, 32.8806, -1, 7);
				Features::PlaceObjectByHash(3681122061, -254.537, -541.694, 111.791, 16.5901, 4.26887, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -256.28, -538.999, 112.748, 19.6501, -1.19528, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -65.9078, -814.752, 326.106, 19.89, 4.26887, -53.8105, -1, 7);
				Features::PlaceObjectByHash(3681122061, -58.6541, -809.444, 327.336, -4.08004, -2.13443, -53.8103, -1, 7);
				Features::PlaceObjectByHash(3681122061, -52.4476, -804.909, 323.715, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -47.2332, -801.09, 317.168, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -42.0187, -797.272, 310.621, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -36.8326, -793.474, 304.109, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -31.5898, -789.635, 297.526, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -26.4037, -785.838, 291.014, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -21.1893, -782.019, 284.467, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -15.9748, -778.201, 277.919, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -10.7604, -774.383, 271.372, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -5.57426, -770.585, 264.86, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -0.359839, -766.767, 258.313, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 4.82623, -762.969, 251.799, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 10.0123, -759.171, 245.285, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 15.2268, -755.353, 238.735, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 20.4412, -751.535, 232.184, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 25.6273, -747.737, 225.67, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 30.8135, -743.939, 219.155, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 36.0279, -740.121, 212.605, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 41.214, -736.323, 206.091, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 46.4285, -732.505, 199.54, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 48.4122, -731.052, 197.049, -41.8198, 1.62217, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 49.5549, -730.218, 195.782, -38.2499, 3.24434, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 51.171, -729.035, 194.203, -36.2098, 2.39057, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 52.8966, -727.773, 192.637, -33.1499, -6.83019, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 54.586, -726.537, 191.27, -30.0898, 8.70849, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 56.5413, -725.105, 189.866, -25.4998, 7.59859, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 58.8359, -723.425, 188.509, -22.4398, 4.26887, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 60.738, -722.033, 187.536, -18.3599, 1.10991, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 63.1509, -720.268, 186.544, -15.8098, 5.03727, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 65.131, -718.821, 185.849, -12.7498, 5.07995, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 67.1384, -717.352, 185.286, -9.17981, 4.78113, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 69.2894, -715.776, 184.855, -4.5898, 4.18349, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 71.7831, -713.952, 184.607, 0.000193536, 4.16213, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 74.0832, -712.268, 184.607, 3.06019, 3.7566, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 76.0175, -710.853, 184.736, 8.1602, 4.35424, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 77.7752, -709.567, 185.048, 13.2602, 5.50684, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 79.6997, -708.158, 185.61, 17.3402, 3.7566, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 81.3947, -706.918, 186.266, 21.9302, 4.26887, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 83.3036, -705.52, 187.219, 26.0102, 9.39151, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 85.6244, -703.821, 188.622, 29.0702, 1.96368, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 87.3526, -702.556, 189.812, 33.1501, 2.90283, -53.8098, -1, 7);
				Features::PlaceObjectByHash(3681122061, 89.2107, -701.196, 191.316, 37.2301, 4.86651, -53.8098, -1, 7);
				Features::PlaceObjectByHash(3681122061, 90.8492, -699.998, 192.859, 41.82, -2.56132, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 92.6236, -698.701, 194.826, 46.41, 8.2816, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 94.2096, -697.539, 196.89, 52.0199, 6.57406, -53.8098, -1, 7);
				Features::PlaceObjectByHash(3681122061, 95.6251, -696.503, 199.137, 56.61, 9.22075, -53.8097, -1, 7);
				Features::PlaceObjectByHash(3681122061, 96.9799, -695.512, 201.683, 61.7098, 8.53774, -53.8097, -1, 7);
				Features::PlaceObjectByHash(3681122061, 98.1658, -694.646, 204.413, 65.7899, 5.03726, -53.8096, -1, 7);
				Features::PlaceObjectByHash(3681122061, -69.0186, -829.452, 324.775, 0, -0, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -65.276, -836.288, 321.491, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -62.2554, -842.061, 315, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -59.2515, -847.802, 308.544, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -56.2313, -853.574, 302.053, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -53.1945, -859.378, 295.526, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -50.2071, -865.088, 289.106, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -47.2032, -870.829, 282.65, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -44.1829, -876.602, 276.159, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -41.1626, -882.374, 269.667, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -38.1751, -888.084, 263.247, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -35.1713, -893.825, 256.791, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -32.1674, -899.566, 250.335, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -29.1635, -905.307, 243.879, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -26.1432, -911.079, 237.388, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -23.1393, -916.821, 230.932, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -20.119, -922.593, 224.44, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -17.1152, -928.334, 217.985, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -14.1112, -934.075, 211.529, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -11.1235, -939.785, 205.108, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -8.13589, -945.495, 198.687, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -5.28891, -951.101, 192.102, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, -2.35757, -956.552, 185.364, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 0.589775, -962.033, 178.59, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 3.5211, -967.483, 171.852, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 9.3998, -978.414, 158.339, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 6.46847, -972.964, 165.077, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 12.3311, -983.865, 151.601, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 15.2944, -989.375, 144.789, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 21.1569, -1000.28, 131.313, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 18.2417, -994.856, 138.014, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 24.0722, -1005.7, 124.612, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 27.0355, -1011.21, 117.801, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 29.9828, -1016.69, 111.026, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 35.8294, -1027.56, 97.5867, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 37.2241, -1030.15, 94.4555, -44.3698, -1.70754, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 38.7475, -1032.99, 91.3086, -39.7798, -4.26887, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 39.7483, -1034.85, 89.5491, -36.7197, 3.4151, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 40.9818, -1037.14, 87.6062, -33.6597, -2.21981, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 42.1248, -1039.27, 85.999, -30.0898, -1.96368, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 32.9141, -1022.14, 104.288, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 43.3132, -1041.47, 84.5449, -26.5197, -1.79293, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 44.7115, -1044.08, 83.0715, -23.4597, -2.39056, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 45.9496, -1046.38, 81.937, -20.3997, -2.47594, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 47.0815, -1048.48, 81.0483, -17.3397, -2.09174, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 48.302, -1050.75, 80.2436, -14.7897, -8.96462, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 50.0647, -1054.03, 79.2608, -13.2597, -2.77476, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 52.0238, -1057.67, 78.2861, -11.7297, -1.45141, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 53.7395, -1060.86, 77.5341, -9.17973, -1.1099, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 55.7265, -1064.56, 76.8558, -6.11973, -6.61674, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 57.3746, -1067.62, 76.4825, -3.56972, -9.60496, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 59.3125, -1071.23, 76.2272, 0.000276446, -9.05818, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 61.112, -1074.58, 76.2272, 4.08028, -8.00412, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 62.529, -1077.21, 76.4405, 7.65027, -7.04364, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 64.0779, -1080.1, 76.8796, 10.7103, -1.28066, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 65.9388, -1083.55, 77.623, 14.2802, -1.70755, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 67.4076, -1086.29, 78.4126, 17.3403, -1.57948, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 68.7639, -1088.81, 79.3066, 21.4202, 1.36604, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, -86.0915, -825.576, 324.775, 0, -0, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -99.1939, -833.684, 315.911, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -105.248, -837.511, 310.056, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -93.1729, -829.876, 321.734, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -111.268, -841.319, 304.233, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -123.245, -848.891, 292.651, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -147.333, -864.12, 269.359, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -141.278, -860.292, 275.213, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -135.256, -856.485, 281.036, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -129.266, -852.699, 286.828, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -117.224, -845.084, 298.474, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -165.367, -875.521, 251.921, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -213.415, -905.895, 205.464, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -207.426, -902.108, 211.255, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -201.403, -898.301, 217.078, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -195.414, -894.515, 222.87, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -183.434, -886.942, 234.452, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -177.445, -883.156, 240.244, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -171.422, -879.348, 246.067, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -159.378, -871.734, 257.713, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -153.355, -867.927, 263.536, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -189.424, -890.728, 228.661, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -231.449, -917.296, 188.027, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -225.46, -913.509, 193.818, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -219.47, -909.723, 199.609, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -237.439, -921.082, 182.235, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -284.806, -951.016, 167.673, 28.5601, -7.5132, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -289.048, -953.697, 170.578, 34.1701, -3.41509, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -290.727, -954.757, 171.926, 37.23, 3.41509, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -286.998, -952.399, 169.084, 31.62, -1.36604, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -282.375, -949.481, 166.27, 26.0101, 3.50047, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -280.014, -947.991, 165.174, 21.4201, -6.83019, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -277.4, -946.336, 164.178, 17.8501, -3.15896, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -270.266, -941.827, 162.896, 4.59013, -1.79292, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -266.683, -939.562, 163.103, -6.11989, -1.38738, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -259.328, -934.913, 165.339, -17.8499, -4.69576, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -253.478, -931.22, 168.474, -26.01, -4.18349, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -248.103, -927.823, 172.247, -33.66, -5.97642, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -243.429, -924.868, 176.444, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -256.593, -933.187, 166.676, -22.4399, -5.97641, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -262.183, -936.72, 164.252, -14.2799, -3.20165, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -268.321, -940.597, 162.896, 0.000125527, -1.95033, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -272.668, -943.344, 163.123, 8.67012, -2.86014, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -275.091, -944.877, 163.561, 12.7501, -5.1226, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -249.757, -928.867, 170.944, -31.11, -6.0617, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -251.566, -930.012, 169.653, -27.54, -3.58585, 122.286, -1, 7);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -74.94243f, -818.63446f, 326.174347f, 1, 0, 0, 1);
			}
			break;
		case ramp9:
			Menu::Title("~w~All Players");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(3213433054, -2661.22, 3209.43, 32.7118, 0, -0, -120.437, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2657.86, 3207.56, 32.7118, 0, 0, 59.6808, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2659.52, 3212.33, 32.7118, 0, -0, -120.437, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2656.2, 3210.41, 32.7118, 0, 0, 59.6808, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2654.54, 3213.26, 32.7118, 0, 0, 59.6808, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2657.84, 3215.18, 32.7118, 0, -0, -120.437, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2615.14, 3183, 32.8118, 0, -0, -120.45, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2611.82, 3181.02, 32.8118, 0, 0, 58.529, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2613.47, 3185.85, 32.8118, 0, -0, -120.45, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2610.11, 3183.91, 32.8118, 0, 0, 59.589, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2611.79, 3188.7, 32.8118, 0, -0, -120.45, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2608.46, 3186.71, 32.8118, 0, 0, 58.529, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2550.83, 3162.65, 32.7702, 0, -0, -117.989, -1, 8);
				Features::PlaceObjectByHash(4109455646, -2547.01, 3160.66, 34.9496, 11.66, -2.56132e-006, -118.95, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2476.76, 3120.72, 32.7718, 0, -0, -119.612, -1, 8);
				Features::PlaceObjectByHash(4109455646, -2473.51, 3118.83, 34.5672, 8.47412, -0.0223369, -120.965, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2442.43, 3105.7, 35.6224, -7.42001, -5.12265e-006, 150.074, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2443.67, 3101.83, 35.8732, -11.66, 3.84198e-006, 59.738, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2438.8, 3099, 36.0155, -11.66, -6.40331e-006, 59.7379, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2434.05, 3096.22, 36.6871, -22.26, -1.45141e-005, 59.7379, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2446.85, 3098.2, 35.6088, -7.42, 3.20165e-006, -31.8463, -1, 8);
				Features::PlaceObjectByHash(2402097066, -2448.77, 3097.65, 35.4732, 0, -0, -120.616, -1, 8);
				Features::PlaceObjectByHash(2402097066, -2442.95, 3108.08, 35.4832, 0, -0, -117.436, -1, 8);
				Features::PlaceObjectByHash(2402097066, -2442.95, 3108.08, 35.4832, 0, -0, -117.436, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2389.55, 3069.11, 36.5952, 179.801, -3.76861e-006, -117.806, -1, 8);
				Features::PlaceObjectByHash(1982829832, -2363.33, 3056.01, 31.8257, 0, -0, -119.219, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2389.55, 3069.11, 36.5952, 179.801, -3.76861e-006, -117.806, -1, 8);
				Features::PlaceObjectByHash(2609922146, -2358.79, 3060.59, 31.8217, 0, -0, -119.371, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2325.93, 3034.99, 33.3214, 19.8, 3.41509e-006, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2321.78, 3032.58, 36.3899, 25.7399, -8.62311e-005, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2317.79, 3030.29, 39.6222, 25.0799, -6.23256e-005, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2313.74, 3027.94, 42.9228, 25.7399, -8.62311e-005, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2309.83, 3025.69, 46.2289, 27.06, -8.2816e-005, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2306.07, 3023.49, 49.5919, 29.0399, -0.000116113, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2283.14, 3009.97, 44.7284, 14.12, -2.04906e-005, 60.0397, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2287.5, 3012.47, 46.9591, 13.6, 0.680011, 60.0397, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2302.26, 3021.28, 53.174, 29.6999, -0.000100745, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2292.06, 3015.11, 49.2546, 13.6, 1.53679e-005, 60.0397, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2298.56, 3019.12, 56.7472, 30.36, -8.79386e-005, -120.09, -1, 8);
				Features::PlaceObjectByHash(2052512905, -2294.52, 3015.08, 58.6366, 82.6616, 0.00430302, -31.2919, -1, 8);
				Features::PlaceObjectByHash(2052512905, -2293.13, 3017.4, 58.6822, 80.9428, 0.00560716, 149.187, -1, 8);
				Features::PlaceObjectByHash(2787492567, -2293.66, 3016.58, 31.8318, -90, 0.0833042, 109.919, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2202.78, 2963.39, 32.8003, 0, -0, -120.04, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2199.53, 2961.53, 34.17, -40.5599, -2.56132e-006, 59.8803, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2137.1, 2904.97, 32.8327, 16.8, -1.10991e-005, -141.061, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2132.27, 2897.94, 34.4465, 16.8, -14, -141.061, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2127.12, 2890.88, 36.4432, 17.92, -29.68, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2119.98, 2885.33, 38.8379, 17.92, -29.68, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2113.02, 2880, 41.2705, 17.92, -29.68, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2085.18, 2857.71, 49.9177, 19.04, -43.12, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2078.1, 2852.44, 51.662, 19.0399, -50.4001, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2092.05, 2863.54, 48.2285, 17.92, -34.16, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2098.91, 2869.18, 46.2053, 17.92, -29.68, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2105.97, 2874.59, 43.7379, 17.92, -29.68, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2070.42, 2847.69, 53.5814, 19.0399, -50.4001, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2062.85, 2843.01, 55.4739, 19.0399, -50.4001, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2055.32, 2838.69, 56.5097, 17.7868, -43.8868, -131.905, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2047.61, 2834.88, 58.9097, 26.1867, -43.8868, -131.905, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2039.74, 2832.2, 62.2769, 38.5067, -45.5668, -131.905, -1, 8);
				Features::PlaceObjectByHash(3681122061, -1996.98, 2830.2, 48.384, 0.202822, -14.4337, -105.503, -1, 8);
				Features::PlaceObjectByHash(3681122061, -1996.42, 2832.89, 59.0601, -179.433, 12.3451, 76.9258, -1, 8);
				Features::PlaceObjectByHash(3213433054, -1951.86, 2849.63, 34.5146, -47.5199, -7.59859e-005, 59.6261, -1, 8);
				Features::PlaceObjectByHash(3213433054, -1950.16, 2852.52, 34.5146, -47.5199, -7.59859e-005, 59.6261, -1, 8);
				Features::PlaceObjectByHash(3213433054, -1953.57, 2854.49, 32.8004, 0, -0, -120.091, -1, 8);
				Features::PlaceObjectByHash(3213433054, -1955.25, 2851.59, 32.8004, 0, -0, -120.091, -1, 8);
				Features::PlaceObjectByHash(4111834409, -1960.72, 2857.38, 31.7305, 0, -0, -118.505, -1, 8);
				Features::PlaceObjectByHash(4109455646, -2144, 2967.21, 36.0606, 9.35852, -0.00134085, 59.8371, -1, 8);
				Features::PlaceObjectByHash(4109455646, -2139.63, 2964.67, 33.9985, 5.84852, -0.0013321, 59.8371, -1, 8);
				Features::PlaceObjectByHash(4109455646, -2135.45, 2962.3, 32.4604, 0, 0, 60.4792, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2193.23, 2995.21, 35.0684, 11.6996, -0.00262322, -119.238, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2197.74, 2997.74, 32.8074, 15.2099, 2.04906e-005, -119.328, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2246.82, 3026.19, 33.0318, 0.0331696, 0.0056356, 58.6423, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2256.38, 3032.02, 35.4343, 6.5707, 0.0279573, 58.7685, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2265.19, 3037.37, 38.408, 10.1262, 0.0254109, 58.7585, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2273.45, 3042.38, 40.214, 8.95404, -0.00182451, 58.7729, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2281.36, 3047.19, 42.7382, 8.89319, 0.151422, 58.8279, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2289.41, 3052.05, 46.2871, 13.2, 0.000150264, 58.7642, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2397.86, 3114.2, 32.8449, 0, 0, 60.2049, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2402.38, 3116.77, 34.7648, 0, 0, 60.2049, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2394.65, 3118.07, 32.5452, 0, 0, 56.6241, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2397.73, 3120.09, 34.1452, 2.04, -1.38738e-006, 56.6241, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2401.78, 3122.77, 36.6227, 8.16, 1.28066e-006, 56.6239, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2405.48, 3125.2, 39.5571, 14.28, 1.02453e-005, 56.6239, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2409.12, 3127.6, 43.2064, 20.4, -2.39057e-005, 56.6239, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2412.29, 3129.71, 46.9494, 24.4781, -1.43125, 56.2632, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2415.18, 3131.49, 51.529, 38.3931, -3.70399, 55.299, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2416.96, 3132.28, 56.2986, 54.0331, -3.70398, 53.2589, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2417.37, 3132.16, 61.6124, 73.753, -3.70394, 53.2588, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2416.48, 3131.04, 66.996, 90.9129, -3.70395, 53.2587, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2414.88, 3129.5, 70.998, 104.113, -3.70383, 50.6186, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2412.46, 3127.2, 74.61, 116.653, -3.70392, 50.6185, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2409.58, 3124.71, 77.6119, 121.273, -3.70395, 50.6185, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2406.75, 3122.18, 80.0586, 127.213, -3.70391, 50.6184, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2403.38, 3119.23, 82.2502, 135.793, -3.70396, 50.6185, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2369.71, 3092.81, 68.2807, -146.327, -3.7039, 50.6183, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2367.45, 3091.4, 63.3347, -134.447, -3.70392, 50.6182, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2366, 3090.66, 58.0814, -123.887, -3.7039, 50.6182, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2365.38, 3090.57, 53.1623, -112.007, -3.70391, 50.6182, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2365.62, 3091.18, 48.0172, -99.4666, -3.70393, 50.6181, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2366.77, 3092.54, 43.04, -86.2661, -3.70399, 50.6181, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2368.73, 3094.52, 38.5669, -74.386, -3.70392, 50.6181, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2371.25, 3096.8, 35.0692, -59.206, -3.70384, 55.2379, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2375.18, 3099.61, 32.3997, -42.0459, -3.70387, 57.2179, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2395.69, 3112.77, 84.6355, 152.292, -3.70389, 50.6184, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2391.54, 3109.37, 84.6603, 162.192, -3.70393, 50.6184, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2387.13, 3105.84, 83.6595, 172.752, -3.70391, 50.6184, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2382.97, 3102.56, 81.8101, -179.988, -3.70391, 50.6184, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2372.52, 3094.76, 72.6855, -154.907, -3.70391, 50.6183, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2379.11, 3099.59, 79.371, -172.728, -3.70391, 50.6183, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2375.46, 3096.85, 76.1692, -162.168, -3.70388, 50.6182, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2399.8, 3116.19, 83.7512, 143.712, -3.70387, 50.6184, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2510.73, 3180.4, 32.8111, 0, 0, 59.4291, -1, 8);
				Features::PlaceObjectByHash(209943352, -2302.92, 3059.95, 50.2208, 76.8397, -0.679965, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2298.84, 3057.5, 48.7042, 71.3997, -0.679954, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2290.6, 3052.58, 47.3498, 84.3198, -0.679946, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2290.6, 3052.58, 47.3498, 84.3198, -0.679946, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2294.73, 3055.05, 47.6692, 76.8398, -0.680059, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2533.2, 3193.91, 37.3948, 0, -0, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2533.2, 3193.91, 37.3948, 0, -0, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2425.58, 3091.36, 36.493, 0, -0, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2425.58, 3091.36, 36.493, 0, -0, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2293.7, 3012.65, 55.3685, -89.7587, -0.659716, -30.2946, -1, 8);
				Features::PlaceObjectByHash(209943352, -2293.7, 3012.65, 55.3685, -89.7587, -0.659716, -30.2946, -1, 8);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -2731, 3259, 32, 1, 0, 0, 1);
			}
			break;
		case ramp10:
			Menu::Title("~w~All Players");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(3681122061, -1018.78, -2937.26, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1023.38, -2945.17, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1028.02, -2953.13, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1032.66, -2961.06, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1037.32, -2969.04, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1041.95, -2976.96, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1046.18, -2984.19, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1050.78, -2992.12, 12.9646, 0, 0, -29.8732, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1053.22, -2998.13, 12.9646, 0, 0, -14.2534, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1054.14, -3005.28, 12.9646, 0, 0, -0.613478, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1053.45, -3012.85, 12.9646, 0, 0, 11.4866, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1051.19, -3020.08, 12.9646, 0, 0, 23.3667, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1047.43, -3026.73, 12.9646, 0, 0, 35.2469, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1042.42, -3032.37, 12.9646, 0, 0, 47.7871, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1037.1, -3038.16, 12.9646, 0, 0, 37.2273, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1033.11, -3044.75, 12.9646, 0, 0, 25.5675, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1030.43, -3052.11, 12.9646, 0, 0, 14.5676, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1029.18, -3059.85, 12.9646, 0, 0, 4.00757, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1029.37, -3067.7, 12.9646, 0, 0, -6.55247, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1031, -3075.33, 12.9646, 0, 0, -17.5525, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1034.09, -3082.35, 12.9646, 0, 0, -29.6525, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1038.6, -3088.77, 12.9646, 0, 0, -40.2127, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1044.19, -3094.15, 12.9646, 0, 0, -51.653, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1050.65, -3098.2, 12.9646, 0, 0, -63.7531, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1057.89, -3100.91, 12.9646, 0, 0, -75.1935, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1065.18, -3101.87, 12.9646, 0, 0, -89.7139, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1073.03, -3101.2, 12.9646, 0, -0, -100.054, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1080.63, -3099.11, 12.9646, 0, -0, -110.615, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1087.92, -3095.65, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1095.95, -3091.03, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1104.01, -3086.4, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1112.04, -3081.79, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1120.04, -3077.19, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1128.1, -3072.56, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1136.15, -3067.93, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1144.2, -3063.31, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1152.22, -3058.7, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1160.24, -3054.09, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1168.22, -3049.48, 12.9646, 0, -0, -120.295, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1176.21, -3044.8, 12.9646, 0, -0, -120.295, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1183.28, -3040.14, 12.9646, 0, -0, -126.455, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1189.23, -3034.89, 12.9646, 0, -0, -136.356, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1193.86, -3028.84, 12.9646, 0, -0, -148.677, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1197.2, -3021.86, 12.9646, 0, -0, -159.898, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1198.78, -3014.77, 12.9646, 0, -0, -174.639, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1198.72, -3007.04, 12.9646, 0, -0, 173.701, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1197, -2999.97, 12.9646, 0, -0, 158.962, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1193.5, -2993.3, 12.9646, 0, -0, 145.982, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1188.51, -2987.1, 12.9646, 0, -0, 136.083, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1182.5, -2981.85, 12.9646, 0, -0, 126.183, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1175.98, -2978.23, 12.9646, 0, -0, 112.104, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1168.67, -2976.15, 12.9646, 0, -0, 99.7843, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1160.82, -2975.53, 12.9646, 0, 0, 89.4449, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1152.93, -2976.29, 12.9646, 0, 0, 79.5455, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1145.21, -2978.39, 12.9646, 0, 0, 70.0859, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1138.14, -2981.75, 12.9646, 0, 0, 59.0863, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1130.27, -2986.43, 12.9646, 0, 0, 59.0863, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1122.46, -2991.09, 12.9646, 0, 0, 59.0863, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1115.12, -2994.75, 12.9646, 0, 0, 67.1435, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1107.63, -2997.13, 12.9646, 0, 0, 76.9913, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1099.8, -2998.14, 12.9646, 0, 0, 86.8389, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1091.94, -2997.76, 12.9646, 0, -0, 97.5819, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1084.47, -2995.95, 12.9646, 0, -0, 108.325, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1077.64, -2992.78, 12.9646, 0, -0, 119.963, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1077.64, -2992.78, 12.9646, 0, -0, 119.963, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1071.68, -2988.3, 12.9646, 0, -0, 132.496, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1066.33, -2982.53, 12.9646, 0, -0, 141.449, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1053.01, -2960.01, 12.9646, 0, 0, -28.5532, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1048.58, -2951.88, 12.9646, 0, 0, -28.5532, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1044.16, -2943.76, 12.9646, 0, 0, -28.5532, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1039.74, -2935.64, 12.9646, 0, 0, -28.5532, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1035.5, -2927.86, 12.9646, 0, 0, -28.5532, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1063.23, -2993.67, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1067.37, -2998.06, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1063.7, -2994.67, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1064.21, -2995.73, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1064.71, -2996.8, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1065.21, -2997.84, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1067.1, -2999.45, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1065.43, -3000.24, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1068.29, -3000.06, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1065.92, -3001.18, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1066.44, -3002.28, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1065.35, -3002.77, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1065.6, -3003.96, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1066.11, -3005.04, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1064.21, -2999.56, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1069.53, -3000.82, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1070.75, -3001.52, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1068.76, -3002.46, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1069.29, -3003.54, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1068.44, -3005.23, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1071.58, -3003.74, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1072.98, -3006.81, 16.0846, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1072.44, -3002.05, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1073.73, -3002.72, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1076.54, -3005.07, 16.0846, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1078.92, -3009.92, 13.7046, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1075.31, -3011.69, 13.7046, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1069.34, -3008.59, 16.0846, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1071.71, -3013.45, 13.7046, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1068.14, -3015.2, 13.7046, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1065.36, -3006.66, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1065.75, -3010.35, 16.0846, 0, 0, -26.0348, -1, 9);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -1003, -2916, 14, 1, 0, 0, 1);
			}
			break;
		case ramp11:
			Menu::Title("~w~All Players");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(3966705493, -1041.89, -3219.51, 10.1797, -2.43331, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1037.79, -3221.47, 10.3641, -2.43331, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1034.16, -3223.3, 10.5366, -2.43331, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1036.76, -3219.45, 10.1526, -2.43331, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1033.12, -3221.28, 10.3251, -2.43331, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1029.37, -3225.6, 11.1956, -11.6033, 5.32207, 62.9335, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1028.33, -3223.58, 10.9842, -11.6033, 5.32207, 62.9335, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1024.27, -3225.54, 12.1104, -18.1533, 5.32205, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1025.44, -3227.83, 12.3497, -18.1533, 5.32205, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1020.36, -3230.06, 15.7972, -40.4234, 5.32214, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1019.22, -3227.83, 15.5634, -40.4234, 5.32214, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1014.85, -3229.56, 20.4393, -50.9034, 5.3221, 62.9337, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1016.07, -3231.95, 20.6898, -50.9034, 5.3221, 62.9337, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1012.88, -3232.96, 26.0664, -64.0034, 5.32209, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1011.63, -3230.51, 25.8104, -64.0034, 5.32209, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1009.27, -3231.06, 32.0819, -73.1735, 5.32204, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1010.52, -3233.51, 32.3379, -73.1735, 5.32214, 62.9337, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1009.36, -3233.48, 38.2311, -83.6535, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1008.09, -3230.98, 37.9695, -83.6535, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1007.71, -3230.43, 44.185, -92.8235, 6.63212, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1009.05, -3228.93, 49.9682, -119.024, 6.63217, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1008.93, -3232.81, 44.4969, -92.8235, 6.63212, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1010.27, -3231.31, 50.2801, -119.024, 6.63217, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1011.96, -3226.91, 54.0691, -142.604, 6.6321, 62.9337, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1013.1, -3229.14, 54.3602, -142.604, 6.6321, 62.9337, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1017.49, -3226.51, 57.2125, -159.634, 6.63211, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1022.14, -3223.91, 58.9186, -168.804, 6.63213, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1035.97, -3216.05, 58.7162, 155.826, 1.39214, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1031.37, -3218.71, 60.1775, 176.786, 6.63213, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1026.33, -3221.63, 59.8766, -168.804, 6.63212, 60.3136, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1020.98, -3221.63, 58.6206, -168.804, 6.63213, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1024.97, -3219.25, 59.5578, -168.804, 6.63212, 60.3136, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1016.33, -3224.24, 56.9145, -159.634, 6.63211, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1029.99, -3216.28, 59.8517, 176.786, 6.63213, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1029.99, -3216.28, 59.8517, 176.786, 6.63213, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1034.73, -3213.86, 58.655, 155.826, 1.39214, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1039.18, -3211.42, 55.2255, 138.796, 1.39206, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1039.18, -3211.42, 55.2255, 138.796, 1.39206, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1040.42, -3213.61, 55.2867, 138.796, 1.39206, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1044.34, -3211.51, 50.6082, 128.316, 1.39213, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1043.09, -3209.33, 50.547, 128.316, 1.39213, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1046.16, -3207.74, 45.1535, 117.837, 1.39215, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1048.17, -3206.74, 39.6252, 104.737, 1.39214, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1048.92, -3206.44, 33.1586, 87.6005, 0.0914728, 60.6227, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1048.18, -3206.88, 26.5446, 77.3408, 0.0913896, 60.6229, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1049.44, -3209.13, 26.5487, 77.3407, 0.0913427, 60.6228, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1047.3, -3210.37, 21.3947, 56.6411, 0.0914017, 58.823, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1047.3, -3210.37, 21.3947, 56.6411, 0.0914017, 58.823, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1045.93, -3208.12, 21.3905, 56.6411, 0.0914017, 58.823, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1042.61, -3210.12, 16.8766, 42.1517, 0.0913785, 58.8231, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1038.64, -3212.63, 13.6141, 28.2018, 0.0914187, 58.8231, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1039.97, -3214.83, 13.6182, 28.2018, 0.0914187, 58.8231, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1034.82, -3217.71, 11.1985, 16.4116, 0.0913871, 69.303, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1033.53, -3215.55, 11.1081, 16.4117, 0.0913619, 66.683, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1043.97, -3212.37, 16.8808, 42.1517, 0.0913785, 58.8231, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1050.19, -3208.69, 33.1627, 87.6005, 0.0914728, 60.6227, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1049.45, -3208.98, 39.6879, 104.737, 1.39214, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1047.44, -3209.98, 45.2161, 117.837, 1.39215, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1047.44, -3209.98, 45.2161, 117.837, 1.39215, 60.3137, -1, 10);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -1074, -3201, 13, 1, 0, 0, 1);
			}
			break;
		case ramp12:
			Menu::Title("~w~All Players");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(3681122061, -82.9657, -818.944, 325.175, 0, -0, 91.03, -1, 11);
				Features::PlaceObjectByHash(3681122061, -91.0941, -819.089, 322.355, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -98.36, -819.224, 316.632, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -105.626, -819.358, 310.91, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -112.892, -819.492, 305.187, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -120.158, -819.626, 299.464, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -127.424, -819.761, 293.741, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -134.69, -819.895, 288.018, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -141.956, -820.029, 282.296, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -149.222, -820.163, 276.573, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -156.487, -820.298, 270.85, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -163.753, -820.432, 265.127, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -171.019, -820.566, 259.404, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -178.285, -820.701, 253.682, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -185.551, -820.835, 247.959, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -192.817, -820.969, 242.236, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -200.083, -821.103, 236.513, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -207.349, -821.238, 230.79, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -214.615, -821.372, 225.068, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -221.881, -821.506, 219.345, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -229.147, -821.641, 213.622, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -236.413, -821.775, 207.899, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -243.679, -821.909, 202.176, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -250.945, -822.043, 196.453, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -258.21, -822.178, 190.731, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -265.476, -822.312, 185.008, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -287.274, -822.715, 167.839, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -280.008, -822.58, 173.562, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -272.742, -822.446, 179.285, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -294.54, -822.849, 162.117, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -301.806, -822.983, 156.394, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -309.072, -823.118, 150.671, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -316.338, -823.252, 144.948, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -323.604, -823.386, 139.225, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -330.87, -823.52, 133.503, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -338.136, -823.655, 127.78, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -345.402, -823.789, 122.057, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -352.668, -823.923, 116.334, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -359.934, -824.057, 110.611, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -367.199, -824.192, 104.889, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -374.465, -824.326, 99.1657, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -381.731, -824.46, 93.4429, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -388.997, -824.595, 87.7201, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -396.263, -824.729, 81.9973, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -403.529, -824.863, 76.2745, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -411.479, -825.022, 68.7971, -19.78, -3.43377e-005, 91.1094, -1, 11);
				Features::PlaceObjectByHash(3681122061, -410.795, -824.997, 70.5517, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -411.96, -825.029, 69.097, -27.6, 1.15259e-005, 91.1095, -1, 11);
				Features::PlaceObjectByHash(3681122061, -412.719, -825.046, 67.8516, -10.58, -2.92151e-006, 91.1095, -1, 11);
				Features::PlaceObjectByHash(3681122061, -413.903, -825.068, 67.2075, -3.21999, 5.66959e-007, 91.1095, -1, 11);
				Features::PlaceObjectByHash(3681122061, -415.378, -825.099, 66.7734, 3.68002, -4.58236e-006, 91.1095, -1, 11);
				Features::PlaceObjectByHash(3681122061, -416.883, -825.126, 66.57, 9.66002, -8.44435e-006, 91.1096, -1, 11);
				Features::PlaceObjectByHash(3681122061, -418.526, -825.157, 66.5571, 15.64, -1.80093e-005, 91.1095, -1, 11);
				Features::PlaceObjectByHash(3681122061, -419.945, -825.184, 66.6727, 20.7001, 8.69782e-006, 91.1094, -1, 11);
				Features::PlaceObjectByHash(3681122061, -421.727, -825.218, 67.0936, 25.7601, -2.09975e-005, 91.1095, -1, 11);
				Features::PlaceObjectByHash(3681122061, -422.006, -825.234, 66.966, 30.8199, 0.114757, 90.6829, -1, 11);
				Features::PlaceObjectByHash(3681122061, -429.913, -825.328, 71.6856, 30.8199, 0.114757, 90.6829, -1, 11);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -74.94243f, -818.63446f, 326.174347f, 1, 0, 0, 1);
			}




			break;

		case Vehcolor:
		{
			Menu::Title("~w~All Players");
			Menu::MainTitle("~c~[Shade 1.0]                             ");


			Menu::Toggle("Enable Primary", Features::Color, [] { Features::color(Features::Color); });


			if (Menu::Int("~r~Red", Features::rbr, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Features::rbr = NumberKeyboard();
				}
			}

			if (Menu::Int("~g~Green", Features::rbd, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Features::rbd = NumberKeyboard();
				}
			}

			if (Menu::Int("~r~Blue", Features::rbs, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Features::rbs = NumberKeyboard();
				}
			}

			//Menu::Break(" SECONDARY Color");

			Menu::Toggle("Enable Secondary", Features::Colorr, [] { Features::colorr(Features::Colorr); });

			if (Menu::Int("~r~Red", Features::rbrr, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Features::rbrr = NumberKeyboard();
				}
			}

			if (Menu::Int("~g~Green", Features::rbdd, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Features::rbdd = NumberKeyboard();
				}
			}

			if (Menu::Int("~r~Blue", Features::rbss, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Features::rbss = NumberKeyboard();
				}
			}

			//Menu::Break(" Smoke Color");

			Menu::Toggle("Enable Smoke", Features::Colorrr, [] { Features::colorrr(Features::Colorrr); });

			if (Menu::Int("~r~Red", Features::rbrrr, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Features::rbrrr = NumberKeyboard();
				}
			}

			if (Menu::Int("~g~Green", Features::rbddd, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Features::rbddd = NumberKeyboard();
				}
			}

			if (Menu::Int("~r~Blue", Features::rbsss, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Features::rbsss = NumberKeyboard();
				}
			}

		}
		break;

		case espcolor:
		{
			Menu::Title("~w~All Players");
			Menu::MainTitle("~c~[Shade 1.0]                             ");



			Menu::Toggle("Name Tag ESP", Features::NameESP, [] { Features::NameTagESP(Features::NameESP); });

			if (Menu::Int("~r~Red", Features::espr, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Features::espr = NumberKeyboard();
				}
			}
			if (Menu::Int("~g~Green", Features::espg, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Features::espg = NumberKeyboard();
				}
			}
			if (Menu::Int("~r~Blue", Features::espb, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Features::espb = NumberKeyboard();
				}
			}


		}
		break;

		case trolli:
		{
			Menu::Title("~w~Troll Options");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Valkyrie Cannon All Player")) {

				for (int i = 0; i < 32; i++)
				{
					int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
					{

						Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
						Ped playerPed = PLAYER::PLAYER_PED_ID();
						Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
						FIRE::ADD_EXPLOSION(playerPosition.x, playerPosition.y, playerPosition.z - 1, 38, 0.5f, true, false, 0.0f);
					}

				}
			}

			if (Menu::Option("Take Weapons in the Lobby")) {
				for (int i = 0; i < 32; i++)
				{
					if (ENTITY::DOES_ENTITY_EXIST(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i))) {
						if (PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i) != PLAYER::PLAYER_PED_ID())
						{
							Player allplayers = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
							if (!(Features::cstrcmp(PLAYER::GET_PLAYER_NAME(i), "-")))
							{
								WEAPON::REMOVE_ALL_PED_WEAPONS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(allplayers), true);
							}
						}
					}
				}
			}

			if (Menu::Option("Airstrike All Player")) {

				for (int i = 0; i < 32; i++)
				{
					int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
					{

						Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
						Ped playerPed = PLAYER::PLAYER_PED_ID();
						Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
						Hash airStrike = GAMEPLAY::GET_HASH_KEY("WEAPON_AIRSTRIKE_ROCKET");
						WEAPON::REQUEST_WEAPON_ASSET(airStrike, 31, false);
						while (!WEAPON::HAS_WEAPON_ASSET_LOADED(airStrike))
							WAIT(0);
						GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(playerPosition.x, playerPosition.y, playerPosition.z + 50.f, playerPosition.x, playerPosition.y, playerPosition.z, 250, 1, airStrike, playerPed, 1, 0, -1.0);
					}
				}
			}





			if (Menu::Option("Give Weapons in the Lobby")) {

				for (int i = 0; i < 32; i++)
				{
					if (ENTITY::DOES_ENTITY_EXIST(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i))) {
						Player allplayers = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
						if (!(Features::cstrcmp(PLAYER::GET_PLAYER_NAME(i), "-")))
						{
							if (PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i) != PLAYER::PLAYER_PED_ID())
							{
								uint Weapons[] = { 0x99B507EA, 0x678B81B1, 0x4E875F73, 0x958A4A8F, 0x440E4788, 0x84BD7BFD, 0x1B06D571, 0x5EF9FEC4, 0x22D8FE39, 0x99AEEB3B, 0x13532244, 0x2BE6766B, 0xEFE7E2DF, 0xBFEFFF6D, 0x83BF0278, 0xAF113F99, 0x9D07F764, 0x7FD62962, 0x1D073A89, 0x7846A318, 0xE284C527, 0x9D61E50F, 0x3656C8C1, 0x05FC3C11, 0x0C472FE2, 0x33058E22, 0xA284510B, 0x4DD2DC56, 0xB1CA77B1, 0x687652CE, 0x42BF8A85, 0x93E220BD, 0x2C3731D9, 0xFDBC8A50, 0x24B17070, 0x060EC506, 0x34A67B97, 0xFDBADCED, 0x23C9F95C, 0x497FACC3, 0xF9E6AA4B, 0x61012683, 0xC0A3098D, 0xD205520E, 0xBFD21232, 0x7F229F94, 0x92A27487, 0x083839C4, 0x7F7497E5, 0xA89CB99E, 0x3AABBBAA, 0xC734385A, 0x787F0BB, 0x47757124, 0xD04C944D };
								for (int i = 0; i < (sizeof(Weapons) / 4); i++) {
									WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(allplayers), Weapons[i], 9999, 1);
								}
							}
						}
					}
				}
			}
			if (Menu::Option("Cage All Player")) {
				Features::trapall();
			}
			if (Menu::Option("Kick All From Car")) {
				for (int i = 0; i < 32; i++)
				{
					if (i != PLAYER::PLAYER_ID())
					{
						RequestControlOfEnt(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i));
						AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i));
						AI::CLEAR_PED_TASKS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i));
						AI::CLEAR_PED_SECONDARY_TASK(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i));
					}
				}
			}

			if (Menu::Option("Explode All"))
			{
				for (int i = 0; i < 32; i++)
				{
					int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
					{
						if (PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i) == PLAYER::PLAYER_PED_ID()) continue;
						{
							Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), false);
							FIRE::ADD_EXPLOSION(coords.x, coords.y, coords.z, 0, 1000.f, true, false, 100.f); //patched
						}
					}
				}
			}
			if (Menu::Option("Clone All Player"))
			{
				for (int i = 0; i < 32; i++)
				{
					int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
					{

						PED::CLONE_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), 1, 1, 1);

					}
				}
			}

		}
		break;


		case ghostw:
		{
			Menu::Title("~w~SHADE");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Spawn Ghost Bike")) {
				Features::autovehi("DAEMON");
				Vehicle Vehicle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				VEHICLE::SET_VEHICLE_COLOURS(Vehicle, 135, 135);
				VEHICLE::SET_VEHICLE_EXTRA_COLOURS(Vehicle, 127, 127);
				VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Vehicle, "GHOST");
			}
			Menu::Toggle("~w~Ghost Rider Mode", Features::ghostrider, [] { Features::firerider(Features::ghostrider); });
		}
		break;

		case Rvehicle:
		{
			Menu::Title("Spawn Rocket Vehicles");
			Menu::MainTitle("~c~[Shade 1.0]                             ");


			//Menu::Break("Rocket Vehicles");

			Menu::MenuOption("Rocket Vehicles", Rocketss);

		}
		break;

		case Rockets:
		{
			Menu::Title("Infinite Rockets");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::Toggle("Infinite Rockets", Features::isInfBoost, [] { Features::InfiniteBoost(Features::isInfBoost); });




		}
		break;

		case Walking:
		{
			Menu::Title("Walking Styles");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::ListVector("Walk Style", walkNames, walk_style_choose)) { SetPedMovementClipset(walkDicts[walk_style_choose]); }




		}
		break;


		//Self  Main
		case playermenu:
		{
			Menu::Title("Self Options");
			Menu::MainTitle("~c~[Shade 1.0]                             ");


			Menu::MenuOption("Model Changer", modelchanger);
			Menu::MenuOption("Animations", anim);
			Menu::MenuOption("Effects ~v~", PTFX);
			Menu::MenuOption("PTFX", ptfxpp);
			Menu::MenuOption("Model Changer", modelchanger);
			Menu::MenuOption("Animations", anim);
			Menu::MenuOption("Effects ~v~", PTFX);
			Menu::MenuOption("PTFX", ptfxpp);
			Menu::MenuOption("Walking Styles", Walking);
			Menu::MenuOption("Ped Size Changer", sizze);
			Menu::MenuOption("Outfit Changer", cocplll);
			Menu::MenuOption("Outfits", outfits);
			Menu::MenuOption("Vision Effects", visions);
			if (Menu::Option("Death Off The Radar"))
			{
				PED::SET_PED_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 0);
				notifyMap("You Are Off The Radar, Click 'Z/W' Twice!", 0);

			}
			Menu::Option("Max Armor", [] { PED::SET_PED_ARMOUR(PLAYER::PLAYER_PED_ID(), 10000); });
			if (Menu::Option("Set To Default Player 1"))
			{
				changeModel("mp_m_freemode_01");
			}
			if (Menu::Option("Refill Health")) {
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				ENTITY::SET_ENTITY_HEALTH(playerPed, ENTITY::GET_ENTITY_MAX_HEALTH(playerPed));
				PED::ADD_ARMOUR_TO_PED(playerPed, PLAYER::GET_PLAYER_MAX_ARMOUR(player) - PED::GET_PED_ARMOUR(playerPed));
				if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, 100))
				{
					Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
					if (ENTITY::DOES_ENTITY_EXIST(playerVeh) && !ENTITY::IS_ENTITY_DEAD(playerVeh))
						VEHICLE::SET_VEHICLE_FIXED(playerVeh);
				}
			}
			if (Menu::Option("Suicide")) { Memory::set_value<float>({ OFFSET_PLAYER , OFFSET_ENTITY_HEALTH }, 0); }
			Menu::Option("Clean Ped", [] { int Ped = PLAYER::PLAYER_PED_ID(); PED::CLEAR_PED_BLOOD_DAMAGE(Ped); PED::RESET_PED_VISIBLE_DAMAGE(Ped); });
			if (Menu::Option("New Look")) { PED::SET_PED_RANDOM_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), true); }
			if (Menu::Option("Reset Player")) { Ped playerPed = PLAYER::PLAYER_PED_ID(); PED::SET_PED_DEFAULT_COMPONENT_VARIATION(playerPed); }
			if (Menu::Int("Player Alpha", Features::player_alpha, 0, 255)) {
				ENTITY::SET_ENTITY_ALPHA(PLAYER::PLAYER_PED_ID(), Features::player_alpha, 0);
			}
			Menu::Toggle("God Mode", Features::playerGodMode, [] { Features::GodMode(Features::playerGodMode); });
			Menu::Toggle("Auto Generate Health", Features::isAutoRegHealth, [] { Features::AutoRegHealth(Features::isAutoRegHealth); });
			Menu::Toggle("Auto Generate Armor", Features::isAutoRegArmour, [] { Features::AutoRegArmour(Features::isAutoRegArmour); });
			Menu::Toggle("Off The Radar", Features::orbool, [] { Features::OffRadar(Features::orbool); });
			Menu::Toggle("No Ragdoll", Features::playernoragdoll, [] { Features::NoRagdoll(Features::playernoragdoll); });
			Menu::Toggle("No-Clip", Features::flybool, [] { Features::playerflyer(Features::flybool);  });
			Menu::Toggle("Fire Breath", Features::FIREBREATH, [] { Features::firebreath(Features::FIREBREATH); });
			Menu::Toggle("Mobile Radio", Features::mobileRadio, [] { Features::mobilevoid(Features::mobileRadio);  });
			Menu::Toggle("Fast Run", Features::runfast, [] { Features::RunFast(Features::runfast); });
			Menu::Toggle("Slide Run", Features::isSlideRun, [] { Features::slideRun(Features::isSlideRun); });
			Menu::Toggle("Fast Swim", Features::fastswim, [] { Features::SwimFast(Features::fastswim); });
			Menu::Toggle("Invisible", Features::playerinvisibility, [] { Features::Invisibility(Features::playerinvisibility); });
			Menu::Toggle("Super Jump", Features::playersuperjump, [] { Features::SuperJump(Features::playersuperjump); });
			Menu::Toggle("Stealth Walk", Features::isCrouchPlayer, [] { Features::crouchPlayer(Features::isCrouchPlayer); notifyMap("~w~Click CRTL and W"); });
			Menu::Toggle("Extreme Jump", Features::extremejump, [] { Features::Extremejump(Features::extremejump); });
			Menu::Toggle("Never Wanted", Features::NeverWanted, [] { Features::neverWanted(Features::NeverWanted); });
			Menu::Toggle("Super Punch", Features::Flex, [] { Features::flex(Features::Flex); });
			if (Menu::Toggle("Slow Motion", slowMotion)) { if (slowMotion) { GAMEPLAY::SET_TIME_SCALE(0.6f); } else { GAMEPLAY::SET_TIME_SCALE(1.f); } }

		}
		break;

		case multipliers:
		{
			Menu::Title("Multipliers");
			if (Menu::Int("Power Multiplier", Menu::Settings::powervalue.r, 1, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::powervalue.r = NumberKeyboard();
				}
			}
			Menu::Toggle("Power", Features::PowerMultiplier);
			if (Menu::Int("Torque Multiplier", Menu::Settings::torquevalue.r, 1, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::torquevalue.r = NumberKeyboard();
				}
			}
			Menu::Toggle("Torque", Features::TorqueMultiplier);
			if (Menu::Int("Friction Multiplier", Menu::Settings::frictionvalue.r, 1, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::frictionvalue.r = NumberKeyboard();
				}
			}
			Menu::Toggle("Friction", Features::FrictionMultiplier);
			if (Menu::Int("Acceleration Multiplier", Menu::Settings::accelerationvalue.r, 1, 255))
			{
				Memory::set_value<float>({ OFFSET_PLAYER_VEHICLE , OFFSET_VEHICLE_HANDLING , OFFSET_VEHICLE_HANDLING_ACCELERATION }, Menu::Settings::accelerationvalue.r);
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::accelerationvalue.r = NumberKeyboard();
					Memory::set_value<float>({ OFFSET_PLAYER_VEHICLE , OFFSET_VEHICLE_HANDLING , OFFSET_VEHICLE_HANDLING_ACCELERATION }, Menu::Settings::accelerationvalue.r);
				}
			}
			if (Menu::Int("Suspention Multiplier", Menu::Settings::suspentionvalue.r, 1, 255))
			{
				Memory::set_value<float>({ OFFSET_PLAYER , OFFSET_PLAYER_VEHICLE , OFFSET_VEHICLE_HANDLING_SUSPENSION_FORCE }, Menu::Settings::suspentionvalue.r);
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::suspentionvalue.r = NumberKeyboard();
					Memory::set_value<float>({ OFFSET_PLAYER , OFFSET_PLAYER_VEHICLE , OFFSET_VEHICLE_HANDLING_SUSPENSION_FORCE }, Menu::Settings::suspentionvalue.r);
				}
			}
		
		}
		break;

		case sizze:
		{
			Menu::Title("~r~Credits");
			Menu::MainTitle("~c~[Shade 1.0]                             ");


			Menu::Toggle("~HUD_COLOUR_GOLD~Ped Size Changer", Features::Pedscale, [] { Features::pedscale(Features::Pedscale); });
			if (Menu::Float("~HUD_COLOUR_GOLD~Ped Hight", Features::pedsizee, 0, 50))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::pedsizee = NumberKeyboard();
				}
			}
			if (Menu::Float("~HUD_COLOUR_GOLD~Ped With", Features::pedwithh, 0, 50))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::pedwithh = NumberKeyboard();
				}
			}
		}
		break;


		case allplayers:


			Menu::Title("~r~Credits");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			Menu::MenuOption("ESP", espcolor);
			if (Menu::Option("Valkyrie Cannon All Player")) {

				for (int i = 0; i < 32; i++)
				{
					int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
					{

						Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
						Ped playerPed = PLAYER::PLAYER_PED_ID();
						Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
						FIRE::ADD_EXPLOSION(playerPosition.x, playerPosition.y, playerPosition.z - 1, 38, 0.5f, true, false, 0.0f);
					}

				}
			}

			if (Menu::Option("Take Weapons in the Lobby")) {
				for (int i = 0; i < 32; i++)
				{
					if (ENTITY::DOES_ENTITY_EXIST(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i))) {
						if (PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i) != PLAYER::PLAYER_PED_ID())
						{
							Player allplayers = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
							if (!(Features::cstrcmp(PLAYER::GET_PLAYER_NAME(i), "-")))
							{
								WEAPON::REMOVE_ALL_PED_WEAPONS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(allplayers), true);
							}
						}
					}
				}
			}

			if (Menu::Option("Airstrike All Player")) {

				for (int i = 0; i < 32; i++)
				{
					int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
					{

						Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
						Ped playerPed = PLAYER::PLAYER_PED_ID();
						Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
						Hash airStrike = GAMEPLAY::GET_HASH_KEY("WEAPON_AIRSTRIKE_ROCKET");
						WEAPON::REQUEST_WEAPON_ASSET(airStrike, 31, false);
						while (!WEAPON::HAS_WEAPON_ASSET_LOADED(airStrike))
							WAIT(0);
						GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(playerPosition.x, playerPosition.y, playerPosition.z + 50.f, playerPosition.x, playerPosition.y, playerPosition.z, 250, 1, airStrike, playerPed, 1, 0, -1.0);
					}
				}
			}





			if (Menu::Option("Give Weapons in the Lobby")) {

				for (int i = 0; i < 32; i++)
				{
					if (ENTITY::DOES_ENTITY_EXIST(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i))) {
						Player allplayers = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
						if (!(Features::cstrcmp(PLAYER::GET_PLAYER_NAME(i), "-")))
						{
							if (PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i) != PLAYER::PLAYER_PED_ID())
							{
								uint Weapons[] = { 0x99B507EA, 0x678B81B1, 0x4E875F73, 0x958A4A8F, 0x440E4788, 0x84BD7BFD, 0x1B06D571, 0x5EF9FEC4, 0x22D8FE39, 0x99AEEB3B, 0x13532244, 0x2BE6766B, 0xEFE7E2DF, 0xBFEFFF6D, 0x83BF0278, 0xAF113F99, 0x9D07F764, 0x7FD62962, 0x1D073A89, 0x7846A318, 0xE284C527, 0x9D61E50F, 0x3656C8C1, 0x05FC3C11, 0x0C472FE2, 0x33058E22, 0xA284510B, 0x4DD2DC56, 0xB1CA77B1, 0x687652CE, 0x42BF8A85, 0x93E220BD, 0x2C3731D9, 0xFDBC8A50, 0x24B17070, 0x060EC506, 0x34A67B97, 0xFDBADCED, 0x23C9F95C, 0x497FACC3, 0xF9E6AA4B, 0x61012683, 0xC0A3098D, 0xD205520E, 0xBFD21232, 0x7F229F94, 0x92A27487, 0x083839C4, 0x7F7497E5, 0xA89CB99E, 0x3AABBBAA, 0xC734385A, 0x787F0BB, 0x47757124, 0xD04C944D };
								for (int i = 0; i < (sizeof(Weapons) / 4); i++) {
									WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(allplayers), Weapons[i], 9999, 1);
								}
							}
						}
					}
				}
			}
			if (Menu::Option("Cage All Player")) {
				Features::trapall();
			}
			if (Menu::Option("Kick All From Car")) {
				for (int i = 0; i < 32; i++)
				{
					if (i != PLAYER::PLAYER_ID())
					{
						RequestControlOfEnt(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i));
						AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i));
						AI::CLEAR_PED_TASKS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i));
						AI::CLEAR_PED_SECONDARY_TASK(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i));
					}
				}
			}

			if (Menu::Option("Explode All"))
			{
				for (int i = 0; i < 32; i++)
				{
					int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
					{
						if (PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i) == PLAYER::PLAYER_PED_ID()) continue;
						{
							Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), false);
							FIRE::ADD_EXPLOSION(coords.x, coords.y, coords.z, 0, 1000.f, true, false, 100.f); //patched
						}
					}
				}
			}
			if (Menu::Option("Clone All Player"))
			{
				for (int i = 0; i < 32; i++)
				{
					int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
					{

						PED::CLONE_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), 1, 1, 1);

					}
				}
			}

			break;

			//Model Changer 
		case modelchanger:
		{
			Menu::Title("Model Changer");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			for (int i = 0; i < ARRAYSIZE(pedModels); i++)
			{
				if (Menu::Option(pedModels[i]))
				{
					DWORD model = GAMEPLAY::GET_HASH_KEY(pedModels[i]);
					STREAMING::REQUEST_MODEL(model);
					while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(0);
					PLAYER::SET_PLAYER_MODEL(PLAYER::PLAYER_ID(), model);
					PED::SET_PED_DEFAULT_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID());
					WAIT(10);
					STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(model);
					WAIT(10);
				}
			}
		}
		break;

		//Animations 
		case anim:
		{
			Menu::Title("Animations");
			Menu::MainTitle("~c~[Shade 1.0]");

			Menu::MenuOption("Scenarios", senas);
			if (Menu::Option("Clear Animation")) { Features::clearanim(); }
			if (Menu::Option("Sex Receiver")) { Features::doAnimation("rcmpaparazzo_2", "shag_loop_poppy"); }
			if (Menu::Option("Sex Giver")) { Features::doAnimation("rcmpaparazzo_2", "shag_loop_a"); }
			if (Menu::Option("Stripper Dance")) { Features::doAnimation("mini@strip_club@private_dance@part1", "priv_dance_p1"); }
			if (Menu::Option("Pole Dance")) { Features::doAnimation("mini@strip_club@pole_dance@pole_dance1", "pd_dance_01"); }
			if (Menu::Option("Push Ups")) { Features::doAnimation("amb@world_human_push_ups@male@base", "base"); }
			if (Menu::Option("Sit Ups")) { Features::doAnimation("amb@world_human_sit_ups@male@base", "base"); }
			if (Menu::Option("Celebrate")) { Features::doAnimation("rcmfanatic1celebrate", "celebrate"); }
			if (Menu::Option("Electrocution")) { Features::doAnimation("ragdoll@human", "electrocute"); }
			if (Menu::Option("Suicide")) { Features::doAnimation("mp_suicide", "pistol"); }
			if (Menu::Option("Showering")) { Features::doAnimation("mp_safehouseshower@male@", "male_shower_idle_b"); }
		}
		break;


		//Scenarios Animtions 
		case senas:
		{
			Menu::Title("Scenarios");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("~r~Stop ~w~Animation")) AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::PLAYER_PED_ID());
			if (Menu::Option("Paparizzi")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_PAPARAZZI", 0, true);
			if (Menu::Option("Drug Dealer")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_DRUG_DEALER_HARD", 0, true);
			if (Menu::Option("Drinking Coffee")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_AA_COFFEE", 0, true);
			if (Menu::Option("Playing Instruments")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_MUSICIAN", 0, true);
			if (Menu::Option("Flexing")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_MUSCLE_FLEX", 0, true);
			if (Menu::Option("Jogging")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_JOG_STANDING", 0, true);
			if (Menu::Option("Binoculars")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_BINOCULARS", 0, true);
			if (Menu::Option("Clipboard")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_CLIPBOARD", 0, true);
			if (Menu::Option("Bench Press")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "PROP_HUMAN_SEAT_MUSCLE_BENCH_PRESS", 0, true);
			if (Menu::Option("Chin Ups")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "PROP_HUMAN_MUSCLE_CHIN_UPS", 0, true);
			if (Menu::Option("BBQ")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "PROP_HUMAN_BBQ", 0, true);
			if (Menu::Option("Superhero")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_SUPERHERO", 0, true);
			if (Menu::Option("Fishing")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_STAND_FISHING", 0, true);
			if (Menu::Option("Security")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_SECURITY_SHINE_TORCH", 0, true);
			if (Menu::Option("Leaf Blower")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_GARDENER_LEAF_BLOWER", 0, true);
			if (Menu::Option("Film Shocking")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_MOBILE_FILM_SHOCKING", 0, true);
			if (Menu::Option("Idle Cop")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_COP_IDLES", 0, true);
			if (Menu::Option("Drinking")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_DRINKING", 0, true);
			if (Menu::Option("Golf Player")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_GOLF_PLAYER", 0, true);
			if (Menu::Option("Welding")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_WELDING", 0, true);
			if (Menu::Option("Smoking Pot")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_SMOKING_POT", 0, true);
			if (Menu::Option("Hammering")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_HAMMERING", 0, true);
			if (Menu::Option("Tennis")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_TENNIS_PLAYER", 0, true);
			if (Menu::Option("Drilling")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_CONST_DRILL", 0, true);
		}
		break;

		case dropOnline222:
		{
			Menu::Title("Drop");
			Menu::MainTitle("~c~[Shade 1.0]                             ");


			if (Menu::Int("Amount Custom input", Features::DropAmount3, 1, 2500))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropAmount3 = NumberKeyboard();
				}
			}

			if (Menu::Int("Delay", Features::DropDelay, 50, 1000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropDelay = NumberKeyboard();
				}
			}

			if (Menu::Option("Give Player MoneyGun")) {
				auto ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (PED::IS_PED_SHOOTING(ped))
				{
					Vector3 pos;
					if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(ped, &pos))
					{
						OBJECT::CREATE_OBJECT(GAMEPLAY::GET_HASH_KEY("prop_money_bag_01"), pos.x, pos.y, pos.z, true, 1, 0);
					}
				}
			}



			//Menu::Break("Models");
			dropModelsSelect();
		}
		break;

		case cocplll:
		{
			Menu::Title("");
			Menu::MainTitle("~c~[Shade 1.0]                             ");


			Menu::Title("Player list");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Int("Hats", Face_, 0, 255)) { Features::changeClothes("HATS", Face_, FaceTex_); }
			if (Menu::Int("Hats Texture", FaceTex_, 0, 255)) { Features::changeClothes("HATS", Face_, FaceTex_); }
			if (Menu::Int("Glasses", Glasses_, 0, 255)) { Features::changeClothes("GLASSES", Glasses_, GlassesTex_); }
			if (Menu::Int("Glasses Texture", GlassesTex_, 0, 255)) { Features::changeClothes("GLASSES", Glasses_, GlassesTex_); }
			if (Menu::Int("Ears", Ears_, 0, 255)) { Features::changeClothes("EARS", Ears_, EarsTex_); }
			if (Menu::Int("Ears Texture", EarsTex_, 0, 255)) { Features::changeClothes("EARS", Ears_, EarsTex_); }
			if (Menu::Int("Torso invisible", Torso_, 0, 255)) { Features::changeClothes("TORSO", Torso_, TorsoTex_); }
			if (Menu::Int("Torso invisible Texture", TorsoTex_, 0, 255)) { Features::changeClothes("TORSO", Torso_, TorsoTex_); }
			if (Menu::Int("Torso", Torso2_, 0, 255)) { Features::changeClothes("TORSO2", Torso2_, Torso2Tex_); }
			if (Menu::Int("Torso Texture", Torso2Tex_, 0, 255)) { Features::changeClothes("TORSO2", Torso2_, Torso2Tex_); }
			if (Menu::Int("Legs", Legs_, 0, 255)) { Features::changeClothes("LEGS", Legs_, LegsTex_); }
			if (Menu::Int("Legs Texture", LegsTex_, 0, 255)) { Features::changeClothes("LEGS", Legs_, LegsTex_); }
			if (Menu::Int("Parachutes", Hands_, 0, 255)) { Features::changeClothes("HANDS", Hands_, HandsTex_); }
			if (Menu::Int("Parachutes Texture", HandsTex_, 0, 255)) { Features::changeClothes("HANDS", Hands_, HandsTex_); }
			if (Menu::Int("Shoes", Watches_, 0, 255)) { Features::changeClothes("SHOES", Watches_, WatchesTex_); }
			if (Menu::Int("Shoes Texture", WatchesTex_, 0, 255)) { Features::changeClothes("SHOES", Watches_, WatchesTex_); }
			if (Menu::Int("Special 1", Special1_, 0, 255)) { Features::changeClothes("SPECIAL1", Special1_, Special1Tex_); }
			if (Menu::Int("Special 1 Texture", Special1Tex_, 0, 255)) { Features::changeClothes("SPECIAL1", Special1_, Special1Tex_); }
			if (Menu::Int("Special 2", Special2_, 0, 255)) { Features::changeClothes("SPECIAL2", Special2_, Special2Tex_); }
			if (Menu::Int("Special 2 Texture", Special2Tex_, 0, 255)) { Features::changeClothes("SPECIAL2", Special2_, Special2Tex_); }
			if (Menu::Int("Special 3", Special3_, 0, 255)) { Features::changeClothes("SPECIAL3", Special3_, Special3Tex_); }
			if (Menu::Int("Special 3 Texture", Special3Tex_, 0, 255)) { Features::changeClothes("SPECIAL3", Special3_, Special3Tex_); }
		}
		break;

		//Online Player List Code 
		case onlinemenu_playerlist:
		{
			Features::LoadPlayerInfo(PLAYER::GET_PLAYER_NAME(Menu::Settings::currentOption - 1), Menu::Settings::currentOption - 1);
			Menu::Title("Player list");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			for (int i = 0; i < 32; ++i) {
				Player isFriend = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
				bool is_friend;
				bool handle_valid = Features::isPlayerFriend(i, is_friend);
				if (ENTITY::DOES_ENTITY_EXIST(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i))) {
					std::stringstream ss;
					if (NETWORK::NETWORK_GET_HOST_OF_SCRIPT("freemode", -1, 0) == i) {
						ss << PLAYER::GET_PLAYER_NAME(i) << " ~y~[HOST]";
						std::string s = ss.str();
						const char* cstr = s.c_str();
						Menu::MenuOption(cstr, onlinemenu_selected) ? Features::Online::selectedPlayer = i : NULL;
					}
					else if (PLAYER::GET_PLAYER_INVINCIBLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i))) {
						ss << PLAYER::GET_PLAYER_NAME(i) << " ~r~[MODDER]";
						std::string s = ss.str();
						const char* cstr = s.c_str();
						Menu::MenuOption(cstr, onlinemenu_selected) ? Features::Online::selectedPlayer = i : NULL;
					}
					else if (handle_valid && is_friend) {
						ss << PLAYER::GET_PLAYER_NAME(i) << " ~g~[FRIEND]";
						std::string s = ss.str();
						const char* cstr = s.c_str();
						Menu::MenuOption(cstr, onlinemenu_selected) ? Features::Online::selectedPlayer = i : NULL;
					}
					else if (isFriend == PLAYER::PLAYER_PED_ID()) {
						ss << PLAYER::GET_PLAYER_NAME(i) << " ~b~[SELF]";
						std::string s = ss.str();
						const char* cstr = s.c_str();
						Menu::MenuOption(cstr, onlinemenu_selected) ? Features::Online::selectedPlayer = i : NULL;
					}
					else {
						Menu::MenuOption(PLAYER::GET_PLAYER_NAME(i), onlinemenu_selected) ? Features::Online::selectedPlayer = i : NULL;
					}
				}
			}


		}
		break;

		case Remoteoptall:
		{
			Menu::Title("Remote All");
			Menu::MainTitle("~c~[Shade 1.0]                             ");



			Menu::Toggle("Show all players on radar", Features::isRevealPlayers, [] {Features::revealPlayers(Features::isRevealPlayers); });


			if (Menu::Option("~w~Clear Lobby")) {

				for (int x = 0; x < 32; x++)
				{
					if (x != PLAYER::PLAYER_ID() && ENTITY::DOES_ENTITY_EXIST(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(x)))
					{
						DWORD64 args[4] = { 994306218, x, 0, 0 };
						SCRIPT::eventur(1, args, 4, 1 << x);
					}
				}


			}

			if (Menu::Option("~w~Teleport All Player Eclipse Tower")) {

				for (int z = 0; z < 40; z++)
				{
					DWORD64 arguments[9] = { -328868154, z, 1, -1, 1, 1, 0,0,0 };
					SCRIPT::eventur(1, arguments, 9, 1 << z);
				}
			}

			Menu::Toggle("Crash Lobby", Features::cargopall, [] {Features::cargoPall(Features::cargopall); });



			Menu::Toggle("Transaction Error for all players", Features::sounderrorall, [] {Features::sound55errorall(Features::sounderrorall); });


			if (Menu::Option("~w~Remote Black Screen")) {


				DWORD64 args[9] = { 1000837481, Features::Online::selectedPlayer, 0, 0, 0, -1, 1, 1, 0 };
				SCRIPT::eventur(1, args, 9, 1 << Features::Online::selectedPlayer);

				notifyMap("~r~Player got a black screen");
			}
		}
		break;

		case Remoteoptalll:
		{
			Menu::Title("Player List");
			Menu::MainTitle("~c~[Shade 1.0]                             ");


			Menu::Int("~w~Ammout", Menu::Settings::notoirff, 0, 400000000);

			if (Menu::Option("~w~Send Player disbursed Money Notification")) {

				Player player = Features::Online::selectedPlayer;

				DWORD64 args[14] = { 713068249, player, 2110027654, Menu::Settings::notoirff };
				SCRIPT::eventur(1, args, 14, 1 << player);
			}

			if (Menu::Option("~w~Send Player deposited Money Notification")) {

				Player  player = Features::Online::selectedPlayer;

				DWORD64 penis[15] = { 713068249, player, -1550586884, Menu::Settings::notoirff };
				SCRIPT::eventur(1, penis, 15, 1 << player);
			}

			if (Menu::Option("~w~Send Player Stolen Money Notification")) {

				Player  player = Features::Online::selectedPlayer;

				DWORD64 penis[15] = { 713068249, player, -1432462772, Menu::Settings::notoirff };
				SCRIPT::eventur(1, penis, 15, 1 << player);
			}


			if (Menu::Option("~w~Send APP - Activated Message to Player")) {

				Player  player = Features::Online::selectedPlayer;

				DWORD64 penis[15] = { 566035618, player, 1383721237, Menu::Settings::notoirff };
				SCRIPT::eventur(1, penis, 15, 1 << player);
			}


			if (Menu::Option("~w~Send APP - Disabled Message to Player")) {

				Player  player = Features::Online::selectedPlayer;

				DWORD64 penis[15] = { 713068249, player, 1254298341, Menu::Settings::notoirff };
				SCRIPT::eventur(1, penis, 15, 1 << player);
			}

		}
		break;

		case Remoteopt:
		{
			Menu::Title("Remote Options");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(offradardpl, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 0.3, 0.3, 0.3, r1, g1, b1, 200, 1, 1, 1, 0, 0, 0, 0);
			}



			Menu::Toggle("Freeze", Features::freezed[Features::Online::selectedPlayer], [] { Features::Freezer(Features::freezed[Features::Online::selectedPlayer]); });


			if (Menu::Option("Send Player Police Attackers"))
			{

				Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(iPed, 0);
				if (!ENTITY::DOES_ENTITY_EXIST(iPed)) return;
				Hash guysex = GAMEPLAY::GET_HASH_KEY("s_m_y_cop_01");
				STREAMING::REQUEST_MODEL(guysex);
				while (!STREAMING::HAS_MODEL_LOADED(guysex))
					WAIT(0);
				int createdGuySex = PED::CREATE_PED(26, guysex, pCoords.x, pCoords.y, pCoords.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdGuySex, false);
				int vehmodel = GAMEPLAY::GET_HASH_KEY("POLICE3");
				STREAMING::REQUEST_MODEL(vehmodel);
				while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
				Vehicle veh = VEHICLE::erstelle_fahr(vehmodel, pCoords.x, pCoords.y, pCoords.z, 0.0, 1, 1);
				VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL");
				WEAPON::GIVE_WEAPON_TO_PED(createdGuySex, railgun, railgun, 9999, 9999);
				PED::SET_PED_INTO_VEHICLE(createdGuySex, veh, -1);
				AI::TASK_COMBAT_PED(createdGuySex, iPed, 1, 1);
				ENTITY::SET_ENTITY_INVINCIBLE(createdGuySex, false);
				PED::SET_PED_COMBAT_ABILITY(createdGuySex, 100);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdGuySex, true);
				AI::TASK_COMBAT_PED(createdGuySex, iPed, 1, 1);
				PED::SET_PED_AS_ENEMY(createdGuySex, 1);
				PED::SET_PED_COMBAT_RANGE(createdGuySex, 1000);
				PED::SET_PED_KEEP_TASK(createdGuySex, true);
				PED::SET_PED_AS_COP(createdGuySex, 1000);
				PED::SET_PED_ALERTNESS(createdGuySex, 1000);


			}
			if (Menu::Option("~w~Non Host Kick")) {

				Player player = Features::Online::selectedPlayer;

				DWORD64 args[3] = { -120668417 , player, 48 };
				SCRIPT::eventur(1, args, 3, 1 << player);


			}
			if (Menu::Option("~w~Non Host Kick to Single Player")) {

				DWORD64 args[4] = { 769347061, Features::Online::selectedPlayer, 0, 0 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);
			}

			if (Menu::Option("Host Kick (Only Host)")) {

				if (ENTITY::DOES_ENTITY_EXIST(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer)))
				{
					if (PLAYER::PLAYER_PED_ID() == NETWORK::NETWORK_GET_HOST_OF_SCRIPT("freemode", -1, 0))
						NETWORK::NETWORK_SESSION_KICK_PLAYER(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer));
					else
						notifyMap("~r~You are not the host!");
					return;
				}

			}




			if (Menu::Option("Force Mission")) {

				DWORD64 args[2] = { -15432926, Features::Online::selectedPlayer };
				SCRIPT::eventur(1, args, 2, 1 << Features::Online::selectedPlayer);


			}

			if (Menu::Option("~w~Show GTAScreen ")) {


				DWORD64 args[4] = { -181444979, Features::Online::selectedPlayer, 0, 0 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);


			}

			if (Menu::Option("~w~Send Banner ")) {


				uint64_t args[3] = { 713068249, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(player), 1009196241 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);


			}

			if (Menu::Option("Force Mission Message")) {

				DWORD64 args[4] = { -1571039706, Features::Online::selectedPlayer, 0, 0 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);


			}
			Menu::Toggle("Remote Transaction Error Spam", Features::sounderror[Features::Online::selectedPlayer], [] { Features::sound55error(Features::sounderror[Features::Online::selectedPlayer]); });

			Menu::Toggle("Sound Spam (Yacht)", Features::soundYacht, [] {Features::Yacht(Features::soundYacht); });

			Menu::Toggle("Sound Spam (Office)", Features::soundOffice, [] {Features::Transaktion(Features::soundOffice); });

			Menu::Toggle("Sound Spam (Clubhouse)", Features::soundClubhouse, [] {Features::Clubhouse(Features::soundClubhouse); });

			Menu::Toggle("Sound Spam (Company Garage)", Features::soundCompany, [] {Features::Company(Features::soundCompany); });

			Menu::Toggle("Sound Spam (Tuning Workshop)", Features::soundTuning, [] {Features::Tuning(Features::soundTuning); });

			if (Menu::Option("Spectating Message to Player")) {

				DWORD64 args[14] = { 713068249, Features::Online::selectedPlayer, 1583919327 };
				SCRIPT::eventur(1, args, 14, 1 << Features::Online::selectedPlayer);
			}

			if (Menu::Option("Kick Player to Single Player")) {
				DWORD64 args[4] = { FORCE_SINGLEPLAYER, Features::Online::selectedPlayer, 0, 0 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);
			}
			if (Menu::Option("Kick To Single Player Then Freeze Keyboard")) {
				DWORD64 args[4] = { FORCE_SINGLEPLAYER_TWO, Features::Online::selectedPlayer, 0, 0 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);
			}
			if (Menu::Option("Infinity Loading Screen")) {
				DWORD64 args[3] = { INFINITY_LOADING, Features::Online::selectedPlayer, 1 };
				SCRIPT::eventur(1, args, 3, 1 << Features::Online::selectedPlayer);
			}
			if (Menu::Option("Show No Fly Zone Message On Player")) {
				DWORD64 args[3] = { NO_FLY_ZONE_MESSAGE, Features::Online::selectedPlayer, 1 };
				SCRIPT::eventur(1, args, 3, 1 << Features::Online::selectedPlayer);
			}
			if (Menu::Option("CEO Kick Player")) {

				DWORD64 args[4] = { -1190833098, Features::Online::selectedPlayer, 0, 0 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);
			}



			if (Menu::Option("CEO Kick Player with Notification ")) {

				uint64_t args[4];
				args[0] = -1190833098;
				args[1] = Features::Online::selectedPlayer;
				args[2] = 1;
				args[3] = 5;
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);

			}

			if (Menu::Option("CEO Ban Player with Notification ")) {

				uint64_t args[4];
				args[0] = 360381720;
				args[1] = Features::Online::selectedPlayer;
				args[2] = 1;
				args[3] = 5;
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);

			}
			if (Menu::Option("~w~Sound Spam (Yacht) ")) {

				DWORD64 args[3] = { 4119492672, Features::Online::selectedPlayer, 1 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);
			}

			if (Menu::Option("~w~Sound Spam (Office) ")) {

				DWORD64 args[3] = { 4119492672, Features::Online::selectedPlayer, 2 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);
			}


			if (Menu::Option("~w~Sound Spam (Clubhouse) ")) {

				DWORD64 args[3] = { 4119492672, Features::Online::selectedPlayer, 3 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);
			}

			if (Menu::Option("~w~Sound Spam (Company Garage)")) {

				DWORD64 args[3] = { 4119492672, Features::Online::selectedPlayer, 6 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);
			}

			if (Menu::Option("~w~Sound Spam (Tuning Workshop) ")) {

				DWORD64 args[3] = { 4119492672, Features::Online::selectedPlayer, 7 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);
			}


			if (Menu::Option("Server Remote Ban")) {
				for (int i = 0; i <= 32; i++)
				{
					std::string playerName2 = PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer);
					std::string Left = " Left.";
					Ped Ban = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
					AI::CLEAR_PED_TASKS_IMMEDIATELY(Ban);
					AI::CLEAR_PED_TASKS(Ban);
					AI::CLEAR_PED_SECONDARY_TASK(Ban);
					notifyBottom("ACCESS_994306218_THROUGH_NET_LAN", Features::Online::selectedPlayer);
					notifyMap("ACCESS_GRANDED_THROUGH_NET_LAN", Features::Online::selectedPlayer);
					if (PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i) != PLAYER::PLAYER_PED_ID())
					{
						unsigned int playerBit = (1 << i);
						uint64_t args[4] = { 994306218, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 0, 0 };
						SCRIPT::eventur(1, args, 4, playerBit);
						notifyBottom("~r~CUSTOM::BAN_THROUGH_BYBASS~w~(....)");
						notifyMap(playerName2 + Left);

					}

				}
				if (Menu::Option("Ban from CEO")) {
					if (ENTITY::DOES_ENTITY_EXIST(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer)))
					{
						NETWORK::NETWORK_SESSION_KICK_PLAYER(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer));
					}
				}
			}
			else {
				if (Menu::Option("Kick Player")) {

					DWORD64 args[4] = { 769347061, Features::Online::selectedPlayer, 0, 0 };
					SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);
				}

				if (Menu::Option("Crash Player")) {
					const int maxPeds = 225;
					Ped ClonedPed[maxPeds];
					Ped playerPed = PLAYER::PLAYER_PED_ID();

					Player ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
					Vector3 selectedPedPosition = ENTITY::GET_ENTITY_COORDS(ped, FALSE);
					Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(playerPed, FALSE);

					if (GAMEPLAY::GET_DISTANCE_BETWEEN_COORDS(playerPosition.x, playerPosition.y, playerPosition.z, selectedPedPosition.x, selectedPedPosition.y, selectedPedPosition.z, false) > 350.0f)
					{
						if (PED::IS_PED_IN_ANY_VEHICLE(PED::GET_VEHICLE_PED_IS_IN(ped, 1), FALSE))
						{
							AI::CLEAR_PED_TASKS_IMMEDIATELY(ped);
							AI::CLEAR_PED_SECONDARY_TASK(ped);
						}
						notifyMap("~r~Wait a moment, player is being crashed....");
						for (int i = 0; i < maxPeds; i++)
						{

							ClonedPed[i] = PED::CLONE_PED(ped, ENTITY::GET_ENTITY_HEADING(playerPed), 1, 1);
							WAIT(0);
							Features::RequestingControl(ClonedPed[i]);
							WAIT(0);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(ClonedPed[i], ped, PED::GET_PED_BONE_INDEX(ped, SKEL_ROOT), 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, false, false, false, false, 2, true);
							AI::CLEAR_PED_TASKS_IMMEDIATELY(ped);
							WAIT(5);
						}
						if (ENTITY::DOES_ENTITY_EXIST(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(ped)))
						{
							notifyMap("~r~CRASH ATTEMPT 2 IS STARTING!");
							for (int i = 0; i < maxPeds; i++)
							{
								ClonedPed[i] = PED::CLONE_PED(ped, ENTITY::GET_ENTITY_HEADING(playerPed), 1, 1);
								WAIT(0);
								Features::RequestingControl(ClonedPed[i]);
								WAIT(0);
								ENTITY::ATTACH_ENTITY_TO_ENTITY(ClonedPed[i], ped, PED::GET_PED_BONE_INDEX(ped, SKEL_ROOT), 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, false, false, false, false, 2, true);
								AI::CLEAR_PED_TASKS_IMMEDIATELY(ped);
								WAIT(3);
							}
						}
						notifyMap("~g~Crashed!");
						for (int i = 0; i < maxPeds; i++)
						{
							WAIT(10);
							Features::RequestingControl(ClonedPed[i]);
							ENTITY::SET_PED_AS_NO_LONGER_NEEDED(&ClonedPed[i]);
							PED::DELETE_PED(&ClonedPed[i]);
							AUDIO::PLAY_SOUND_FRONTEND(-1, "ScreenFlash", "WastedSounds", 0);
						}
					}
					else
					{
						notifyMap("~r~Too Close To The Player For An Crash Attempt.");
					}
				}

			}
			break;

		case trollo:
		{
			Menu::Title("Player List");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(offradardpl, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 0.3, 0.3, 0.3, r1, g1, b1, 200, 1, 1, 1, 0, 0, 0, 0);
			}
			if (Menu::Option("Valkyrie Cannon")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				FIRE::ADD_EXPLOSION(pos.x, pos.y, pos.z - 1, 38, 0.5f, true, false, 0.0f);
			}

			if (Menu::Int("Bullet Type", Menu::Settings::bullet, 0, 38))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Menu::Settings::bullet = NumberKeyboard();
				}

			}
			if (Menu::Float("Bullet Scale", Menu::Settings::bulletp, 0.0f, 100.0f));

			if (Menu::Option("Bullet Cannon ~g~Visible")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				FIRE::ADD_EXPLOSION(pos.x, pos.y, pos.z - 1, Menu::Settings::bullet, Menu::Settings::bulletp, true, false, 0.0f);
			}

			if (Menu::Option("Bullet Cannon ~r~Invisible")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				FIRE::ADD_EXPLOSION(pos.x, pos.y, pos.z - 1, Menu::Settings::bullet, Menu::Settings::bulletp, true, true, 0.0f);
			}
			if (Menu::Option("Blame Player"))
			{

				blame();

			}
			Menu::Toggle("Water Loop", Features::playerwaterloop[Features::Online::selectedPlayer], [] { Features::WaterLoop(Features::playerwaterloop[Features::Online::selectedPlayer]); });
			Menu::Toggle("Fire Loop", Features::playerfireloop[Features::Online::selectedPlayer], [] { Features::FireLoop(Features::playerfireloop[Features::Online::selectedPlayer]); });
			Menu::Toggle("Fuck Handling", Features::fuckedhandling[Features::Online::selectedPlayer], [] { Features::fuckhandling(Features::fuckedhandling[Features::Online::selectedPlayer]); });
			Menu::Toggle("Shake Cam", Features::camshaker[Features::Online::selectedPlayer], [] { Features::shakecam(Features::camshaker[Features::Online::selectedPlayer]); });
			if (Menu::Option("Send Player Police Attackers"))
			{

				Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(iPed, 0);
				if (!ENTITY::DOES_ENTITY_EXIST(iPed)) return;
				Hash guysex = GAMEPLAY::GET_HASH_KEY("s_m_y_cop_01");
				STREAMING::REQUEST_MODEL(guysex);
				while (!STREAMING::HAS_MODEL_LOADED(guysex))
					WAIT(0);
				int createdGuySex = PED::CREATE_PED(26, guysex, pCoords.x, pCoords.y, pCoords.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdGuySex, false);
				int vehmodel = GAMEPLAY::GET_HASH_KEY("POLICE3");
				STREAMING::REQUEST_MODEL(vehmodel);
				while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
				Vehicle veh = VEHICLE::erstelle_fahr(vehmodel, pCoords.x, pCoords.y, pCoords.z, 0.0, 1, 1);
				VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL");
				WEAPON::GIVE_WEAPON_TO_PED(createdGuySex, railgun, railgun, 9999, 9999);
				PED::SET_PED_INTO_VEHICLE(createdGuySex, veh, -1);
				AI::TASK_COMBAT_PED(createdGuySex, iPed, 1, 1);
				ENTITY::SET_ENTITY_INVINCIBLE(createdGuySex, false);
				PED::SET_PED_COMBAT_ABILITY(createdGuySex, 100);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdGuySex, true);
				AI::TASK_COMBAT_PED(createdGuySex, iPed, 1, 1);
				PED::SET_PED_AS_ENEMY(createdGuySex, 1);
				PED::SET_PED_COMBAT_RANGE(createdGuySex, 1000);
				PED::SET_PED_KEEP_TASK(createdGuySex, true);
				PED::SET_PED_AS_COP(createdGuySex, 1000);
				PED::SET_PED_ALERTNESS(createdGuySex, 1000);


			}
			if (Menu::Option("Polo Dance")) {

				const int ElementAmount = 10;
				const int ArrSize = ElementAmount * 2 + 2;
				Ped *peds = new Ped[ArrSize];
				peds[0] = ElementAmount;
				int PedFound = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), peds, -1);
				for (int i = 0; i < PedFound; i++)
				{
					int OffsetID = i * 2 + 2;
					RequestControlOfEnt(peds[OffsetID]);
					if (ENTITY::DOES_ENTITY_EXIST(peds[OffsetID]) && PLAYER::PLAYER_PED_ID() != peds[OffsetID])
					{
						STREAMING::REQUEST_ANIM_DICT("mini@strip_club@pole_dance@pole_dance1");
						if (STREAMING::HAS_ANIM_DICT_LOADED(("mini@strip_club@pole_dance@pole_dance1")))
						{
							AI::TASK_PLAY_ANIM((peds[OffsetID]), "mini@strip_club@pole_dance@pole_dance1", "pd_dance_01", 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
						}
					}
				}

			}
			if (Menu::Option("Tp Player to apartment")) {
				DWORD64 args[9] = { 220529377, Features::Online::selectedPlayer, 1, -1, 1, 0, 0,0,0 };
				SCRIPT::eventur(1, args, 9, 1 << Features::Online::selectedPlayer);
			}
			Menu::Toggle("Explosion Loop", Features::exploder[Features::Online::selectedPlayer], [] { Features::explodeloop(Features::exploder[Features::Online::selectedPlayer]); });
			if (Menu::Option("Explode him")) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				FIRE::ADD_EXPLOSION(coords.x, coords.y, coords.z, 0, 1000.f, true, false, 1000.f);
			}

			if (Menu::Option("Lock Players Vehicle Doors"))
			{
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(selectedplayer);
				VEHICLE::SET_VEHICLE_DOORS_LOCKED(veh, 4);
				notifyMap("Vehicle Doors: ~HUD_COLOUR_RED~ Locked Players Vehicle Doors!");
			}
			if (Menu::Option("Explode Players Vehicle"))
			{
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(selectedplayer);
				VEHICLE::EXPLODE_VEHICLE(veh, false, true);
			}
			if (Menu::Option("Delete Car")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (PED::IS_PED_IN_ANY_VEHICLE(selectedplayer, false))
				{
					int Vehicle = PED::GET_VEHICLE_PED_IS_USING(selectedplayer);
					if (!NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Vehicle))
						while (!NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Vehicle));

					ENTITY::SET_ENTITY_AS_MISSION_ENTITY(Vehicle, 1, 1);
					VEHICLE::DELETE_VEHICLE(&Vehicle);
				}
			}
			if (Menu::Option("Airstrike Player")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				Hash airStrike = GAMEPLAY::GET_HASH_KEY("WEAPON_AIRSTRIKE_ROCKET");
				WEAPON::REQUEST_WEAPON_ASSET(airStrike, 31, false);
				while (!WEAPON::HAS_WEAPON_ASSET_LOADED(airStrike))
					WAIT(0);
				GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords.x, coords.y, coords.z + 50.f, coords.x, coords.y, coords.z, 250, 1, airStrike, playerPed, 1, 0, -1.0);
			}
			if (Menu::Option("Kick him out of Car")) {
				Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				RequestControlOfEnt(playerPed);
				AI::CLEAR_PED_TASKS_IMMEDIATELY(playerPed);
				AI::CLEAR_PED_TASKS(playerPed);
				AI::CLEAR_PED_SECONDARY_TASK(playerPed);
			}

			if (Menu::Option("Slingshot Car")) {
				NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), true));
				if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), true)));
				{
					ENTITY::APPLY_FORCE_TO_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), true), 1, 0, 0, 20, 0, 0, 0, 1, false, true, true, true, true);
				}
			}
			if (Menu::Option("Clone Player"))
			{
				PED::CLONE_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 1, 1, 1);
			}
			if (Menu::Option("Set Player into Vehicle"))
			{
				PED::SET_PED_INTO_VEHICLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 1, 1);
			}
			int clone[1000];
			int gcount = 1;
			if (Menu::Option("Spawn Bodyguard")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_RAILGUN");
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				Hash pedm = GAMEPLAY::GET_HASH_KEY("u_m_m_jesus_01");
				STREAMING::REQUEST_MODEL(pedm);
				while (!STREAMING::HAS_MODEL_LOADED(pedm))
					WAIT(0);
				int my_group = PLAYER::GET_PLAYER_GROUP(selectedplayer);
				clone[gcount] = PED::CREATE_PED(26, pedm, pos.x + rand() % 1, pos.y + rand() % 1, pos.z + 1, 0, 1, 1);
				PED::SET_PED_AS_GROUP_LEADER(selectedplayer, my_group);
				PED::SET_PED_AS_GROUP_MEMBER(clone[gcount], my_group);
				PED::SET_PED_NEVER_LEAVES_GROUP(clone[gcount], my_group);
				ENTITY::SET_ENTITY_INVINCIBLE(clone[gcount], false);
				PED::SET_PED_COMBAT_ABILITY(clone[gcount], 100);
				WEAPON::GIVE_WEAPON_TO_PED(clone[gcount], railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(clone[gcount], true);
				PED::SET_GROUP_FORMATION(my_group, 3);
				PED::SET_PED_MAX_HEALTH(clone[gcount], 5000);
				gcount++;
			}
			int eclone[1000];
			int egcount = 1;
			if (Menu::Option("Spawn Enemy")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_RAILGUN");
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				Hash pedm = GAMEPLAY::GET_HASH_KEY("u_m_m_jesus_01");
				STREAMING::REQUEST_MODEL(pedm);
				while (!STREAMING::HAS_MODEL_LOADED(pedm))
					WAIT(0);
				eclone[egcount] = PED::CREATE_PED(26, pedm, pos.x + rand() % 1, pos.y + rand() % 1, pos.z + 1, 0, 1, 1);
				ENTITY::SET_ENTITY_INVINCIBLE(eclone[egcount], false);
				PED::SET_PED_COMBAT_ABILITY(eclone[egcount], 100);
				WEAPON::GIVE_WEAPON_TO_PED(eclone[egcount], railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(eclone[egcount], true);
				AI::TASK_COMBAT_PED(eclone[egcount], selectedplayer, 1, 1);
				PED::SET_PED_ALERTNESS(eclone[egcount], 1000);
				PED::SET_PED_COMBAT_RANGE(eclone[egcount], 1000);
				egcount++;
			}

			if (Menu::Option("Cage Player")) {
				Features::trapcage(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer));
			}
			if (Menu::Option("Stunt Player")) {
				Features::trapcagee(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer));
			}
			if (PLAYER::PLAYER_PED_ID() == NETWORK::NETWORK_GET_HOST_OF_SCRIPT("freemode", -1, 0)) {

			}
		}
		break;

		



		//Select Online Player Codes 
		case onlinemenu_selected:
		{
			Menu::Title("~r~Recovery");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			Menu::MenuOption("Teleport ", playerTP);
			Menu::MenuOption("Griefing ", grief);
			Menu::MenuOption("Peaceful ", nice);}
			Menu::MenuOption("Attachments", trollattachments);
			Menu::MenuOption("ESP", playeresp);
			Menu::MenuOption("Remote ", remote);
			Menu::Toggle("Spectate Player", Features::spectate[Features::Online::selectedPlayer], [] { Features::specter(Features::spectate[Features::Online::selectedPlayer]); });
		}
		break;
		case playeresp:
		{
			Menu::Title("~r~Recovery");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			Menu::Toggle("Name Tag ESP", Features::ESP::ntesp2bool[Features::Online::selectedPlayer]);
		}
		break;

		case playerTP:
		{
			Menu::Title("~r~Recovery");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			Menu::Option("Teleport To Player", [] { Features::Online::TeleportToPlayer(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer)); });
			if (Menu::Option("Teleport Into Car")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				for (int i = -1; i < 16; i++)
				{
					if (VEHICLE::IS_VEHICLE_SEAT_FREE(veh, i))
					{
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), veh, i);
					}
				}
			}
		}
		break;

		case dropmenyoo:

		{
			Menu::Title("~r~Recovery");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			Menu::Toggle("Drop", Features::cashdrop69Toggle[Features::Online::selectedPlayer]);
			if (Menu::Int("Amount", Features::DropAmount, 1, 2500))
			{			
			Features::DropAmount = NumberKeyboard();
			}


			if (Menu::Int("Height", Features::DropHeight, 1, 50))
			{		
			Features::DropHeight = NumberKeyboard();		
			}


			if (Menu::Int("Delay", Features::DropDelay, 50, 1000))
			{		
			Features::DropDelay = NumberKeyboard();		
			}

			Menu::Int("Bags", Features::Bags, 0, 50);
			dropModelsSelect();
		}

		break;

		case trollattachments:
		{
			Menu::Title("~r~Recovery");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Plate")) { Features::attachobjects2("p_oil_slick_01"); }
			if (Menu::Option("EMP")) { Features::attachobjects2("hei_prop_heist_emp"); }
			if (Menu::Option("Orange Ball")) { Features::attachobjects2("prop_juicestand"); }
			if (Menu::Option("Weed")) { Features::attachobjects2("prop_weed_01"); }
			if (Menu::Option("Safe")) { Features::attachobjects2("p_v_43_safe_s"); }
			if (Menu::Option("Ufo")) { Features::attachobjects2("p_spinning_anus_s"); }
			if (Menu::Option("Toilet")) { Features::attachobjects2("prop_ld_toilet_01"); }
			if (Menu::Option("Christmas Tree")) { Features::attachobjects2("prop_xmas_tree_int"); }
			if (Menu::Option("Windmill")) { Features::attachobjects2("prop_windmill_01"); }
			if (Menu::Option("Radar")) { Features::attachobjects2("prop_air_bigradar"); }
			if (Menu::Option("Alien Egg")) { Features::attachobjects2("prop_alien_egg_01"); }
			if (Menu::Option("Beggers Sign")) { Features::attachobjects2("prop_beggers_sign_01"); }
			if (Menu::Option("Tramp Sign")) { Features::attachobjects2("prop_beggers_sign_02"); }
			if (Menu::Option("Egg Clock")) { Features::attachobjects2("prop_egg_clock_01"); }
			if (Menu::Option("Guitar")) { Features::attachobjects2("prop_acc_guitar_01_d1"); }
			if (Menu::Option("Duffel")) { Features::attachobjects2("prop_cs_duffel_01b"); }
			if (Menu::Option("Vending Dispenser")) { Features::attachobjects2("prop_juice_dispenser"); }
			if (Menu::Option("Boxing")) { Features::attachobjects2("prop_boxing_glove_01"); }
			if (Menu::Option("Dingy")) { Features::attachobjects2("prop_byard_dingy"); }
			if (Menu::Option("Dildo")) { Features::attachobjects2("prop_cs_dildo_01"); }
			if (Menu::Option("Dumpster")) { Features::attachobjects2("prop_cs_dumpster_01a"); }
			if (Menu::Option("vDJ")) { Features::attachobjects2("prop_dj_deck_02"); }
			if (Menu::Option("Plane")) { Features::attachobjects2("prop_dummy_plane"); }
			if (Menu::Option("Ramp")) { Features::attachobjects2("PROP_MP_RAMP_03"); }
			if (Menu::Option("Ramp2")) { Features::attachobjects2("PROP_MP_RAMP_02"); }
			if (Menu::Option("Ramp3")) { Features::attachobjects2("PROP_MP_RAMP_01"); }
			if (Menu::Option("Skip")) { Features::attachobjects2("PROP_SKIP_08A"); }
			if (Menu::Option("Beer Neon")) { Features::attachobjects2("prop_beer_neon_01"); }
			if (Menu::Option("Dummy Plane")) { Features::attachobjects2("prop_dummy_plane"); }
			if (Menu::Option("Cash Pile")) { Features::attachobjects2("prop_anim_cash_pile_02"); }
			if (Menu::Option("Asteroid")) { Features::attachobjects2("prop_asteroid_01"); }
			if (Menu::Option("Weed Palet")) { Features::attachobjects2("prop_weed_pallet"); }
			if (Menu::Option("Ferris Wheel")) { Features::attachobjects2("prop_Ld_ferris_wheel"); }
			if (Menu::Option("Donut")) { Features::attachobjects2("prop_amb_donut"); }
			if (Menu::Option("Basejump")) { Features::attachobjects2("prop_basejump_target_01"); }
			if (Menu::Option("Handbag")) { Features::attachobjects2("prop_amb_handbag_01"); }
			if (Menu::Option("Cargo")) { Features::attachobjects2("prop_air_cargo_01a"); }
			if (Menu::Option("Stunt Ramp BIG")) { Features::attachobjects2("stt_prop_ramp_multi_loop_rb"); }
			if (Menu::Option("Crashed Heli")) { Features::attachobjects2("prop_crashed_heli"); }
			if (Menu::Option("Crashed Heli 2")) { Features::attachobjects2("prop_crashed_heli_s"); }
			if (Menu::Option("Train")) { Features::attachobjects2("prop_rail_boxcar3"); }
			if (Menu::Option("Roller")) { Features::attachobjects2("prop_roller_car_02"); }
			if (Menu::Option("Para")) { Features::attachobjects2("p_cargo_chute_s"); }
			if (Menu::Option("Katana")) { Features::attachobjects2("prop_cs_katana_01"); }
			if (Menu::Option("Boxing Glove")) { Features::attachobjects2("prop_boxing_glove_01"); }
		}
		break;
		case nice:
		{
			Menu::Title("~r~Recovery");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			Menu::Toggle("Drop Him 2k (Alien Egg)", Features::savenewdrop6, [] {Features::cashdrop6(Features::savenewdrop6); });
			Menu::Toggle("Drop Him 2k (Xmax Tree)", Features::savenewdrop7, [] {Features::cashdrop7(Features::savenewdrop7); });
			Menu::Toggle("Drop Him 2k (Guitar)", Features::savenewdrop31, [] {Features::cashdrop31(Features::savenewdrop31); });
			Menu::Toggle("Drop Him 2.5k", Features::cashdrop69Toggle[Features::Online::selectedPlayer]);
			if (Menu::Option("Give All Weapons")) {
				uint Weapons[] = { 0x99B507EA, 0x678B81B1, 0x4E875F73, 0x958A4A8F, 0x440E4788, 0x84BD7BFD, 0x1B06D571, 0x5EF9FEC4, 0x22D8FE39, 0x99AEEB3B, 0x13532244, 0x2BE6766B, 0xEFE7E2DF, 0xBFEFFF6D, 0x83BF0278, 0xAF113F99, 0x9D07F764, 0x7FD62962, 0x1D073A89, 0x7846A318, 0xE284C527, 0x9D61E50F, 0x3656C8C1, 0x05FC3C11, 0x0C472FE2, 0x33058E22, 0xA284510B, 0x4DD2DC56, 0xB1CA77B1, 0x687652CE, 0x42BF8A85, 0x93E220BD, 0x2C3731D9, 0xFDBC8A50, 0x24B17070, 0x060EC506, 0x34A67B97, 0xFDBADCED, 0x23C9F95C, 0x497FACC3, 0xF9E6AA4B, 0x61012683, 0xC0A3098D, 0xD205520E, 0xBFD21232, 0x7F229F94, 0x92A27487, 0x083839C4, 0x7F7497E5, 0xA89CB99E, 0x3AABBBAA, 0xC734385A, 0x787F0BB, 0x47757124, 0xD04C944D };
				for (int i = 0; i < (sizeof(Weapons) / 4); i++) {
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), Weapons[i], 9999, 1);
					WAIT(10);
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL_MK2"), 9999, 1);
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), GAMEPLAY::GET_HASH_KEY("weapon_assaultrifle_mk2"), 9999, 1);
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), GAMEPLAY::GET_HASH_KEY("weapon_carbinerifle_mk2"), 9999, 1);
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), GAMEPLAY::GET_HASH_KEY("weapon_combatmg_mk2"), 9999, 1);
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), GAMEPLAY::GET_HASH_KEY("weapon_heavysniper_mk2"), 9999, 1);
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), GAMEPLAY::GET_HASH_KEY("weapon_smg_mk2"), 9999, 1);
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), GAMEPLAY::GET_HASH_KEY("WEAPON_SNSPISTOL_MK2"), 9999, 1);
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), GAMEPLAY::GET_HASH_KEY("WEAPON_REVOLVER_MK2"), 9999, 1);
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), GAMEPLAY::GET_HASH_KEY("WEAPON_SPECIALCARBINE_MK2"), 9999, 1);
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), GAMEPLAY::GET_HASH_KEY("WEAPON_BULLPUPRIFLE_MK2"), 9999, 1);
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), GAMEPLAY::GET_HASH_KEY("WEAPON_PUMPSHOTGUN_MK2"), 9999, 1);
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), GAMEPLAY::GET_HASH_KEY("WEAPON_MARKSMANRIFLE_MK2"), 9999, 1);
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), GAMEPLAY::GET_HASH_KEY("WEAPON_MARKSMANRIFLE_MK2"), 9999, 1);
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 0x476BF155, 9999, 1);
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 0xB62D1F67, 9999, 1);
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 0xAF3696A1, 9999, 1);
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 0x6D544C99, 9999, 1);
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 0x3813FC08, 9999, 1);
				}
			}
			if (Menu::Option("Vehicle Godmode")) {
				RequestControlOfEnt(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer));
				RequestControlOfEnt(PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer)));
				Features::cargodmode2(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer));
			}
			Menu::Toggle("Explosive Gun", Features::remoteExplobool[Features::Online::selectedPlayer], [] { Features::remoteExplo(Features::remoteExplobool[Features::Online::selectedPlayer]); });
			if (Menu::Option("Copy Outfit")) {
				Features::CopyOutfit(Features::Online::selectedPlayer);
			}
		}
		break;
		case grief:
		{
			Menu::Title("Player List");
			Menu::MainTitle("~c~[SHADE V1.2]                             ");
			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(offradardpl, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 0.3, 0.3, 0.3, r1, g1, b1, 200, 1, 1, 1, 0, 0, 0, 0);
			}
			if (Menu::Option("Valkyrie Cannon")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				FIRE::ADD_EXPLOSION(pos.x, pos.y, pos.z - 1, 38, 0.5f, true, false, 0.0f);
			}

			if (Menu::Int("Bullet Type", Menu::Settings::bullet, 0, 38))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Menu::Settings::bullet = NumberKeyboard();
				}

			}
			if (Menu::Float("Bullet Scale", Menu::Settings::bulletp, 0.0f, 100.0f));

			if (Menu::Option("Bullet Cannon ~g~Visible")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				FIRE::ADD_EXPLOSION(pos.x, pos.y, pos.z - 1, Menu::Settings::bullet, Menu::Settings::bulletp, true, false, 0.0f);
			}

			if (Menu::Option("Bullet Cannon ~r~Invisible")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				FIRE::ADD_EXPLOSION(pos.x, pos.y, pos.z - 1, Menu::Settings::bullet, Menu::Settings::bulletp, true, true, 0.0f);
			}
			if (Menu::Option("Blame Player"))
			{

				blame();

			}
			Menu::Toggle("Water Loop", Features::playerwaterloop[Features::Online::selectedPlayer], [] { Features::WaterLoop(Features::playerwaterloop[Features::Online::selectedPlayer]); });
			Menu::Toggle("Fire Loop", Features::playerfireloop[Features::Online::selectedPlayer], [] { Features::FireLoop(Features::playerfireloop[Features::Online::selectedPlayer]); });
			Menu::Toggle("Fuck Handling", Features::fuckedhandling[Features::Online::selectedPlayer], [] { Features::fuckhandling(Features::fuckedhandling[Features::Online::selectedPlayer]); });
			Menu::Toggle("Shake Cam", Features::camshaker[Features::Online::selectedPlayer], [] { Features::shakecam(Features::camshaker[Features::Online::selectedPlayer]); });
			if (Menu::Option("Send Player Police Attackers"))
			{

				Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(iPed, 0);
				if (!ENTITY::DOES_ENTITY_EXIST(iPed)) return;
				Hash guysex = GAMEPLAY::GET_HASH_KEY("s_m_y_cop_01");
				STREAMING::REQUEST_MODEL(guysex);
				while (!STREAMING::HAS_MODEL_LOADED(guysex))
					WAIT(0);
				int createdGuySex = PED::CREATE_PED(26, guysex, pCoords.x, pCoords.y, pCoords.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdGuySex, false);
				int vehmodel = GAMEPLAY::GET_HASH_KEY("POLICE3");
				STREAMING::REQUEST_MODEL(vehmodel);
				while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
				Vehicle veh = VEHICLE::erstelle_fahr(vehmodel, pCoords.x, pCoords.y, pCoords.z, 0.0, 1, 1);
				VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL");
				WEAPON::GIVE_WEAPON_TO_PED(createdGuySex, railgun, railgun, 9999, 9999);
				PED::SET_PED_INTO_VEHICLE(createdGuySex, veh, -1);
				AI::TASK_COMBAT_PED(createdGuySex, iPed, 1, 1);
				ENTITY::SET_ENTITY_INVINCIBLE(createdGuySex, false);
				PED::SET_PED_COMBAT_ABILITY(createdGuySex, 100);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdGuySex, true);
				AI::TASK_COMBAT_PED(createdGuySex, iPed, 1, 1);
				PED::SET_PED_AS_ENEMY(createdGuySex, 1);
				PED::SET_PED_COMBAT_RANGE(createdGuySex, 1000);
				PED::SET_PED_KEEP_TASK(createdGuySex, true);
				PED::SET_PED_AS_COP(createdGuySex, 1000);
				PED::SET_PED_ALERTNESS(createdGuySex, 1000);


			}
			if (Menu::Option("Polo Dance")) {

				const int ElementAmount = 10;
				const int ArrSize = ElementAmount * 2 + 2;
				Ped *peds = new Ped[ArrSize];
				peds[0] = ElementAmount;
				int PedFound = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), peds, -1);
				for (int i = 0; i < PedFound; i++)
				{
					int OffsetID = i * 2 + 2;
					RequestControlOfEnt(peds[OffsetID]);
					if (ENTITY::DOES_ENTITY_EXIST(peds[OffsetID]) && PLAYER::PLAYER_PED_ID() != peds[OffsetID])
					{
						STREAMING::REQUEST_ANIM_DICT("mini@strip_club@pole_dance@pole_dance1");
						if (STREAMING::HAS_ANIM_DICT_LOADED(("mini@strip_club@pole_dance@pole_dance1")))
						{
							AI::TASK_PLAY_ANIM((peds[OffsetID]), "mini@strip_club@pole_dance@pole_dance1", "pd_dance_01", 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
						}
					}
				}

			}
			if (Menu::Option("Tp Player to apartment")) {
				DWORD64 args[9] = { 220529377, Features::Online::selectedPlayer, 1, -1, 1, 0, 0,0,0 };
				SCRIPT::eventur(1, args, 9, 1 << Features::Online::selectedPlayer);
			}
			Menu::Toggle("Explosion Loop", Features::exploder[Features::Online::selectedPlayer], [] { Features::explodeloop(Features::exploder[Features::Online::selectedPlayer]); });
			if (Menu::Option("Explode him")) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				FIRE::ADD_EXPLOSION(coords.x, coords.y, coords.z, 0, 1000.f, true, false, 1000.f);
			}

			if (Menu::Option("Lock Players Vehicle Doors"))
			{
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(selectedplayer);
				VEHICLE::SET_VEHICLE_DOORS_LOCKED(veh, 4);
				notifyMap("Vehicle Doors: ~HUD_COLOUR_RED~ Locked Players Vehicle Doors!");
			}
			if (Menu::Option("Explode Players Vehicle"))
			{
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(selectedplayer);
				VEHICLE::EXPLODE_VEHICLE(veh, false, true);
			}
			if (Menu::Option("Delete Car")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (PED::IS_PED_IN_ANY_VEHICLE(selectedplayer, false))
				{
					int Vehicle = PED::GET_VEHICLE_PED_IS_USING(selectedplayer);
					if (!NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Vehicle))
						while (!NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Vehicle));

					ENTITY::SET_ENTITY_AS_MISSION_ENTITY(Vehicle, 1, 1);
					VEHICLE::DELETE_VEHICLE(&Vehicle);
				}
			}
			if (Menu::Option("Airstrike Player")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				Hash airStrike = GAMEPLAY::GET_HASH_KEY("WEAPON_AIRSTRIKE_ROCKET");
				WEAPON::REQUEST_WEAPON_ASSET(airStrike, 31, false);
				while (!WEAPON::HAS_WEAPON_ASSET_LOADED(airStrike))
					WAIT(0);
				GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords.x, coords.y, coords.z + 50.f, coords.x, coords.y, coords.z, 250, 1, airStrike, playerPed, 1, 0, -1.0);
			}
			if (Menu::Option("Kick him out of Car")) {
				Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				RequestControlOfEnt(playerPed);
				AI::CLEAR_PED_TASKS_IMMEDIATELY(playerPed);
				AI::CLEAR_PED_TASKS(playerPed);
				AI::CLEAR_PED_SECONDARY_TASK(playerPed);
			}

			if (Menu::Option("Slingshot Car")) {
				NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), true));
				if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), true)));
				{
					ENTITY::APPLY_FORCE_TO_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), true), 1, 0, 0, 20, 0, 0, 0, 1, false, true, true, true, true);
				}
			}
			if (Menu::Option("Clone Player"))
			{
				PED::CLONE_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 1, 1, 1);
			}
			if (Menu::Option("Set Player into Vehicle"))
			{
				PED::SET_PED_INTO_VEHICLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 1, 1);
			}
			int clone[1000];
			int gcount = 1;
			if (Menu::Option("Spawn Bodyguard")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_RAILGUN");
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				Hash pedm = GAMEPLAY::GET_HASH_KEY("u_m_m_jesus_01");
				STREAMING::REQUEST_MODEL(pedm);
				while (!STREAMING::HAS_MODEL_LOADED(pedm))
					WAIT(0);
				int my_group = PLAYER::GET_PLAYER_GROUP(selectedplayer);
				clone[gcount] = PED::CREATE_PED(26, pedm, pos.x + rand() % 1, pos.y + rand() % 1, pos.z + 1, 0, 1, 1);
				PED::SET_PED_AS_GROUP_LEADER(selectedplayer, my_group);
				PED::SET_PED_AS_GROUP_MEMBER(clone[gcount], my_group);
				PED::SET_PED_NEVER_LEAVES_GROUP(clone[gcount], my_group);
				ENTITY::SET_ENTITY_INVINCIBLE(clone[gcount], false);
				PED::SET_PED_COMBAT_ABILITY(clone[gcount], 100);
				WEAPON::GIVE_WEAPON_TO_PED(clone[gcount], railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(clone[gcount], true);
				PED::SET_GROUP_FORMATION(my_group, 3);
				PED::SET_PED_MAX_HEALTH(clone[gcount], 5000);
				gcount++;
			}
			int eclone[1000];
			int egcount = 1;
			if (Menu::Option("Spawn Enemy")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_RAILGUN");
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				Hash pedm = GAMEPLAY::GET_HASH_KEY("u_m_m_jesus_01");
				STREAMING::REQUEST_MODEL(pedm);
				while (!STREAMING::HAS_MODEL_LOADED(pedm))
					WAIT(0);
				eclone[egcount] = PED::CREATE_PED(26, pedm, pos.x + rand() % 1, pos.y + rand() % 1, pos.z + 1, 0, 1, 1);
				ENTITY::SET_ENTITY_INVINCIBLE(eclone[egcount], false);
				PED::SET_PED_COMBAT_ABILITY(eclone[egcount], 100);
				WEAPON::GIVE_WEAPON_TO_PED(eclone[egcount], railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(eclone[egcount], true);
				AI::TASK_COMBAT_PED(eclone[egcount], selectedplayer, 1, 1);
				PED::SET_PED_ALERTNESS(eclone[egcount], 1000);
				PED::SET_PED_COMBAT_RANGE(eclone[egcount], 1000);
				egcount++;
			}

			if (Menu::Option("Cage Player")) {
				Features::trapcage(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer));
			}


		}
		break;
		case remote:
		{
			Menu::Title("~r~Recovery");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::Toggle("Freeze", Features::freezed[Features::Online::selectedPlayer], [] { Features::Freezer(Features::freezed[Features::Online::selectedPlayer]); });

			Menu::Toggle("Sound Spam (Yacht)", Features::soundYacht, [] {Features::Yacht(Features::soundYacht); });

			Menu::Toggle("Sound Spam (Office)", Features::soundOffice, [] {Features::Transaktion(Features::soundOffice); });

			Menu::Toggle("Sound Spam (Clubhouse)", Features::soundClubhouse, [] {Features::Clubhouse(Features::soundClubhouse); });

			Menu::Toggle("Sound Spam (Company Garage)", Features::soundCompany, [] {Features::Company(Features::soundCompany); });

			Menu::Toggle("Sound Spam (Tuning Workshop)", Features::soundTuning, [] {Features::Tuning(Features::soundTuning); });
			if (Menu::Option("CEO Kick"))
			{
				Features::ceokick(Features::Online::selectedPlayer);
			}
			if (Menu::Option("Kick From Session ~c~[STEALTH]"))
			{
				Features::kicknibba(Features::Online::selectedPlayer);
			}
			if (Menu::Option("Crash [CLONE]")) {
				const int maxPeds = 225;
				Ped ClonedPed[maxPeds];
				Ped playerPed = PLAYER::PLAYER_PED_ID();

				Player ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vector3 selectedPedPosition = ENTITY::GET_ENTITY_COORDS(ped, FALSE);
				Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(playerPed, FALSE);

				if (GAMEPLAY::GET_DISTANCE_BETWEEN_COORDS(playerPosition.x, playerPosition.y, playerPosition.z, selectedPedPosition.x, selectedPedPosition.y, selectedPedPosition.z, false) > 350.0f)
				{
					if (PED::IS_PED_IN_ANY_VEHICLE(PED::GET_VEHICLE_PED_IS_IN(ped, 1), FALSE))
					{
						AI::CLEAR_PED_TASKS_IMMEDIATELY(ped);
						AI::CLEAR_PED_SECONDARY_TASK(ped);
					}
					notifyMap("~r~Wait a moment, player is being crashed....");
					for (int i = 0; i < maxPeds; i++)
					{

						ClonedPed[i] = PED::CLONE_PED(ped, ENTITY::GET_ENTITY_HEADING(playerPed), 1, 1);
						WAIT(0);
						Features::RequestingControl(ClonedPed[i]);
						WAIT(0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(ClonedPed[i], ped, PED::GET_PED_BONE_INDEX(ped, SKEL_ROOT), 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, false, false, false, false, 2, true);
						AI::CLEAR_PED_TASKS_IMMEDIATELY(ped);
						WAIT(5);
					}
					if (ENTITY::DOES_ENTITY_EXIST(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(ped)))
					{
						notifyMap("~r~CRASH ATTEMPT 2 IS STARTING!");
						for (int i = 0; i < maxPeds; i++)
						{
							ClonedPed[i] = PED::CLONE_PED(ped, ENTITY::GET_ENTITY_HEADING(playerPed), 1, 1);
							WAIT(0);
							Features::RequestingControl(ClonedPed[i]);
							WAIT(0);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(ClonedPed[i], ped, PED::GET_PED_BONE_INDEX(ped, SKEL_ROOT), 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, false, false, false, false, 2, true);
							AI::CLEAR_PED_TASKS_IMMEDIATELY(ped);
							WAIT(3);
						}
					}
					notifyMap("~g~Crashed!");
					for (int i = 0; i < maxPeds; i++)
					{
						WAIT(10);
						Features::RequestingControl(ClonedPed[i]);
						ENTITY::SET_PED_AS_NO_LONGER_NEEDED(&ClonedPed[i]);
						PED::DELETE_PED(&ClonedPed[i]);
						AUDIO::PLAY_SOUND_FRONTEND(-1, "ScreenFlash", "WastedSounds", 0);
					}
				}
				else
				{
					notifyMap("~r~Too Close To The Player For An Crash Attempt.");
				}
			}
			if (Menu::Option("Force Mission")) {

				DWORD64 args[2] = { -15432926, Features::Online::selectedPlayer };
				SCRIPT::eventur(1, args, 2, 1 << Features::Online::selectedPlayer);


			}

			if (Menu::Option("~w~Show GTAScreen ")) {


				DWORD64 args[4] = { -181444979, Features::Online::selectedPlayer, 0, 0 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);


			}

			if (Menu::Option("~w~Non Host Kick")) {

				Player player = Features::Online::selectedPlayer;

				DWORD64 args[3] = { -120668417 , player, 48 };
				SCRIPT::eventur(1, args, 3, 1 << player);


			}
			if (Menu::Option("CEO BAN PLAYER")) {
				DWORD64 args[3] = { CEO_BAN , Features::Online::selectedPlayer, 1 };
				SCRIPT::eventur(1, args, 3, 1 << Features::Online::selectedPlayer);
			}
			if (Menu::Option("~w~Non Host Kick to Single Player")) {

				DWORD64 args[4] = { 769347061, Features::Online::selectedPlayer, 0, 0 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);
			}

			if (Menu::Option("~w~Send Banner ")) {


				uint64_t args[3] = { 713068249, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(player), 1009196241 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);


			}

			if (Menu::Option("Force Mission Message")) {

				DWORD64 args[4] = { -1571039706, Features::Online::selectedPlayer, 0, 0 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);


			}
			if (Menu::Option("~w~Sound Spam (Yacht) ")) {

				DWORD64 args[3] = { 4119492672, Features::Online::selectedPlayer, 1 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);
			}

			if (Menu::Option("~w~Sound Spam (Office) ")) {

				DWORD64 args[3] = { 4119492672, Features::Online::selectedPlayer, 2 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);
			}


			if (Menu::Option("~w~Sound Spam (Clubhouse) ")) {

				DWORD64 args[3] = { 4119492672, Features::Online::selectedPlayer, 3 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);
			}

			if (Menu::Option("~w~Sound Spam (Company Garage)")) {

				DWORD64 args[3] = { 4119492672, Features::Online::selectedPlayer, 6 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);
			}

			if (Menu::Option("~w~Sound Spam (Tuning Workshop) ")) {

				DWORD64 args[3] = { 4119492672, Features::Online::selectedPlayer, 7 };
				SCRIPT::eventur(1, args, 4, 1 << Features::Online::selectedPlayer);
			}


			if (Menu::Option("Show Error")) {
				Features::trasactionSpam(Features::Online::selectedPlayer);
			}
			if (Menu::Option("Crash")) {
				Features::InstantCrash(Features::Online::selectedPlayer);
			}


			if (Menu::Option("Gentle Kick from Vehicle")) {
				Features::gentleKick(Features::Online::selectedPlayer);
			}


			if (Menu::Option("Send Cops")) {
				Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(iPed, 0);
				if (!ENTITY::DOES_ENTITY_EXIST(iPed)) return;
				Hash guysex = GAMEPLAY::GET_HASH_KEY("s_m_y_cop_01");
				STREAMING::REQUEST_MODEL(guysex);
				while (!STREAMING::HAS_MODEL_LOADED(guysex))
					WAIT(0);
				int createdGuySex = PED::CREATE_PED(26, guysex, pCoords.x, pCoords.y, pCoords.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdGuySex, false);
				int vehmodel = GAMEPLAY::GET_HASH_KEY("POLICE3");
				STREAMING::REQUEST_MODEL(vehmodel);
				while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
				Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x, pCoords.y, pCoords.z, 0.0, 1, 1);
				VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL");
				WEAPON::GIVE_WEAPON_TO_PED(createdGuySex, railgun, railgun, 9999, 9999);
				PED::SET_PED_INTO_VEHICLE(createdGuySex, veh, -1);
				AI::TASK_COMBAT_PED(createdGuySex, iPed, 1, 1);
				ENTITY::SET_ENTITY_INVINCIBLE(createdGuySex, false);
				PED::SET_PED_COMBAT_ABILITY(createdGuySex, 100);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdGuySex, true);
				AI::TASK_COMBAT_PED(createdGuySex, iPed, 1, 1);
				PED::SET_PED_AS_ENEMY(createdGuySex, 1);
				PED::SET_PED_COMBAT_RANGE(createdGuySex, 1000);
				PED::SET_PED_KEEP_TASK(createdGuySex, true);
				PED::SET_PED_AS_COP(createdGuySex, 1000);
				PED::SET_PED_ALERTNESS(createdGuySex, 1000);
			}


			if (Menu::Option("Send Mad Niko")) {
				Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(iPed, 0);
				if (!ENTITY::DOES_ENTITY_EXIST(iPed)) return;
				Hash guysex = GAMEPLAY::GET_HASH_KEY("MP_M_Niko_01");
				STREAMING::REQUEST_MODEL(guysex);
				while (!STREAMING::HAS_MODEL_LOADED(guysex))
					WAIT(0);
				int createdGuySex = PED::CREATE_PED(26, guysex, pCoords.x, pCoords.y, pCoords.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdGuySex, false);
				int vehmodel = GAMEPLAY::GET_HASH_KEY("primo2");
				STREAMING::REQUEST_MODEL(vehmodel);
				while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
				Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x, pCoords.y, pCoords.z, 0.0, 1, 1);
				VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_SPECIALCARBINE");
				WEAPON::GIVE_WEAPON_TO_PED(createdGuySex, railgun, railgun, 9999, 9999);
				PED::SET_PED_INTO_VEHICLE(createdGuySex, veh, -1);
				AI::TASK_COMBAT_PED(createdGuySex, iPed, 1, 1);
				ENTITY::SET_ENTITY_INVINCIBLE(createdGuySex, false);
				PED::SET_PED_COMBAT_ABILITY(createdGuySex, 100);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdGuySex, true);
				AI::TASK_COMBAT_PED(createdGuySex, iPed, 1, 1);
				PED::SET_PED_AS_ENEMY(createdGuySex, 1);
				PED::SET_PED_COMBAT_RANGE(createdGuySex, 1000);
				PED::SET_PED_KEEP_TASK(createdGuySex, true);
				PED::SET_PED_AS_COP(createdGuySex, 1000);
				PED::SET_PED_ALERTNESS(createdGuySex, 1000);
			}

		

		}
		break;

		case cstut:
		{
			Menu::Title("~r~Recovery");
			Menu::MainTitle("~c~[Shade 1.0]                             ");


			if (Menu::Option("~g~Set Money earn in Jobs")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("MPPLY_TOTAL_EVC"), val, 1);
			}

			if (Menu::Option("~g~Set total earned money")) {
				int temp1 = 0;
				temp1 = NumberKeyboard();
				STATS::STAT_SET_INT($("MPPLY_TOTAL_EVC"), temp1, 1);
			}

			if (Menu::Option("~g~Set Report Strength")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("MPPLY_REPORT_STRENGTH"), val, 1);
			}

			if (Menu::Option("~g~Custom Deaths")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("MPPLY_DEATHS_PLAYER"), val, 1);
			}


			if (Menu::Option("~g~Set Commend Strength")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("MPPLY_COMMEND_STRENGTH"), val, 1);
			}


			if (Menu::Option("~g~Set Friendly Stuff")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("MPPLY_FRIENDLY"), val, 1);
			}


			if (Menu::Option("~g~Set Helpfull Stuff")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("MPPLY_HELPFUL"), val, 1);
			}

			if (Menu::Option("~g~Set Griefing")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("MPPLY_GRIEFING"), val, 1);
			}


			if (Menu::Option("~g~Set Offensive Language")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("MPPLY_OFFENSIVE_LANGUAGE"), val, 1);
			}


			if (Menu::Option("~g~Set Offensive UGC")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("MPPLY_OFFENSIVE_UGC"), val, 1);
			}


			if (Menu::Option("~g~Set VC Hate")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("MPPLY_VC_HATE"), val, 1);
			}


			if (Menu::Option("~g~Set Gameplay Exploits")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("MPPLY_GAME_EXPLOITS"), val, 1);
			}


			if (Menu::Option("~g~Set Inspunished")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("MPPLY_ISPUNISHED"), val, 1);
			}


			if (Menu::Option("~g~Set Badsports")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_1ST_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_2ND_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_3RD_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_4TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_5TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_6TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_7TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_8TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_9TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_10TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_1ST_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_2ND_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_3RD_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_4TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_5TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_6TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_7TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_8TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_9TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_11TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_1ST_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_2ND_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_3RD_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_4TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_5TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_6TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_7TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_8TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_9TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_11TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_1ST_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_2ND_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_3RD_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_4TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_5TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_6TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_7TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_8TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_9TH_OFFENCE"), val, 1);
				STATS::STAT_SET_INT($("BADSPORT_NUMDAYS_11TH_OFFENCE"), val, 1);
				STATS::STAT_SET_FLOAT($("BADSPORT_RESET_MINUTES"), val, 1);
				STATS::STAT_SET_FLOAT($("BADSPORT_RESET_MINUTES"), val, 1);
				STATS::STAT_SET_FLOAT($("MPPLY_OVERALL_BADSPORT"), val, 1);
				STATS::STAT_SET_BOOL($("MPPLY_CHAR_IS_BADSPORT"), val, 1);
				STATS::STAT_SET_INT($("MPPLY_BECAME_BADSPORT_NUM"), val, 1);
				STATS::STAT_SET_INT($("BAD_SPORT_BITSET"), val, 1);
				STATS::STAT_SET_INT($("CHEAT_BITSET"), val, 1);



			}




			if (Menu::Option("~g~Set Won Races")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("AWD_RACES_WON"), val, 1);
				STATS::STAT_SET_INT($("AWD_FM_GTA_RACES_WON"), val, 1);
			}
			if (Menu::Option("~g~Set Armwrestling Wins")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("AWD_NO_ARMWRESTLING_WINS"), val, 1);
			}
			if (Menu::Option("~g~Set Golf Wins")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("AWD_FM_GOLF_WON"), val, 1);
			}
			if (Menu::Option("~g~Set Shooting Range Wins")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("AWD_FM_SHOOTRANG_TG_WON"), val, 1);
				STATS::STAT_SET_INT($("AWD_FM_SHOOTRANG_RT_WON"), val, 1);
				STATS::STAT_SET_INT($("AWD_FM_SHOOTRANG_CT_WON"), val, 1);
				STATS::STAT_SET_INT($("AWD_FM_SHOOTRANG_GRAN_WON"), val, 1);
			}
			if (Menu::Option("~g~Set Tennis Wins")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("AWD_FM_TENNIS_WON"), val, 1);
				STATS::STAT_SET_INT($("MPPLY_TENNIS_MATCHES_WON"), val, 1);
			}
			if (Menu::Option("~g~Weapons")) {
				int val = NumberKeyboard();

				STATS::STAT_SET_INT($("MOLOTOV_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("CMBTPISTOL_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("PISTOL50_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("APPISTOL_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("MICROSMG_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("SMG_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("ASLTSMG_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("ASLTRIFLE_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("CRBNRIFLE_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("ADVRIFLE_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("MG_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("CMBTMG_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("ASLTMG_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("PUMP_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("SAWNOFF_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("BULLPUP_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("ASLTSHTGN_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("SNIPERRFL_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("HVYSNIPER_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("GRNLAUNCH_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("RPG_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("MINIGUNS_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("GRENADE_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("SMKGRENADE_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("STKYBMB_ENEMY_KILLS"), val, 1);
				STATS::STAT_SET_INT($("MOLOTOV_ENEMY_KILLS"), val, 1);
			}

		}
		break;

		case vstut:
		{
			Menu::Title("~r~Viw Stats");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			////Menu::Break("View Stats");

			int reportkek;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_GAME_EXPLOITS"), &reportkek, -1);
			const auto& reportstringkek = "Gameplay Exploits: "s + std::to_string(reportkek);
			Menu::Option(reportstringkek.c_str());

			int reportkek1;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_REPORT_STRENGTH"), &reportkek1, -1);
			const auto& reportstringkek1 = "Report Strength: "s + std::to_string(reportkek1);
			Menu::Option(reportstringkek1.c_str());

			int reportkek2;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_COMMEND_STRENGTH"), &reportkek2, -1);
			const auto& reportstringkek2 = "Commend Strength: "s + std::to_string(reportkek2);
			Menu::Option(reportstringkek2.c_str());

			int reportkek3;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_FRIENDLY"), &reportkek3, -1);
			const auto& reportstringkek3 = "Friendly Stuff: "s + std::to_string(reportkek3);
			Menu::Option(reportstringkek3.c_str());

			int reportkek4;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_HELPFUL"), &reportkek4, -1);
			const auto& reportstringkek4 = "Helpfull Stuff: "s + std::to_string(reportkek4);
			Menu::Option(reportstringkek4.c_str());

			int reportkek5;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_GRIEFING"), &reportkek5, -1);
			const auto& reportstringkek5 = "Griefing: "s + std::to_string(reportkek5);
			Menu::Option(reportstringkek5.c_str());

			int reportkek6;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_OFFENSIVE_LANGUAGE"), &reportkek6, -1);
			const auto& reportstringkek6 = "Offensive Language: "s + std::to_string(reportkek6);
			Menu::Option(reportstringkek6.c_str());

			int reportkek7;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_OFFENSIVE_UGC"), &reportkek7, -1);
			const auto& reportstringkek7 = "Offensive UGC: "s + std::to_string(reportkek7);
			Menu::Option(reportstringkek7.c_str());

			int reportkek8;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_VC_HATE"), &reportkek8, -1);
			const auto& reportstringkek8 = "VC Hate: "s + std::to_string(reportkek8);
			Menu::Option(reportstringkek8.c_str());

			int reportkek9;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_ISPUNISHED"), &reportkek9, -1);
			const auto& reportstringkek9 = "Inspunished: "s + std::to_string(reportkek9);
			Menu::Option(reportstringkek9.c_str());

			int reportkek10;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_KILLS_PLAYERS"), &reportkek10, -1);
			const auto& reportstringkek10 = "Kills: "s + std::to_string(reportkek10);
			Menu::Option(reportstringkek10.c_str());

			int reportkek11;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("AWD_RACES_WON"), &reportkek11, -1);
			const auto& reportstringkek11 = "Won Races: "s + std::to_string(reportkek11);
			Menu::Option(reportstringkek11.c_str());

			int reportkek12;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("AWD_NO_ARMWRESTLING_WINS"), &reportkek12, -1);
			const auto& reportstringkek12 = "Armwrestling Wins: "s + std::to_string(reportkek12);
			Menu::Option(reportstringkek12.c_str());

			int reportkek13;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("AWD_FM_DM_WINS"), &reportkek13, -1);
			const auto& reportstringkek13 = "Deathmatch Wins: "s + std::to_string(reportkek13);
			Menu::Option(reportstringkek13.c_str());

			int reportkek14;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_TOTAL_DEATHMATCH_LOST"), &reportkek14, -1);
			const auto& reportstringkek14 = "Deathmatch Losses: "s + std::to_string(reportkek14);
			Menu::Option(reportstringkek14.c_str());


			int reportkek15;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("AWD_FM_DM_TOTALKILLS"), &reportkek15, -1);
			const auto& reportstringkek15 = "Death Match Kills: "s + std::to_string(reportkek15);
			Menu::Option(reportstringkek15.c_str());

			int reportkek16;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_DM_TOTAL_DEATHS"), &reportkek16, -1);
			const auto& reportstringkek16 = "Death Match Deaths: "s + std::to_string(reportkek16);
			Menu::Option(reportstringkek16.c_str());

			int reportkek17;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("AWD_FM_GOLF_WON"), &reportkek17, -1);
			const auto& reportstringkek17 = "Golf Wins: "s + std::to_string(reportkek17);
			Menu::Option(reportstringkek17.c_str());

			int reportkek18;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("AWD_FM_SHOOTRANG_TG_WON"), &reportkek18, -1);
			const auto& reportstringkek18 = "Range Wins: "s + std::to_string(reportkek18);
			Menu::Option(reportstringkek18.c_str());

			int reportkek19;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("AWD_FM_TENNIS_WON"), &reportkek19, -1);
			const auto& reportstringkek19 = "Tennis Wins: "s + std::to_string(reportkek19);
			Menu::Option(reportstringkek19.c_str());

			int reportkek20;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("AWD_FM_TENNIS_WON"), &reportkek20, -1);
			const auto& reportstringkek20 = "Tennis Wins: "s + std::to_string(reportkek20);
			Menu::Option(reportstringkek20.c_str());

		}
		break;

		case stut:
		{
			Menu::Title("~r~Recovery");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::MenuOption("Change Stats", cstut);
			Menu::MenuOption("View Stats", vstut);

		}
		break;


		case recover:
		{
			Menu::Title("~r~Recovery");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::MenuOption("Money Options", stealth);
			Menu::MenuOption("ATM Options", atm);
			Menu::MenuOption("Unlocks", unlockall);
			Menu::MenuOption("Extended Stat Editor", extendedstat);
			Menu::MenuOption("Rp Options", rp);
			Menu::MenuOption("Bunker Research", bunkerresearch);
			Menu::MenuOption("KD EDITOR", KDKIP);
			Menu::MenuOption("Change Stats", cstut);
			Menu::MenuOption("View Stats", vstut);
		}
		break;

		case bunkerresearch:
		{
			Menu::Title("~r~Recovery");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (!Features::rchar) {
				switch (Features::researchId(0)) {
				case 0: Menu::Option("Researching (Char1): APC SAM turret"); break;
				case 1: Menu::Option("Researching (Char1): Ballistic armor"); break;
				case 2: Menu::Option("Researching (Char1): Halftrack quad turret"); break;
				case 3: Menu::Option("Researching (Char1): Tampa Double minigun"); break;
				case 4: Menu::Option("Researching (Char1): Tampa Rear mortar"); break;
				case 5: Menu::Option("Researching (Char1): Tampa missiles"); break;
				case 6: Menu::Option("Researching (Char1): Tampa armor"); break;
				case 7: Menu::Option("Researching (Char1): Buggy grenadelauncher"); break;
				case 8: Menu::Option("Researching (Char1): Buggy minigun"); break;
				case 9: Menu::Option("Researching (Char1): Insurgent minigun"); break;
				case 10: Menu::Option("Researching (Char1): Insurgent armor"); break;
				case 11: Menu::Option("Researching (Char1): Technical minigun"); break;
				case 12: Menu::Option("Researching (Char1): Technical ram bar"); break;
				case 13: Menu::Option("Researching (Char1): Technical brute bar"); break;
				case 14: Menu::Option("Researching (Char1): Technical armor"); break;
				case 15: Menu::Option("Researching (Char1): Oppressor missiles"); break;
				case 16: Menu::Option("Researching (Char1): Fractal camo"); break;
				case 17: Menu::Option("Researching (Char1): Digital camo"); break;
				case 18: Menu::Option("Researching (Char1): Geometric camo"); break;
				case 19: Menu::Option("Researching (Char1): Nature camo"); break;
				case 20: Menu::Option("Researching (Char1): Naval camo"); break;
				case 21: Menu::Option("Researching (Char1): AA-trailer gun"); break;
				case 22: Menu::Option("Researching (Char1): AA-trailer missiles"); break;
				case 23: Menu::Option("Researching (Char1): MOC rear turrets"); break;
				case 24: Menu::Option("Researching (Char1): Incendiary ammo"); break;
				case 25: Menu::Option("Researching (Char1): Hollow point ammo"); break;
				case 26: Menu::Option("Researching (Char1): Armor piercing ammo"); break;
				case 27: Menu::Option("Researching (Char1): Full metal ammo"); break;
				case 28: Menu::Option("Researching (Char1): Explosive ammo"); break;
				case 29: Menu::Option("Researching (Char1): Pistol scope"); break;
				case 30: Menu::Option("Researching (Char1): Pistol compensator"); break;
				case 31: Menu::Option("Researching (Char1): SMG scope"); break;
				case 32: Menu::Option("Researching (Char1): SMG heavy barrel"); break;
				case 33: Menu::Option("Researching (Char1): Sniper nightvision scope"); break;
				case 34: Menu::Option("Researching (Char1): Sniper thermal scope"); break;
				case 35: Menu::Option("Researching (Char1): Sniper heavy barrel"); break;
				case 36: Menu::Option("Researching (Char1): MG scope"); break;
				case 37: Menu::Option("Researching (Char1): MG heavy barrel"); break;
				case 38: Menu::Option("Researching (Char1): Assaultrifle scope"); break;
				case 39: Menu::Option("Researching (Char1): Assaultrifle heavy barrel"); break;
				case 40: Menu::Option("Researching (Char1): Carbine scope"); break;
				case 41: Menu::Option("Researching (Char1): Carbine heavy barrel"); break;
				case 42: Menu::Option("Researching (Char1): Proxymity mines"); break;
				case 43: Menu::Option("Researching (Char1): Brush weaponcamo"); break;
				case 44: Menu::Option("Researching (Char1): Skull weaponcamo"); break;
				case 45: Menu::Option("Researching (Char1): Sessanta weaponcamo"); break;
				case 46: Menu::Option("Researching (Char1): Perseus weaponcamo"); break;
				case 47: Menu::Option("Researching (Char1): Leopard weaponcamo"); break;
				case 48: Menu::Option("Researching (Char1): Zebra weaponcamo"); break;
				case 49: Menu::Option("Researching (Char1): Geometric weaponcamo"); break;
				case 50: Menu::Option("Researching (Char1): Boom weaponcamo"); break;
				}
			}
			else {
				switch (Features::researchId(1)) {
				case 0: Menu::Option("Researching (Char2): APC SAM turret"); break;
				case 1: Menu::Option("Researching (Char2): Ballistic armor"); break;
				case 2: Menu::Option("Researching (Char2): Halftrack quad turret"); break;
				case 3: Menu::Option("Researching (Char2): Tampa Double minigun"); break;
				case 4: Menu::Option("Researching (Char2): Tampa Rear mortar"); break;
				case 5: Menu::Option("Researching (Char2): Tampa missiles"); break;
				case 6: Menu::Option("Researching (Char2): Tampa armor"); break;
				case 7: Menu::Option("Researching (Char2): Buggy grenadelauncher"); break;
				case 8: Menu::Option("Researching (Char2): Buggy minigun"); break;
				case 9: Menu::Option("Researching (Char2): Insurgent minigun"); break;
				case 10: Menu::Option("Researching (Char2): Insurgent armor"); break;
				case 11: Menu::Option("Researching (Char2): Technical minigun"); break;
				case 12: Menu::Option("Researching (Char2): Technical ram bar"); break;
				case 13: Menu::Option("Researching (Char2): Technical brute bar"); break;
				case 14: Menu::Option("Researching (Char2): Technical armor"); break;
				case 15: Menu::Option("Researching (Char2): Oppressor missiles"); break;
				case 16: Menu::Option("Researching (Char2): Fractal camo"); break;
				case 17: Menu::Option("Researching (Char2): Digital camo"); break;
				case 18: Menu::Option("Researching (Char2): Geometric camo"); break;
				case 19: Menu::Option("Researching (Char2): Nature camo"); break;
				case 20: Menu::Option("Researching (Char2): Naval camo"); break;
				case 21: Menu::Option("Researching (Char2): AA-trailer gun"); break;
				case 22: Menu::Option("Researching (Char2): AA-trailer missiles"); break;
				case 23: Menu::Option("Researching (Char2): MOC rear turrets"); break;
				case 24: Menu::Option("Researching (Char2): Incendiary ammo"); break;
				case 25: Menu::Option("Researching (Char2): Hollow point ammo"); break;
				case 26: Menu::Option("Researching (Char2): Armor piercing ammo"); break;
				case 27: Menu::Option("Researching (Char2): Full metal ammo"); break;
				case 28: Menu::Option("Researching (Char2): Explosive ammo"); break;
				case 29: Menu::Option("Researching (Char2): Pistol scope"); break;
				case 30: Menu::Option("Researching (Char2): Pistol compensator"); break;
				case 31: Menu::Option("Researching (Char2): SMG scope"); break;
				case 32: Menu::Option("Researching (Char2): SMG heavy barrel"); break;
				case 33: Menu::Option("Researching (Char2): Sniper nightvision scope"); break;
				case 34: Menu::Option("Researching (Char2): Sniper thermal scope"); break;
				case 35: Menu::Option("Researching (Char2): Sniper heavy barrel"); break;
				case 36: Menu::Option("Researching (Char2): MG scope"); break;
				case 37: Menu::Option("Researching (Char2): MG heavy barrel"); break;
				case 38: Menu::Option("Researching (Char2): Assaultrifle scope"); break;
				case 39: Menu::Option("Researching (Char2): Assaultrifle heavy barrel"); break;
				case 40: Menu::Option("Researching (Char2): Carbine scope"); break;
				case 41: Menu::Option("Researching (Char2): Carbine heavy barrel"); break;
				case 42: Menu::Option("Researching (Char2): Proxymity mines"); break;
				case 43: Menu::Option("Researching (Char2): Brush weaponcamo"); break;
				case 44: Menu::Option("Researching (Char2): Skull weaponcamo"); break;
				case 45: Menu::Option("Researching (Char2): Sessanta weaponcamo"); break;
				case 46: Menu::Option("Researching (Char2): Perseus weaponcamo"); break;
				case 47: Menu::Option("Researching (Char2): Leopard weaponcamo"); break;
				case 48: Menu::Option("Researching (Char2): Zebra weaponcamo"); break;
				case 49: Menu::Option("Researching (Char2): Geometric weaponcamo"); break;
				case 50: Menu::Option("Researching (Char2): Boom weaponcamo"); break;
				}
			}
			if (Menu::Option("APC SAM turret")) { Features::research(0); }
			if (Menu::Option("Ballistic armor")) { Features::research(1); }
			if (Menu::Option("Halftrack quad turret")) { Features::research(2); }
			if (Menu::Option("Tampa Double minigun")) { Features::research(3); }
			if (Menu::Option("Tampa Rear mortar")) { Features::research(4); }
			if (Menu::Option("Tampa missiles")) { Features::research(5); }
			if (Menu::Option("Tampa armor")) { Features::research(6); }
			if (Menu::Option("Buggy grenadelauncher")) { Features::research(7); }
			if (Menu::Option("Buggy minigun")) { Features::research(8); }
			if (Menu::Option("Insurgent minigun")) { Features::research(9); }
			if (Menu::Option("Insurgent armor")) { Features::research(10); }
			if (Menu::Option("Technical minigun")) { Features::research(11); }
			if (Menu::Option("Technical ram bar")) { Features::research(12); }
			if (Menu::Option("Technical brute bar")) { Features::research(13); }
			if (Menu::Option("Technical armor")) { Features::research(14); }
			if (Menu::Option("Oppressor missiles")) { Features::research(15); }
		}
		break;

		case KDKIP:
		{
			Menu::Title("~r~KD EDITOR");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (Menu::Option("Custom Deaths")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("MPPLY_DEATHS_PLAYER"), val, 1);
			}
			if (Menu::Option("Set Kills")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("MPPLY_KILLS_PLAYERS"), val, 1);
			}
			if (Menu::Option("Set Deathmatch Wins")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("AWD_FM_DM_WINS"), val, 1);
				STATS::STAT_SET_INT($("AWD_FM_DM_WINS"), val, 1);
				STATS::STAT_SET_INT($("AWD_FM_TDM_WINS"), val, 1);
			}
			if (Menu::Option("Set Death Match Kills")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("AWD_FM_DM_TOTALKILLS"), val, 1);
			}
			if (Menu::Option("Set Death Match Deaths")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("MPPLY_DM_TOTAL_DEATHS"), val, 1);
			}
			if (Menu::Option("Set Deathmatch Losses")) {
				int val = NumberKeyboard();
				STATS::STAT_SET_INT($("MPPLY_TOTAL_DEATHMATCH_LOST"), val, 1);
			}
		}
		break;

		case unlockall: {
			Menu::Title("~w~UnlockAll");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("Unlock Everything")) {
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STAM"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STRN"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_LUNG"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_DRIV"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_FLY"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_SHO"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STL"), 100, 0);

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_12"), -1, 1);

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_ENEMYDRIVEBYKILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_USJS_COMPLETED"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_USJS_FOUND"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DB_PLAYER_KILLS"), 1000, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_KILLS_PLAYERS"), 1000, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMHORDWAVESSURVIVE"), 21, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_CAR_BOMBS_ENEMY_KILLS"), 25, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_TDM_MVP"), 60, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_HOLD_UP_SHOPS"), 20, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_RACES_WON"), 101, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_NO_ARMWRESTLING_WINS"), 21, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMBBETWIN"), 50000, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_DM_WINS"), 51, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_DM_TOTALKILLS"), 500, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_DM_TOTAL_DEATHS"), 412, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TIMES_FINISH_DM_TOP_3"), 36, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_PLAYER_HEADSHOTS"), 623, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_DM_WINS"), 63, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_TDM_WINS"), 13, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_GTA_RACES_WON"), 12, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_GOLF_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_TG_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_RT_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_CT_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_GRAN_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_TENNIS_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TENNIS_MATCHES_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_TDEATHMATCH_WON"), 63, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_RACES_WON"), 101, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_DEATHMATCH_LOST"), 23, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_RACES_LOST"), 36, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_25_KILLS_STICKYBOMBS"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_50_KILLS_GRENADES"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_GRENADE_ENEMY_KILLS"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_20_KILLS_MELEE"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MOLOTOV_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CMBTPISTOL_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_PISTOL50_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_APPISTOL_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MICROSMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ASLTSMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ASLTRIFLE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CRBNRIFLE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADVRIFLE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CMBTMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ASLTMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_PUMP_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SAWNOFF_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BULLPUP_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ASLTSHTGN_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SNIPERRFL_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_HVYSNIPER_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_GRNLAUNCH_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_RPG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MINIGUNS_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_GRENADE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SMKGRENADE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_STKYBMB_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MOLOTOV_ENEMY_KILLS"), 600, 0);

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_OUTFIT"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_5"), -1, 1);;
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_6"), -1, 1);;
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_OUTFIT"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TORSO"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL2_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_DECL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TEETH"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TEETH_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TEETH_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_TORSO"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL2_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_DECL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_TEETH"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_TEETH_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_TEETH_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_0"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_12"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_13"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_14"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_15"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_16"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_17"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_18"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_19"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_21"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_22"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_23"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_24"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_24"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_25"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_26"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_27"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_28"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_29"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_30"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_31"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_32"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_33"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_34"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_35"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_36"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_37"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_38"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_39"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_40"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_12"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_13"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_12"), -1, 1);
			}

			if (Menu::Option("Clear Badsport")) {
				STATS::STAT_SET_FLOAT(GAMEPLAY::GET_HASH_KEY("MPPLY_OVERALL_BADSPORT"), 0.0f, TRUE);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_DESTROYED_PVEHICLES"), 0, TRUE);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_BADSPORT_MESSAGE"), 0, TRUE);
			}
			if (Menu::Option("Max Stats")) {
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STAM"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STRN"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_LUNG"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_DRIV"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_FLY"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_SHO"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STL"), 100, true);
			}

			if (Menu::Option("Unlock Tattos")) {
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_12"), -1, 1);
			}
			if (Menu::Option("Unlock All Achievements")) {
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_ENEMYDRIVEBYKILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_USJS_COMPLETED"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_USJS_FOUND"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DB_PLAYER_KILLS"), 1000, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_KILLS_PLAYERS"), 1000, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMHORDWAVESSURVIVE"), 21, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_CAR_BOMBS_ENEMY_KILLS"), 25, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_TDM_MVP"), 60, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_HOLD_UP_SHOPS"), 20, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_RACES_WON"), 101, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_NO_ARMWRESTLING_WINS"), 21, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMBBETWIN"), 50000, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_DM_WINS"), 51, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_DM_TOTALKILLS"), 500, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_DM_TOTAL_DEATHS"), 412, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TIMES_FINISH_DM_TOP_3"), 36, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_PLAYER_HEADSHOTS"), 623, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_DM_WINS"), 63, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_TDM_WINS"), 13, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_GTA_RACES_WON"), 12, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_GOLF_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_TG_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_RT_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_CT_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_GRAN_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_TENNIS_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TENNIS_MATCHES_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_TDEATHMATCH_WON"), 63, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_RACES_WON"), 101, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_DEATHMATCH_LOST"), 23, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_RACES_LOST"), 36, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_25_KILLS_STICKYBOMBS"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_50_KILLS_GRENADES"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_GRENADE_ENEMY_KILLS"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_20_KILLS_MELEE"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MOLOTOV_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CMBTPISTOL_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_PISTOL50_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_APPISTOL_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MICROSMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ASLTSMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ASLTRIFLE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CRBNRIFLE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADVRIFLE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CMBTMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ASLTMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_PUMP_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SAWNOFF_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BULLPUP_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ASLTSHTGN_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SNIPERRFL_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_HVYSNIPER_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_GRNLAUNCH_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_RPG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MINIGUNS_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_GRENADE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SMKGRENADE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_STKYBMB_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MOLOTOV_ENEMY_KILLS"), 600, 0);
			}

			if (Menu::Option("Unlock all Clothing")) {
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_OUTFIT"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_5"), -1, 1);;
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_6"), -1, 1);;
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_OUTFIT"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TORSO"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL2_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_DECL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TEETH"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TEETH_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TEETH_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_TORSO"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL2_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_DECL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_TEETH"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_TEETH_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_TEETH_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_0"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_12"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_13"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_14"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_15"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_16"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_17"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_18"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_19"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_21"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_22"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_23"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_24"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_24"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_25"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_26"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_27"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_28"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_29"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_30"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_31"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_32"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_33"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_34"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_35"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_36"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_37"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_38"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_39"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_40"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_12"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_13"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_12"), -1, 1);

			}
			if (Menu::Option("Clear Badsport Stats")) {
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MPPLY_DESTROYED_PVEHICLES"), 0, TRUE);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MPPLY_BADSPORT_MESSAGE"), 0, TRUE);
			}
			if (Menu::Option("2B Snacks"))
			{
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_NO_BOUGHT_YUM_SNACKS"), 2000000000, 1);

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_NO_BOUGHT_HEALTH_SNACKS"), 2000000000, 1);

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_NO_BOUGHT_EPIC_SNACKS"), 2000000000, 1);

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_NUMBER_OF_ORANGE_BOUGHT"), 2000000000, 1);

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CIGARETTES_BOUGHT"), 2000000000, 1);
			}
			if (Menu::Option("2B Armor"))
			{
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MP_CHAR_ARMOUR_1_COUNT"), 2000000000, 1);

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MP_CHAR_ARMOUR_2_COUNT"), 2000000000, 1);

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MP_CHAR_ARMOUR_3_COUNT"), 2000000000, 1);

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MP_CHAR_ARMOUR_4_COUNT"), 2000000000, 1);

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MP_CHAR_ARMOUR_5_COUNT"), 2000000000, 1);
			}
		}
						break;


		case extendedstat:
		{
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			Menu::Title("Change Name");
			for (int i = 0; i < sizeof(TunableList) / sizeof(*TunableList); i++) {

				switch (TunableList[i].type) {
				case 0:
				{
					static int tunableValue = TUNABLE::NETWORK_GET_TUNABLE<int>(TunableList[i].index);
					if (Menu::Int(TunableList[i].label, tunableValue, -1, INT_MAX)) { TUNABLE::NETWORK_SET_TUNABLE<int>(TunableList[i].index, tunableValue); }
				}
				break;
				case 1:
				{
					static float tunableValue = TUNABLE::NETWORK_GET_TUNABLE<float>(TunableList[i].index);
					if (Menu::Float(TunableList[i].label, tunableValue, -1.f, 999999.f, 0.1f)) { TUNABLE::NETWORK_SET_TUNABLE<float>(TunableList[i].index, tunableValue); }
				}
				break;
				case 2:
				{
					static bool tunableValue = TUNABLE::NETWORK_GET_TUNABLE<bool>(TunableList[i].index);
					if (Menu::Toggle(TunableList[i].label, tunableValue)) { TUNABLE::NETWORK_SET_TUNABLE<bool>(TunableList[i].index, tunableValue); }
				}
				}
			}
			break;
		}
		break;

		case mods:
		{
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::Title("Mods");

			Menu::MenuOption("Name Changer", namechange);
			//Menu::MenuOption("Tunables", FeaturesS);
			//Menu::MenuOption("Modded Vehicles", Ulti); 
			//Menu::MenuOption("Map Mods", exploitramp);
			//Menu::MenuOption("Riding menu", ride);
			//Menu::MenuOption("Object Spawner", objSpawner);
			//Menu::MenuOption("Super Options", supermenu);
			//Menu::MenuOption("Sounds", sounds);
		}
		break;

		case namechange:
		{
			Menu::MainTitle("SHADE                               ");

			Menu::Title("Change Name");

			////Menu::Break("Change your Name");

			if (Menu::Option("Plain Text")) {
				char* newname;
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter the name you want", "", "", "name", "", "", 16);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
				{
					newname = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
				}
				SetName(newname);
			}
			if (Menu::Option("~r~Red")) {
				char* newname;
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter the name you want", "", "", "name", "", "", 16);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
				{
					newname = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
				}
				SetName(Menu::Tools::StringToChar("~r~" + (std::string)newname));
			}
			if (Menu::Option("~g~Green")) {
				char* newname;
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter the name you want", "", "", "name", "", "", 16);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
				{
					newname = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
				}
				SetName(Menu::Tools::StringToChar("~g~" + (std::string)newname));
			}
			if (Menu::Option("~b~Blue")) {
				char* newname;
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter the name you want", "", "", "name", "", "", 16);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
				{
					newname = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
				}
				SetName(Menu::Tools::StringToChar("~b~" + (std::string)newname));
			}
			if (Menu::Option("~italic~Italic")) {
				char* newname;
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter the name you want", "", "", "name", "", "", 16);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
				{
					newname = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
				}
				SetName(Menu::Tools::StringToChar("~italic~" + (std::string)newname));
			}
			if (Menu::Option("~bold~Bold")) {
				char* newname;
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter the name you want", "", "", "name", "", "", 16);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
				{
					newname = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
				}
				SetName(Menu::Tools::StringToChar("~bold~" + (std::string)newname));
			}
			if (Menu::Option("~y~Yellow")) {
				char* newname;
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter the name you want", "", "", "name", "", "", 16);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
				{
					newname = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
				}
				SetName(Menu::Tools::StringToChar("~y~" + (std::string)newname));
			}
			if (Menu::Option("~p~Purple")) {
				char* newname;
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter the name you want", "", "", "name", "", "", 16);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
				{
					newname = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
				}
				SetName(Menu::Tools::StringToChar("~p~" + (std::string)newname));
			}
			if (Menu::Option("~o~Orange")) {
				char* newname;
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter the name you want", "", "", "name", "", "", 16);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
				{
					newname = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
				}
				SetName(Menu::Tools::StringToChar("~o~" + (std::string)newname));
			}
			if (Menu::Option("~c~Grey")) {
				char* newname;
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter the name you want", "", "", "name", "", "", 16);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
				{
					newname = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
				}
				SetName(Menu::Tools::StringToChar("~c~" + (std::string)newname));
			}
			if (Menu::Option("~m~Dark Grey")) {
				char* newname;
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter the name you want", "", "", "name", "", "", 16);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
				{
					newname = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
				}
				SetName(Menu::Tools::StringToChar("~m~" + (std::string)newname));
			}
			if (Menu::Option("~u~Black")) {
				char* newname;
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter the name you want", "", "", "name", "", "", 16);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
				{
					newname = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
				}
				SetName(Menu::Tools::StringToChar("~u~" + (std::string)newname));
			}
			if (Menu::Option("~d~Dark Blue")) {
				char* newname;
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter the name you want", "", "", "name", "", "", 16);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
				{
					newname = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
				}
				SetName(Menu::Tools::StringToChar("~d~" + (std::string)newname));
			}
			if (Menu::Option("~f~Light Blue")) {
				char* newname;
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter the name you want", "", "", "name", "", "", 16);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
				{
					newname = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
				}
				SetName(Menu::Tools::StringToChar("~f~" + (std::string)newname));
			}




		}
		break;

		case Ulti:
		{
			Menu::Title("Custom Vehicles");
			Menu::MainTitle("~c~[Shade 1.0]                             ");



			if (Menu::Option("6x6 War RC")) {
				int Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0.03f;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("dune2");
				int hash2 = GAMEPLAY::GET_HASH_KEY("t20");
				int hash3 = GAMEPLAY::GET_HASH_KEY("dune2");
				int hash4 = GAMEPLAY::GET_HASH_KEY("dune2");
				int hash5 = GAMEPLAY::GET_HASH_KEY("monster");
				int hash6 = GAMEPLAY::GET_HASH_KEY("monster");


				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(hash3);
				STREAMING::REQUEST_MODEL(hash4);
				STREAMING::REQUEST_MODEL(hash5);
				STREAMING::REQUEST_MODEL(hash6);


				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash3) && STREAMING::HAS_MODEL_LOADED(hash4) && STREAMING::HAS_MODEL_LOADED(hash5) && STREAMING::HAS_MODEL_LOADED(hash6))
				{
					int Object1 = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object2 = VEHICLE::erstelle_fahr(hash3, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object3 = VEHICLE::erstelle_fahr(hash4, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object4 = VEHICLE::erstelle_fahr(hash5, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object5 = VEHICLE::erstelle_fahr(hash6, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);



					if (ENTITY::DOES_ENTITY_EXIST(Object1) && ENTITY::DOES_ENTITY_EXIST(Object2) && ENTITY::DOES_ENTITY_EXIST(Object3) && ENTITY::DOES_ENTITY_EXIST(Object4) && ENTITY::DOES_ENTITY_EXIST(Object5))
					{
						int Vehicle = VEHICLE::erstelle_fahr(hash2, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);

							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object1, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object2, Vehicle, 0, a.x - 0.1f, a.y, a.z, b.x, b.y + 41.1f, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object3, Vehicle, 0, a.x + 0.1f, a.y, a.z, b.x, b.y - 41.4f, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object4, Vehicle, 0, a.x + 1.41f, a.y, a.z - 0.2f, b.x - 179.99f, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object5, Vehicle, 0, a.x - 1.41f, a.y, a.z - 0.2f, b.x - 179.99f, b.y, b.z, 0, 1, 0, 0, 2, 1);

							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 255, 255, 255);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 255, 255, 255);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object1, 255, 255, 255);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object1, 255, 255, 255);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object4, 255, 255, 255);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object4, 255, 255, 255);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object5, 255, 255, 255);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object5, 255, 255, 255);
						}

					}

				}
			}
			if (Menu::Option("Speeder Prototype")) {
				int Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0.03f;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("seashark");
				int hash1 = GAMEPLAY::GET_HASH_KEY("seashark");
				int hash2 = GAMEPLAY::GET_HASH_KEY("turismor");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash1);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash1) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Object = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object1 = VEHICLE::erstelle_fahr(hash1, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Object))
					{
						int Vehicle = VEHICLE::erstelle_fahr(hash2, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 255, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 255, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 255, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 255, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object1, 255, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object1, 255, 0, 0);
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y + 1.37f, a.z + 0.59f, b.x - 14.33f, b.y + 541.20f, b.z - 1.42f, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object1, Vehicle, 0, a.x, a.y - 0.79f, a.z + 0.83f, b.x + 9.72f, b.y + 539.03f, b.z - 0.16f, 0, 1, 0, 0, 2, 1);
						}
					}
				}
			}
			if (Menu::Option("Snow Scooter")) {
				int Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0.03f;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("seashark");
				int hash2 = GAMEPLAY::GET_HASH_KEY("sanchez");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Object = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Object))
					{
						int Vehicle = VEHICLE::erstelle_fahr(hash2, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 255, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 255, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 255, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 255, 0, 0);
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);

							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x - 0.02f, a.y - 0.08f, a.z - 0.36f, b.x - 0.21f, b.y + 1.83f, b.z - 0.21f, 0, 1, 0, 0, 2, 1);

						}
					}
				}
			}
			if (Menu::Option("Military Flightsquad")) {
				int Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0.03f;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("hydra");
				int hash1 = GAMEPLAY::GET_HASH_KEY("hydra");
				int hash2 = GAMEPLAY::GET_HASH_KEY("hydra");
				int hash3 = GAMEPLAY::GET_HASH_KEY("hydra");
				int hash4 = GAMEPLAY::GET_HASH_KEY("hydra");
				int hash5 = GAMEPLAY::GET_HASH_KEY("hydra");
				int hash6 = GAMEPLAY::GET_HASH_KEY("hydra");
				int hash7 = GAMEPLAY::GET_HASH_KEY("hydra");
				int hash8 = GAMEPLAY::GET_HASH_KEY("hydra");

				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(hash1);
				STREAMING::REQUEST_MODEL(hash3);
				STREAMING::REQUEST_MODEL(hash4);
				STREAMING::REQUEST_MODEL(hash5);
				STREAMING::REQUEST_MODEL(hash6);
				STREAMING::REQUEST_MODEL(hash7);
				STREAMING::REQUEST_MODEL(hash8);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash1) && STREAMING::HAS_MODEL_LOADED(hash3) && STREAMING::HAS_MODEL_LOADED(hash4) && STREAMING::HAS_MODEL_LOADED(hash5) && STREAMING::HAS_MODEL_LOADED(hash6) && STREAMING::HAS_MODEL_LOADED(hash7) && STREAMING::HAS_MODEL_LOADED(hash8))
				{
					int Object = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object1 = VEHICLE::erstelle_fahr(hash1, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object2 = VEHICLE::erstelle_fahr(hash3, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object3 = VEHICLE::erstelle_fahr(hash4, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object4 = VEHICLE::erstelle_fahr(hash5, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object5 = VEHICLE::erstelle_fahr(hash6, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object6 = VEHICLE::erstelle_fahr(hash7, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object7 = VEHICLE::erstelle_fahr(hash8, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Object))
					{
						int Vehicle = VEHICLE::erstelle_fahr(hash2, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{

							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);


							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y + 15.541162f, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object1, Vehicle, 0, a.x, a.y + 30.541162f, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object2, Vehicle, 0, a.x - 15.0f, a.y + 15.541162f, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object3, Vehicle, 0, a.x + 15.0f, a.y + 15.541162f, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object4, Vehicle, 0, a.x + 15.0f, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object5, Vehicle, 0, a.x + 30.0f, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object6, Vehicle, 0, a.x - 15.0f, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object7, Vehicle, 0, a.x - 30.0f, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);

						}
					}
				}
			}
			if (Menu::Option("Bike Robot")) {
				int Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0.03f;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("bati");
				int hash1 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash2 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash3 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash4 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash5 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash6 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash7 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash8 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash9 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash10 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash11 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash12 = GAMEPLAY::GET_HASH_KEY("bati");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash1);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(hash3);
				STREAMING::REQUEST_MODEL(hash4);
				STREAMING::REQUEST_MODEL(hash5);
				STREAMING::REQUEST_MODEL(hash6);
				STREAMING::REQUEST_MODEL(hash7);
				STREAMING::REQUEST_MODEL(hash8);
				STREAMING::REQUEST_MODEL(hash9);
				STREAMING::REQUEST_MODEL(hash10);
				STREAMING::REQUEST_MODEL(hash11);
				STREAMING::REQUEST_MODEL(hash12);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash1) && STREAMING::HAS_MODEL_LOADED(hash3) && STREAMING::HAS_MODEL_LOADED(hash4) && STREAMING::HAS_MODEL_LOADED(hash5) && STREAMING::HAS_MODEL_LOADED(hash6) && STREAMING::HAS_MODEL_LOADED(hash7) && STREAMING::HAS_MODEL_LOADED(hash8) && STREAMING::HAS_MODEL_LOADED(hash9) && STREAMING::HAS_MODEL_LOADED(hash10) && STREAMING::HAS_MODEL_LOADED(hash11))
				{
					int Object = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object1 = VEHICLE::erstelle_fahr(hash1, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object2 = VEHICLE::erstelle_fahr(hash3, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object3 = VEHICLE::erstelle_fahr(hash4, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object4 = VEHICLE::erstelle_fahr(hash5, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object5 = VEHICLE::erstelle_fahr(hash6, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object6 = VEHICLE::erstelle_fahr(hash7, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object7 = VEHICLE::erstelle_fahr(hash8, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object8 = VEHICLE::erstelle_fahr(hash9, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object9 = VEHICLE::erstelle_fahr(hash10, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object10 = VEHICLE::erstelle_fahr(hash11, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object11 = VEHICLE::erstelle_fahr(hash12, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Object))
					{
						int Vehicle = VEHICLE::erstelle_fahr(hash2, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);

							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z + 1.16f, b.x + 62.0f, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object1, Vehicle, 0, a.x + 2.5f, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object3, Vehicle, 0, a.x + 2.5f, a.y, a.z + 1.16f, b.x + 62.0f, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object4, Vehicle, 0, a.x + 0.5f, a.y + 0.5f, a.z + 2.27f, b.x + 50.0f, b.y - 70.0f, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object5, Vehicle, 0, a.x + 1.95f, a.y + 0.5f, a.z + 2.27f, b.x + 50.0f, b.y + 70.0f, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object6, Vehicle, 0, a.x + 1.24f, a.y + 0.8f, a.z + 5.0f, b.x + 90.0f, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object7, Vehicle, 0, a.x + 1.24f, a.y + 0.8f, a.z + 3.5f, b.x + 90.0f, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object8, Vehicle, 0, a.x + 1.24f, a.y + 0.8f, a.z + 6.0f, b.x - 15.0f, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object9, Vehicle, 0, a.x + 2.0f, a.y + 0.8f, a.z + 4.43f, b.x - 30.0f, b.y - 50.0f, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object10, Vehicle, 0, a.x + 0.6f, a.y + 0.8f, a.z + 4.43f, b.x - 30.0f, b.y + 50.0f, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object2, Vehicle, 0, a.x, a.y + 2.1f, a.z + 3.7f, b.x - 10.0f, b.y + 12.8f, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object11, Vehicle, 0, a.x + 2.8f, a.y + 1.9f, a.z + 3.7f, b.x - 10.0f, b.y - 13.6f, b.z, 0, 1, 0, 0, 2, 1);
						}
					}
				}
			}
			if (Menu::Option("Flying UFO")) {
				int Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = -0.27, a.y = -0.24, a.z = 0.13f;
				Vector3 b; b.x = 0, b.y = 0, b.z = 180;
				int hash = GAMEPLAY::GET_HASH_KEY("skylift");
				int hash2 = GAMEPLAY::GET_HASH_KEY("p_spinning_anus_s");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Object = OBJECT::CREATE_OBJECT(hash2, null.x, null.y, null.z, 1, 0, 1);
					if (ENTITY::DOES_ENTITY_EXIST(Object))
					{
						int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);

							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);

							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 2, 153, 57);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 2, 153, 57);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 2, 153, 57);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 2, 153, 57);

						}
					}
				}
			}
			if (Menu::Option("Bumper Buggy")) {
				uint Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = -0.34, a.y = 0.32, a.z = -0.25;
				Vector3 b; b.x = 0, b.y = 0, b.z = 180;
				Vector3 Tire; Tire.x = 0.0, Tire.y = 0.0; Tire.z = 0.0;//Right Front(inner tire)
				Vector3 TireA; TireA.x = 0.40, TireA.y = 1.0, TireA.z = -0.51;//X Coord - Y Coord - Z Coord
				Vector3 TireB; TireB.x = 0.0, TireB.y = 0.0, TireB.z = 88.0;//- Roll - Yaw
				Vector3 Tire01; Tire01.x = 0.0, Tire01.y = 0.0; Tire01.z = 0;//Right Front(outter tire)
				Vector3 TireC; TireC.x = 0.59, TireC.y = 1.0, TireC.z = -0.51;//X Coord - Y Coord - Z Coord
				Vector3 TireD; TireD.x = 0.0, TireD.y = 0.0, TireD.z = -90.0;//- Roll - Yaw
				Vector3 Tire02; Tire02.x = 0.0, Tire02.y = 0.0; Tire02.z = 0.0;//Left Front(inner tire)
				Vector3 TireE; TireE.x = -1.09, TireE.y = 1.0, TireE.z = -0.50;//X Coord - Y Coord - Z Coord
				Vector3 TireF; TireF.x = 0.0, TireF.y = 0.0, TireF.z = -88.0;//Pitch - Roll - Yaw
				Vector3 Tire03; Tire03.x = 0.0, Tire03.y = 0.0; Tire03.z = 0.0;//Left Front(outter tire)
				Vector3 TireG; TireG.x = -1.264, TireG.y = 1.0, TireG.z = -0.50;//X Coord - Y Coord - Z Coord
				Vector3 TireH; TireH.x = 0.0, TireH.y = 0.0, TireH.z = 92.0;//Pitch - Roll - Yaw
				Vector3 Engine1; Engine1.x = 0.0, Engine1.y = 0.0; Engine1.z = 0.0;//Engine
				Vector3 EngineA; EngineA.x = -0.39, EngineA.y = -1.60, EngineA.z = -0.70;//X Coord - Y Coord - Z Coord
				Vector3 EngineB; EngineB.x = 0.0, EngineB.y = 0.0, EngineB.z = 0.0;//Pitch - Roll - Yaw
				Vector3 Tire04; Tire04.x = 0.0, Tire04.y = 0.0; Tire04.z = 0.0;//Right Rear(inner tire)
				Vector3 TireI; TireI.x = 0.22, TireI.y = -1.40, TireI.z = -0.50;//X Coord - Y Coord - Z Coord
				Vector3 TireJ; TireJ.x = 0.0, TireJ.y = 0.0, TireJ.z = -88.0;//Pitch - Roll - Yaw
				Vector3 Tire05; Tire05.x = 0.0, Tire05.y = 0.0; Tire05.z = 0.0;//Right Rear(middle tire)
				Vector3 TireK; TireK.x = 0.42, TireK.y = -1.40, TireK.z = -0.50;//X Coord - Y Coord - Z Coord
				Vector3 TireL; TireL.x = 0.0, TireL.y = 0.0, TireL.z = 90.0;//Pitch - Roll - Yaw
				Vector3 Tire06; Tire06.x = 0.0, Tire06.y = 0.0; Tire06.z = 0.0;//Right Rear(outter tire)
				Vector3 TireM; TireM.x = 0.593, TireM.y = -1.40, TireM.z = -0.50;//X Coord - Y Coord - Z Coord
				Vector3 TireN; TireN.x = 0.0, TireN.y = 0.0, TireN.z = -89.0;//Pitch - Roll - Yaw
				Vector3 Tire07; Tire07.x = 0.0, Tire07.y = 0.0; Tire07.z = 0.0;//Left Rear(inner tire)
				Vector3 TireO; TireO.x = -0.81, TireO.y = -1.40, TireO.z = -0.50;//X Coord - Y Coord - Z Coord
				Vector3 TireP; TireP.x = 0.0, TireP.y = 0.0, TireP.z = 88.0;//Pitch - Roll - Yaw
				Vector3 Tire08; Tire08.x = 0.0, Tire08.y = 0.0; Tire08.z = 0.0;//Left Rear(middle tire)
				Vector3 TireQ; TireQ.x = -1.01, TireQ.y = -1.40, TireQ.z = -0.50;//X Coord - Y Coord - Z Coord
				Vector3 TireR; TireR.x = 0.0, TireR.y = 0.0, TireR.z = -91.0;//Pitch - Roll - Yaw
				Vector3 Tire09; Tire09.x = 0.0, Tire09.y = 0.0; Tire09.z = 0.0;//Left Rear(outter tire)
				Vector3 TireSs; TireSs.x = -1.184, TireSs.y = -1.40, TireSs.z = -0.50;//X Coord - Y Coord - Z Coord
				Vector3 TireT; TireT.x = 0.0, TireT.y = 0.0, TireT.z = 88.0;//Pitch - Roll - Yaw
				Vector3 Hood1; Hood1.x = 0, Hood1.y = 0; Hood1.z = 0;//Hood
				Vector3 HoodA; HoodA.x = -0.34, HoodA.y = 1.2, HoodA.z = -0.40;//X Coord - Y Coord - Z Coord
				Vector3 HoodB; HoodB.x = -24.0, HoodB.y = 0.0, HoodB.z = 0.0;//Pitch - Roll - Yaw
				Vector3 Battery1; Battery1.x = 0.0, Battery1.y = 0.0; Battery1.z = 0.0;//Battery
				Vector3 BatteryA; BatteryA.x = -0.34, BatteryA.y = 1.06, BatteryA.z = -0.06;//X Coord - Y Coord - Z Coord
				Vector3 BatteryB; BatteryB.x = -24.0, BatteryB.y = 0.0, BatteryB.z = 0.0;//Pitch - Roll - Yaw
				int hash = GAMEPLAY::GET_HASH_KEY("blista");
				int hash2 = GAMEPLAY::GET_HASH_KEY("prop_bumper_car_01");
				int Tires = GAMEPLAY::GET_HASH_KEY("prop_wheel_01");
				int Engine = GAMEPLAY::GET_HASH_KEY("prop_car_engine_01");
				int Hood = GAMEPLAY::GET_HASH_KEY("hei_prop_heist_emp");
				int Battery = GAMEPLAY::GET_HASH_KEY("prop_power_cell");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(Tires);
				STREAMING::REQUEST_MODEL(Engine);
				STREAMING::REQUEST_MODEL(Hood);
				STREAMING::REQUEST_MODEL(Battery);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(Tires) && STREAMING::HAS_MODEL_LOADED(Engine) && STREAMING::HAS_MODEL_LOADED(Hood) && STREAMING::HAS_MODEL_LOADED(Battery))
				{
					int Object = OBJECT::CREATE_OBJECT(hash2, null.x, null.y, null.z, 1, 0, 1);
					int Tire1 = OBJECT::CREATE_OBJECT(Tires, Tire.x, Tire.y, Tire.z, 1, 0, 1);//Right Front(inner tire)
					int Tire2 = OBJECT::CREATE_OBJECT(Tires, Tire01.x, Tire01.y, Tire01.z, 1, 0, 1);//right Front(outter tire)
					int Tire3 = OBJECT::CREATE_OBJECT(Tires, Tire02.x, Tire02.y, Tire02.z, 1, 0, 1);//Left Front(inner tire)
					int Tire4 = OBJECT::CREATE_OBJECT(Tires, Tire03.x, Tire03.y, Tire03.z, 1, 0, 1);//Left Front(outter tire)
					int Engine01 = OBJECT::CREATE_OBJECT(Engine, Engine1.x, Engine1.y, Engine1.z, 1, 0, 1);//Engine
					int Tire5 = OBJECT::CREATE_OBJECT(Tires, Tire04.x, Tire04.y, Tire04.z, 1, 0, 1);//Right Rear(inner tire)
					int Tire6 = OBJECT::CREATE_OBJECT(Tires, Tire05.x, Tire05.y, Tire05.z, 1, 0, 1);//Right Rear(middle tire)
					int Tire7 = OBJECT::CREATE_OBJECT(Tires, Tire06.x, Tire06.y, Tire06.z, 1, 0, 1);//Right Rear(outter tire)
					int Tire8 = OBJECT::CREATE_OBJECT(Tires, Tire07.x, Tire07.y, Tire07.z, 1, 0, 1);//Left Rear(inner tire)
					int Tire9 = OBJECT::CREATE_OBJECT(Tires, Tire08.x, Tire08.y, Tire08.z, 1, 0, 1);//Left Rear(middle tire)
					int Tire10 = OBJECT::CREATE_OBJECT(Tires, Tire09.x, Tire09.y, Tire09.z, 1, 0, 1);//Left Rear(outter tire)
					int Hood01 = OBJECT::CREATE_OBJECT(Hood, Hood1.x, Hood1.y, Hood1.z, 1, 0, 1);//Hood
					int Battery01 = OBJECT::CREATE_OBJECT(Battery, Battery1.x, Battery1.y, Battery1.z, 1, 0, 1);//Battery
					if (ENTITY::DOES_ENTITY_EXIST(Object) && ENTITY::DOES_ENTITY_EXIST(Tire1) && ENTITY::DOES_ENTITY_EXIST(Tire2) && ENTITY::DOES_ENTITY_EXIST(Tire3) && ENTITY::DOES_ENTITY_EXIST(Tire4) && ENTITY::DOES_ENTITY_EXIST(Engine01) && ENTITY::DOES_ENTITY_EXIST(Tire5) && ENTITY::DOES_ENTITY_EXIST(Tire6) && ENTITY::DOES_ENTITY_EXIST(Tire7) && ENTITY::DOES_ENTITY_EXIST(Tire8) && ENTITY::DOES_ENTITY_EXIST(Tire9) && ENTITY::DOES_ENTITY_EXIST(Tire10) && ENTITY::DOES_ENTITY_EXIST(Hood01) && ENTITY::DOES_ENTITY_EXIST(Battery01))
					{
						int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
							STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
							ENTITY::SET_ENTITY_VISIBLE(Vehicle, false, true);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire1, Vehicle, 0, TireA.x, TireA.y, TireA.z, TireB.x, TireB.y, TireB.z, 0, 1, 0, 0, 2, 1);//Right Front(inner tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire2, Vehicle, 0, TireC.x, TireC.y, TireC.z, TireD.x, TireD.y, TireD.z, 0, 1, 0, 0, 2, 1);//right Front(outter tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire3, Vehicle, 0, TireE.x, TireE.y, TireE.z, TireF.x, TireF.y, TireF.z, 0, 1, 0, 0, 2, 1);//Left Front(inner tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire4, Vehicle, 0, TireG.x, TireG.y, TireG.z, TireH.x, TireH.y, TireH.z, 0, 1, 0, 0, 2, 1);//Left Front(outter tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Engine01, Vehicle, 0, EngineA.x, EngineA.y, EngineA.z, EngineB.x, EngineB.y, EngineB.z, 0, 1, 0, 0, 2, 1);//Engine
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire5, Vehicle, 0, TireI.x, TireI.y, TireI.z, TireJ.x, TireJ.y, TireJ.z, 0, 1, 0, 0, 2, 1);//Right Rear(inner tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire6, Vehicle, 0, TireK.x, TireK.y, TireK.z, TireL.x, TireL.y, TireL.z, 0, 1, 0, 0, 2, 1);//Right Rear(middle tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire7, Vehicle, 0, TireM.x, TireM.y, TireM.z, TireN.x, TireN.y, TireN.z, 0, 1, 0, 0, 2, 1);//Right Rear(outter tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire8, Vehicle, 0, TireO.x, TireO.y, TireO.z, TireP.x, TireP.y, TireP.z, 0, 1, 0, 0, 2, 1);//Left Rear(inner tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire9, Vehicle, 0, TireQ.x, TireQ.y, TireQ.z, TireR.x, TireR.y, TireR.z, 0, 1, 0, 0, 2, 1);//Left Rear(middle tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire10, Vehicle, 0, TireSs.x, TireSs.y, TireSs.z, TireT.x, TireT.y, TireT.z, 0, 1, 0, 0, 2, 1);//Left Rear(outter tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Hood01, Vehicle, 0, HoodA.x, HoodA.y, HoodA.z, HoodB.x, HoodB.y, HoodB.z, 0, 1, 0, 0, 2, 1);//Hood
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Battery01, Vehicle, 0, BatteryA.x, BatteryA.y, BatteryA.z, BatteryB.x, BatteryB.y, BatteryB.z, 0, 1, 0, 0, 2, 1);//Battery
							ENTITY::SET_ENTITY_VISIBLE(Handle, true, true);

						}

					}

				}

			}
			if (Menu::Option("Modded Carbon RS")) {
				uint Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				//hash2_EMP
				Vector3 null; null.x = 0.0, null.y = 0.0; null.z = 0.0;
				Vector3 a; a.x = 0.0, a.y = 1.61, a.z = -0.12;//X Coord - Y Coord - Z Coord
				Vector3 b; b.x = -12.0, b.y = 0.0, b.z = 0.0;//Pitch - Roll - Yaw
															 //hash3_MiniGun
				Vector3 null1; null1.x = 0.0, null1.y = 0.0; null1.z = 0.0;
				Vector3 a1; a1.x = -0.60, a1.y = 1.60, a1.z = 0.20;
				Vector3 b1; b1.x = 0.0, b1.y = 0.0, b1.z = 88.0;
				//hash3_MiniGun2
				Vector3 null0; null0.x = 0.0, null0.y = 0.0; null0.z = 0.0;
				Vector3 a0; a0.x = 0.60, a0.y = 1.60, a0.z = 0.20;
				Vector3 b0; b0.x = 0.0, b0.y = 0.0, b0.z = 88.0;
				//hash4_FLWheel1
				Vector3 null2; null2.x = 0.0, null2.y = 0.0; null2.z = 0.0;
				Vector3 a2; a2.x = -0.94, a2.y = 1.32, a2.z = -0.25;
				Vector3 b2; b2.x = 9.0, b2.y = -28.0, b2.z = 87.0;
				//hash4_RLWheel1
				Vector3 null3; null3.x = 0.0, null3.y = 0.0; null3.z = 0.0;
				Vector3 a3; a3.x = -0.95, a3.y = -1.34, a3.z = -0.25f;
				Vector3 b3; b3.x = 9.0, b3.y = 38.0, b3.z = 87.0;
				//hash4_RFWheel1
				Vector3 null4; null4.x = 0.0, null4.y = 0.0; null4.z = 0.0;
				Vector3 a4; a4.x = 0.95, a4.y = 1.33, a4.z = -0.23;
				Vector3 b4; b4.x = 11.0, b4.y = 26.0, b4.z = -89.0;
				//hash4_RRWheel1
				Vector3 null5; null5.x = 0.0, null5.y = 0.0; null5.z = 0.0;
				Vector3 a5; a5.x = 0.96, a5.y = -1.31, a5.z = -0.23;
				Vector3 b5; b5.x = 10.0, b5.y = 20.0, b5.z = -92.0;

				int hash_T20 = GAMEPLAY::GET_HASH_KEY("t20");
				int hash2_EMP = GAMEPLAY::GET_HASH_KEY("hei_prop_heist_emp");
				int hash3_MiniGun = GAMEPLAY::GET_HASH_KEY("prop_minigun_01");
				int hash4_Wheel = GAMEPLAY::GET_HASH_KEY("prop_wheel_01");

				STREAMING::REQUEST_MODEL(hash_T20);
				STREAMING::REQUEST_MODEL(hash2_EMP);
				STREAMING::REQUEST_MODEL(hash3_MiniGun);
				STREAMING::REQUEST_MODEL(hash4_Wheel);

				if (STREAMING::HAS_MODEL_LOADED(hash_T20) && STREAMING::HAS_MODEL_LOADED(hash2_EMP) && STREAMING::HAS_MODEL_LOADED(hash3_MiniGun) && STREAMING::HAS_MODEL_LOADED(hash4_Wheel))
				{
					int EMP = OBJECT::CREATE_OBJECT(hash2_EMP, null.x, null.y, null.z, 1, 0, 1);
					int MiniGun = OBJECT::CREATE_OBJECT(hash3_MiniGun, null1.x, null1.y, null1.z, 1, 0, 1);
					int MiniGun2 = OBJECT::CREATE_OBJECT(hash3_MiniGun, null0.x, null0.y, null0.z, 1, 0, 1);
					int FLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null2.x, null2.y, null2.z, 1, 0, 1);
					int RLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null3.x, null3.y, null3.z, 1, 0, 1);
					int RFWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null4.x, null4.y, null4.z, 1, 0, 1);
					int RRWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null5.x, null5.y, null5.z, 1, 0, 1);

					if (ENTITY::DOES_ENTITY_EXIST(EMP) && ENTITY::DOES_ENTITY_EXIST(MiniGun) && ENTITY::DOES_ENTITY_EXIST(MiniGun2) && ENTITY::DOES_ENTITY_EXIST(FLWheel1) && ENTITY::DOES_ENTITY_EXIST(RLWheel1) && ENTITY::DOES_ENTITY_EXIST(RFWheel1) && ENTITY::DOES_ENTITY_EXIST(RRWheel1))
					{
						int Vehicle = VEHICLE::erstelle_fahr(hash_T20, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);

						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
							STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash_T20);
							ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
							ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_PED_ID(), true, true);

							ENTITY::ATTACH_ENTITY_TO_ENTITY(EMP, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(MiniGun, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(MiniGun2, Vehicle, 0, a0.x, a0.y, a0.z, b0.x, b0.y, b0.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(FLWheel1, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RLWheel1, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RFWheel1, Vehicle, 0, a4.x, a4.y, a4.z, b4.x, b4.y, b4.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RRWheel1, Vehicle, 0, a5.x, a5.y, a5.z, b5.x, b5.y, b5.z, 0, 1, 0, 0, 2, 1);

						}

					}

				}

			}
			if (Menu::Option("Modded T20")) {
				uint Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				//hash2_EMP
				Vector3 null; null.x = 0.0, null.y = 0.0; null.z = 0.0;
				Vector3 a; a.x = 0.0, a.y = 1.61, a.z = -0.12;//X Coord - Y Coord - Z Coord
				Vector3 b; b.x = -12.0, b.y = 0.0, b.z = 0.0;//Pitch - Roll - Yaw
															 //hash3_MiniGun
				Vector3 null1; null1.x = 0.0, null1.y = 0.0; null1.z = 0.0;
				Vector3 a1; a1.x = -0.60, a1.y = 1.60, a1.z = 0.20;
				Vector3 b1; b1.x = 0.0, b1.y = 0.0, b1.z = 88.0;
				//hash3_MiniGun2
				Vector3 null0; null0.x = 0.0, null0.y = 0.0; null0.z = 0.0;
				Vector3 a0; a0.x = 0.60, a0.y = 1.60, a0.z = 0.20;
				Vector3 b0; b0.x = 0.0, b0.y = 0.0, b0.z = 88.0;
				//hash4_FLWheel1
				Vector3 null2; null2.x = 0.0, null2.y = 0.0; null2.z = 0.0;
				Vector3 a2; a2.x = -0.94, a2.y = 1.32, a2.z = -0.25;
				Vector3 b2; b2.x = 9.0, b2.y = -28.0, b2.z = 87.0;
				//hash4_RLWheel1
				Vector3 null3; null3.x = 0.0, null3.y = 0.0; null3.z = 0.0;
				Vector3 a3; a3.x = -0.95, a3.y = -1.34, a3.z = -0.25f;
				Vector3 b3; b3.x = 9.0, b3.y = 38.0, b3.z = 87.0;
				//hash4_RFWheel1
				Vector3 null4; null4.x = 0.0, null4.y = 0.0; null4.z = 0.0;
				Vector3 a4; a4.x = 0.95, a4.y = 1.33, a4.z = -0.23;
				Vector3 b4; b4.x = 11.0, b4.y = 26.0, b4.z = -89.0;
				//hash4_RRWheel1
				Vector3 null5; null5.x = 0.0, null5.y = 0.0; null5.z = 0.0;
				Vector3 a5; a5.x = 0.96, a5.y = -1.31, a5.z = -0.23;
				Vector3 b5; b5.x = 10.0, b5.y = 20.0, b5.z = -92.0;

				int hash_T20 = GAMEPLAY::GET_HASH_KEY("t20");
				int hash2_EMP = GAMEPLAY::GET_HASH_KEY("hei_prop_heist_emp");
				int hash3_MiniGun = GAMEPLAY::GET_HASH_KEY("prop_minigun_01");
				int hash4_Wheel = GAMEPLAY::GET_HASH_KEY("prop_wheel_01");

				STREAMING::REQUEST_MODEL(hash_T20);
				STREAMING::REQUEST_MODEL(hash2_EMP);
				STREAMING::REQUEST_MODEL(hash3_MiniGun);
				STREAMING::REQUEST_MODEL(hash4_Wheel);

				if (STREAMING::HAS_MODEL_LOADED(hash_T20) && STREAMING::HAS_MODEL_LOADED(hash2_EMP) && STREAMING::HAS_MODEL_LOADED(hash3_MiniGun) && STREAMING::HAS_MODEL_LOADED(hash4_Wheel))
				{
					int EMP = OBJECT::CREATE_OBJECT(hash2_EMP, null.x, null.y, null.z, 1, 0, 1);
					int MiniGun = OBJECT::CREATE_OBJECT(hash3_MiniGun, null1.x, null1.y, null1.z, 1, 0, 1);
					int MiniGun2 = OBJECT::CREATE_OBJECT(hash3_MiniGun, null0.x, null0.y, null0.z, 1, 0, 1);
					int FLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null2.x, null2.y, null2.z, 1, 0, 1);
					int RLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null3.x, null3.y, null3.z, 1, 0, 1);
					int RFWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null4.x, null4.y, null4.z, 1, 0, 1);
					int RRWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null5.x, null5.y, null5.z, 1, 0, 1);

					if (ENTITY::DOES_ENTITY_EXIST(EMP) && ENTITY::DOES_ENTITY_EXIST(MiniGun) && ENTITY::DOES_ENTITY_EXIST(MiniGun2) && ENTITY::DOES_ENTITY_EXIST(FLWheel1) && ENTITY::DOES_ENTITY_EXIST(RLWheel1) && ENTITY::DOES_ENTITY_EXIST(RFWheel1) && ENTITY::DOES_ENTITY_EXIST(RRWheel1))
					{
						int Vehicle = VEHICLE::erstelle_fahr(hash_T20, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);

						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
							STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash_T20);
							ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
							ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_PED_ID(), true, true);

							ENTITY::ATTACH_ENTITY_TO_ENTITY(EMP, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(MiniGun, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(MiniGun2, Vehicle, 0, a0.x, a0.y, a0.z, b0.x, b0.y, b0.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(FLWheel1, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RLWheel1, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RFWheel1, Vehicle, 0, a4.x, a4.y, a4.z, b4.x, b4.y, b4.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RRWheel1, Vehicle, 0, a5.x, a5.y, a5.z, b5.x, b5.y, b5.z, 0, 1, 0, 0, 2, 1);

						}

					}

				}

			}
			if (Menu::Option("Roller Coaster Car")) {
				uint Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				//hash2_RollerCar
				Vector3 null; null.x = 0.0, null.y = 0.0; null.z = 0.0;
				Vector3 a; a.x = 0.0, a.y = 0.0, a.z = -0.5;//X Coord - Y Coord - Z Coord
				Vector3 b; b.x = 0.0, b.y = 0.0, b.z = 180.0;//Pitch - Roll - Yaw
															 //hash3_Seats
				Vector3 null1; null1.x = 0.0, null1.y = 0.0; null1.z = 0.0;
				Vector3 a1; a1.x = 0.0, a1.y = 0.0, a1.z = 0.0;
				Vector3 b1; b1.x = 0.0, b1.y = 0.0, b1.z = 0.0;
				//hash3_FLWheel1
				Vector3 null2; null2.x = 0.0, null2.y = 0.0; null2.z = 0.0;
				Vector3 a2; a2.x = -0.97, a2.y = 1.0, a2.z = -0.25;
				Vector3 b2; b2.x = 0.0, b2.y = 0.0, b2.z = -89.0;
				//hash3_RLWheel1
				Vector3 null3; null3.x = 0.0, null3.y = 0.0; null3.z = 0.0;
				Vector3 a3; a3.x = -1.00, a3.y = -1.10, a3.z = -0.24;
				Vector3 b3; b3.x = 0.0, b3.y = 0.0, b3.z = -89.0;
				//hash3_RFWheel1
				Vector3 null4; null4.x = 0.0, null4.y = 0.0; null4.z = 0.0;
				Vector3 a4; a4.x = 0.97, a4.y = 1.00, a4.z = -0.24;
				Vector3 b4; b4.x = 0.0, b4.y = 0.0, b4.z = 89.0;
				//hash3_RRWheel1
				Vector3 null5; null5.x = 0.0, null5.y = 0.0; null5.z = 0.0;
				Vector3 a5; a5.x = 1.00, a5.y = -1.10, a5.z = -0.24;
				Vector3 b5; b5.x = 0.0, b5.y = 0.0, b5.z = 89.0;
				int hash_T20 = GAMEPLAY::GET_HASH_KEY("t20");
				int hash2_RollerCar = GAMEPLAY::GET_HASH_KEY("ind_prop_dlc_roller_car");
				int hash3_Seats = GAMEPLAY::GET_HASH_KEY("prop_hd_seats_01");
				int hash4_Wheel = GAMEPLAY::GET_HASH_KEY("prop_wheel_01");
				STREAMING::REQUEST_MODEL(hash_T20);
				STREAMING::REQUEST_MODEL(hash2_RollerCar);
				STREAMING::REQUEST_MODEL(hash3_Seats);
				STREAMING::REQUEST_MODEL(hash4_Wheel);
				if (STREAMING::HAS_MODEL_LOADED(hash_T20) && STREAMING::HAS_MODEL_LOADED(hash2_RollerCar) && STREAMING::HAS_MODEL_LOADED(hash3_Seats) && STREAMING::HAS_MODEL_LOADED(hash4_Wheel))
				{
					int RollerCar = OBJECT::CREATE_OBJECT(hash2_RollerCar, null.x, null.y, null.z, 1, 0, 1);
					int Seats = OBJECT::CREATE_OBJECT(hash3_Seats, null1.x, null1.y, null1.z, 1, 0, 1);
					int FLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null2.x, null2.y, null2.z, 1, 0, 1);
					int RLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null3.x, null3.y, null3.z, 1, 0, 1);
					int RFWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null4.x, null4.y, null4.z, 1, 0, 1);
					int RRWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null5.x, null5.y, null5.z, 1, 0, 1);
					if (ENTITY::DOES_ENTITY_EXIST(RollerCar) && ENTITY::DOES_ENTITY_EXIST(Seats) && ENTITY::DOES_ENTITY_EXIST(FLWheel1) && ENTITY::DOES_ENTITY_EXIST(RLWheel1) && ENTITY::DOES_ENTITY_EXIST(RFWheel1) && ENTITY::DOES_ENTITY_EXIST(RRWheel1))
					{
						int Vehicle = VEHICLE::erstelle_fahr(hash_T20, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
							STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash_T20);
							ENTITY::SET_ENTITY_VISIBLE(Vehicle, false, true);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RollerCar, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Seats, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(FLWheel1, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RLWheel1, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RFWheel1, Vehicle, 0, a4.x, a4.y, a4.z, b4.x, b4.y, b4.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RRWheel1, Vehicle, 0, a5.x, a5.y, a5.z, b5.x, b5.y, b5.z, 0, 1, 0, 0, 2, 1);
							ENTITY::SET_ENTITY_VISIBLE(Handle, true, true);

						}

					}

				}

			}
			if (Menu::Option("Boat And Trailer")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = -0.61, a.z = 0.28;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("boattrailer");
				int hash2 = GAMEPLAY::GET_HASH_KEY("suntrap");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
						ENTITY::SET_ENTITY_COLLISION(Object, 1, 0);

					}

				}

			}
			if (Menu::Option("FlatBed And T20")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = -2.0, a.z = 1.1;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				Vector3 null1; null1.x = 0, null1.y = 0; null1.z = 0;
				Vector3 a1; a1.x = -1.06, a1.y = -0.1, a1.z = 0.46;
				Vector3 b1; b1.x = 91.0, b1.y = 0, b1.z = 0;
				Vector3 null2; null2.x = 0, null2.y = 0; null2.z = 0;
				Vector3 a2; a2.x = -0.9, a2.y = 0.61, a2.z = 0.62;
				Vector3 b2; b2.x = 0.0, b2.y = 100.0, b2.z = 0;
				Vector3 null3; null3.x = 0, null3.y = 0; null3.z = 0;
				Vector3 a3; a3.x = 0.9, a3.y = 0.8, a3.z = 0.41;
				Vector3 b3; b3.x = -25.0, b3.y = 0, b3.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("flatbed");
				int hash2 = GAMEPLAY::GET_HASH_KEY("t20");
				int hash3 = GAMEPLAY::GET_HASH_KEY("prop_tool_broom");
				int hash4 = GAMEPLAY::GET_HASH_KEY("prop_roadcone01a");
				int hash5 = GAMEPLAY::GET_HASH_KEY("prop_tool_box_02");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(hash3);
				STREAMING::REQUEST_MODEL(hash4);
				STREAMING::REQUEST_MODEL(hash5);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash3) && STREAMING::HAS_MODEL_LOADED(hash4) && STREAMING::HAS_MODEL_LOADED(hash5))
				{
					int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Broom = OBJECT::CREATE_OBJECT(hash3, null1.x, null1.y, null1.z, 1, 0, 1);
					int Cone = OBJECT::CREATE_OBJECT(hash4, null2.x, null2.y, null2.z, 1, 0, 1);
					int Tool = OBJECT::CREATE_OBJECT(hash5, null3.x, null3.y, null3.z, 1, 0, 1);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object) && ENTITY::DOES_ENTITY_EXIST(Broom) && ENTITY::DOES_ENTITY_EXIST(Cone) && ENTITY::DOES_ENTITY_EXIST(Tool))
					{
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Object, "Solitary");
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Broom, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Cone, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Tool, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, false, 0, 0, 2, true);
						ENTITY::SET_ENTITY_COLLISION(Object, 1, 0);

					}

				}

			}
			if (Menu::Option("JetSki And Trailer")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0.;
				Vector3 a; a.x = -0.625, a.y = -1.9, a.z = -0.09;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				Vector3 a1; a1.x = 0.625, a1.y = -1.9, a1.z = -0.09;
				Vector3 b1; b1.x = 0, b1.y = 0, b1.z = 0;

				Vector3 a2; a2.x = 0.0, a2.y = 0.9, a2.z = -0.45;
				Vector3 b2; b2.x = 0, b2.y = 0, b2.z = 180.0;

				int hash = GAMEPLAY::GET_HASH_KEY("boattrailer");
				int hash2 = GAMEPLAY::GET_HASH_KEY("seashark");
				int hash3 = GAMEPLAY::GET_HASH_KEY("prop_tool_box_05");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(hash3);

				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash3))
				{
					int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object1 = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object2 = OBJECT::CREATE_OBJECT(hash3, null.x, null.y, null.z, 1, 0, 1);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object) && ENTITY::DOES_ENTITY_EXIST(Object1) && ENTITY::DOES_ENTITY_EXIST(Object2))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object1, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object2, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, false, 0, 0, 2, true);
						ENTITY::SET_ENTITY_COLLISION(Object, 1, 0);
						ENTITY::SET_ENTITY_COLLISION(Object1, 1, 0);

					}

				}

			}
			if (Menu::Option("Ramp Truck")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 10.0, a.z = -0.3;
				Vector3 b; b.x = 0, b.y = -147.0, b.z = 90.0;
				int hash = GAMEPLAY::GET_HASH_KEY("phantom");
				int hash2 = GAMEPLAY::GET_HASH_KEY("prop_lev_des_barge_01");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = OBJECT::CREATE_OBJECT(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
						ENTITY::SET_ENTITY_COLLISION(Object, 1, 0);

					}

				}

			}
			if (Menu::Option("Monster Swat")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("monster");
				int hash2 = GAMEPLAY::GET_HASH_KEY("riot");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("Buffulo Police")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("police2");
				int hash2 = GAMEPLAY::GET_HASH_KEY("buffalo2");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Vehicle, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_EXTRA_COLOURS(Object, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("Insurgent 3")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("insurgent");
				int hash2 = GAMEPLAY::GET_HASH_KEY("insurgent2");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("Super 1")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = -0.25;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("t20");
				int hash2 = GAMEPLAY::GET_HASH_KEY("cheetah");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("Super 2")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("feltzer2");
				int hash2 = GAMEPLAY::GET_HASH_KEY("rapidgt");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("Muscle 1")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = -0.2;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("hotknife");
				int hash2 = GAMEPLAY::GET_HASH_KEY("jb700");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("Muscle 2")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 2.0;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("coquette2");
				int hash2 = GAMEPLAY::GET_HASH_KEY("hotknife");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("Special")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("zentorno");
				int hash2 = GAMEPLAY::GET_HASH_KEY("kuruma2");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Object, "Solitary");
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("Sub Copter")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 1, a.z = 0.8;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("buzzard");
				int hash2 = GAMEPLAY::GET_HASH_KEY("submersible");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 255, 149, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("SlamVan")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = -2.0, a.z = 1.1;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				Vector3 null1; null1.x = 0, null1.y = 0; null1.z = 0;
				Vector3 a1; a1.x = -1.06, a1.y = -0.1, a1.z = 0.46;
				Vector3 b1; b1.x = 91.0, b1.y = 0, b1.z = 0;
				Vector3 null2; null2.x = 0, null2.y = 0; null2.z = 0;
				Vector3 a2; a2.x = -0.9, a2.y = 0.61, a2.z = 0.62;
				Vector3 b2; b2.x = 0.0, b2.y = 100.0, b2.z = 0;
				Vector3 null3; null3.x = 0, null3.y = 0; null3.z = 0;
				Vector3 a3; a3.x = 0.9, a3.y = 0.8, a3.z = 0.41;
				Vector3 b3; b3.x = -25.0, b3.y = 0, b3.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("flatbed");
				int hash2 = GAMEPLAY::GET_HASH_KEY("slamvan2");
				int hash3 = GAMEPLAY::GET_HASH_KEY("prop_tool_broom");
				int hash4 = GAMEPLAY::GET_HASH_KEY("prop_roadcone01a");
				int hash5 = GAMEPLAY::GET_HASH_KEY("prop_tool_box_02");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(hash3);
				STREAMING::REQUEST_MODEL(hash4);
				STREAMING::REQUEST_MODEL(hash5);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash3) && STREAMING::HAS_MODEL_LOADED(hash4) && STREAMING::HAS_MODEL_LOADED(hash5))
				{
					int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Broom = OBJECT::CREATE_OBJECT(hash3, null1.x, null1.y, null1.z, 1, 0, 1);
					int Cone = OBJECT::CREATE_OBJECT(hash4, null2.x, null2.y, null2.z, 1, 0, 1);
					int Tool = OBJECT::CREATE_OBJECT(hash5, null3.x, null3.y, null3.z, 1, 0, 1);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object) && ENTITY::DOES_ENTITY_EXIST(Broom) && ENTITY::DOES_ENTITY_EXIST(Cone) && ENTITY::DOES_ENTITY_EXIST(Tool))
					{
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 8, 17, 30);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 30, 1);
						VEHICLE::SET_VEHICLE_EXTRA_COLOURS(Object, 92, 0);
						VEHICLE::SET_VEHICLE_COLOURS(Object, 12, 53);
						VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Object, " Solitary");
						VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(Object, 1);
						VEHICLE::TOGGLE_VEHICLE_MOD(Object, 18, 1);
						VEHICLE::TOGGLE_VEHICLE_MOD(Object, 22, 1);
						VEHICLE::SET_VEHICLE_MOD(Object, 11, 3, 0);
						VEHICLE::SET_VEHICLE_MOD(Object, 14, 14, 0);
						VEHICLE::SET_VEHICLE_MOD(Object, 15, 3, 0);
						VEHICLE::SET_VEHICLE_MOD(Object, 13, 2, 0);
						VEHICLE::SET_VEHICLE_WHEEL_TYPE(Object, 6);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_MOD(Object, 23, 18, 1);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Broom, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Cone, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Tool, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("Flying 5 Seater")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0.;

				Vector3 a; a.x = 0.0, a.y = 0.0, a.z = 0.6;		// seashark 1 - 0.7 worked just hard to get on .. infront and behind wings only way to get on the sharks ...
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;

				Vector3 a1; a1.x = 0.0, a1.y = -4.0, a1.z = 0.6;  // seashark 2
				Vector3 b1; b1.x = 0, b1.y = 0, b1.z = 0;


				Vector3 a2; a2.x = 0.0, a2.y = 0.9, a2.z = -0.45;
				Vector3 b2; b2.x = 0, b2.y = 0, b2.z = 180.0;

				int hash = GAMEPLAY::GET_HASH_KEY("hydra");
				int hash2 = GAMEPLAY::GET_HASH_KEY("seashark");
				int hash3 = GAMEPLAY::GET_HASH_KEY("prop_tool_box_05"); // turn this into something usefull maybe another sea shark ...
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(hash3);

				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash3))
				{
					int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object1 = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object2 = OBJECT::CREATE_OBJECT(hash3, null.x, null.y, null.z, 1, 0, 1);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object) && ENTITY::DOES_ENTITY_EXIST(Object1) && ENTITY::DOES_ENTITY_EXIST(Object2))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object1, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object2, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, false, 0, 0, 2, true);
						ENTITY::SET_ENTITY_COLLISION(Object, 1, 0);
						ENTITY::SET_ENTITY_COLLISION(Object1, 1, 0);

					}

				}

			}
			if (Menu::Option("Panto/HotKnife")) {
				uint Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				//hash2_PANTO
				Vector3 null; null.x = 0.0, null.y = 0.0; null.z = 0.0;
				Vector3 a; a.x = 0.0, a.y = 0.0, a.z = -0.2;//X Coord - Y Coord - Z Coord
				Vector3 b; b.x = 0.0, b.y = 0.0, b.z = 0.0;//Pitch - Roll - Yaw
														   //hash3_MiniGun
				Vector3 null1; null1.x = 0.0, null1.y = 0.0; null1.z = 0.0;
				Vector3 a1; a1.x = -0.60, a1.y = 1.60, a1.z = 0.20;
				Vector3 b1; b1.x = 0.0, b1.y = 0.0, b1.z = 88.0;
				//hash3_MiniGun2
				Vector3 null0; null0.x = 0.0, null0.y = 0.0; null0.z = 0.0;
				Vector3 a0; a0.x = 0.60, a0.y = 1.60, a0.z = 0.20;
				Vector3 b0; b0.x = 0.0, b0.y = 0.0, b0.z = 88.0;
				//hash4_WindScreen _ VANISHED NEEDS FIXING
				Vector3 null2; null2.x = 0.0, null2.y = 0.0; null2.z = 0.0;
				Vector3 a2; a2.x = 0.3, a2.y = 0.41, a2.z = 0.50;
				Vector3 b2; b2.x = -45.3, b2.y = 0.0, b2.z = -179.0;//87
																	//hash4_RLWheel1
				Vector3 null3; null3.x = 0.0, null3.y = 0.0; null3.z = 0.0;
				Vector3 a3; a3.x = -0.90, a3.y = -1.2, a3.z = 0.0; // -0.23
				Vector3 b3; b3.x = 0.0, b3.y = 0.0, b3.z = 86.0;
				//hash4_RFWindScreen 
				Vector3 null4; null4.x = 0.0, null4.y = 0.0; null4.z = 0.0;
				Vector3 a4; a4.x = -0.3, a4.y = 0.41, a4.z = 0.5;
				Vector3 b4; b4.x = -45.3, b4.y = 0.0, b4.z = -179.0;
				//hash4_RRWheel1
				Vector3 null5; null5.x = 0.0, null5.y = 0.0; null5.z = 0.0;
				Vector3 a5; a5.x = 0.92, a5.y = -1.2, a5.z = 0.01;
				Vector3 b5; b5.x = 0.0, b5.y = 0.0, b5.z = -92.0;
				//PUNTO -- FUCK UP NEEDS FIXING 
				Vector3 null6; null6.x = 0, null6.y = 0; null6.z = 0;
				Vector3 a6; a6.x = 0.0, a6.y = 0.0, a6.z = -0.2;
				Vector3 b6; b6.x = 0.0, b6.y = 0.0, b6.z = 0.0;
				//SIDES LEFT
				Vector3 null7; null7.x = 0, null7.y = 0; null7.z = 0;
				Vector3 a7; a7.x = -0.75, a7.y = 0.7, a7.z = -0.3;
				Vector3 b7; b7.x = 90.0, b7.y = 0.0, b7.z = 0.0;
				//SIDES RIGHT
				Vector3 null8; null8.x = 0, null8.y = 0; null8.z = 0;
				Vector3 a8; a8.x = 0.75, a8.y = 0.7, a8.z = -0.3;
				Vector3 b8; b8.x = 90.0, b8.y = 0.0, b8.z = 0.0;

				int hash = GAMEPLAY::GET_HASH_KEY("hotknife");
				int hash2_EMP = GAMEPLAY::GET_HASH_KEY("hei_prop_heist_emp");
				int hash3_MiniGun = GAMEPLAY::GET_HASH_KEY("prop_minigun_01");
				int hash4_Wheel = GAMEPLAY::GET_HASH_KEY("prop_wheel_01");
				int hash2 = GAMEPLAY::GET_HASH_KEY("panto");
				int hashWindow = GAMEPLAY::GET_HASH_KEY("prop_ballistic_shield");
				int hashSides = GAMEPLAY::GET_HASH_KEY("prop_cons_plank");




				STREAMING::REQUEST_MODEL(hashWindow);// WINDOW
				STREAMING::REQUEST_MODEL(hash2_EMP); // PANTO
				STREAMING::REQUEST_MODEL(hash3_MiniGun); // GUNS
				STREAMING::REQUEST_MODEL(hash4_Wheel); // back wheels
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(hashSides); // SIDE SKIRTS

				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hashSides) && STREAMING::HAS_MODEL_LOADED(hashWindow) && STREAMING::HAS_MODEL_LOADED(hash2_EMP) && STREAMING::HAS_MODEL_LOADED(hash3_MiniGun) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash4_Wheel))
				{
					int EMP = OBJECT::CREATE_OBJECT(hash2_EMP, null.x, null.y, null.z, 1, 0, 1);
					int MiniGun = OBJECT::CREATE_OBJECT(hash3_MiniGun, null1.x, null1.y, null1.z, 1, 0, 1);
					int MiniGun2 = OBJECT::CREATE_OBJECT(hash3_MiniGun, null0.x, null0.y, null0.z, 1, 0, 1);
					int WINDOW_1 = OBJECT::CREATE_OBJECT(hashWindow, null2.x, null2.y, null2.z, 1, 0, 1);
					int RLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null3.x, null3.y, null3.z, 1, 0, 1);
					int WINDOW_2 = OBJECT::CREATE_OBJECT(hashWindow, null4.x, null4.y, null4.z, 1, 0, 1);
					int RRWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null5.x, null5.y, null5.z, 1, 0, 1);
					int Object = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int LeftSide = OBJECT::CREATE_OBJECT(hashSides, null7.x, null7.y, null7.z, 1, 0, 1);
					int RightSide = OBJECT::CREATE_OBJECT(hashSides, null8.x, null8.y, null8.z, 1, 0, 1);


					if (ENTITY::DOES_ENTITY_EXIST(EMP) && ENTITY::DOES_ENTITY_EXIST(LeftSide) && ENTITY::DOES_ENTITY_EXIST(RightSide) && ENTITY::DOES_ENTITY_EXIST(MiniGun) && ENTITY::DOES_ENTITY_EXIST(MiniGun2) && ENTITY::DOES_ENTITY_EXIST(WINDOW_1) && ENTITY::DOES_ENTITY_EXIST(RLWheel1) && ENTITY::DOES_ENTITY_EXIST(WINDOW_2) && ENTITY::DOES_ENTITY_EXIST(RRWheel1))
					{
						int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);

						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
							STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
							ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
							ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_PED_ID(), true, true);
							STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
							ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
							VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
							VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
							VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Vehicle, "sm");
							VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Object, "sm");
							VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(Vehicle, 1);
							VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(Object, 1);

							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(EMP, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(MiniGun, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(MiniGun2, Vehicle, 0, a0.x, a0.y, a0.z, b0.x, b0.y, b0.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(WINDOW_1, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RLWheel1, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(WINDOW_2, Vehicle, 0, a4.x, a4.y, a4.z, b4.x, b4.y, b4.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RRWheel1, Vehicle, 0, a5.x, a5.y, a5.z, b5.x, b5.y, b5.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(LeftSide, Vehicle, 0, a7.x, a7.y, a7.z, b7.x, b7.y, b7.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RightSide, Vehicle, 0, a8.x, a8.y, a8.z, b8.x, b8.y, b8.z, 0, 1, 0, 0, 2, 1);


						}

					}

				}

			}
			if (Menu::Option("Monster Digger")) {
				uint Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				//hash2_Dozer
				Vector3 null; null.x = 0.0, null.y = 0.0; null.z = 0.0;
				Vector3 a; a.x = 0.0, a.y = 0.0, a.z = -0.4;   //X Coord - Y Coord - Z Coord
				Vector3 b; b.x = 0.0, b.y = 0.0, b.z = 0.0;   //Pitch - Roll - Yaw
															  //hash3_MiniGun LEFT
				Vector3 null1; null1.x = 0.0, null1.y = 0.0; null1.z = 0.0;
				Vector3 a1; a1.x = -0.70, a1.y = 1.80, a1.z = 0.98;
				Vector3 b1; b1.x = 0.0, b1.y = 0.0, b1.z = 88.0;
				//hash3_MiniGun2 RIGHT
				Vector3 null0; null0.x = 0.0, null0.y = 0.0; null0.z = 0.0;
				Vector3 a0; a0.x = 0.70, a0.y = 1.80, a0.z = 0.98;
				Vector3 b0; b0.x = 0.0, b0.y = 0.0, b0.z = 88.0;
				//hash4_Left BLUE left
				Vector3 null2; null2.x = 0.0, null2.y = 0.0; null2.z = 0.0;
				Vector3 a2; a2.x = -0.31, a2.y = 2.51, a2.z = 0.55;
				Vector3 b2; b2.x = 0.0, b2.y = 0.0, b2.z = -175.0;//87 - 179
																  //hash4_NIONS LEFT/back
				Vector3 null3; null3.x = 0.0, null3.y = 0.0; null3.z = 0.0;
				Vector3 a3; a3.x = 0.5, a3.y = -3.0, a3.z = -0.36; // -0.23
				Vector3 b3; b3.x = 0.0, b3.y = 0.0, b3.z = 86.0;
				//hash4_Right BLUE LIGHT
				Vector3 null4; null4.x = 0.0, null4.y = 0.0; null4.z = 0.0;
				Vector3 a4; a4.x = 0.31, a4.y = 2.51, a4.z = 0.55;
				Vector3 b4; b4.x = 0.0, b4.y = 0.0, b4.z = -175.0;
				//hash4_NIONS RIGHT
				Vector3 null5; null5.x = 0.0, null5.y = 0.0; null5.z = 0.0;
				Vector3 a5; a5.x = 0.92, a5.y = -2.0, a5.z = 0.01;
				Vector3 b5; b5.x = 0.0, b5.y = 0.0, b5.z = 89.0;
				//ENGINE
				Vector3 null6; null6.x = 0, null6.y = 0; null6.z = 0;
				Vector3 a6; a6.x = 0.0, a6.y = 1.76, a6.z = 0.86;
				Vector3 b6; b6.x = -0.0, b6.y = 0.0, b6.z = 0.0;
				//SIDES LEFT EMP
				Vector3 null7; null7.x = 0, null7.y = 0; null7.z = 0;
				Vector3 a7; a7.x = -0.88, a7.y = -1.8, a7.z = 1.0;
				Vector3 b7; b7.x = 0.0, b7.y = -51.9, b7.z = 0.0;
				//SIDES RIGHT EMP
				Vector3 null8; null8.x = 0, null8.y = 0; null8.z = 0;
				Vector3 a8; a8.x = 0.88, a8.y = -1.8, a8.z = 1.0;
				Vector3 b8; b8.x = 0.0, b8.y = 51.9, b8.z = 0.0;
				//BEAR
				Vector3 null9; null9.x = 0, null9.y = 0; null9.z = 0;
				Vector3 a9; a9.x = -1.0, a9.y = 2.7, a9.z = -0.4;
				Vector3 b9; b9.x = 0.0, b9.y = 0.0, b9.z = 156.5;
				//SPIKES
				Vector3 null10; null10.x = 0, null10.y = 0; null10.z = 0;
				Vector3 a10; a10.x = -0.12, a10.y = 0.59, a10.z = 1.9;
				Vector3 b10; b10.x = 0.0, b10.y = 0.0, b10.z = 0.0;

				int hash = GAMEPLAY::GET_HASH_KEY("monster");				// Monster Truck
				int hash1 = GAMEPLAY::GET_HASH_KEY("prop_car_engine_01");	// Car Engine
				int hash2 = GAMEPLAY::GET_HASH_KEY("bulldozer");			// Dozer
				int hash3 = GAMEPLAY::GET_HASH_KEY("prop_minigun_01");		// Mini GUn 
				int hash4 = GAMEPLAY::GET_HASH_KEY("v_ilev_uvcheetah");		// Nion Lights <-- needs changing
				int hash5 = GAMEPLAY::GET_HASH_KEY("prop_air_lights_05a");	// Blue Lights	
				int hash6 = GAMEPLAY::GET_HASH_KEY("hei_prop_heist_emp");	// Emp Lights	
				int hash7 = GAMEPLAY::GET_HASH_KEY("prop_mem_teddy_02");	// Large Teddy	
				int hash8 = GAMEPLAY::GET_HASH_KEY("p_stinger_04");			// Stinger Spikes

				STREAMING::REQUEST_MODEL(hash); 	// MONSTER
				STREAMING::REQUEST_MODEL(hash1); 	// Car Engine
				STREAMING::REQUEST_MODEL(hash2); 	// DOZER
				STREAMING::REQUEST_MODEL(hash3); 	// GUNS
				STREAMING::REQUEST_MODEL(hash4); 	// Nion Lights
				STREAMING::REQUEST_MODEL(hash5);	// Blue Lights
				STREAMING::REQUEST_MODEL(hash6); 	// Emp Lights
				STREAMING::REQUEST_MODEL(hash7); 	// Large Teddy
				STREAMING::REQUEST_MODEL(hash8); 	// SPIKES

				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash1) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash3) && STREAMING::HAS_MODEL_LOADED(hash4) && STREAMING::HAS_MODEL_LOADED(hash5) && STREAMING::HAS_MODEL_LOADED(hash6) && STREAMING::HAS_MODEL_LOADED(hash7) && STREAMING::HAS_MODEL_LOADED(hash8))
				{
					int Object = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Ebox = OBJECT::CREATE_OBJECT(hash1, null.x, null.y, null.z, 1, 0, 1);
					int GunL = OBJECT::CREATE_OBJECT(hash3, null1.x, null1.y, null1.z, 1, 0, 1);
					int GunR = OBJECT::CREATE_OBJECT(hash3, null0.x, null0.y, null0.z, 1, 0, 1);
					int LSign = OBJECT::CREATE_OBJECT(hash4, null3.x, null3.y, null3.z, 1, 0, 1);
					int RSign = OBJECT::CREATE_OBJECT(hash4, null5.x, null5.y, null5.z, 1, 0, 1);
					int LBlight = OBJECT::CREATE_OBJECT(hash5, null2.x, null2.y, null2.z, 1, 0, 1);
					int RBlight = OBJECT::CREATE_OBJECT(hash5, null4.x, null4.y, null4.z, 1, 0, 1);
					int LeftEmp = OBJECT::CREATE_OBJECT(hash6, null7.x, null7.y, null7.z, 1, 0, 1);
					int RightEmp = OBJECT::CREATE_OBJECT(hash6, null8.x, null8.y, null8.z, 1, 0, 1);
					int Teddy = OBJECT::CREATE_OBJECT(hash7, null9.x, null9.y, null9.z, 1, 0, 1);
					int Spikes = OBJECT::CREATE_OBJECT(hash8, null10.x, null10.y, null10.z, 1, 0, 1);

					if (ENTITY::DOES_ENTITY_EXIST(Ebox) && ENTITY::DOES_ENTITY_EXIST(GunL) && ENTITY::DOES_ENTITY_EXIST(GunR) && ENTITY::DOES_ENTITY_EXIST(LSign) && ENTITY::DOES_ENTITY_EXIST(RSign) && ENTITY::DOES_ENTITY_EXIST(LBlight) && ENTITY::DOES_ENTITY_EXIST(RBlight) && ENTITY::DOES_ENTITY_EXIST(LeftEmp) && ENTITY::DOES_ENTITY_EXIST(RightEmp) && ENTITY::DOES_ENTITY_EXIST(Teddy) && ENTITY::DOES_ENTITY_EXIST(Spikes))
					{
						int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);

						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
							STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
							ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
							ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_PED_ID(), true, true);
							VEHICLE::SET_VEHICLE_MOD_KIT(Vehicle, 5);
							VEHICLE::SET_VEHICLE_WINDOW_TINT(Vehicle, 5);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);

							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Ebox, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(GunL, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(GunR, Vehicle, 0, a0.x, a0.y, a0.z, b0.x, b0.y, b0.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(LBlight, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RBlight, Vehicle, 0, a4.x, a4.y, a4.z, b4.x, b4.y, b4.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(LSign, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RSign, Vehicle, 0, a5.x, a5.y, a5.z, b5.x, b5.y, b5.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(LeftEmp, Vehicle, 0, a7.x, a7.y, a7.z, b7.x, b7.y, b7.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RightEmp, Vehicle, 0, a8.x, a8.y, a8.z, b8.x, b8.y, b8.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Teddy, Vehicle, 0, a9.x, a9.y, a9.z, b9.x, b9.y, b9.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Spikes, Vehicle, 0, a10.x, a10.y, a10.z, b10.x, b10.y, b10.z, 0, 1, 0, 0, 2, 1);
						}

					}

				}

			}
			if (Menu::Option("Train")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("massacro2");
				int hash2 = GAMEPLAY::GET_HASH_KEY("freight");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Object, true, true);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Object, "sm");
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("Classic Car Mix")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("ztype");
				int hash2 = GAMEPLAY::GET_HASH_KEY("btype");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::erstelle_fahr(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::erstelle_fahr(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Vehicle, "Solitary");
						VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Object, "Solitary");
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}

		}
		break;
		case visions:
		{
			Menu::Title("vision effects");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Features::ClearVisions("Set To Default", "Set To Default");
			Features::addVisOption("Bank_HLWD", "Bank_HLWD", "Chnaged To: Bank_HLWD");
			Features::addVisOption("Barry1_Stoned", "Barry1_Stoned", "Chnaged To: Barry1_Stoned");
			Features::addVisOption("BarryFadeOut", "BarryFadeOut", "Chnaged To: BarryFadeOut");
			Features::addVisOption("baseTONEMAPPING", "baseTONEMAPPING", "Chnaged To: baseTONEMAPPING");
			Features::addVisOption("Bikers", "Bikers", "Chnaged To: Bikers");
			Features::addVisOption("BikersSPLASH", "BikersSPLASH", "Chnaged To: BikersSPLASH");
			Features::addVisOption("blackNwhite", "blackNwhite", "Chnaged To: blackNwhite");
			Features::addVisOption("BlackOut", "BlackOut", "Chnaged To: BlackOut");
			Features::addVisOption("Bloom", "Bloom", "Chnaged To: Bloom");
			Features::addVisOption("BloomLight", "BloomLight", "Chnaged To: BloomLight");
			Features::addVisOption("buildingTOP", "buildingTOP", "Chnaged To: buildingTOP");
			Features::addVisOption("BulletTimeDark", "BulletTimeDark", "Chnaged To: BulletTimeDark");
			Features::addVisOption("BulletTimeLight", "BulletTimeLight", "Chnaged To: BulletTimeLight");
			Features::addVisOption("CAMERA_BW", "CAMERA_BW", "Chnaged To: CAMERA_BW");
			Features::addVisOption("CAMERA_secuirity", "CAMERA_secuirity", "Chnaged To: CAMERA_secuirity");
			Features::addVisOption("CAMERA_secuirity_FUZZ", "CAMERA_secuirity_FUZZ", "Chnaged To: CAMERA_secuirity_FUZZ");
			Features::addVisOption("canyon_mission", "canyon_mission", "Chnaged To: canyon_mission");
			Features::addVisOption("carMOD_underpass", "carMOD_underpass", "Chnaged To: carMOD_underpass");
			Features::addVisOption("carpark", "carpark", "Chnaged To: carpark");
			Features::addVisOption("carpark_dt1_02", "carpark_dt1_02", "Chnaged To: carpark_dt1_02");
			Features::addVisOption("carpark_dt1_03", "carpark_dt1_03", "Chnaged To: carpark_dt1_03");
			Features::addVisOption("cashdepot", "cashdepot", "Chnaged To: cashdepot");
			Features::addVisOption("cashdepotEMERGENCY", "cashdepotEMERGENCY", "Chnaged To: cashdepotEMERGENCY");
			Features::addVisOption("cBank_back", "cBank_back", "Chnaged To: cBank_back");
			Features::addVisOption("cBank_front", "cBank_front", "Chnaged To: cBank_front");
			Features::addVisOption("ch2_tunnel_whitelight", "ch2_tunnel_whitelight", "Chnaged To: ch2_tunnel_whitelight");
			Features::addVisOption("CH3_06_water", "CH3_06_water", "Chnaged To: CH3_06_water");
			Features::addVisOption("CHOP", "CHOP", "Chnaged To: CHOP");
			Features::addVisOption("cinema", "cinema", "Chnaged To: cinema");
			Features::addVisOption("cinema_001", "cinema_001", "Chnaged To: cinema_001");
			Features::addVisOption("cops", "cops", "Chnaged To: cops");
			Features::addVisOption("CopsSPLASH", "CopsSPLASH", "Chnaged To: CopsSPLASH");
			Features::addVisOption("crane_cam", "crane_cam", "Chnaged To: crane_cam");
			Features::addVisOption("crane_cam_cinematic", "crane_cam_cinematic", "Chnaged To: crane_cam_cinematic");
			Features::addVisOption("CS1_railwayB_tunnel", "CS1_railwayB_tunnel", "Chnaged To: CS1_railwayB_tunnel");
			Features::addVisOption("CS3_rail_tunnel", "CS3_rail_tunnel", "Chnaged To: CS3_rail_tunnel");
			Features::addVisOption("CUSTOM_streetlight", "custreetlight", "Chnaged To: CUSTOM_streetlight");
			Features::addVisOption("damage", "damage", "Chnaged To: damage");
			Features::addVisOption("death", "death", "Chnaged To: death");
			Features::addVisOption("DEFAULT", "DEFAULT", "Chnaged To: DEFAULT");
			Features::addVisOption("DefaultColorCode", "DefaultColorCode", "Chnaged To: DefaultColorCode");
			Features::addVisOption("DONT_overide_sunpos", "DONT_overide_sunpos", "Chnaged To: DONT_overide_sunpos");
			Features::addVisOption("Dont_tazeme_bro", "Dont_tazeme_bro", "Chnaged To: Dont_tazeme_bro");
			Features::addVisOption("dont_tazeme_bro_b", "dont_tazeme_bro_b", "Chnaged To: dont_tazeme_bro_b");
			Features::addVisOption("downtown_FIB_cascades_opt", "downtown_FIB_cascades_opt", "Chnaged To: downtown_FIB_cascades_opt");
			Features::addVisOption("DrivingFocusDark", "DrivingFocusDark", "Chnaged To: DrivingFocusDark");
			Features::addVisOption("DrivingFocusLight", "DrivingFocusLight", "Chnaged To: DrivingFocusLight");
			Features::addVisOption("DRUG_2_drive", "DRUG_2_drive", "Chnaged To: DRUG_2_drive");
			Features::addVisOption("Drug_deadman", "Drug_deadman", "Chnaged To: Drug_deadman");
			Features::addVisOption("Drug_deadman_blend", "Drug_deadman_blend", "Chnaged To: Drug_deadman_blend");
			Features::addVisOption("drug_drive_blend01", "drug_drive_blend01", "Chnaged To: drug_drive_blend01");
			Features::addVisOption("drug_drive_blend02", "drug_drive_blend02", "Chnaged To: drug_drive_blend02");
			Features::addVisOption("drug_flying_01", "drug_flying_01", "Chnaged To: drug_flying_01");
			Features::addVisOption("drug_flying_02", "drug_flying_02", "Chnaged To: drug_flying_02");
			Features::addVisOption("drug_flying_base", "drug_flying_base", "Chnaged To: drug_flying_base");
			Features::addVisOption("DRUG_gas_huffin", "DRUG_gas_huffin", "Chnaged To: DRUG_gas_huffin");
			Features::addVisOption("drug_wobbly", "drug_wobbly", "Chnaged To: drug_wobbly");
			Features::addVisOption("Drunk", "Drunk", "Chnaged To: Drunk");
			Features::addVisOption("dying", "dying", "Chnaged To: dying");
			Features::addVisOption("eatra_bouncelight_beach", "eatra_bouncelight_beach", "Chnaged To: eatra_bouncelight_beach");
			Features::addVisOption("epsilion", "epsilion", "Chnaged To: epsilion");
			Features::addVisOption("exile1_exit", "exile1_exit", "Chnaged To: exile1_exit");
			Features::addVisOption("exile1_plane", "exile1_plane", "Chnaged To: exile1_plane");
			Features::addVisOption("ExplosionJosh", "ExplosionJosh", "Chnaged To: ExplosionJosh");
			Features::addVisOption("ext_int_extlight_large", "ext_int_extlight_large", "Chnaged To: ext_int_extlight_large");
			Features::addVisOption("EXTRA_bouncelight", "EXTRA_bouncelight", "Chnaged To: EXTRA_bouncelight");
			Features::addVisOption("eyeINtheSKY", "eyeINtheSKY", "Chnaged To: eyeINtheSKY");
			Features::addVisOption("Facebook_NEW", "Facebook_NEW", "Chnaged To: Facebook_NEW");
			Features::addVisOption("facebook_serveroom", "facebook_serveroom", "Chnaged To: facebook_serveroom");
			Features::addVisOption("FIB_5", "FIB_5", "Chnaged To: FIB_5");
			Features::addVisOption("FIB_6", "FIB_6", "Chnaged To: FIB_6");
			Features::addVisOption("FIB_A", "FIB_A", "Chnaged To: FIB_A");
			Features::addVisOption("FIB_B", "FIB_B", "Chnaged To: FIB_B");
			Features::addVisOption("FIB_interview", "FIB_interview", "Chnaged To: FIB_interview");
			Features::addVisOption("FIB_interview_optimise", "FIB_interview_optimise", "Chnaged To: FIB_interview_optimise");
			Features::addVisOption("FinaleBank", "FinaleBank", "Chnaged To: FinaleBank");
			Features::addVisOption("FinaleBankexit", "FinaleBankexit", "Chnaged To: FinaleBankexit");
			Features::addVisOption("FinaleBankMid", "FinaleBankMid", "Chnaged To: FinaleBankMid");
			Features::addVisOption("fireDEPT", "fireDEPT", "Chnaged To: fireDEPT");
			Features::addVisOption("FORdoron_delete", "FORdoron_delete", "Chnaged To: FORdoron_delete");
			Features::addVisOption("Forest", "Forest", "Chnaged To: Forest");
			Features::addVisOption("FrankilinsHOUSEhills", "FrankilinsHOUSEhills", "Chnaged To: FrankilinsHOUSEhills");
			Features::addVisOption("frankilnsAUNTS_new", "frankilnsAUNTS_new", "Chnaged To: frankilnsAUNTS_new");
			Features::addVisOption("frankilnsAUNTS_SUNdir", "frankilnsAUNTS_SUNdir", "Chnaged To: frankilnsAUNTS_SUNdir");
			Features::addVisOption("FRANKLIN", "FRANKLIN", "Chnaged To: FRANKLIN");
			Features::addVisOption("FranklinColorCode", "FranklinColorCode", "Chnaged To: FranklinColorCode");
			Features::addVisOption("FranklinColorCodeBasic", "FranklinColorCodeBasic", "Chnaged To: FranklinColorCodeBasic");
			Features::addVisOption("FullAmbientmult_interior", "FullAmbientmult_interior", "Chnaged To: FullAmbientmult_interior");
			Features::addVisOption("gallery_refmod", "gallery_refmod", "Chnaged To: gallery_refmod");
			Features::addVisOption("garage", "garage", "Chnaged To: garage");
			Features::addVisOption("gorge_reflection_gpu", "gorge_reflection_gpu", "Chnaged To: gorge_reflection_gpu");
			Features::addVisOption("gorge_reflectionoffset", "gorge_reflectionoffset", "Chnaged To: gorge_reflectionoffset");
			Features::addVisOption("gorge_reflectionoffset2", "gorge_reflectionoffset2", "Chnaged To: gorge_reflectionoffset2");
			Features::addVisOption("graveyard_shootout", "graveyard_shootout", "Chnaged To: graveyard_shootout");
			Features::addVisOption("gunclub", "gunclub", "Chnaged To: gunclub");
			Features::addVisOption("gunclubrange", "gunclubrange", "Chnaged To: gunclubrange");
			Features::addVisOption("gunshop", "gunshop", "Chnaged To: gunshop");
			Features::addVisOption("gunstore", "gunstore", "Chnaged To: gunstore");
			Features::addVisOption("half_direct", "half_direct", "Chnaged To: half_direct");
			Features::addVisOption("hangar_lightsmod", "hangar_lightsmod", "Chnaged To: hangar_lightsmod");
			Features::addVisOption("Hanger_INTmods", "Hanger_INTmods", "Chnaged To: Hanger_INTmods");
			Features::addVisOption("heathaze", "heathaze", "Chnaged To: heathaze");
			Features::addVisOption("helicamfirst", "helicamfirst", "Chnaged To: helicamfirst");
			Features::addVisOption("Hicksbar", "Hicksbar", "Chnaged To: Hicksbar");
			Features::addVisOption("HicksbarNEW", "HicksbarNEW", "Chnaged To: HicksbarNEW");
			Features::addVisOption("hillstunnel", "hillstunnel", "Chnaged To: hillstunnel");
			Features::addVisOption("Hint_cam", "Hint_cam", "Chnaged To: Hint_cam");
			Features::addVisOption("hitped", "hitped", "Chnaged To: hitped");
			Features::addVisOption("hud_def_blur", "hud_def_blur", "Chnaged To: hud_def_blur");
			Features::addVisOption("hud_def_colorgrade", "hud_def_colorgrade", "Chnaged To: hud_def_colorgrade");
			Features::addVisOption("hud_def_desat_cold", "hud_def_desat_cold", "Chnaged To: hud_def_desat_cold");
			Features::addVisOption("hud_def_desat_cold_kill", "hud_def_desat_cold_kill", "Chnaged To: hud_def_desat_cold_kill");
			Features::addVisOption("hud_def_desat_Franklin", "hud_def_desat_Franklin", "Chnaged To: hud_def_desat_Franklin");
			Features::addVisOption("hud_def_desat_Michael", "hud_def_desat_Michael", "Chnaged To: hud_def_desat_Michael");
			Features::addVisOption("hud_def_desat_Neutral", "hud_def_desat_Neutral", "Chnaged To: hud_def_desat_Neutral");
			Features::addVisOption("hud_def_desat_switch", "hud_def_desat_switch", "Chnaged To: hud_def_desat_switch");
			Features::addVisOption("hud_def_desat_Trevor", "hud_def_desat_Trevor", "Chnaged To: hud_def_desat_Trevor");
			Features::addVisOption("hud_def_desatcrunch", "hud_def_desatcrunch", "Chnaged To: hud_def_desatcrunch");
			Features::addVisOption("hud_def_flash", "hud_def_flash", "Chnaged To: hud_def_flash");
			Features::addVisOption("hud_def_focus", "hud_def_focus", "Chnaged To: hud_def_focus");
			Features::addVisOption("hud_def_Franklin", "hud_def_Franklin", "Chnaged To: hud_def_Franklin");
			Features::addVisOption("hud_def_lensdistortion", "hud_def_lensdistortion", "Chnaged To: hud_def_lensdistortion");
			Features::addVisOption("hud_def_Michael", "hud_def_Michael", "Chnaged To: hud_def_Michael");
			Features::addVisOption("hud_def_Trevor", "hud_def_Trevor", "Chnaged To: hud_def_Trevor");
			Features::addVisOption("id1_11_tunnel", "id1_11_tunnel", "Chnaged To: id1_11_tunnel");
			Features::addVisOption("int_amb_mult_large", "int_amb_mult_large", "Chnaged To: int_amb_mult_large");
			Features::addVisOption("int_Barber1", "int_Barber1", "Chnaged To: int_Barber1");
			Features::addVisOption("int_carmod_small", "int_carmod_small", "Chnaged To: int_carmod_small");
			Features::addVisOption("int_carshowroom", "int_carshowroom", "Chnaged To: int_carshowroom");
			Features::addVisOption("int_chopshop", "int_chopshop", "Chnaged To: int_chopshop");
			Features::addVisOption("int_clean_extlight_large", "int_clean_extlight_large", "Chnaged To: int_clean_extlight_large");
			Features::addVisOption("int_clean_extlight_none", "int_clean_extlight_none", "Chnaged To: int_clean_extlight_none");
			Features::addVisOption("int_clean_extlight_small", "int_clean_extlight_small", "Chnaged To: int_clean_extlight_small");
			Features::addVisOption("int_ClothesHi", "int_ClothesHi", "Chnaged To: int_ClothesHi");
			Features::addVisOption("int_clotheslow_large", "int_clotheslow_large", "Chnaged To: int_clotheslow_large");
			Features::addVisOption("int_cluckinfactory_none", "int_cluckinfactory_none", "Chnaged To: int_cluckinfactory_none");
			Features::addVisOption("int_cluckinfactory_small", "int_cluckinfactory_small", "Chnaged To: int_cluckinfactory_small");
			Features::addVisOption("int_ControlTower_none", "int_ControlTower_none", "Chnaged To: int_ControlTower_none");
			Features::addVisOption("int_ControlTower_small", "int_ControlTower_small", "Chnaged To: int_ControlTower_small");
			Features::addVisOption("int_dockcontrol_small", "int_dockcontrol_small", "Chnaged To: int_dockcontrol_small");
			Features::addVisOption("int_extlght_sm_cntrst", "int_extlght_sm_cntrst", "Chnaged To: int_extlght_sm_cntrst");
			Features::addVisOption("int_extlight_large", "int_extlight_large", "Chnaged To: int_extlight_large");
			Features::addVisOption("int_extlight_large_fog", "int_extlight_large_fog", "Chnaged To: int_extlight_large_fog");
			Features::addVisOption("int_extlight_none", "int_extlight_none", "Chnaged To: int_extlight_none");
			Features::addVisOption("int_extlight_none_dark", "int_extlight_none_dark", "Chnaged To: int_extlight_none_dark");
			Features::addVisOption("int_extlight_none_dark_fog", "int_extlight_none_dark_fog", "Chnaged To: int_extlight_none_dark_fog");
			Features::addVisOption("int_extlight_none_fog", "int_extlight_none_fog", "Chnaged To: int_extlight_none_fog");
			Features::addVisOption("int_extlight_small", "int_extlight_small", "Chnaged To: int_extlight_small");
			Features::addVisOption("int_extlight_small_clipped", "int_extlight_small_clipped", "Chnaged To: int_extlight_small_clipped");
			Features::addVisOption("int_extlight_small_fog", "int_extlight_small_fog", "Chnaged To: int_extlight_small_fog");
			Features::addVisOption("int_Farmhouse_none", "int_Farmhouse_none", "Chnaged To: int_Farmhouse_none");
			Features::addVisOption("int_Farmhouse_small", "int_Farmhouse_small", "Chnaged To: int_Farmhouse_small");
			Features::addVisOption("int_FranklinAunt_small", "int_FranklinAunt_small", "Chnaged To: int_FranklinAunt_small");
			Features::addVisOption("INT_FullAmbientmult", "INT_FullAmbientmult", "Chnaged To: INT_FullAmbientmult");
			Features::addVisOption("INT_FULLAmbientmult_art", "INT_FULLAmbientmult_art", "Chnaged To: INT_FULLAmbientmult_art");
			Features::addVisOption("INT_FULLAmbientmult_both", "INT_FULLAmbientmult_both", "Chnaged To: INT_FULLAmbientmult_both");
			Features::addVisOption("INT_garage", "INT_garage", "Chnaged To: INT_garage");
			Features::addVisOption("int_GasStation", "int_GasStation", "Chnaged To: int_GasStation");
			Features::addVisOption("int_hanger_none", "int_hanger_none", "Chnaged To: int_hanger_none");
			Features::addVisOption("int_hanger_small", "int_hanger_small", "Chnaged To: int_hanger_small");
			Features::addVisOption("int_Hospital2_DM", "int_Hospital2_DM", "Chnaged To: int_Hospital2_DM");
			Features::addVisOption("int_Hospital_Blue", "int_Hospital_Blue", "Chnaged To: int_Hospital_Blue");
			Features::addVisOption("int_Hospital_BlueB", "int_Hospital_BlueB", "Chnaged To: int_Hospital_BlueB");
			Features::addVisOption("int_Hospital_DM", "int_Hospital_DM", "Chnaged To: int_Hospital_DM");
			Features::addVisOption("int_lesters", "int_lesters", "Chnaged To: int_lesters");
			Features::addVisOption("int_Lost_none", "int_Lost_none", "Chnaged To: int_Lost_none");
			Features::addVisOption("int_Lost_small", "int_Lost_small", "Chnaged To: int_Lost_small");
			Features::addVisOption("int_methlab_small", "int_methlab_small", "Chnaged To: int_methlab_small");
			Features::addVisOption("int_motelroom", "int_motelroom", "Chnaged To: int_motelroom");
			Features::addVisOption("INT_NO_fogALPHA", "INT_NO_fogALPHA", "Chnaged To: INT_NO_fogALPHA");
			Features::addVisOption("INT_NoAmbientmult", "INT_NoAmbientmult", "Chnaged To: INT_NoAmbientmult");
			Features::addVisOption("INT_NoAmbientmult_art", "INT_NoAmbientmult_art", "Chnaged To: INT_NoAmbientmult_art");
			Features::addVisOption("INT_NoAmbientmult_both", "INT_NoAmbientmult_both", "Chnaged To: INT_NoAmbientmult_both");
			Features::addVisOption("INT_NOdirectLight", "INT_NOdirectLight", "Chnaged To: INT_NOdirectLight");
			Features::addVisOption("INT_nowaterREF", "INT_nowaterREF", "Chnaged To: INT_nowaterREF");
			Features::addVisOption("int_office_Lobby", "int_office_Lobby", "Chnaged To: int_office_Lobby");
			Features::addVisOption("int_office_LobbyHall", "int_office_LobbyHall", "Chnaged To: int_office_LobbyHall");
			Features::addVisOption("INT_posh_hairdresser", "INT_posh_hairdresser", "Chnaged To: INT_posh_hairdresser");
			Features::addVisOption("INT_streetlighting", "INT_streetlighting", "Chnaged To: INT_streetlighting");
			Features::addVisOption("int_tattoo", "int_tattoo", "Chnaged To: int_tattoo");
			Features::addVisOption("int_tattoo_B", "int_tattoo_B", "Chnaged To: int_tattoo_B");
			Features::addVisOption("int_tunnel_none_dark", "int_tunnel_none_dark", "Chnaged To: int_tunnel_none_dark");
			Features::addVisOption("interior_WATER_lighting", "interior_WATER_lighting", "Chnaged To: interior_WATER_lighting");
			Features::addVisOption("introblue", "introblue", "Chnaged To: introblue");
			Features::addVisOption("jewel_gas", "jewel_gas", "Chnaged To: jewel_gas");
			Features::addVisOption("jewel_optim", "jewel_optim", "Chnaged To: jewel_optim");
			Features::addVisOption("jewelry_entrance", "jewelry_entrance", "Chnaged To: jewelry_entrance");
			Features::addVisOption("jewelry_entrance_INT", "jewelry_entrance_INT", "Chnaged To: jewelry_entrance_INT");
			Features::addVisOption("jewelry_entrance_INT_fog", "jewelry_entrance_INT_fog", "Chnaged To: jewelry_entrance_INT_fog");
			Features::addVisOption("KT_underpass", "KT_underpass", "Chnaged To: KT_underpass");
			Features::addVisOption("lab_none", "lab_none", "Chnaged To: lab_none");
			Features::addVisOption("lab_none_dark", "lab_none_dark", "Chnaged To: lab_none_dark");
			Features::addVisOption("lab_none_dark_fog", "lab_none_dark_fog", "Chnaged To: lab_none_dark_fog");
			Features::addVisOption("lab_none_exit", "lab_none_exit", "Chnaged To: lab_none_exit");
			Features::addVisOption("LifeInvaderLOD", "LifeInvaderLOD", "Chnaged To: LifeInvaderLOD");
			Features::addVisOption("lightning", "lightning", "Chnaged To: lightning");
			Features::addVisOption("lightning_cloud", "lightning_cloud", "Chnaged To: lightning_cloud");
			Features::addVisOption("lightning_strong", "lightning_strong", "Chnaged To: lightning_strong");
			Features::addVisOption("lightning_weak", "lightning_weak", "Chnaged To: lightning_weak");
			Features::addVisOption("LightPollutionHills", "LightPollutionHills", "Chnaged To: LightPollutionHills");
			Features::addVisOption("lightpolution", "lightpolution", "Chnaged To: lightpolution");
			Features::addVisOption("LIGHTSreduceFALLOFF", "LIGHTSreduceFALLOFF", "Chnaged To: LIGHTSreduceFALLOFF");
			Features::addVisOption("LODmult_global_reduce", "LODmult_global_reduce", "Chnaged To: LODmult_global_reduce");
			Features::addVisOption("LODmult_global_reduce_NOHD", "LODmult_global_reduce_NOHD", "Chnaged To: LODmult_global_reduce_NOHD");
			Features::addVisOption("LODmult_HD_orphan_LOD_reduce", "LODmult_HD_orphan_LOD_reduce", "Chnaged To: LODmult_HD_orphan_LOD_reduce");
			Features::addVisOption("LODmult_HD_orphan_reduce", "LODmult_HD_orphan_reduce", "Chnaged To: LODmult_HD_orphan_reduce");
			Features::addVisOption("LODmult_LOD_reduce", "LODmult_LOD_reduce", "Chnaged To: LODmult_LOD_reduce");
			Features::addVisOption("LODmult_SLOD1_reduce", "LODmult_SLOD1_reduce", "Chnaged To: LODmult_SLOD1_reduce");
			Features::addVisOption("LODmult_SLOD2_reduce", "LODmult_SLOD2_reduce", "Chnaged To: LODmult_SLOD2_reduce");
			Features::addVisOption("LODmult_SLOD3_reduce", "LODmult_SLOD3_reduce", "Chnaged To: LODmult_SLOD3_reduce");
			Features::addVisOption("metro", "metro", "Chnaged To: metro");
			Features::addVisOption("METRO_platform", "METRO_platform", "Chnaged To: METRO_platform");
			Features::addVisOption("METRO_Tunnels", "METRO_Tunnels", "Chnaged To: METRO_Tunnels");
			Features::addVisOption("METRO_Tunnels_entrance", "METRO_Tunnels_entrance", "Chnaged To: METRO_Tunnels_entrance");
			Features::addVisOption("MichaelColorCode", "MichaelColorCode", "Chnaged To: MichaelColorCode");
			Features::addVisOption("MichaelColorCodeBasic", "MichaelColorCodeBasic", "Chnaged To: MichaelColorCodeBasic");
			Features::addVisOption("MichaelsDarkroom", "MichaelsDarkroom", "Chnaged To: MichaelsDarkroom");
			Features::addVisOption("MichaelsDirectional", "MichaelsDirectional", "Chnaged To: MichaelsDirectional");
			Features::addVisOption("MichaelsNODirectional", "MichaelsNODirectional", "Chnaged To: MichaelsNODirectional");
			Features::addVisOption("micheal", "micheal", "Chnaged To: micheal");
			Features::addVisOption("micheals_lightsOFF", "micheals_lightsOFF", "Chnaged To: micheals_lightsOFF");
			Features::addVisOption("michealspliff", "michealspliff", "Chnaged To: michealspliff");
			Features::addVisOption("michealspliff_blend", "michealspliff_blend", "Chnaged To: michealspliff_blend");
			Features::addVisOption("michealspliff_blend02", "michealspliff_blend02", "Chnaged To: michealspliff_blend02");
			Features::addVisOption("militarybase_nightlight", "militarybase_nightlight", "Chnaged To: militarybase_nightlight");
			Features::addVisOption("morebloomnumMods=3", "morebloomnumMods=3", "Chnaged To: morebloomnumMods=3");
			Features::addVisOption("morgue_dark", "morgue_dark", "Chnaged To: morgue_dark");
			Features::addVisOption("Mp_apart_mid", "Mp_apart_mid", "Chnaged To: Mp_apart_mid");
			Features::addVisOption("MP_Bull_tost", "MP_Bull_tost", "Chnaged To: MP_Bull_tost");
			Features::addVisOption("MP_Bull_tost_blend", "MP_Bull_tost_blend", "Chnaged To: MP_Bull_tost_blend");
			Features::addVisOption("MP_corona_switch", "MP_corona_switch", "Chnaged To: MP_corona_switch");
			Features::addVisOption("MP_death_grade", "MP_death_grade", "Chnaged To: MP_death_grade");
			Features::addVisOption("MP_death_grade_blend01", "MP_death_grade_blend01", "Chnaged To: MP_death_grade_blend01");
			Features::addVisOption("MP_death_grade_blend02", "MP_death_grade_blend02", "Chnaged To: MP_death_grade_blend02");
			Features::addVisOption("MP_Garage_L", "MP_Garage_L", "Chnaged To: MP_Garage_L");
			Features::addVisOption("MP_heli_cam", "MP_heli_cam", "Chnaged To: MP_heli_cam");
			Features::addVisOption("MP_intro_logo", "MP_intro_logo", "Chnaged To: MP_intro_logo");
			Features::addVisOption("MP_job_load", "MP_job_load", "Chnaged To: MP_job_load");
			Features::addVisOption("MP_job_lose", "MP_job_lose", "Chnaged To: MP_job_lose");
			Features::addVisOption("MP_job_win", "MP_job_win", "Chnaged To: MP_job_win");
			Features::addVisOption("MP_Killstreak", "MP_Killstreak", "Chnaged To: MP_Killstreak");
			Features::addVisOption("MP_Killstreak_blend", "MP_Killstreak_blend", "Chnaged To: MP_Killstreak_blend");
			Features::addVisOption("MP_Loser", "MP_Loser", "Chnaged To: MP_Loser");
			Features::addVisOption("MP_Loser_blend", "MP_Loser_blend", "Chnaged To: MP_Loser_blend");
			Features::addVisOption("MP_lowgarage", "MP_lowgarage", "Chnaged To: MP_lowgarage");
			Features::addVisOption("MP_MedGarage", "MP_MedGarage", "Chnaged To: MP_MedGarage");
			Features::addVisOption("MP_Powerplay", "MP_Powerplay", "Chnaged To: MP_Powerplay");
			Features::addVisOption("MP_Powerplay_blend", "MP_Powerplay_blend", "Chnaged To: MP_Powerplay_blend");
			Features::addVisOption("MP_race_finish", "MP_race_finish", "Chnaged To: MP_race_finish");
			Features::addVisOption("MP_select", "MP_select", "Chnaged To: MP_select");
			Features::addVisOption("MP_Studio_Lo", "MP_Studio_Lo", "Chnaged To: MP_Studio_Lo");
			Features::addVisOption("MPApartHigh", "MPApartHigh", "Chnaged To: MPApartHigh");
			Features::addVisOption("Multipayer_spectatorCam", "Multipayer_spectatorCam", "Chnaged To: Multipayer_spectatorCam");
			Features::addVisOption("multiplayer_ped_fight", "multiplayer_ped_fight", "Chnaged To: multiplayer_ped_fight");
			Features::addVisOption("nervousRON_fog", "nervousRON_fog", "Chnaged To: nervousRON_fog");
			Features::addVisOption("NeutralColorCode", "NeutralColorCode", "Chnaged To: NeutralColorCode");
			Features::addVisOption("NeutralColorCodeBasic", "NeutralColorCodeBasic", "Chnaged To: NeutralColorCodeBasic");
			Features::addVisOption("NeutralColorCodeLight", "NeutralColorCodeLight", "Chnaged To: NeutralColorCodeLight");
			Features::addVisOption("NEW_abattoir", "NEW_abattoir", "Chnaged To: NEW_abattoir");
			Features::addVisOption("new_bank", "new_bank", "Chnaged To: new_bank");
			Features::addVisOption("NEW_jewel", "NEW_jewel", "Chnaged To: NEW_jewel");
			Features::addVisOption("NEW_jewel_EXIT", "NEW_jewel_EXIT", "Chnaged To: NEW_jewel_EXIT");
			Features::addVisOption("NEW_lesters", "NEW_lesters", "Chnaged To: NEW_lesters");
			Features::addVisOption("NEW_ornate_bank", "NEW_ornate_bank", "Chnaged To: NEW_ornate_bank");
			Features::addVisOption("NEW_ornate_bank_entrance", "NEW_ornate_bank_entrance", "Chnaged To: NEW_ornate_bank_entrance");
			Features::addVisOption("NEW_ornate_bank_office", "NEW_ornate_bank_office", "Chnaged To: NEW_ornate_bank_office");
			Features::addVisOption("NEW_ornate_bank_safe", "NEW_ornate_bank_safe", "Chnaged To: NEW_ornate_bank_safe");
			Features::addVisOption("New_sewers", "New_sewers", "Chnaged To: New_sewers");
			Features::addVisOption("NEW_shrinksOffice", "NEW_shrinksOffice", "Chnaged To: NEW_shrinksOffice");
			Features::addVisOption("NEW_station_unfinished", "NEW_station_unfinished", "Chnaged To: NEW_station_unfinished");
			Features::addVisOption("new_stripper_changing", "new_stripper_changing", "Chnaged To: new_stripper_changing");
			Features::addVisOption("NEW_trevorstrailer", "NEW_trevorstrailer", "Chnaged To: NEW_trevorstrailer");
			Features::addVisOption("NEW_tunnels", "NEW_tunnels", "Chnaged To: NEW_tunnels");
			Features::addVisOption("NEW_tunnels_ditch", "NEW_tunnels_ditch", "Chnaged To: NEW_tunnels_ditch");
			Features::addVisOption("new_tunnels_entrance", "new_tunnels_entrance", "Chnaged To: new_tunnels_entrance");
			Features::addVisOption("NEW_tunnels_hole", "NEW_tunnels_hole", "Chnaged To: NEW_tunnels_hole");
			Features::addVisOption("NEW_yellowtunnels", "NEW_yellowtunnels", "Chnaged To: NEW_yellowtunnels");
			Features::addVisOption("NewMicheal", "NewMicheal", "Chnaged To: NewMicheal");
			Features::addVisOption("NewMicheal_night", "NewMicheal_night", "Chnaged To: NewMicheal_night");
			Features::addVisOption("NewMicheal_upstairs", "NewMicheal_upstairs", "Chnaged To: NewMicheal_upstairs");
			Features::addVisOption("NewMichealgirly", "NewMichealgirly", "Chnaged To: NewMichealgirly");
			Features::addVisOption("NewMichealstoilet", "NewMichealstoilet", "Chnaged To: NewMichealstoilet");
			Features::addVisOption("NewMichealupstairs", "NewMichealupstairs", "Chnaged To: NewMichealupstairs");
			Features::addVisOption("NewMod", "NewMod", "Chnaged To: NewMod");
			Features::addVisOption("nextgen", "nextgen", "Chnaged To: nextgen");
			Features::addVisOption("NO_coronas", "NO_coronas", "Chnaged To: NO_coronas");
			Features::addVisOption("NO_fog_alpha", "NO_fog_alpha", "Chnaged To: NO_fog_alpha");
			Features::addVisOption("NO_streetAmbient", "NO_streetAmbient", "Chnaged To: NO_streetAmbient");
			Features::addVisOption("NO_weather", "NO_weather", "Chnaged To: NO_weather");
			Features::addVisOption("NoAmbientmult", "NoAmbientmult", "Chnaged To: NoAmbientmult");
			Features::addVisOption("NoAmbientmult_interior", "NoAmbientmult_interior", "Chnaged To: NoAmbientmult_interior");
			Features::addVisOption("NOdirectLight", "NOdirectLight", "Chnaged To: NOdirectLight");
			Features::addVisOption("NOrain", "NOrain", "Chnaged To: NOrain");
			Features::addVisOption("overwater", "overwater", "Chnaged To: overwater");
			Features::addVisOption("Paleto", "Paleto", "Chnaged To: Paleto");
			Features::addVisOption("paleto_nightlight", "paleto_nightlight", "Chnaged To: paleto_nightlight");
			Features::addVisOption("paleto_opt", "paleto_opt", "Chnaged To: paleto_opt");
			Features::addVisOption("PERSHING_water_reflect", "PERSHING_water_reflect", "Chnaged To: PERSHING_water_reflect");
			Features::addVisOption("phone_cam", "phone_cam", "Chnaged To: phone_cam");
			Features::addVisOption("phone_cam1", "phone_cam1", "Chnaged To: phone_cam1");
			Features::addVisOption("phone_cam10", "phone_cam10", "Chnaged To: phone_cam10");
			Features::addVisOption("phone_cam11", "phone_cam11", "Chnaged To: phone_cam11");
			Features::addVisOption("phone_cam12", "phone_cam12", "Chnaged To: phone_cam12");
			Features::addVisOption("phone_cam13", "phone_cam13", "Chnaged To: phone_cam13");
			Features::addVisOption("phone_cam2", "phone_cam2", "Chnaged To: phone_cam2");
			Features::addVisOption("phone_cam3", "phone_cam3", "Chnaged To: phone_cam3");
			Features::addVisOption("phone_cam4", "phone_cam4", "Chnaged To: phone_cam4");
			Features::addVisOption("phone_cam5", "phone_cam5", "Chnaged To: phone_cam5");
			Features::addVisOption("phone_cam6", "phone_cam6", "Chnaged To: phone_cam6");
			Features::addVisOption("phone_cam7", "phone_cam7", "Chnaged To: phone_cam7");
			Features::addVisOption("phone_cam9", "phone_cam9", "Chnaged To: phone_cam9");
			Features::addVisOption("plane_inside_mode", "plane_inside_mode", "Chnaged To: plane_inside_mode");
			Features::addVisOption("player_transition", "player_transition", "Chnaged To: player_transition");
			Features::addVisOption("player_transition_no_scanlines", "player_transition_no_scanlines", "Chnaged To: player_transition_no_scanlines");
			Features::addVisOption("player_transition_scanlines", "player_transition_scanlines", "Chnaged To: player_transition_scanlines");
			Features::addVisOption("PlayerSwitchNeutralFlash", "PlayerSwitchNeutralFlash", "Chnaged To: PlayerSwitchNeutralFlash");
			Features::addVisOption("PlayerSwitchPulse", "PlayerSwitchPulse", "Chnaged To: PlayerSwitchPulse");
			Features::addVisOption("PoliceStation", "PoliceStation", "Chnaged To: PoliceStation");
			Features::addVisOption("PoliceStationDark", "PoliceStationDark", "Chnaged To: PoliceStationDark");
			Features::addVisOption("polluted", "polluted", "Chnaged To: polluted");
			Features::addVisOption("poolsidewaterreflection2", "poolsidewaterreflection2", "Chnaged To: poolsidewaterreflection2");
			Features::addVisOption("PORT_heist_underwater", "PORT_heist_underwater", "Chnaged To: PORT_heist_underwater");
			Features::addVisOption("powerplant_nightlight", "powerplant_nightlight", "Chnaged To: powerplant_nightlight");
			Features::addVisOption("powerstation", "powerstation", "Chnaged To: powerstation");
			Features::addVisOption("prison_nightlight", "prison_nightlight", "Chnaged To: prison_nightlight");
			Features::addVisOption("projector", "projector", "Chnaged To: projector");
			Features::addVisOption("prologue", "prologue", "Chnaged To: prologue");
			Features::addVisOption("prologue_ending_fog", "prologue_ending_fog", "Chnaged To: prologue_ending_fog");
			Features::addVisOption("prologue_ext_art_amb", "prologue_ext_art_amb", "Chnaged To: prologue_ext_art_amb");
			Features::addVisOption("prologue_reflection_opt", "prologue_reflection_opt", "Chnaged To: prologue_reflection_opt");
			Features::addVisOption("prologue_shootout", "prologue_shootout", "Chnaged To: prologue_shootout");
			Features::addVisOption("Prologue_shootout_opt", "Prologue_shootout_opt", "Chnaged To: Prologue_shootout_opt");
			Features::addVisOption("pulse", "pulse", "Chnaged To: pulse");
			Features::addVisOption("RaceTurboDark", "RaceTurboDark", "Chnaged To: RaceTurboDark");
			Features::addVisOption("RaceTurboFlash", "RaceTurboFlash", "Chnaged To: RaceTurboFlash");
			Features::addVisOption("RaceTurboLight", "RaceTurboLight", "Chnaged To: RaceTurboLight");
			Features::addVisOption("ranch", "ranch", "Chnaged To: ranch");
			Features::addVisOption("REDMIST", "REDMIST", "Chnaged To: REDMIST");
			Features::addVisOption("REDMIST_blend", "REDMIST_blend", "Chnaged To: REDMIST_blend");
			Features::addVisOption("ReduceDrawDistance", "ReduceDrawDistance", "Chnaged To: ReduceDrawDistance");
			Features::addVisOption("ReduceDrawDistanceMAP", "ReduceDrawDistanceMAP", "Chnaged To: ReduceDrawDistanceMAP");
			Features::addVisOption("ReduceDrawDistanceMission", "ReduceDrawDistanceMission", "Chnaged To: ReduceDrawDistanceMission");
			Features::addVisOption("reducelightingcost", "reducelightingcost", "Chnaged To: reducelightingcost");
			Features::addVisOption("ReduceSSAO", "ReduceSSAO", "Chnaged To: ReduceSSAO");
			Features::addVisOption("reducewaterREF", "reducewaterREF", "Chnaged To: reducewaterREF");
			Features::addVisOption("refit", "refit", "Chnaged To: refit");
			Features::addVisOption("reflection_correct_ambient", "reflection_correct_ambient", "Chnaged To: reflection_correct_ambient");
			Features::addVisOption("RemoteSniper", "RemoteSniper", "Chnaged To: RemoteSniper");
			Features::addVisOption("resvoire_reflection", "resvoire_reflection", "Chnaged To: resvoire_reflection");
			Features::addVisOption("SALTONSEA", "SALTONSEA", "Chnaged To: SALTONSEA");
			Features::addVisOption("sandyshore_nightlight", "sandyshore_nightlight", "Chnaged To: sandyshore_nightlight");
			Features::addVisOption("SAWMILL", "SAWMILL", "Chnaged To: SAWMILL");
			Features::addVisOption("scanline_cam", "scanline_cam", "Chnaged To: scanline_cam");
			Features::addVisOption("scanline_cam_cheap", "scanline_cam_cheap", "Chnaged To: scanline_cam_cheap");
			Features::addVisOption("scope_zoom_in", "scope_zoom_in", "Chnaged To: scope_zoom_in");
			Features::addVisOption("scope_zoom_out", "scope_zoom_out", "Chnaged To: scope_zoom_out");
			Features::addVisOption("secret_camera", "secret_camera", "Chnaged To: secret_camera");
			Features::addVisOption("services_nightlight", "services_nightlight", "Chnaged To: services_nightlight");
			Features::addVisOption("shades_pink", "shades_pink", "Chnaged To: shades_pink");
			Features::addVisOption("shades_yellow", "shades_yellow", "Chnaged To: shades_yellow");
			Features::addVisOption("SheriffStation", "SheriffStation", "Chnaged To: SheriffStation");
			Features::addVisOption("ship_explosion_underwater", "ship_explosion_underwater", "Chnaged To: ship_explosion_underwater");
			Features::addVisOption("ship_lighting", "ship_lighting", "Chnaged To: ship_lighting");
			Features::addVisOption("Shop247", "Shop247", "Chnaged To: Shop247");
			Features::addVisOption("Shop247_none", "Shop247_none", "Chnaged To: Shop247_none");
			Features::addVisOption("sleeping", "sleeping", "Chnaged To: sleeping");
			Features::addVisOption("SnipernumMods=7", "SnipernumMods=7", "Chnaged To: SnipernumMods=7");
			Features::addVisOption("SP1_03_drawDistance", "SP1_03_drawDistance", "Chnaged To: SP1_03_drawDistance");
			Features::addVisOption("spectator1", "spectator1", "Chnaged To: spectator1");
			Features::addVisOption("spectator10", "spectator10", "Chnaged To: spectator10");
			Features::addVisOption("spectator2", "spectator2", "Chnaged To: spectator2");
			Features::addVisOption("spectator3", "spectator3", "Chnaged To: spectator3");
			Features::addVisOption("spectator4", "spectator4", "Chnaged To: spectator4");
			Features::addVisOption("spectator5", "spectator5", "Chnaged To: spectator5");
			Features::addVisOption("spectator6", "spectator6", "Chnaged To: spectator6");
			Features::addVisOption("spectator7", "spectator7", "Chnaged To: spectator7");
			Features::addVisOption("spectator8", "spectator8", "Chnaged To: spectator8");
			Features::addVisOption("spectator9", "spectator9", "Chnaged To: spectator9");
			Features::addVisOption("StadLobby", "StadLobby", "Chnaged To: StadLobby");
			Features::addVisOption("stc_coroners", "stc_coroners", "Chnaged To: stc_coroners");
			Features::addVisOption("stc_deviant_bedroom", "stc_deviant_bedroom", "Chnaged To: stc_deviant_bedroom");
			Features::addVisOption("stc_deviant_lounge", "stc_deviant_lounge", "Chnaged To: stc_deviant_lounge");
			Features::addVisOption("stc_franklinsHouse", "stc_franklinsHouse", "Chnaged To: stc_franklinsHouse");
			Features::addVisOption("stc_trevors", "stc_trevors", "Chnaged To: stc_trevors");
			Features::addVisOption("stoned", "stoned", "Chnaged To: stoned");
			Features::addVisOption("stoned_aliens", "stoned_aliens", "Chnaged To: stoned_aliens");
			Features::addVisOption("stoned_cutscene", "stoned_cutscene", "Chnaged To: stoned_cutscene");
			Features::addVisOption("stoned_monkeys", "stoned_monkeys", "Chnaged To: stoned_monkeys");
			Features::addVisOption("StreetLightingJunction", "StreetLightingJunction", "Chnaged To: StreetLightingJunction");
			Features::addVisOption("StreetLightingtraffic", "StreetLightingtraffic", "Chnaged To: StreetLightingtraffic");
			Features::addVisOption("STRIP_changing", "STRIP_changing", "Chnaged To: STRIP_changing");
			Features::addVisOption("STRIP_nofog", "STRIP_nofog", "Chnaged To: STRIP_nofog");
			Features::addVisOption("STRIP_office", "STRIP_office", "Chnaged To: STRIP_office");
			Features::addVisOption("STRIP_stage", "STRIP_stage", "Chnaged To: STRIP_stage");
			Features::addVisOption("subBASE_water_ref", "subBASE_water_ref", "Chnaged To: subBASE_water_ref");
			Features::addVisOption("sunglasses", "sunglasses", "Chnaged To: sunglasses");
			Features::addVisOption("superDARK", "superDARK", "Chnaged To: superDARK");
			Features::addVisOption("switch_cam_1", "switch_cam_1", "Chnaged To: switch_cam_1");
			Features::addVisOption("switch_cam_2", "switch_cam_2", "Chnaged To: switch_cam_2");
			Features::addVisOption("telescope", "telescope", "Chnaged To: telescope");
			Features::addVisOption("torpedo", "torpedo", "Chnaged To: torpedo");
			Features::addVisOption("traffic_skycam", "traffic_skycam", "Chnaged To: traffic_skycam");
			Features::addVisOption("trailer_explosion_optimise", "trailer_explosion_optimise", "Chnaged To: trailer_explosion_optimise");
			Features::addVisOption("TREVOR", "TREVOR", "Chnaged To: TREVOR");
			Features::addVisOption("TrevorColorCode", "TrevorColorCode", "Chnaged To: TrevorColorCode");
			Features::addVisOption("TrevorColorCodeBasic", "TrevorColorCodeBasic", "Chnaged To: TrevorColorCodeBasic");
			Features::addVisOption("Trevors_room", "Trevors_room", "Chnaged To: Trevors_room");
			Features::addVisOption("trevorspliff", "trevorspliff", "Chnaged To: trevorspliff");
			Features::addVisOption("trevorspliff_blend", "trevorspliff_blend", "Chnaged To: trevorspliff_blend");
			Features::addVisOption("trevorspliff_blend02", "trevorspliff_blend02", "Chnaged To: trevorspliff_blend02");
			Features::addVisOption("Tunnel", "Tunnel", "Chnaged To: Tunnel");
			Features::addVisOption("tunnel_entrance", "tunnel_entrance", "Chnaged To: tunnel_entrance");
			Features::addVisOption("tunnel_entrance_INT", "tunnel_entrance_INT", "Chnaged To: tunnel_entrance_INT");
			Features::addVisOption("TUNNEL_green", "TUNNEL_green", "Chnaged To: TUNNEL_green");
			Features::addVisOption("Tunnel_green1", "Tunnel_green1", "Chnaged To: Tunnel_green1");
			Features::addVisOption("TUNNEL_green_ext", "TUNNEL_green_ext", "Chnaged To: TUNNEL_green_ext");
			Features::addVisOption("TUNNEL_orange", "TUNNEL_orange", "Chnaged To: TUNNEL_orange");
			Features::addVisOption("TUNNEL_orange_exterior", "TUNNEL_orange_exterior", "Chnaged To: TUNNEL_orange_exterior");
			Features::addVisOption("TUNNEL_white", "TUNNEL_white", "Chnaged To: TUNNEL_white");
			Features::addVisOption("TUNNEL_yellow", "TUNNEL_yellow", "Chnaged To: TUNNEL_yellow");
			Features::addVisOption("TUNNEL_yellow_ext", "TUNNEL_yellow_ext", "Chnaged To: TUNNEL_yellow_ext");
			Features::addVisOption("ufo", "ufo", "Chnaged To: ufo");
			Features::addVisOption("ufo_deathray", "ufo_deathray", "Chnaged To: ufo_deathray");
			Features::addVisOption("underwater", "underwater", "Chnaged To: underwater");
			Features::addVisOption("underwater_deep", "underwater_deep", "Chnaged To: underwater_deep");
			Features::addVisOption("underwater_deep_clear", "underwater_deep_clear", "Chnaged To: underwater_deep_clear");
			Features::addVisOption("v_abattoir", "v_abattoir", "Chnaged To: v_abattoir");
			Features::addVisOption("V_Abattoir_Cold", "V_Abattoir_Cold", "Chnaged To: V_Abattoir_Cold");
			Features::addVisOption("v_bahama", "v_bahama", "Chnaged To: v_bahama");
			Features::addVisOption("v_cashdepot", "v_cashdepot", "Chnaged To: v_cashdepot");
			Features::addVisOption("V_FIB_IT3", "V_FIB_IT3", "Chnaged To: V_FIB_IT3");
			Features::addVisOption("V_FIB_IT3_alt", "V_FIB_IT3_alt", "Chnaged To: V_FIB_IT3_alt");
			Features::addVisOption("V_FIB_IT3_alt5", "V_FIB_IT3_alt5", "Chnaged To: V_FIB_IT3_alt5");
			Features::addVisOption("V_FIB_stairs", "V_FIB_stairs", "Chnaged To: V_FIB_stairs");
			Features::addVisOption("v_foundry", "v_foundry", "Chnaged To: v_foundry");
			Features::addVisOption("v_janitor", "v_janitor", "Chnaged To: v_janitor");
			Features::addVisOption("v_jewel2", "v_jewel2", "Chnaged To: v_jewel2");
			Features::addVisOption("v_metro", "v_metro", "Chnaged To: v_metro");
			Features::addVisOption("V_Metro2", "V_Metro2", "Chnaged To: V_Metro2");
			Features::addVisOption("V_Metro_station", "V_Metro_station", "Chnaged To: V_Metro_station");
			Features::addVisOption("v_michael", "v_michael", "Chnaged To: v_michael");
			Features::addVisOption("v_michael_lounge", "v_michael_lounge", "Chnaged To: v_michael_lounge");
			Features::addVisOption("V_Office_smoke", "V_Office_smoke", "Chnaged To: V_Office_smoke");
			Features::addVisOption("V_Office_smoke_ext", "V_Office_smoke_ext", "Chnaged To: V_Office_smoke_ext");
			Features::addVisOption("V_Office_smoke_Fire", "V_Office_smoke_Fire", "Chnaged To: V_Office_smoke_Fire");
			Features::addVisOption("v_recycle", "v_recycle", "Chnaged To: v_recycle");
			Features::addVisOption("V_recycle_dark", "V_recycle_dark", "Chnaged To: V_recycle_dark");
			Features::addVisOption("V_recycle_light", "V_recycle_light", "Chnaged To: V_recycle_light");
			Features::addVisOption("V_recycle_mainroom", "V_recycle_mainroom", "Chnaged To: V_recycle_mainroom");
			Features::addVisOption("v_rockclub", "v_rockclub", "Chnaged To: v_rockclub");
			Features::addVisOption("V_Solomons", "V_Solomons", "Chnaged To: V_Solomons");
			Features::addVisOption("v_strip3", "v_strip3", "Chnaged To: v_strip3");
			Features::addVisOption("V_strip_nofog", "V_strip_nofog", "Chnaged To: V_strip_nofog");
			Features::addVisOption("V_strip_office", "V_strip_office", "Chnaged To: V_strip_office");
			Features::addVisOption("v_strpchangerm", "v_strpchangerm", "Chnaged To: v_strpchangerm");
			Features::addVisOption("v_sweat", "v_sweat", "Chnaged To: v_sweat");
			Features::addVisOption("v_sweat_entrance", "v_sweat_entrance", "Chnaged To: v_sweat_entrance");
			Features::addVisOption("v_sweat_NoDirLight", "v_sweat_NoDirLight", "Chnaged To: v_sweat_NoDirLight");
			Features::addVisOption("v_torture", "v_torture", "Chnaged To: v_torture");
			Features::addVisOption("Vagos", "Vagos", "Chnaged To: Vagos");
			Features::addVisOption("vagos_extlight_small", "vagos_extlight_small", "Chnaged To: vagos_extlight_small");
			Features::addVisOption("VAGOS_new_garage", "VAGOS_new_garage", "Chnaged To: VAGOS_new_garage");
			Features::addVisOption("VAGOS_new_hangout", "VAGOS_new_hangout", "Chnaged To: VAGOS_new_hangout");
			Features::addVisOption("VagosSPLASH", "VagosSPLASH", "Chnaged To: VagosSPLASH");
			Features::addVisOption("VC_tunnel_entrance", "VC_tunnel_entrance", "Chnaged To: VC_tunnel_entrance");
			Features::addVisOption("venice_canal_tunnel", "venice_canal_tunnel", "Chnaged To: venice_canal_tunnel");
			Features::addVisOption("vespucci_garage", "vespucci_garage", "Chnaged To: vespucci_garage");
			Features::addVisOption("warehouse", "warehouse", "Chnaged To: warehouse");
			Features::addVisOption("WATER_hills", "WATER_hills", "Chnaged To: WATER_hills");
			Features::addVisOption("WATER_lab", "WATER_lab", "Chnaged To: WATER_lab");
			Features::addVisOption("WATER_lab_cooling", "WATER_lab_cooling", "Chnaged To: WATER_lab_cooling");
			Features::addVisOption("WATER_militaryPOOP", "WATER_militaryPOOP", "Chnaged To: WATER_militaryPOOP");
			Features::addVisOption("WATER_muddy", "WATER_muddy", "Chnaged To: WATER_muddy");
			Features::addVisOption("WATER_port", "WATER_port", "Chnaged To: WATER_port");
			Features::addVisOption("WATER_REF_malibu", "WATER_REF_malibu", "Chnaged To: WATER_REF_malibu");
			Features::addVisOption("WATER_refmap_high", "WATER_refmap_high", "Chnaged To: WATER_refmap_high");
			Features::addVisOption("WATER_refmap_hollywoodlake", "WATER_refmap_hollywoodlake", "Chnaged To: WATER_refmap_hollywoodlake");
			Features::addVisOption("WATER_refmap_low", "WATER_refmap_low", "Chnaged To: WATER_refmap_low");
			Features::addVisOption("WATER_refmap_med", "WATER_refmap_med", "Chnaged To: WATER_refmap_med");
			Features::addVisOption("WATER_refmap_off", "WATER_refmap_off", "Chnaged To: WATER_refmap_off");
			Features::addVisOption("WATER_refmap_poolside", "WATER_refmap_poolside", "Chnaged To: WATER_refmap_poolside");
			Features::addVisOption("WATER_refmap_silverlake", "WATER_refmap_silverlake", "Chnaged To: WATER_refmap_silverlake");
			Features::addVisOption("WATER_refmap_venice", "WATER_refmap_venice", "Chnaged To: WATER_refmap_venice");
			Features::addVisOption("WATER_refmap_verylow", "WATER_refmap_verylow", "Chnaged To: WATER_refmap_verylow");
			Features::addVisOption("WATER_resevoir", "WATER_resevoir", "Chnaged To: WATER_resevoir");
			Features::addVisOption("WATER_river", "WATER_river", "Chnaged To: WATER_river");
			Features::addVisOption("WATER_salton", "WATER_salton", "Chnaged To: WATER_salton");
			Features::addVisOption("WATER_salton_bottom", "WATER_salton_bottom", "Chnaged To: WATER_salton_bottom");
			Features::addVisOption("WATER_shore", "WATER_shore", "Chnaged To: WATER_shore");
			Features::addVisOption("WATER_silty", "WATER_silty", "Chnaged To: WATER_silty");
			Features::addVisOption("WATER_silverlake", "WATER_silverlake", "Chnaged To: WATER_silverlake");
			Features::addVisOption("whitenightlighting", "whitenightlighting", "Chnaged To: whitenightlighting");
			Features::addVisOption("WhiteOut", "WhiteOut", "Chnaged To: WhiteOut");
			Features::addVisOption("yell_tunnel_nodirect", "yell_tunnel_nodirect", "Chnaged To: yell_tunnel_nodirect");
		}
		break;
#pragma region ride
		case ride:
		{
			Menu::Title("Ride Bitch");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("Stop Ride")) {
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				ENTITY::DETACH_ENTITY(playerPed, 1, 1);
				AI::CLEAR_PED_TASKS_IMMEDIATELY(playerPed);
			}
			if (Menu::Option("Ride Deer")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("a_c_deer");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
				//				SET_ENTITY_HEADING(createdPED, 180.0f);

				ENTITY::ATTACH_ENTITY_TO_ENTITY(playerPed, createdPED, -1, 0.0f, 0.35f, 0.72f, 0.0f, 0.0f, 0.0f, 1, 0, 0, 2, 1, 1);

				//deer animation
				char *anim = "creatures@deer@move";
				char *animID = "trot";

				STREAMING::REQUEST_ANIM_DICT(anim);
				while (!STREAMING::HAS_ANIM_DICT_LOADED(anim))
					WAIT(0);

				AI::TASK_PLAY_ANIM(createdPED, anim, animID, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);

				//charPose
				char *anim2 = "mp_safehouselost_table@";
				char *animID2 = "lost_table_negative_a";

				STREAMING::REQUEST_ANIM_DICT(anim2);
				while (!STREAMING::HAS_ANIM_DICT_LOADED(anim2))
					WAIT(0);

				AI::TASK_PLAY_ANIM(playerPed, anim2, animID2, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);

			}
			if (Menu::Option("Sit On Deer")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("a_c_deer");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
				//				SET_ENTITY_HEADING(createdPED, 180.0f);

				ENTITY::ATTACH_ENTITY_TO_ENTITY(playerPed, createdPED, -1, 0.0f, 0.35f, 0.72f, 0.0f, 0.0f, 0.0f, 1, 0, 0, 2, 1, 1);

				//charPose
				char *anim2 = "mp_safehouselost_table@";
				char *animID2 = "lost_table_negative_a";

				STREAMING::REQUEST_ANIM_DICT(anim2);
				while (!STREAMING::HAS_ANIM_DICT_LOADED(anim2))
					WAIT(0);

				AI::TASK_PLAY_ANIM(playerPed, anim2, animID2, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
			}
			if (Menu::Option("Ride Walking Deer")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("a_c_deer");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
				//				SET_ENTITY_HEADING(createdPED, 180.0f);

				ENTITY::ATTACH_ENTITY_TO_ENTITY(playerPed, createdPED, -1, 0.0f, 0.35f, 0.72f, 0.0f, 0.0f, 0.0f, 1, 0, 0, 2, 1, 1);

				//deer animation
				char *anim = "creatures@deer@move";
				char *animID = "walk";

				STREAMING::REQUEST_ANIM_DICT(anim);
				while (!STREAMING::HAS_ANIM_DICT_LOADED(anim))
					WAIT(0);

				AI::TASK_PLAY_ANIM(createdPED, anim, animID, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);

				//charPose
				char *anim2 = "mp_safehouselost_table@";
				char *animID2 = "lost_table_negative_a";

				STREAMING::REQUEST_ANIM_DICT(anim2);
				while (!STREAMING::HAS_ANIM_DICT_LOADED(anim2))
					WAIT(0);

				AI::TASK_PLAY_ANIM(playerPed, anim2, animID2, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
			}
			if (Menu::Option("Ride Cow")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("a_c_cow");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
				//				SET_ENTITY_HEADING(createdPED, 180.0f);

				ENTITY::ATTACH_ENTITY_TO_ENTITY(playerPed, createdPED, -1, 0.0f, 0.35f, 0.72f, 0.0f, 0.0f, 0.0f, 1, 0, 0, 2, 1, 1);

				//charPose
				char *anim2 = "mp_safehouselost_table@";
				char *animID2 = "lost_table_negative_a";

				STREAMING::REQUEST_ANIM_DICT(anim2);
				while (!STREAMING::HAS_ANIM_DICT_LOADED(anim2))
					WAIT(0);

				AI::TASK_PLAY_ANIM(playerPed, anim2, animID2, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
			}
		}
		break;

		case stealtremove:
		{
			Menu::Title("~w~Delete Noney");

			Menu::MainTitle("SHADE                               ");
			if (Menu::Int("Amount", Features::amount5, 0, 2147483647, 1000000))
			{

				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::amount5 = NumberKeyboard();
				}

			}

			if (Menu::Int("~w~Delay", Features::stealthDelaydel, 50, 1000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::stealthDelaydel = NumberKeyboard();
				}
			}

			Menu::Toggle("Remove Money Bank", Features::sagtdegeiligeaufiwtion, [] { Features::weißernigger(Features::sagtdegeiligeaufiwtion); });

			Menu::Toggle("Remove Money Wallet", Features::etiennejoelsex, [] { Features::weißernigger(Features::etiennejoelsex); });



		}
		break;

		case SystemDrop:
		{
			Menu::Title("Money Stealth");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::Toggle("~w~Cash Drop", Features::MYDROP, [] { Features::mydrop(Features::MYDROP); });
			if (Menu::Int("Amount", Features::DropAmount, 1, 2500))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropAmount = NumberKeyboard();
				}
			}


			if (Menu::Int("Height", Features::DropHeight, 1, 50))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropHeight = NumberKeyboard();
				}
			}


			if (Menu::Int("Delay", Features::DropDelay, 50, 1000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropDelay = NumberKeyboard();
				}
			}

			Menu::Int("Bags", Features::Bags, 0, 20);

			Menu::MainTitle("~c~[Shade 1.0]                             ");

			////Menu::Break("Models");
			dropModelsSelect();
		}
		break;

		case stealth:
		{
			Menu::Title("Money Stealth");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::MenuOption("Delete Money", stealtremove);
			Menu::Int("Amount", Features::stealthAmount, 100000, 100000000000, 100000);
			Menu::Toggle("Stealth Loop", Features::stealthBool, [] { Features::stealthLoop(Features::stealthBool); });
			if (Menu::Option("~g~15M STEALTH"))
			{
				int money = 312105838;
				Any transactionID = money;
				if (UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&transactionID, 1474183246, -1586170317, 1445302971, 15000000, 4))
					UNK3::_NETWORK_SHOP_CHECKOUT_START(transactionID);

				Features::TimePD1 = timeGetTime();
				Features::PTFXCALL("scr_ornate_heist", "scr_ornate_heist", "scr_heist_ornate_banknotes");



			}
			if (Menu::Option("~g~10M STEALTH"))
			{
				int money = 312105838;
				Any transactionID = money;
				if (UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&transactionID, 1474183246, -1586170317, 1445302971, 10000000, 4))
					UNK3::_NETWORK_SHOP_CHECKOUT_START(transactionID);

				Features::TimePD1 = timeGetTime();
				Features::PTFXCALL("scr_ornate_heist", "scr_ornate_heist", "scr_heist_ornate_banknotes");

			}
			if (Menu::Option("~g~5M STEALTH"))
			{
				int money = 312105838;
				Any transactionID = money;
				if (UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&transactionID, 1474183246, -1586170317, 1445302971, 5000000, 4))
					UNK3::_NETWORK_SHOP_CHECKOUT_START(transactionID);

				Features::TimePD1 = timeGetTime();
				Features::PTFXCALL("scr_ornate_heist", "scr_ornate_heist", "scr_heist_ornate_banknotes");
			}
			if (Menu::Option("~g~3M STEALTH"))
			{
				int money = 312105838;
				Any transactionID = money;
				if (UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&transactionID, 1474183246, -1586170317, 1445302971, 300000, 4))
					UNK3::_NETWORK_SHOP_CHECKOUT_START(transactionID);

				Features::TimePD1 = timeGetTime();
				Features::PTFXCALL("scr_ornate_heist", "scr_ornate_heist", "scr_heist_ornate_banknotes");
			}
			if (Menu::Option("~g~1.2M STEALTH"))
			{
				int money = 312105838;
				Any transactionID = money;
				if (UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&transactionID, 1474183246, -1586170317, 1445302971, 1200000, 4))
					UNK3::_NETWORK_SHOP_CHECKOUT_START(transactionID);

				Features::TimePD1 = timeGetTime();
				Features::PTFXCALL("scr_ornate_heist", "scr_ornate_heist", "scr_heist_ornate_banknotes");
			}
			if (Menu::Option("~g~600K STEALTH"))
			{
				int money = 312105838;
				Any transactionID = money;
				if (UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&transactionID, 1474183246, -1586170317, 1445302971, 600000, 4))
					UNK3::_NETWORK_SHOP_CHECKOUT_START(transactionID);

				Features::TimePD1 = timeGetTime();
				Features::PTFXCALL("scr_ornate_heist", "scr_ornate_heist", "scr_heist_ornate_banknotes");
			}
		}
		break;

		case rp:
		{
			Menu::Title("Rank Options");
			Menu::MainTitle("~c~[Shade 1.0]                             ");



			if (Menu::Int("Choose Level", rpvalue, 1, 8000))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					rpvalue = NumberKeyboard();
				}
			}
			if (Menu::Option("Set the Choosen Level"))
			{
				Features::SetRank(rpvalue);
			}


		}
		break;

		case atm:
		{
			Menu::Title("ATM");
			Menu::MainTitle("~c~[Shade 1.0]                             ");


			if (Menu::Int("~w~Amount", Features::ammoutwithraw, 0, 15000000, 1000000))
			{

				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::ammoutwithraw = NumberKeyboard();
				}

			}

			if (Menu::Option("~w~Transfer Money to Wallet(~g~$~w~)")) {
				Features::withdraw();
			}

			if (Menu::Option("~w~Transfer Money to Bank(~g~$~w~)")) {
				Features::DepositToBank();
			}
		}
		break;

		case header:
		{
			Menu::Title("~w~Header");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::Int("Header Texture", Menu::Settings::titleRectTexture, 0, 6);



			if (Menu::Int("Banner Banner Delay", Features::bandelay, 300, 1000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::bandelay = NumberKeyboard();
				}
			}
		}
		break;



		//Settings  Menu 
		case settingsmenu:
		{
			Menu::Title("~w~Settings");
			Menu::MainTitle("~c~[Shade 1.0]                             ");


			Menu::MenuOption("Colors", settingstheme);
			Menu::MenuOption("Expanded options", seeeex);
			Menu::MenuOption("Exit GTA ", exitgta);




		}
		break;
		case Creditsformoney:
		{
			Menu::Title("~w~Credits");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			Menu::Option("XXXX");
			Menu::Option("Fratboy");
			Menu::Option("Hershy");
			Menu::Option("Hylent");
			Menu::Option("Camo");
			Menu::Option("Nitedev");
		}
		break;
		case exitgta:
		{
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			Menu::Title("Exit GTA V");
			if (Menu::Option("~r~Yes")) exit(0);
		}
		break;

		case seeeex:
		{
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			Menu::Title("Exit GTA V");

			Menu::Toggle("Display FPS", Features::DisplayFPS, [] { Features::featureDisplayFPS(Features::DisplayFPS); });
			Menu::Toggle("Turn off radar", Features::Mapweck, [] { Features::mapweck(Features::Mapweck); });
			Menu::Toggle("Control Info", Features::ControlInfo, [] { Features::Control(Features::ControlInfo); });
			if (Menu::Option("MenuX plus")) {
				if (Menu::Settings::menuX < 0.81f) Menu::Settings::menuX += 0.05f;
			}
			if (Menu::Option("MenuX minus")) {
				if (Menu::Settings::menuX > 0.17f) Menu::Settings::menuX -= 0.05f;
			}
		break;
		case settingstheme:
		{
			Menu::Title("Colors");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::MenuOption("Title Background", settingstitlerect);
			Menu::MenuOption("Scroller", settingsscroller);
			Menu::MenuOption("Option Text", settingsoptiontext);
			Menu::MenuOption("Option Background", settingsoptionrect);
			Menu::MenuOption("Option Arrow", settingsarrow);
			Menu::MenuOption("Option Subtitl", settingstitleEnd);
			Menu::MenuOption("Line", lineee);
			if (Menu::Option("Save INI")) {
				SaveStyles();
				notifyMap("~g~Theme INI Saved!");
			}

		}
		break;
		case themeloader:
		{
			Menu::Title("Reset");


		}
		if (Menu::Option("Save INI")) {
			SaveStyles();
			notifyMap("~g~Theme INI Saved!");
		}
		break;
		case settingsoptionrect:
		{
			Menu::Title("Title Rect");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Int("Red", Menu::Settings::optionRect.r, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::optionRect.r = NumberKeyboard();
				}
			}
			if (Menu::Int("Green", Menu::Settings::optionRect.g, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::optionRect.g = NumberKeyboard();
				}
			}
			if (Menu::Int("Blue", Menu::Settings::optionRect.b, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::optionRect.b = NumberKeyboard();
				}
			}
			if (Menu::Int("Opacity", Menu::Settings::optionRect.a, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::optionRect.a = NumberKeyboard();
				}
			}
		}
		break;
		case settingstitlerect:
		{
			Menu::Title("Title Rect");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Int("Red", Menu::Settings::titleRect.r, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleRect.r = NumberKeyboard();
				}
			}
			if (Menu::Int("Green", Menu::Settings::titleRect.g, 255, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleRect.g = NumberKeyboard();
				}
			}
			if (Menu::Int("Blue", Menu::Settings::titleRect.b, 255, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleRect.b = NumberKeyboard();
				}
			}
			if (Menu::Int("Opacity", Menu::Settings::titleRect.a, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleRect.a = NumberKeyboard();
				}
			}
		}
		break;

		case lineee:
		{
			Menu::Title("Title Rect");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Int("Red", Menu::Settings::line.r, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::line.r = NumberKeyboard();
				}
			}
			if (Menu::Int("Green", Menu::Settings::line.g, 150, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::line.g = NumberKeyboard();
				}
			}
			if (Menu::Int("Blue", Menu::Settings::line.b, 255, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::line.b = NumberKeyboard();
				}
			}
			if (Menu::Int("Opacity", Menu::Settings::line.a, 255, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::line.a = NumberKeyboard();
				}
			}
		}
		break;

		case settingsfooterarrow:
		{
			Menu::Title("Title Rect");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Int("Red", Menu::Settings::Endrectloll.r, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::Endrectloll.r = NumberKeyboard();
				}
			}
			if (Menu::Int("Green", Menu::Settings::Endrectloll.g, 150, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::Endrectloll.g = NumberKeyboard();
				}
			}
			if (Menu::Int("Blue", Menu::Settings::Endrectloll.b, 255, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::Endrectloll.b = NumberKeyboard();
				}
			}
			if (Menu::Int("Opacity", Menu::Settings::Endrectloll.a, 255, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::Endrectloll.a = NumberKeyboard();
				}
			}
		}
		break;

		case settingsfooterarroww:
		{
			Menu::Title("Title Rect");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Int("Red", Menu::Settings::Endrectlol.r, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::Endrectlol.r = NumberKeyboard();
				}
			}
			if (Menu::Int("Green", Menu::Settings::Endrectlol.g, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::Endrectlol.g = NumberKeyboard();
				}
			}
			if (Menu::Int("Blue", Menu::Settings::Endrectlol.b, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::Endrectlol.b = NumberKeyboard();
				}
			}
			if (Menu::Int("Opacity", Menu::Settings::Endrectlol.a, 255, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::Endrectlol.a = NumberKeyboard();
				}
			}
		}
		break;

		case settingstitleEnd:
		{
			Menu::Title("Title Rect");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Int("Red", Menu::Settings::titleEnd.r, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleEnd.r = NumberKeyboard();
				}
			}
			if (Menu::Int("Green", Menu::Settings::titleEnd.g, 255, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleEnd.g = NumberKeyboard();
				}
			}
			if (Menu::Int("Blue", Menu::Settings::titleEnd.b, 255, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleEnd.b = NumberKeyboard();
				}
			}
			if (Menu::Int("Opacity", Menu::Settings::titleEnd.a, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleEnd.a = NumberKeyboard();
				}
			}
		}
		break;


		case settingsoptiontext:
		{
			Menu::Title("Option Text");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			{

				if (Menu::Option("Chalet London")) { Menu::Settings::optionText.f = 0; }
				if (Menu::Option("House Script")) { Menu::Settings::optionText.f = 1; }
				if (Menu::Option("Monospace")) { Menu::Settings::optionText.f = 2; }
				if (Menu::Option("Wing Dings")) { Menu::Settings::optionText.f = 3; }
				if (Menu::Option("Chalet Comprime Cologne")) { Menu::Settings::optionText.f = 4; }
				if (Menu::Option("Pricedown")) { Menu::Settings::optionText.f = 7; }
				if (Menu::Int("Red", Menu::Settings::optionText.r, 0, 255))
				{
					if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
						Menu::Settings::optionText.r = NumberKeyboard();
					}
				}
				if (Menu::Int("Green", Menu::Settings::optionText.g, 0, 255))
				{
					if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
						Menu::Settings::optionText.g = NumberKeyboard();
					}
				}
				if (Menu::Int("Blue", Menu::Settings::optionText.b, 0, 255))
				{
					if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
						Menu::Settings::optionText.b = NumberKeyboard();
					}
				}
				if (Menu::Int("Opacity", Menu::Settings::optionText.a, 0, 255))
				{
					if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
						Menu::Settings::optionText.a = NumberKeyboard();
					}
				}
			}
			break;
		case font:
		{
			Menu::Title("Font");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("Chalet London")) { Menu::Settings::optionText.f = 0; }
			if (Menu::Option("House Script")) { Menu::Settings::optionText.f = 1; }
			if (Menu::Option("Monospace")) { Menu::Settings::optionText.f = 2; }
			if (Menu::Option("Wing Dings")) { Menu::Settings::optionText.f = 3; }
			if (Menu::Option("Chalet Cologne")) { Menu::Settings::optionText.f = 4; }
			if (Menu::Option("Pricedown")) { Menu::Settings::optionText.f = 7; }
		}
		break;
		case settingsscroller:
		{
			Menu::Title("Scroller");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Int("Red", Menu::Settings::scroller.r, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::scroller.r = NumberKeyboard();
				}
			}
			if (Menu::Int("Green", Menu::Settings::scroller.g, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::scroller.g = NumberKeyboard();
				}
			}
			if (Menu::Int("Blue", Menu::Settings::scroller.b, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::scroller.b = NumberKeyboard();
				}
			}
			if (Menu::Int("Opacity", Menu::Settings::scroller.a, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::scroller.a = NumberKeyboard();
				}
			}
		}
		break;

		case settingsfooter:
		{
			Menu::Title("footer");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Int("Red", Menu::Settings::titleText3.r, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleText3.r = NumberKeyboard();
				}
			}
			if (Menu::Int("Green", Menu::Settings::titleText3.g, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleText3.g = NumberKeyboard();
				}
			}
			if (Menu::Int("Blue", Menu::Settings::titleText3.b, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleText3.b = NumberKeyboard();
				}
			}
			if (Menu::Int("Opacity", Menu::Settings::titleText3.a, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleText3.a = NumberKeyboard();
				}
			}
		}
		break;

		case settingsarrow:
		{
			Menu::Title("arow");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Int("Red", Menu::Settings::arrow.r, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::arrow.r = NumberKeyboard();
				}
			}
			if (Menu::Int("Green", Menu::Settings::arrow.g, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::arrow.g = NumberKeyboard();
				}
			}
			if (Menu::Int("Blue", Menu::Settings::arrow.b, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::arrow.b = NumberKeyboard();
				}
			}
			if (Menu::Int("Opacity", Menu::Settings::arrow.a, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::arrow.a = NumberKeyboard();
				}
			}
		}
		break;

		case settingsarrow2:
		{
			Menu::Title("arow");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Int("Red", Menu::Settings::arrow2.r, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::arrow2.r = NumberKeyboard();
				}
			}
			if (Menu::Int("Green", Menu::Settings::arrow2.g, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::arrow2.g = NumberKeyboard();
				}
			}
			if (Menu::Int("Blue", Menu::Settings::arrow2.b, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::arrow2.b = NumberKeyboard();
				}
			}
			if (Menu::Int("Opacity", Menu::Settings::arrow2.a, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::arrow2.a = NumberKeyboard();
				}
			}
		}
		break;



		//Protections 
		case protection:
		{

			Menu::Title("Protection Option");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::Toggle("Defuse Rockstar Events ~r~70+", md22, [] {
				Hooking::defuseEvent(RockstarEvent::GAME_CLOCK_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::GAME_WEATHER_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::SCRIPT_ARRAY_DATA_VERIFY_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::REQUEST_CONTROL_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::GIVE_CONTROL_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::WEAPON_DAMAGE_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::REQUEST_PICKUP_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::REQUEST_MAP_PICKUP_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::GAME_CLOCK_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::GAME_WEATHER_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::RESPAWN_PLAYER_PED_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::GIVE_WEAPON_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::SCRIPTED_GAME_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::REMOVE_ALL_WEAPONS_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::VEHICLE_COMPONENT_CONTROL_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::FIRE_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::EXPLOSION_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::START_PROJECTILE_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::ALTER_WANTED_LEVEL_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::CHANGE_RADIO_STATION_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::RAGDOLL_REQUEST_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::PLAYER_TAUNT_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::PLAYER_CARD_STAT_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::DOOR_BREAK_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::SCRIPTED_GAME_EVENT, md22); //start
				Hooking::defuseEvent(RockstarEvent::REMOTE_SCRIPT_INFO_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::REMOTE_SCRIPT_LEAVE_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::MARK_AS_NO_LONGER_NEEDED_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::CONVERT_TO_SCRIPT_ENTITY_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::SCRIPT_WORLD_STATE_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::INCIDENT_ENTITY_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::CLEAR_AREA_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::CLEAR_RECTANGLE_AREA_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_REQUEST_SYNCED_SCENE_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_START_SYNCED_SCENE_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_UPDATE_SYNCED_SCENE_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_STOP_SYNCED_SCENE_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::GIVE_PED_SCRIPTED_TASK_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::GIVE_PED_SEQUENCE_TASK_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_CLEAR_PED_TASKS_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_START_PED_ARREST_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_START_PED_UNCUFF_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_SOUND_CAR_HORN_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_ENTITY_AREA_STATUS_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_GARAGE_OCCUPIED_STATUS_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::PED_CONVERSATION_LINE_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_PLAY_SOUND_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_PLAY_AIRDEFENSE_FIRE_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_BANK_REQUEST_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::REQUEST_DOOR_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::EXPLOSION_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_TRAIN_REQUEST_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_TRAIN_REPORT_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_INCREMENT_STAT_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::MODIFY_VEHICLE_LOCK_WORD_STATE_DATA, md22);
				Hooking::defuseEvent(RockstarEvent::REQUEST_PHONE_EXPLOSION_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::REQUEST_DETACHMENT_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::KICK_VOTES_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::GIVE_PICKUP_REWARDS_EVENT, md22); //start
				Hooking::defuseEvent(RockstarEvent::NETWORK_CRC_HASH_CHECK_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::BLOW_UP_VEHICLE_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_SPECIAL_FIRE_EQUIPPED_WEAPON, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_RESPONDED_TO_THREAT_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_SHOUT_TARGET_POSITION, md22);
				Hooking::defuseEvent(RockstarEvent::PICKUP_DESTROYED_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::UPDATE_PLAYER_SCARS_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_CHECK_EXE_SIZE_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_PTFX_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_PED_SEEN_DEAD_PED_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::REMOVE_STICKY_BOMB_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_CHECK_CODE_CRCS_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::INFORM_SILENCED_GUNSHOT_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::PED_PLAY_PAIN_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::CACHE_PLAYER_HEAD_BLEND_DATA_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::REMOVE_PED_FROM_PEDGROUP_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::REPORT_MYSELF_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::REPORT_CASH_SPAWN_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::ACTIVATE_VEHICLE_SPECIAL_ABILITY_EVENT, md22);
				Hooking::defuseEvent(RockstarEvent::NETWORK_CHECK_CATALOG_CRC, md22);
			});
			Menu::Toggle("Transaction Spam Protections", Features::trns, [] { Features::remore(Features::trns); });
			Menu::Toggle("Kick Protections", Features::kickp, [] { Features::Kickprotec(Features::kickp); });
			Menu::Toggle("Rotate cam Protections", Features::new1, [] { Features::new11(Features::new1); });
			Menu::Toggle("kick from car Protections", Features::new2, [] { Features::new22(Features::new2); });
			Menu::Toggle("Anti Afk", ak, [] { Hooking::defuseEvent(RockstarEvent::KICK_VOTES_EVENT, ak); });
			Menu::Toggle("Notification Protections", Features::new3, [] { Features::new33(Features::new3); });
			Menu::Toggle("Money Drop Protections", Features::moneyDropProtection);
			Menu::Toggle("bounty Protections", Features::Bounty, [] { Features::Bountyy(Features::Bounty); });
			Menu::Toggle("Sound Spam Protections", Features::SoundSpamProtection, [] { Features::Spamp(Features::SoundSpamProtection); });
			Menu::Toggle("Send Job Protections", Features::SendToJobProtection, [] { Features::STJp(Features::SendToJobProtection); });
			Menu::Toggle("Teleport Protections", Features::tpp, [] { Features::Teleportprotec(Features::tpp); });
			Menu::Toggle("Ceo Ban Protections", Features::CeoBanProtection, [] { Features::CEOBanp(Features::CeoBanProtection); });
			Menu::Toggle("Ceo Kick Protections", Features::CEOKickProtection, [] { Features::CEOKickp(Features::CEOKickProtection); });
			Menu::Toggle("Freeze Protections", antiFreeze, [] { Hooking::defuseEvent(RockstarEvent::NETWORK_CLEAR_PED_TASKS_EVENT, antiFreeze); });
			Menu::Toggle("Explosion Protections", ev, [] { Hooking::defuseEvent(RockstarEvent::EXPLOSION_EVENT, ev); });
			Menu::Toggle("Pickup Protections", rpe, [] { Hooking::defuseEvent(RockstarEvent::REQUEST_PICKUP_EVENT, rpe); });
			Menu::Toggle("Fire Protection Protections ", fe, [] { Hooking::defuseEvent(RockstarEvent::EXPLOSION_EVENT, fe); });
			Menu::Toggle("Remove Protections", noRemoveWeps, [] { Hooking::defuseEvent(RockstarEvent::REMOVE_ALL_WEAPONS_EVENT, noRemoveWeps); });
			Menu::Toggle("Give Protections", noGiveWeps, [] { Hooking::defuseEvent(RockstarEvent::GIVE_WEAPON_EVENT, noGiveWeps); });
			Menu::Toggle("Report Money Drop Event", md, [] { Hooking::defuseEvent(RockstarEvent::REPORT_CASH_SPAWN_EVENT, md); });
		}
		break;



		//Settings Menu 2 
		case settingsmenu_theme:
		{
			Menu::Title("Menu Desgin");
			Menu::MainTitle("~c~[Shade 1.0]                             ");


			Menu::MenuOption("Title Text", settingsmenu_theme_titletext);
			Menu::MenuOption("Title Rect", settingsmenu_theme_titlerect);
			Menu::MenuOption("Option Text", settingsmenu_theme_optiontext);
			Menu::MenuOption("Option Rect", settingsmenu_theme_optionrect);
			Menu::MenuOption("Scroller", settingsmenu_theme_scroller);
		}
		break;


		//Settings Menu 3 
		case settingsmenu_theme_titletext:
		{
			Menu::Title("Title Text");
			Menu::MainTitle("~c~[Shade 1.0]                             ");


			Menu::Int("Red", Menu::Settings::titleText.r, 255, 255);
			Menu::Int("Green", Menu::Settings::titleText.g, 0, 0);
			Menu::Int("Blue", Menu::Settings::titleText.b, 0, 0);
			Menu::Int("Alpha", Menu::Settings::titleText.a, 0, 255);
			Menu::Int("Font", Menu::Settings::titleText.f, 0, 7);
		}
		break;


		//Settings Menu 4 
		case settingsmenu_theme_titlerect:
		{
			Menu::Title("Title Rect");
			Menu::MainTitle("~c~[Shade 1.0]                             ");


			Menu::Int("Red", Menu::Settings::titleRect.r, 0, 255);
			Menu::Int("Green", Menu::Settings::titleRect.g, 0, 255);
			Menu::Int("Blue", Menu::Settings::titleRect.b, 0, 255);
			Menu::Int("Alpha", Menu::Settings::titleRect.a, 0, 255);
		}
		break;


		//Settings Menu  5
		case settingsmenu_theme_optiontext:
		{
			Menu::Title("Option Text");
			Menu::MainTitle("~c~[Shade 1.0]                             ");


			Menu::Int("Red", Menu::Settings::optionText.r, 0, 255);
			Menu::Int("Green", Menu::Settings::optionText.g, 0, 255);
			Menu::Int("Blue", Menu::Settings::optionText.b, 0, 255);
			Menu::Int("Alpha", Menu::Settings::optionText.a, 0, 255);
			Menu::Int("Font", Menu::Settings::optionText.f, 0, 7);
		}
		break;


		//Settings Menu 6 
		case settingsmenu_theme_optionrect:
		{
			Menu::Title("Option Rect");
			Menu::MainTitle("~c~[Shade 1.0]                             ");


			Menu::Int("Red", Menu::Settings::optionRect.r, 0, 255);
			Menu::Int("Green", Menu::Settings::optionRect.g, 255, 0);
			Menu::Int("Blue", Menu::Settings::optionRect.b, 0, 255);
			Menu::Int("Alpha", Menu::Settings::optionRect.a, 0, 255);
		}
		break;


		//Settings Menu 7 
		case settingsmenu_theme_scroller:
		{
			Menu::Title("Option Rect");
			Menu::MainTitle("~c~[Shade 1.0]                             ");


			Menu::Int("Red", Menu::Settings::scroller.r, 0, 255);
			Menu::Int("Green", Menu::Settings::scroller.g, 0, 255);
			Menu::Int("Blue", Menu::Settings::scroller.b, 0, 255);
			Menu::Int("Alpha", Menu::Settings::scroller.a, 0, 255);
		}
		break;

		case acrobatic:
		{
			Menu::Title("Vehicle Acrobatic");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("Front Flip")) {
				int veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 6.0f, 0, -2.0f, 0, true, true, true, true, false, true);
			}
			if (Menu::Option("Back Flip")) {
				int veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 6.0f, 0, 2.0f, 0, true, true, true, true, false, true);
			}
			if (Menu::Option("Kick Flip")) {
				int veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 5.0f, 2.0f, 0, 0, true, true, true, true, false, true);
			}
			if (Menu::Option("Heel Flip")) {
				int veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 5.0f, -2.0f, 0, 0, true, true, true, true, false, true);
			}
			if (Menu::Option("Bunny Hop")) {
				int veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 7.0f, 0, 0, 0, true, true, true, true, false, true);
			}
			if (Menu::Option("Launch Up")) {
				int veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 40.0f, 0, 0, 0, true, true, true, true, false, true);
			}
			if (Menu::Option("Crush Vehicle")) {
				int veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, -40.0f, 0, 0, 0, true, true, true, true, false, true);
			}

		}
		break;

		case windowsceh:
		{
			Menu::Title("Window Options");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("Remove Vehicle Windows"))
			{
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
				VEHICLE::REMOVE_VEHICLE_WINDOW(veh, false);
			}

			if (Menu::Option("Roll down Window"))
			{
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
				VEHICLE::ROLL_DOWN_WINDOW(veh, false);
			}
			if (Menu::Option("Roll up Window"))
			{
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
				VEHICLE::ROLL_UP_WINDOW(veh, false);
			}
		}
		break;



		case bomber:
		{
			Menu::Title("helicopter bombers");
			Menu::MainTitle("SHADE                             ");

			Menu::Toggle("Activate bombers", Features::bomber, [] { Features::bomber_mode(Features::bomber); });


			if (Menu::Int("~r~Red", Features::rt, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Features::rt = NumberKeyboard();
				}
			}

			if (Menu::Int("~g~Green", Features::rrt, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Features::rrt = NumberKeyboard();
				}
			}

			if (Menu::Int("~r~Blue", Features::rrrt, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Features::rrrt = NumberKeyboard();
				}
			}



			if (Menu::Int("Type", Features::Explosionfickk, 1, 38))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::Explosionfickk = NumberKeyboard();
				}
			}


			if (Menu::Int("Size", Features::ficksizee, 1, 10))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::ficksizee = NumberKeyboard();
				}
			}



		}
		break;


		case vehicle:
		{
			Menu::Title("Vehicle Options");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			Menu::MenuOption("Vehicle Weapons", VehWeapon);
			Menu::MenuOption("Mobile LS Custom", lsc1);
			Menu::MenuOption("Vehicle Acrobatics", acrobatic);
			Menu::MenuOption("PTFX Vehicle", ptfxveh);
			Menu::MenuOption("Color Changer", Vehcolor);
			Menu::MenuOption("Window Options", windowsceh);
			Menu::MenuOption("Neon Options", Neons);
			if (Menu::Option("Create Smoke"))
			{
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
				VEHICLE::SET_VEHICLE_ENGINE_HEALTH(veh, false);
			}
			if (Menu::Option("Auto Pilot"))
			{
				int WaypointHandle = UI::GET_FIRST_BLIP_INFO_ID(8);
				int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);

				if (UI::DOES_BLIP_EXIST(WaypointHandle)) {
					Vector3 WaypointPos = UI::GET_BLIP_COORDS(WaypointHandle);
					AI::TASK_VEHICLE_DRIVE_TO_COORD(PLAYER::PLAYER_PED_ID(), VehID, WaypointPos.x, WaypointPos.y, WaypointPos.z, 18.f, 0, VehID, DrivingStyleNormal, 1.f, true);
				}
				else
					notifyMap("~r~PLEASE SET A WAYPOINT!");


			}
			if (Menu::Option("Custom Plate")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				RequestControlOfEnt(veh);
				VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, CharKeyboard());
			}
			if (Menu::Option("Explode Vehicle"))
			{
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
				VEHICLE::EXPLODE_VEHICLE(veh, false, false);
			}
			if (Menu::Option("Fix Car")) {
				uint Vehicle = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID()));
				VEHICLE::SET_VEHICLE_FIXED(Vehicle);
				VEHICLE::SET_VEHICLE_DEFORMATION_FIXED(Vehicle);
				VEHICLE::SET_VEHICLE_DIRT_LEVEL(Vehicle, 0);
			}
			if (Menu::Option("Max Vehicle"))
			{
				if (PED::IS_PED_IN_ANY_VEHICLE(playerPedId, 0))
				{
					Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_USING(playerPedId);
					if (ENTITY::DOES_ENTITY_EXIST(playerVeh) && !ENTITY::IS_ENTITY_DEAD(playerVeh))
						Features::set_vehicle_max_upgrades(playerVeh, true, false, 1, "SHADE", true, 100, 0, 100, 1, 2);
				}
			}
			Ped playerPed;
			if (Menu::Option("Wash Vehicle")) {
				GRAPHICS::WASH_DECALS_FROM_VEHICLE(PED::GET_VEHICLE_PED_IS_IN(playerPed, 0), 100.0f);
			}
			if (Menu::Option("Flip Car")) {
				Features::flipup();
			}
			if (Menu::Option("Delete Doors"))
			{
				Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_USING(playerPedId);
				for (int DoorIndex = 0; DoorIndex <= 6; DoorIndex++)
					VEHICLE::SET_VEHICLE_DOOR_BROKEN(playerVeh, DoorIndex, 1);
			}
			if (Menu::Option("Open Doors")) {
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 0, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 1, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 2, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 3, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 4, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 5, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 6, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 7, true, false);
			}
			if (Menu::Option("Close Doors")) {
				VEHICLE::SET_VEHICLE_DOORS_SHUT(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), true);
			}
			if (Menu::Toggle("Car Godmode", Features::cargodmodebool)) { Features::cargodmode(); }

			Menu::Toggle("Infinite Rockets", Features::isInfBoost, [] { Features::InfiniteBoost(Features::isInfBoost); });
			Menu::Toggle("Horn Boost", Features::boostbool, [] { Features::carboost(Features::boostbool); });
			if (Menu::Int("Boost Delay", Features::Horndelay, 50, 1000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::Horndelay = NumberKeyboard();
				}
			}
			Menu::Toggle("View Speed Meter KM/h", Features::Speedometerbool, [] { Features::Speedometer(Features::Speedometerbool); });
			Menu::Toggle("Backboost ", Features::Backboost, [] { Features::backboost(Features::Backboost); });
			Menu::Toggle("Stop Car", Features::Stop, [] { Features::stop(Features::Stop); });
			Menu::Toggle("Drift Mode", Features::Drift, [] { Features::DriftMode(Features::Drift); });
			Menu::Toggle("Drive on Water", Features::dowbool);
			Menu::Toggle("No Bike Fall", Features::bikeNoFall);
			Menu::Toggle("Spider Vehicle", Features::stickToGround);
			if (Menu::Int("Vehicle Alpha", Menu::Settings::alpha, 0, 255))
			{
				int VehicleID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), true);
				ENTITY::SET_ENTITY_ALPHA(VehicleID, Menu::Settings::alpha, false);
			}

		}
		break;



		case FeaturesS: {
			{
				Menu::Title("~w~Tunables");
				Menu::MainTitle("~c~[Shade 1.0]                             ");

				Menu::Toggle("Rockstars RP Bonus", globalHandle(0x40001 + 0x1284).As<bool>());
				Menu::Toggle("SP Bypass", globalHandle(4266905).As<bool>());
				Menu::Toggle("Snow", globalHandle(0x40001 + 0x1271).As<bool>());
				Menu::Toggle("Xmas Content", globalHandle(0x40001 + 0x127C).As<bool>());

				Menu::Toggle("Valentine 2016 Clothing", globalHandle(0x40001 + 0x2FD9).As<bool>());
				Menu::Toggle("Valentine 2016 Vehicle", globalHandle(0x40001 + 0x2FDA).As<bool>());
				Menu::Toggle("Valentine Weapon", globalHandle(0x40001 + 0x2A90).As<bool>());
				Menu::Toggle("Valentine Vehicle", globalHandle(0x40001 + 0x2A91).As<bool>());
				Menu::Toggle("Valentine Masks", globalHandle(0x40001 + 0x2A92).As<bool>());
				Menu::Toggle("Valentine Hair", globalHandle(0x40001 + 0x2A93).As<bool>());
				Menu::Toggle("Valentine Clothing", globalHandle(0x40001 + 0x2A94).As<bool>());
				Menu::Toggle("Be My Valentine", globalHandle(0x40001 + 0x300D).As<bool>());
				Menu::Toggle("Valentine Event", globalHandle(0x40001 + 0x1766).As<bool>());

				Menu::Toggle("Halloween Sounds", globalHandle(0x40001 + 0x2D2F).As<bool>());
				Menu::Toggle("Halloween Anims", globalHandle(0x40001 + 0x2AAD).As<bool>());
				Menu::Toggle("Halloween Weapons", globalHandle(0x40001 + 0x2AA6).As<bool>());

			}
			break;




		case SuperSportss:
			Menu::Title("SOUTHERNSAN");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			//for (auto car : SOUTHERNSAN) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Superr:
			Menu::Title("Super");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Super1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Sportss:
			Menu::Title("Sports");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Sports1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case SportClassicc:
			Menu::Title("Sports Classic");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : SportsClassics1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Offroadd:
			Menu::Title("Offroad");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : OffRoad1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Sedanss:
			Menu::Title("Sedans");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Sedans1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Coupess:
			Menu::Title("Coupes");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Coupes1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Musclee:
			Menu::Title("Muscle");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Muscle1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Boatss:
			Menu::Title("Boats");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Boats1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Commerciall:
			Menu::Title("Commercial");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Commercial1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Compactss:
			Menu::Title("Compacts");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Compacts1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Cycless:
			Menu::Title("Cycles");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Cycles1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Emergencyy:
			Menu::Title("Emergency");
			Menu::MainTitle("~w~Build: 2.6        ~HUD_COLOUR_GOLD~~g~GTA           ");
			for (auto car : Emergency1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Helicopterss:
			Menu::Title("Helicopters");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Helicopters1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Industriall:
			Menu::Title("Industrial");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Industrial1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Militaryy:
			Menu::Title("Military");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Military1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Motorcycless:
			Menu::Title("Motorcycles");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Motorcycles1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Planess:
			Menu::Title("Planes");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Planes1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
			/*case Servicee:
				Menu::Title("Service");
				Menu::MainTitle("~c~[Shade 1.0]                             ");
				for (auto car : Service1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
				break;*/
		case SUVv:
			Menu::Title("SUV");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : SUVs1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Trailerr:
			Menu::Title("Trailer");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Trailer1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Trainss:
			Menu::Title("Trains");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Trains1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Utilityy:
			Menu::Title("Utility");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Utility1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		case Vanss:
			Menu::Title("Vans");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Vans1) { Menu::Option(car, [car] { Features::autovehi22(car); }); }
			break;
		}
						break;




						//Spawn Vehicle 
		case vehspawner: {
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			Menu::Toggle("Spawn in Car", Features::spawnincar);
			Menu::Toggle("Spawn Maxed", Features::spawnmaxed);
			Menu::MenuOption("Modded Vehicles", Ulti);
			if (Menu::ListVector(".ini Vehicles", ini1, inipos))
				LoadPreset(ini1[inipos]);
			if (Menu::Option("~g~Spawn by name")) {
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "", "", "", "", "", "", 100);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				Features::autovehi(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT());
			}


			if (Menu::Option("~r~Delete Current Vehicle"))
			{
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, false))
				{
					int Vehicle = PED::GET_VEHICLE_PED_IS_USING(playerPed);
					if (!NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Vehicle))
						while (!NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Vehicle));

					ENTITY::SET_ENTITY_AS_MISSION_ENTITY(Vehicle, 1, 1);
					VEHICLE::DELETE_VEHICLE(&Vehicle);
				}
			}

			if (Menu::Option("Teleport In Last Vehicle")) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true);
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), PLAYER::GET_PLAYERS_LAST_VEHICLE(), -1);

			}
			if (Menu::Option("Teleport Personal Vehicle to me")) {
				Vector3 CoordBlip = UI::GET_BLIP_INFO_ID_COORD(UI::GET_FIRST_BLIP_INFO_ID(225));
				int VehicleHandle = VEHICLE::GET_CLOSEST_VEHICLE(CoordBlip.x, CoordBlip.y, CoordBlip.z, 1, 0, 71);
				if (VehicleHandle == 0) {
					Vector3 CoordBlipMoto = UI::GET_BLIP_INFO_ID_COORD(UI::GET_FIRST_BLIP_INFO_ID(226));
					int VehicleHandleMoto = VEHICLE::GET_CLOSEST_VEHICLE(CoordBlip.x, CoordBlip.y, CoordBlip.z, 1, 0, 71);
					if (VehicleHandleMoto == 0) {
						notifyBottom("~r~Could not find personal vehicle.");
					}
					else {
						Vector3 me = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
						ENTITY::SET_ENTITY_COORDS(VehicleHandleMoto, me.x, me.y + 2, me.z, 1, 1, 1, 1);
					}
				}
				else {
					Vector3 me = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
					ENTITY::SET_ENTITY_COORDS(VehicleHandle, me.x, me.y + 2, me.z, 1, 1, 1, 1);
				}

			}
		}

						 Menu::MenuOption("Super", super);
						 Menu::MenuOption("Sports", sport);
						 Menu::MenuOption("Sport Classic", SportClassic);
						 Menu::MenuOption("Offroad", Offroad);
						 Menu::MenuOption("Sedans", Sedans);
						 Menu::MenuOption("Coupes", Coupes);
						 Menu::MenuOption("Muscle", Muscle);
						 Menu::MenuOption("Boats", Boats);
						 Menu::MenuOption("Commercial", Commercial);
						 Menu::MenuOption("Compacts", Compacts);
						 Menu::MenuOption("Cycles", Cycles);
						 Menu::MenuOption("Emergency", Emergency);
						 Menu::MenuOption("Helicopters", Helicopters);
						 Menu::MenuOption("Industrial", Industrial);
						 Menu::MenuOption("Military", Military);
						 Menu::MenuOption("Motorcycles", Motorcycles);
						 Menu::MenuOption("Planes", Planes);
						 Menu::MenuOption("SUV", SUV);
						 Menu::MenuOption("Trailer", Trailer);
						 Menu::MenuOption("Trains", Trains);
						 Menu::MenuOption("Utility", Utility);
						 Menu::MenuOption("Vans", Vans);


						 break;

		case super:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Super1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case sport:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Sports1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case SportClassic:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : SportsClassics1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case Offroad:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : OffRoad1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case Sedans:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Sedans1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case Coupes:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Coupes1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case Muscle:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Muscle1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case Boats:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Boats1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case Commercial:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Commercial1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case Compacts:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Compacts1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case Cycles:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Cycles1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case Emergency:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Emergency1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case Helicopters:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Helicopters1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case Industrial:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Industrial1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case Military:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Military1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case Motorcycles:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Motorcycles1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case Planes:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Planes1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;

		case SUV:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : SUVs1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case Trailer:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Trailer1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case Trains:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Trains1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case Utility:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Utility1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;
		case Vans:
			Menu::Title("~w~Vehicle Spawner");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			for (auto car : Vans1) { Menu::Option(Features::vehicleNames ? VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL($(car)) : car, [car] { Features::spawn_vehicle(car); }); }
			break;

		case Zombie:
		{
			Menu::Title("Zombie");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("RAILGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("U_M_Y_Zombie_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_RAILGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("PISTOL")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("U_M_Y_Zombie_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("GRENADELAUNCHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("U_M_Y_Zombie_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_GRENADELAUNCHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MINIGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("U_M_Y_Zombie_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MINIGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FIREEXTINGUISHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("U_M_Y_Zombie_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FIREEXTINGUISHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("STUNGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("U_M_Y_Zombie_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_STUNGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MICROSMG")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("U_M_Y_Zombie_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MICROSMG");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FLAREGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("U_M_Y_Zombie_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FLAREGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}




		}
		break;

		case justin:
		{
			Menu::Title("Stripper");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("RAILGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("u_m_y_justin");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_RAILGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("PISTOL")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("u_m_y_justin");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("GRENADELAUNCHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("u_m_y_justin");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_GRENADELAUNCHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MINIGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("u_m_y_justin");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MINIGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FIREEXTINGUISHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("u_m_y_justin");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FIREEXTINGUISHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("STUNGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("u_m_y_justin");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_STUNGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MICROSMG")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("u_m_y_justin");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MICROSMG");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FLAREGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("u_m_y_justin");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FLAREGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}




		}
		break;

		case swat:
		{
			Menu::Title("Stripper");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("RAILGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Swat_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_RAILGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("PISTOL")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Swat_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("GRENADELAUNCHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Swat_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_GRENADELAUNCHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MINIGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Swat_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MINIGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FIREEXTINGUISHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Swat_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FIREEXTINGUISHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("STUNGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Swat_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_STUNGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MICROSMG")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Swat_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MICROSMG");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FLAREGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Swat_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FLAREGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}




		}
		break;

		case striper:
		{
			Menu::Title("Stripper");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("RAILGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("s_f_y_stripper_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_RAILGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("PISTOL")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("s_f_y_stripper_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("GRENADELAUNCHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("s_f_y_stripper_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_GRENADELAUNCHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MINIGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("s_f_y_stripper_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MINIGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FIREEXTINGUISHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("s_f_y_stripper_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FIREEXTINGUISHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("STUNGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("s_f_y_stripper_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_STUNGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MICROSMG")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("s_f_y_stripper_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MICROSMG");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FLAREGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("s_f_y_stripper_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FLAREGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}




		}
		break;

		case homeless:
		{
			Menu::Title("homeless");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("RAILGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("A_M_M_TrampBeac_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_RAILGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("PISTOL")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("A_M_M_TrampBeac_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("GRENADELAUNCHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("A_M_M_TrampBeac_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_GRENADELAUNCHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MINIGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("A_M_M_TrampBeac_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MINIGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FIREEXTINGUISHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("A_M_M_TrampBeac_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FIREEXTINGUISHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("STUNGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("A_M_M_TrampBeac_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_STUNGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MICROSMG")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("A_M_M_TrampBeac_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MICROSMG");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FLAREGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("A_M_M_TrampBeac_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FLAREGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}




		}
		break;

		case Driver:
		{
			Menu::Title("Motocross-Driver");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("RAILGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("A_M_Y_DHill_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_RAILGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("PISTOL")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("A_M_Y_DHill_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("GRENADELAUNCHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("A_M_Y_DHill_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_GRENADELAUNCHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MINIGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("A_M_Y_DHill_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MINIGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FIREEXTINGUISHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("A_M_Y_DHill_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FIREEXTINGUISHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("STUNGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("A_M_Y_DHill_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_STUNGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MICROSMG")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("A_M_Y_DHill_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MICROSMG");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FLAREGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("A_M_Y_DHill_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FLAREGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}




		}
		break;

		case soldier:
		{
			Menu::Title("Soldier");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("RAILGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_Marine_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_RAILGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("PISTOL")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_Marine_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("GRENADELAUNCHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_Marine_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_GRENADELAUNCHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MINIGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_Marine_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MINIGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FIREEXTINGUISHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_Marine_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FIREEXTINGUISHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("STUNGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_Marine_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_STUNGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MICROSMG")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_Marine_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MICROSMG");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FLAREGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_Marine_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FLAREGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}




		}
		break;

		case officer:
		{
			Menu::Title("Soldier");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("RAILGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_Marine_02");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_RAILGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("PISTOL")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_Marine_02");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("GRENADELAUNCHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_Marine_02");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_GRENADELAUNCHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MINIGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_Marine_02");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MINIGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FIREEXTINGUISHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_Marine_02");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FIREEXTINGUISHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("STUNGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_Marine_02");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_STUNGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MICROSMG")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_Marine_02");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MICROSMG");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FLAREGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_Marine_02");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FLAREGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}




		}
		break;

		case extraterrestrial:
		{
			Menu::Title("Soldier");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("RAILGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_MovAlien_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_RAILGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("PISTOL")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_MovAlien_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("GRENADELAUNCHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_MovAlien_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_GRENADELAUNCHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MINIGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_MovAlien_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MINIGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FIREEXTINGUISHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_MovAlien_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FIREEXTINGUISHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("STUNGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_MovAlien_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_STUNGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MICROSMG")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_MovAlien_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MICROSMG");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FLAREGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_MovAlien_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FLAREGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}




		}
		break;

		case LSPD:
		{
			Menu::Title("Soldier");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("RAILGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Cop_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_RAILGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("PISTOL")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Cop_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("GRENADELAUNCHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Cop_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_GRENADELAUNCHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MINIGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Cop_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MINIGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FIREEXTINGUISHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Cop_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FIREEXTINGUISHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("STUNGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Cop_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_STUNGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MICROSMG")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Cop_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MICROSMG");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FLAREGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Cop_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FLAREGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}




		}
		break;

		case firefighter:
		{
			Menu::Title("Soldier");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("RAILGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Fireman_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_RAILGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("PISTOL")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Fireman_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("GRENADELAUNCHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Fireman_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_GRENADELAUNCHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MINIGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Fireman_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MINIGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FIREEXTINGUISHER")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Fireman_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FIREEXTINGUISHER");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("STUNGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Fireman_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_STUNGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("MICROSMG")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Fireman_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MICROSMG");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}

			if (Menu::Option("FLAREGUN")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Fireman_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_FLAREGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}




		}
		break;

		case Pedss:
		{
			Menu::Title("Ped / Weapon Changer");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::MenuOption("Stripper ~y~>", striper);
			Menu::MenuOption("Swat ~y~>", swat);
			Menu::MenuOption("Justin ~y~>", justin);
			Menu::MenuOption("Zombie ~y~>", Zombie);
			Menu::MenuOption("Motocross-Driver ~y~>", Driver);
			Menu::MenuOption("Homeless ~y~>", homeless);
			Menu::MenuOption("Soldier ~y~>", soldier);
			Menu::MenuOption("Officer ~y~>", officer);
			Menu::MenuOption("LSPD police officer ~y~>", LSPD);
			Menu::MenuOption("Firefighter ~y~>", firefighter);
			Menu::MenuOption("Extraterrestrial ~y~>", extraterrestrial);

		}
		break;



		case pet:
		{
			Menu::Title("Spawn Buddie");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::MenuOption("Ped / Weapon Changer", Pedss);

			//Menu::Break(" Choose a pet");

			if (Menu::ListVector("Ped", namedPedList, namedPedListPos)) {
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				DWORD model = GAMEPLAY::GET_HASH_KEY(namedPedList[namedPedListPos]);
				STREAMING::REQUEST_MODEL(model);
				while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(0);
				latestObj = latestObj = PED::CREATE_PED(0, GAMEPLAY::GET_HASH_KEY(namedPedList[namedPedListPos]), pos.x, pos.y, pos.z, 0.f, 1, 1);
			}
		}
		break;

		//Force Animation
		case forcean:
		{
			Menu::Title("Force Animation");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("Stop Animation")) { AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer)); }
			if (Menu::Option("Sex Receiver")) { Features::animatePlayer(Features::Online::selectedPlayer, "rcmpaparazzo_2", "shag_loop_poppy"); }
			if (Menu::Option("Sex Giver")) { Features::animatePlayer(Features::Online::selectedPlayer, "rcmpaparazzo_2", "shag_loop_a"); }
			if (Menu::Option("Stripper Dance")) { Features::animatePlayer(Features::Online::selectedPlayer, "mini@strip_club@private_dance@part1", "priv_dance_p1"); }
			if (Menu::Option("Pole Dance")) { Features::animatePlayer(Features::Online::selectedPlayer, "mini@strip_club@pole_dance@pole_dance1", "pd_dance_01"); }
			if (Menu::Option("Push Ups")) { Features::animatePlayer(Features::Online::selectedPlayer, "amb@world_human_push_ups@male@base", "base"); }
			if (Menu::Option("Sit Ups")) { Features::animatePlayer(Features::Online::selectedPlayer, "amb@world_human_sit_ups@male@base", "base"); }
			if (Menu::Option("Celebrate")) { Features::animatePlayer(Features::Online::selectedPlayer, "rcmfanatic1celebrate", "celebrate"); }
			if (Menu::Option("Electrocution")) { Features::animatePlayer(Features::Online::selectedPlayer, "ragdoll@human", "electrocute"); }
			if (Menu::Option("Suicide")) { Features::animatePlayer(Features::Online::selectedPlayer, "mp_suicide", "pistol"); }
			if (Menu::Option("Showering")) { Features::animatePlayer(Features::Online::selectedPlayer, "mp_safehouseshower@male@", "male_shower_idle_b"); }

		}
		break;



		//PTFX 
		case PTFX:
		{
			Menu::Title("Effects");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("Clown Appears"))Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			if (Menu::Option("Firework 1"))Features::PTFXCALL("scr_indep_fireworks", "scr_indep_fireworks", "scr_indep_firework_trailburst");
			if (Menu::Option("Firework 2"))Features::PTFXCALL("proj_xmas_firework", "proj_xmas_firework", "scr_firework_xmas_burstst_rgw");
			if (Menu::Option("Firework 3"))Features::PTFXCALL("proj_xmas_firework", "proj_xmas_firework", "scr_firework_xmas_spiral_bur_rgw");
			if (Menu::Option("Banknotes"))Features::PTFXCALL("scr_ornate_heist", "scr_ornate_heist", "scr_heist_ornate_banknotes");
			if (Menu::Option("Truck Crash"))Features::PTFXCALL("scr_fbi4", "scr_fbi4", "scr_fbi4_trucks_crash");
			if (Menu::Option("Alien 1"))Features::PTFXCALL("scr_rcbarry1", "scr_rcbarry1", "scr_alien_disintegrate");
			if (Menu::Option("Alien 2"))Features::PTFXCALL("scr_rcbarry1", "scr_rcbarry1", "scr_alien_teleport");
			if (Menu::Option("Electric Box"))Features::PTFXCALL("scr_agencyheistb", "scr_agencyheistb", "scr_agency3b_elec_box");
			if (Menu::Option("Water Splash"))Features::PTFXCALL("scr_fbi5a", "scr_fbi5a", "scr_fbi5_ped_water_splash");
			if (Menu::Option("Bubbles"))Features::PTFXCALL("scr_fbi5a", "scr_fbi5a", "water_splash_ped_bubbles");
			if (Menu::Option("Sniper Impact"))Features::PTFXCALL("scr_martin1", "scr_martin1", "scr_sol1_sniper_impact");
			if (Menu::Option("Dirt Throw"))Features::PTFXCALL("core_snow", "core_snow", "cs_mich1_spade_dirt_throw");
			if (Menu::Option("Blood Stab"))Features::PTFXCALL("scr_michael2", "scr_michael2", "scr_mich2_blood_stab");
			if (Menu::Option("Ped Sliced"))Features::PTFXCALL("scr_michael2", "scr_michael2", "scr_abattoir_ped_sliced");
			if (Menu::Option("Camera"))Features::PTFXCALL("scr_rcpaparazzo1", "scr_rcpaparazzo1", "scr_rcpap1_camera");
			if (Menu::Option("Meth Smoke"))Features::PTFXCALL("scr_familyscenem", "scr_familyscenem", "scr_meth_pipe_smoke");
			if (Menu::Option("Burial Dirt"))Features::PTFXCALL("scr_reburials", "scr_reburials", "scr_burial_dirt");

		}
		break;


		//onlineftp
		case onlineftp:
		{
			Menu::Title("Effects to Player");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(offradardpl, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 0.3, 0.3, 0.3, r1, g1, b1, 200, 1, 1, 1, 0, 0, 0, 0);
			}
			if (Menu::Option("Clown Appears"))Features::PTFXPLAYER("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears", Features::Online::selectedPlayer);
			if (Menu::Option("Firework 1"))Features::PTFXPLAYER("scr_indep_fireworks", "scr_indep_fireworks", "scr_indep_firework_trailburst", Features::Online::selectedPlayer);
			if (Menu::Option("Firework 2"))Features::PTFXPLAYER("proj_xmas_firework", "proj_xmas_firework", "scr_firework_xmas_burst_rgw", Features::Online::selectedPlayer);
			if (Menu::Option("Firework 3"))Features::PTFXPLAYER("proj_xmas_firework", "proj_xmas_firework", "scr_firework_xmas_spiral_burst_rgw", Features::Online::selectedPlayer);
			if (Menu::Option("Banknotes"))Features::PTFXPLAYER("scr_ornate_heist", "scr_ornate_heist", "scr_heist_ornate_banknotes", Features::Online::selectedPlayer);
			if (Menu::Option("Truck Crash"))Features::PTFXPLAYER("scr_fbi4", "scr_fbi4", "scr_fbi4_trucks_crash", Features::Online::selectedPlayer);
			if (Menu::Option("Alien 1"))Features::PTFXPLAYER("scr_rcbarry1", "scr_rcbarry1", "scr_alien_disintegrate", Features::Online::selectedPlayer);
			if (Menu::Option("Alien 2"))Features::PTFXPLAYER("scr_rcbarry1", "scr_rcbarry1", "scr_alien_teleport", Features::Online::selectedPlayer);
			if (Menu::Option("Electric Box"))Features::PTFXPLAYER("scr_agencyheistb", "scr_agencyheistb", "scr_agency3b_elec_box", Features::Online::selectedPlayer);
			if (Menu::Option("Water Splash"))Features::PTFXPLAYER("scr_fbi5a", "scr_fbi5a", "scr_fbi5_ped_water_splash", Features::Online::selectedPlayer);
			if (Menu::Option("Bubbles"))Features::PTFXPLAYER("scr_fbi5a", "scr_fbi5a", "water_splash_ped_bubbles", Features::Online::selectedPlayer);
			if (Menu::Option("Blood Entry"))Features::PTFXPLAYER("scr_finalec2", "scr_finalec2", "scr_finale2_blood_entry", Features::Online::selectedPlayer);
			if (Menu::Option("Sniper Impact"))Features::PTFXPLAYER("scr_martin1", "scr_martin1", "scr_sol1_sniper_impact", Features::Online::selectedPlayer);
			if (Menu::Option("Dirt Throw"))Features::PTFXPLAYER("core_snow", "core_snow", "cs_mich1_spade_dirt_throw", Features::Online::selectedPlayer);
			if (Menu::Option("Blood Stab"))Features::PTFXPLAYER("scr_michael2", "scr_michael2", "scr_mich2_blood_stab", Features::Online::selectedPlayer);
			if (Menu::Option("Ped Sliced"))Features::PTFXPLAYER("scr_michael2", "scr_michael2", "scr_abattoir_ped_sliced", Features::Online::selectedPlayer);
			if (Menu::Option("Camera"))Features::PTFXPLAYER("scr_rcpaparazzo1", "scr_rcpaparazzo1", "scr_rcpap1_camera", Features::Online::selectedPlayer);
			if (Menu::Option("Meth Smoke"))Features::PTFXPLAYER("scr_familyscenem", "scr_familyscenem", "scr_meth_pipe_smoke", Features::Online::selectedPlayer);
			if (Menu::Option("Burial Dirt"))Features::PTFXPLAYER("scr_reburials", "scr_reburials", "scr_burial_dirt", Features::Online::selectedPlayer);

		}
		break;






		//atachtp 			
		case attachtp:
		{
			Menu::Title("~r~Attach to Player");
			Menu::MainTitle("~c~[Shade 1.0]                             ");


			if (Menu::ListVector("All Props", propList, propListPos)) {
				Vector3 Pos = ENTITY::GET_ENTITY_COORDS(Features::Online::selectedPlayer, 1);
				Features::attachobjects2(propList[propListPos]);
			}
			Menu::Title("Attach To Players");
			if (Menu::Option("Beach Fire")) { Features::attachobjects2("prop_beach_fire"); }
			if (Menu::Option("Plate")) { Features::attachobjects2("p_oil_slick_01"); }
			if (Menu::Option("EMP")) { Features::attachobjects2("hei_prop_heist_emp"); }
			if (Menu::Option("Orange Ball")) { Features::attachobjects2("prop_juicestand"); }
			if (Menu::Option("Weed")) { Features::attachobjects2("prop_weed_01"); }
			if (Menu::Option("Safe")) { Features::attachobjects2("p_v_43_safe_s"); }
			if (Menu::Option("Ufo")) { Features::attachobjects2("p_spinning_anus_s"); }
			if (Menu::Option("Toilet")) { Features::attachobjects2("prop_ld_toilet_01"); }
			if (Menu::Option("Christmas Tree")) { Features::attachobjects2("prop_xmas_tree_int"); }
			if (Menu::Option("Windmill")) { Features::attachobjects2("prop_windmill_01"); }
			if (Menu::Option("Radar")) { Features::attachobjects2("prop_air_bigradar"); }
			if (Menu::Option("Ramp")) { Features::attachobjects2("PROP_MP_RAMP_01"); }
			if (Menu::Option("Plane")) { Features::attachobjects2("prop_dummy_plane"); }
			if (Menu::Option("Astreod")) { Features::attachobjects2("prop_asteroid_01"); }
			if (Menu::Option("Alien Egg")) { Features::attachobjects2("prop_alien_egg_01"); }
			if (Menu::Option("Gravestone")) { Features::attachobjects2("prop_gravestones_02a"); }
			if (Menu::Option("Money Bag")) { Features::attachobjects2("prop_money_bag_01"); }
			if (Menu::Option("Microwave")) { Features::attachobjects2("prop_microwave_1"); }
			if (Menu::Option("Big Shit")) { Features::attachobjects2("prop_big_shit_02"); }
			if (Menu::Option("Barbell 80kg")) { Features::attachobjects2("prop_barbell_80kg"); }
			if (Menu::Option("Beach Ring")) { Features::attachobjects2("prop_beach_rings_01"); }
			if (Menu::Option("Punchbag")) { Features::attachobjects2("prop_beach_punchbag"); }
			if (Menu::Option("Vending")) { Features::attachobjects2("prop_vend_snak_01"); }
			if (Menu::Option("Beggar Sign")) { Features::attachobjects2("prop_beggers_sign_02"); }
			char* objects[136] = { "prop_bskball_01", "PROP_MP_RAMP_03", "PROP_MP_RAMP_02", "PROP_MP_RAMP_01", "PROP_JETSKI_RAMP_01", "PROP_WATER_RAMP_03", "PROP_VEND_SNAK_01", "PROP_TRI_START_BANNER", "PROP_TRI_FINISH_BANNER", "PROP_TEMP_BLOCK_BLOCKER", "PROP_SLUICEGATEL", "PROP_SKIP_08A", "PROP_SAM_01", "PROP_RUB_CONT_01B", "PROP_ROADCONE01A", "PROP_MP_ARROW_BARRIER_01", "PROP_HOTEL_CLOCK_01", "PROP_LIFEBLURB_02", "PROP_COFFIN_02B", "PROP_MP_NUM_1", "PROP_MP_NUM_2", "PROP_MP_NUM_3", "PROP_MP_NUM_4", "PROP_MP_NUM_5", "PROP_MP_NUM_6", "PROP_MP_NUM_7", "PROP_MP_NUM_8", "PROP_MP_NUM_9", "prop_xmas_tree_int", "prop_bumper_car_01", "prop_beer_neon_01", "prop_space_rifle", "prop_dummy_01", "prop_rub_trolley01a", "prop_wheelchair_01_s", "PROP_CS_KATANA_01", "PROP_CS_DILDO_01", "prop_armchair_01", "prop_bin_04a", "prop_chair_01a", "prop_dog_cage_01", "prop_dummy_plane", "prop_golf_bag_01", "prop_arcade_01", "hei_prop_heist_emp", "prop_alien_egg_01", "prop_air_towbar_01", "hei_prop_heist_tug", "prop_air_luggtrolley", "PROP_CUP_SAUCER_01", "prop_wheelchair_01", "prop_ld_toilet_01", "prop_acc_guitar_01", "prop_bank_vaultdoor", "p_v_43_safe_s", "p_spinning_anus_s", "prop_can_canoe", "prop_air_woodsteps", "Prop_weed_01", "prop_a_trailer_door_01", "prop_apple_box_01", "prop_air_fueltrail1", "prop_barrel_02a", "prop_barrel_float_1", "prop_barrier_wat_03b", "prop_air_fueltrail2", "prop_air_propeller01", "prop_windmill_01", "prop_Ld_ferris_wheel", "p_tram_crash_s", "p_oil_slick_01", "p_ld_stinger_s", "p_ld_soc_ball_01", "prop_juicestand", "p_oil_pjack_01_s", "prop_barbell_01", "prop_barbell_100kg", "p_parachute1_s", "p_cablecar_s", "prop_beach_fire", "prop_lev_des_barge_02", "prop_lev_des_barge_01", "prop_a_base_bars_01", "prop_beach_bars_01", "prop_air_bigradar", "prop_weed_pallet", "prop_artifact_01", "prop_attache_case_01", "prop_large_gold", "prop_roller_car_01", "prop_water_corpse_01", "prop_water_corpse_02", "prop_dummy_01", "prop_atm_01", "hei_prop_carrier_docklight_01", "hei_prop_carrier_liferafts", "hei_prop_carrier_ord_03", "hei_prop_carrier_defense_02", "hei_prop_carrier_defense_01", "hei_prop_carrier_radar_1", "hei_prop_carrier_radar_2", "hei_prop_hei_bust_01", "hei_prop_wall_alarm_on", "hei_prop_wall_light_10a_cr", "prop_afsign_amun", "prop_afsign_vbike", "prop_aircon_l_01", "prop_aircon_l_02", "prop_aircon_l_03", "prop_aircon_l_04", "prop_airhockey_01", "prop_air_bagloader", "prop_air_blastfence_01", "prop_air_blastfence_02", "prop_air_cargo_01a", "prop_air_chock_01", "prop_air_chock_03", "prop_air_gasbogey_01", "prop_air_generator_03", "prop_air_stair_02", "prop_amb_40oz_02", "prop_amb_40oz_03", "prop_amb_beer_bottle", "prop_amb_donut", "prop_amb_handbag_01", "prop_amp_01", "prop_anim_cash_pile_02", "prop_asteroid_01", "prop_arm_wrestle_01", "prop_ballistic_shield", "prop_bank_shutter", "prop_barier_conc_02b", "prop_barier_conc_05a", "prop_barrel_01a", "prop_bar_stool_01", "prop_basejump_target_01" };

			if (Menu::Option("Delete All Objects")) {
				for (int i = 0; i < 5; i++) {
					Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 1);
					GAMEPLAY::CLEAR_AREA_OF_PEDS(coords.x, coords.y, coords.z, 2, 0);
					GAMEPLAY::CLEAR_AREA_OF_OBJECTS(coords.x, coords.y, coords.z, 2, 0);
					GAMEPLAY::CLEAR_AREA_OF_VEHICLES(coords.x, coords.y, coords.z, 2, 0, 0, 0, 0, 0);
					for (int i = 0; i < 136; i++) {
						Object obj = OBJECT::GET_CLOSEST_OBJECT_OF_TYPE(coords.x, coords.y, coords.z, 4.0, GAMEPLAY::GET_HASH_KEY(objects[i]), 0, 0, 1);

						if (ENTITY::DOES_ENTITY_EXIST(obj) && ENTITY::IS_ENTITY_ATTACHED_TO_ENTITY(obj, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer))) {
							RequestControlOfEnt(obj);
							int netID = NETWORK::NETWORK_GET_NETWORK_ID_FROM_ENTITY(obj);
							NETWORK::SET_NETWORK_ID_CAN_MIGRATE(netID, 1);
							Features::RequestControlOfid(netID);
							ENTITY::DETACH_ENTITY(obj, 1, 1);
							if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(obj)) {
								ENTITY::SET_ENTITY_AS_MISSION_ENTITY(obj, 1, 1);
								ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&obj);
								ENTITY::DELETE_ENTITY(&obj);
							}
						}
					}
				}
			}
		}
		break;

		case attachtpall:
		{
			Menu::Title("~r~Attach to All Player");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("Plate")) { Features::attachobjects2("p_oil_slick_01"); }
			if (Menu::Option("EMP")) { Features::attachobjects2("hei_prop_heist_emp"); }
			if (Menu::Option("Orange Ball")) { Features::attachobjects2("prop_juicestand"); }
			if (Menu::Option("Weed")) { Features::attachobjects2("prop_weed_01"); }
			if (Menu::Option("Safe")) { Features::attachobjects2("p_v_43_safe_s"); }
			if (Menu::Option("Ufo")) { Features::attachobjects2("p_spinning_anus_s"); }
			if (Menu::Option("Toilet")) { Features::attachobjects2("prop_ld_toilet_01"); }
			if (Menu::Option("Christmas Tree")) { Features::attachobjects2("prop_xmas_tree_int"); }
			if (Menu::Option("Windmill")) { Features::attachobjects2("prop_windmill_01"); }
			if (Menu::Option("Radar")) { Features::attachobjects2("prop_air_bigradar"); }
			if (Menu::Option("Alien Egg")) { Features::attachobjects2("prop_alien_egg_01"); }
			if (Menu::Option("Beggers Sign")) { Features::attachobjects2("prop_beggers_sign_01"); }
			if (Menu::Option("Tramp Sign")) { Features::attachobjects2("prop_beggers_sign_02"); }
			if (Menu::Option("Egg Clock")) { Features::attachobjects2("prop_egg_clock_01"); }
			if (Menu::Option("Guitar")) { Features::attachobjects2("prop_acc_guitar_01_d1"); }
			if (Menu::Option("Duffel")) { Features::attachobjects2("prop_cs_duffel_01b"); }
			if (Menu::Option("Vending Dispenser")) { Features::attachobjects2("prop_juice_dispenser"); }
			if (Menu::Option("Boxing")) { Features::attachobjects2("prop_boxing_glove_01"); }
			if (Menu::Option("Dingy")) { Features::attachobjects2("prop_byard_dingy"); }
			if (Menu::Option("Dildo")) { Features::attachobjects2("prop_cs_dildo_01"); }
			if (Menu::Option("Dumpster")) { Features::attachobjects2("prop_cs_dumpster_01a"); }
			if (Menu::Option("vDJ")) { Features::attachobjects2("prop_dj_deck_02"); }
			if (Menu::Option("Plane")) { Features::attachobjects2("prop_dummy_plane"); }
			if (Menu::Option("Ramp")) { Features::attachobjects2("PROP_MP_RAMP_03"); }
			if (Menu::Option("Ramp2")) { Features::attachobjects2("PROP_MP_RAMP_02"); }
			if (Menu::Option("Ramp3")) { Features::attachobjects2("PROP_MP_RAMP_01"); }
			if (Menu::Option("Skip")) { Features::attachobjects2("PROP_SKIP_08A"); }
			if (Menu::Option("Beer Neon")) { Features::attachobjects2("prop_beer_neon_01"); }
			if (Menu::Option("Dummy Plane")) { Features::attachobjects2("prop_dummy_plane"); }
			if (Menu::Option("Cash Pile")) { Features::attachobjects2("prop_anim_cash_pile_02"); }
			if (Menu::Option("Asteroid")) { Features::attachobjects2("prop_asteroid_01"); }
			if (Menu::Option("Weed Palet")) { Features::attachobjects2("prop_weed_pallet"); }
			if (Menu::Option("Ferris Wheel")) { Features::attachobjects2("prop_Ld_ferris_wheel"); }
			if (Menu::Option("Donut")) { Features::attachobjects2("prop_amb_donut"); }
			if (Menu::Option("Basejump")) { Features::attachobjects2("prop_basejump_target_01"); }
			if (Menu::Option("Handbag")) { Features::attachobjects2("prop_amb_handbag_01"); }
			if (Menu::Option("Cargo")) { Features::attachobjects2("prop_air_cargo_01a"); }
			if (Menu::Option("Stunt Ramp BIG")) { Features::attachobjects2("stt_prop_ramp_multi_loop_rb"); }
			if (Menu::Option("Crashed Heli")) { Features::attachobjects2("prop_crashed_heli"); }
			if (Menu::Option("Crashed Heli 2")) { Features::attachobjects2("prop_crashed_heli_s"); }
			if (Menu::Option("Train")) { Features::attachobjects2("prop_rail_boxcar3"); }
			if (Menu::Option("Roller")) { Features::attachobjects2("prop_roller_car_02"); }
			if (Menu::Option("Para")) { Features::attachobjects2("p_cargo_chute_s"); }
			if (Menu::Option("Katana")) { Features::attachobjects2("prop_cs_katana_01"); }
			if (Menu::Option("Boxing Glove")) { Features::attachobjects2("prop_boxing_glove_01"); }
		}
		break;


		case tpother:
		{
			Menu::Title("~r~Teleport Options");
			Menu::MainTitle("~c~[Shade 1.0]                             ");
			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(29, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 1, 1, 1, 0, 255, 255, 200, 1, 1, 1, 0, 0, 0, 0);
			}
			if (Menu::Option("Teleport Into Car")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				for (int i = -1; i < 16; i++)
				{
					if (VEHICLE::IS_VEHICLE_SEAT_FREE(veh, i))
					{
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), veh, i);
					}
				}
			}
			Menu::Option("Teleport To Player", [] {Features::Online::TeleportToPlayer(Features::Online::selectedPlayer); });

		}
		break;


		case outfits:
		{
			Menu::Title("~r~Clothing");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			Menu::StringVector("Gender", gender, genderPos);
			if (genderPos == 0) {
				if (Menu::Option("Outfit 1")) {
					Features::changeClothes("MASK", 38, 0);
					Features::changeClothes("LEGS", 34, 0);
					Features::changeClothes("SPECIAL3", 1, 1);
					Features::changeClothes("TORSO2", 53, 0);
					Features::changeClothes("SHOES", 25, 0);
					Features::changeClothes("SPECIAL2", 129, 0);
				}
				if (Menu::Option("Outfit 2")) {
					Features::changeClothes("LEGS", 34, 0);
					Features::changeClothes("SPECIAL3", 1, 1);
					Features::changeClothes("TORSO2", 53, 0);
					Features::changeClothes("SHOES", 25, 0);
					Features::changeClothes("SPECIAL2", 129, 0);
				}
				if (Menu::Option("Cop 1")) {
					Features::changeClothes("HATS", 47, 0);
					Features::changeClothes("TORSO2", 55, 0);
					Features::changeClothes("LEGS", 35, 0);
					Features::changeClothes("SHOES", 51, 0);
					Features::changeClothes("SPECIAL2", 58, 0);
				}
				if (Menu::Option("Cop 2")) {
					Features::changeClothes("TORSO2", 55, 0);
					Features::changeClothes("LEGS", 35, 0);
					Features::changeClothes("SHOES", 51, 0);
					Features::changeClothes("SPECIAL2", 58, 0);
				}
				if (Menu::Option("Swat")) {
					Features::changeClothes("TORSO", 17, 0);
					Features::changeClothes("MASK", 56, 1);
					Features::changeClothes("HATS", 40, 0);
					Features::changeClothes("HAIR", 0, 0);
					Features::changeClothes("TORSO", 19, 0);
					Features::changeClothes("GLASSES", 0, 1);
					Features::changeClothes("LEGS", 34, 0);
					Features::changeClothes("SHOES", 25, 0);
					Features::changeClothes("SPECIAL", 0, 0);
					Features::changeClothes("SPECIAL2", 58, 0);
					Features::changeClothes("SPECIAL3", 4, 1);
					Features::changeClothes("TORSO2", 55, 0);
					Features::changeClothes("HANDS", 0, 0);
				}
				if (Menu::Option("Ghost")) {
					Features::changeClothes("TORSO", 17, 0);
					Features::changeClothes("MASK", 29, 0);
					Features::changeClothes("HATS", 28, 0);
					Features::changeClothes("HAIR", 0, 0);
					Features::changeClothes("GLASSES", 0, 1);
					Features::changeClothes("LEGS", 31, 0);
					Features::changeClothes("SHOES", 24, 0);
					Features::changeClothes("SPECIAL", 30, 2);
					Features::changeClothes("SPECIAL2", 15, 0);
					Features::changeClothes("TORSO2", 50, 0);
					Features::changeClothes("HANDS", 0, 0);
				}
				if (Menu::Option("Penguin")) {
					Features::changeClothes("TORSO", 0, 0);
					Features::changeClothes("MASK", 31, 0);
					Features::changeClothes("HATS", 0, 0);
					Features::changeClothes("HAIR", 0, 0);
					Features::changeClothes("GLASSES", 0, 0);
					Features::changeClothes("LEGS", 32, 0);
					Features::changeClothes("SHOES", 17, 0);
					Features::changeClothes("SPECIAL1", 0, 0);
					Features::changeClothes("SPECIAL2", 57, 0);
					Features::changeClothes("TEXTURES", 0, 0);
					Features::changeClothes("TORSO2", 51, 0);
					Features::changeClothes("HANDS", 0, 0);
				}
				if (Menu::Option("Pilot")) {
					Features::changeClothes("HATS", 20, 0);
					Features::changeClothes("GLASSES", 6, 0);
					Features::changeClothes("TORSO", 16, 0);
					Features::changeClothes("LEGS", 30, 0);
					Features::changeClothes("HANDS", 39, 4);
					Features::changeClothes("SHOES", 24, 0);
					Features::changeClothes("SPECIAL2", 15, 0);
					Features::changeClothes("TORSO2", 48, 0);
				}
				if (Menu::Option("Splinter")) {
					Features::changeClothes("TORSO", 96, 0);
					Features::changeClothes("MASK", 57, 0);
					Features::changeClothes("HATS", 0, 0);
					Features::changeClothes("HAIR", 23, 0);
					Features::changeClothes("GLASSES", 0, 1);
					Features::changeClothes("LEGS", 31, 0);
					Features::changeClothes("SHOES", 25, 0);
					Features::changeClothes("SPECIAL1", 0, 0);
					Features::changeClothes("SPECIAL2", 58, 0);
					Features::changeClothes("TEXTURES", 3, 0);
					Features::changeClothes("TORSO2", 50, 0);
					Features::changeClothes("HANDS", 0, 0);
				}
				if (Menu::Option("Special 1")) {
					Features::changeClothes("TORSO", 96, 0);
					Features::changeClothes("HATS", 40, 0);
					Features::changeClothes("MASK", 54, 0);
					Features::changeClothes("GLASSES", 0, 1);
					Features::changeClothes("LEGS", 34, 0);
					Features::changeClothes("SHOES", 25, 0);
					Features::changeClothes("SPECIAL1", 0, 0);
					Features::changeClothes("SPECIAL2", 15, 0);
					Features::changeClothes("TORSO2", 53, 0);
					Features::changeClothes("HANDS", 51, 0);
				}
				if (Menu::Option("Special 2")) {
					Features::changeClothes("HATS", 40, 0);
					Features::changeClothes("MASK", 28, 0);
					Features::changeClothes("TORSO", 44, 0);
					Features::changeClothes("LEGS", 34, 0);
					Features::changeClothes("HANDS", 45, 0);
					Features::changeClothes("SHOES", 25, 0);
					Features::changeClothes("SPECIAL2", 56, 1);
					Features::changeClothes("TORSO2", 53, 0);
				}
				if (Menu::Option("Balla")) {
					Features::changeClothes("HATS", 10, 7);
					Features::changeClothes("GLASSES", 17, 6);
					Features::changeClothes("MASK", 51, 6);
					Features::changeClothes("TORSO", 14, 0);
					Features::changeClothes("LEGS", 5, 9);
					Features::changeClothes("SHOES", 9, 5);
					Features::changeClothes("SPECIAL2", 23, 0);
					Features::changeClothes("TORSO2", 7, 9);
				}
				if (Menu::Option("Elf")) {
					Features::changeClothes("MASK", 34, 0);
					Features::changeClothes("TORSO", 4, 0);
					Features::changeClothes("LEGS", 19, 1);
					Features::changeClothes("SHOES", 22, 1);
					Features::changeClothes("SPECIAL1", 18, 0);
					Features::changeClothes("SPECIAL2", 28, 8);
					Features::changeClothes("TORSO2", 19, 1);
				}
				if (Menu::Option("Thug")) {
					Features::changeClothes("HATS", 46, 1);
					Features::changeClothes("GLASSES", 17, 6);
					Features::changeClothes("MASK", 51, 7);
					Features::changeClothes("TORSO", 22, 0);
					Features::changeClothes("LEGS", 7, 0);
					Features::changeClothes("HANDS", 44, 0);
					Features::changeClothes("SHOES", 12, 6);
					Features::changeClothes("SPECIAL2", 15, 0);
					Features::changeClothes("TORSO2", 14, 7);
				}
				if (Menu::Option("Santa")) {
					Features::changeClothes("MASK", 8, 0);
					Features::changeClothes("TORSO", 12, 0);
					Features::changeClothes("LEGS", 19, 0);
					Features::changeClothes("SHOES", 4, 4);
					Features::changeClothes("SPECIAL1", 10, 0);
					Features::changeClothes("SPECIAL2", 21, 2);
					Features::changeClothes("TORSO2", 19, 0);
				}
				if (Menu::Option("Snowman")) {
					Features::changeClothes("MASK", 10, 0);
					Features::changeClothes("TORSO", 12, 0);
					Features::changeClothes("LEGS", 20, 0);
					Features::changeClothes("SHOES", 18, 1);
					Features::changeClothes("SPECIAL1", 24, 2);
					Features::changeClothes("SPECIAL2", 22, 4);
					Features::changeClothes("TORSO2", 25, 7);
				}
				if (Menu::Option("FBI")) {
					Features::changeClothes("SPECIAL1", 125, 0);
					Features::changeClothes("SPECIAL2", 122, 0);
				}
			}
			if (genderPos == 1) {
				if (Menu::Option("Outfit 1")) {
					Features::changeClothes("MASK", 38, 0);
					Features::changeClothes("LEGS", 33, 0);
					Features::changeClothes("SPECIAL3", 1, 1);
					Features::changeClothes("TORSO2", 46, 0);
					Features::changeClothes("SHOES", 24, 0);
					Features::changeClothes("SPECIAL2", 159, 0);
				}
				if (Menu::Option("Outfit 2")) {
					Features::changeClothes("LEGS", 33, 0);
					Features::changeClothes("SPECIAL3", 1, 1);
					Features::changeClothes("TORSO2", 46, 0);
					Features::changeClothes("SHOES", 24, 0);
					Features::changeClothes("SPECIAL2", 159, 0);
				}
				if (Menu::Option("Cop 1")) {
					Features::changeClothes("HATS", 46, 0);
					Features::changeClothes("TORSO2", 48, 0);
					Features::changeClothes("LEGS", 34, 0);
					Features::changeClothes("SHOES", 55, 0);
					Features::changeClothes("SPECIAL2", 35, 0);
				}
				if (Menu::Option("Cop 2")) {
					Features::changeClothes("TORSO2", 48, 0);
					Features::changeClothes("LEGS", 34, 0);
					Features::changeClothes("SHOES", 55, 0);
					Features::changeClothes("SPECIAL2", 35, 0);
				}
				if (Menu::Option("Prison 1")) {
					Features::changeClothes("TORSO2", 4, 14);
					Features::changeClothes("LEGS", 3, 15);
					Features::changeClothes("SHOES", 3, 0);
				}
				if (Menu::Option("Prison 2")) {
					Features::changeClothes("SPECIAL2", 159, 0);
					Features::changeClothes("TORSO2", 4, 14);
					Features::changeClothes("LEGS", 3, 15);
					Features::changeClothes("SHOES", 3, 0);
				}
				if (Menu::Option("Special")) {
					Features::changeClothes("TORSO2", 4, 14);
					Features::changeClothes("LEGS", 3, 41);
					Features::changeClothes("SHOES", 3, 0);
				}
				if (Menu::Option("FBI")) {
					Features::changeClothes("SPECIAL1", 95, 0);
					Features::changeClothes("SPECIAL2", 152, 0);
				}
			}
			/*
			0: HATS
			1: GLASSES
			2: EARS

			0: FACE
			1: MASK
			2: HAIR
			3: TORSO
			4: LEGS
			5: HANDS
			6: SHOES
			7: SPECIAL1
			8: SPECIAL2
			9: SPECIAL3
			10: TEXTURE
			11: TORSO2
			*/
		}
		break;


		case objSpawner:
		{


			Menu::Title("Object Spawner");
			Menu::MainTitle("~c~[Shade 1.0]");
			//UI::Break("Prop Spawner");
			if (Menu::ListVector("Prop List", propList, propListPos)) {
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				latestObj = SpawnObject(propList[propListPos], pos);
			}
			if (Menu::ListVector("Stunt Props", Stuntlist, StuntlistPos)) {
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				latestObj = SpawnObject(Stuntlist[StuntlistPos], pos);
			}
			if (Menu::ListVector("NPC's", namedPedList, namedPedListPos)) {
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				DWORD model = GAMEPLAY::GET_HASH_KEY(namedPedList[namedPedListPos]);
				STREAMING::REQUEST_MODEL(model);
				while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(0);
				latestObj = latestObj = PED::CREATE_PED(0, GAMEPLAY::GET_HASH_KEY(namedPedList[namedPedListPos]), pos.x, pos.y, pos.z, 0.f, 1, 1);
			}
			if (Menu::Option("Input Object")) {
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				latestObj = SpawnObject(CharKeyboard(), pos);
			}
			Menu::Toggle("Freeze On Spawn", freezeSpawn);
			for (int i = 0; i < spwnObjC; i++)
			{
				if (ENTITY::DOES_ENTITY_EXIST(spwndObjects[i])) {
					if (Menu::MenuOption(spwndObjectsNames[i], editObj))
					{
						latestObj = spwndObjects[i];
						selecObj = i;
						Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
						Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
						MoveX = objCoords.x;
						MoveY = objCoords.y;
						MoveZ = objCoords.z;
						roll1 = objRot.y;
						yaw1 = objRot.z;
						pitch1 = objRot.x;
					}
				}
			}
		}
		break;

		case Neons: {
			//Menu::DRAW_TEXTURE("shopui_title_clubhousemod", "shopui_title_clubhousemod", titlebox, 0.0800f, 0.21f, 0.090f, 0, 255, 255, 255, 255);
			Menu::Title("Neons");
			Menu::MainTitle("NEONS OPTIONS");

			Menu::Toggle("Rainbow Neons", Features::Rneon, [] { Features::RainbowNeon(Features::Rneon); });

			if (Menu::Option("Enable Xenon")) {
				int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
				Features::ToggleXenon(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0));
			}
			if (Menu::Option("Enable Neons")) {
				int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 1);
				VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 0, 1);
				VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 1, 1);
				VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 2, 1);
				VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 3, 1);
				VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 4, 1);
				VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 5, 1);
				VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 6, 1);
				VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 7, 1);
			}
			if (Menu::Option("Red")) {
				int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 1);
				VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 255, 0, 0);
			}
			if (Menu::Option("Green")) {
				int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
				VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 0, 255, 0);
			}
			if (Menu::Option("Blue")) {
				int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
				VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 0, 0, 255);
			}
			if (Menu::Option("Hot Pink")) {
				int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
				VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 226, 35, 157);
			}
			if (Menu::Option("Yellow")) {
				int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
				VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 247, 244, 0);
			}
			if (Menu::Option("Orange")) {
				int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
				VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 247, 91, 0);
			}
			if (Menu::Option("Aqua")) {
				int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
				VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 40, 255, 255);
			}
			if (Menu::Option("White")) {
				int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
				VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 255, 255, 255);
			}
			if (Menu::Option("Magenta")) {
				int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
				VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 102, 0, 35);
			}
			if (Menu::Option("Purple")) {
				int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
				VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 53, 0, 83);
			}
			if (Menu::Option("Dark Green")) {
				int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
				VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 0, 118, 0);
			}
			if (Menu::Option("Rose Red")) {
				int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
				VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 161, 0, 0);
			}
		}
					break;



		case editObj:
		{


			Menu::Title("");
			Menu::MainTitle("Edit Object");
			Menu::MainTitle(spwndObjectsNames[selecObj]);
			if (Menu::Option("Delete")) {
				RequestControlOfEnt(latestObj);
				ENTITY::DELETE_ENTITY(&latestObj);
				spwndObjectsNames[selecObj] = NULL;
				spwndObjects[selecObj] = NULL;
				MapModObjs.pop_back();
				Menu::MenuLevelHandler::BackMenu();
			}
			if (Menu::Toggle("Freeze", freezeObj)) {
				ENTITY::FREEZE_ENTITY_POSITION(latestObj, freezeObj);
			}
			if (Menu::Toggle("Collision", collisionObj)) {
				ENTITY::SET_ENTITY_COLLISION(latestObj, collisionObj, true);
			}
			if (Menu::Float("X", MoveX, -80000000.f, 80000000.f, .5f)) {
				RequestControlOfEnt(latestObj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
				ENTITY::SET_ENTITY_COORDS(latestObj, MoveX, objCoords.y, objCoords.z, objRot.x, objRot.y, objRot.z, false);
			}
			if (Menu::Float("Y", MoveY, -80000000.f, 80000000.f, .5f)) {
				RequestControlOfEnt(latestObj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
				ENTITY::SET_ENTITY_COORDS(latestObj, objCoords.x, MoveY, objCoords.z, objRot.x, objRot.y, objRot.z, false);
			}
			if (Menu::Float("Z", MoveZ, -80000000.f, 80000000.f, .5f)) {
				RequestControlOfEnt(latestObj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
				ENTITY::SET_ENTITY_COORDS(latestObj, objCoords.x, objCoords.y, MoveZ, objRot.x, objRot.y, objRot.z, false);
			}
			if (Menu::Float("Roll", roll1, 0.f, 360, 2.f)) {
				RequestControlOfEnt(latestObj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
				ENTITY::SET_ENTITY_ROTATION(latestObj, objRot.x, roll1, objRot.z, 1, true);
			}
			if (Menu::Float("Yaw", yaw1, 0.f, 360, 2.f)) {
				RequestControlOfEnt(latestObj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
				ENTITY::SET_ENTITY_ROTATION(latestObj, objRot.x, objRot.y, yaw1, 1, true);
			}
			if (Menu::Float("Pitch", pitch1, 0.f, 360, 2.f)) {
				RequestControlOfEnt(latestObj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
				ENTITY::SET_ENTITY_ROTATION(latestObj, pitch1, objRot.y, objRot.z, 1, true);
			}
		}
		break;

		case editObjj:
		{
			Menu::Title(spwndObjectsNames[selecObjj]);
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (Menu::Option("Delete")) {
				RequestControlOfEnt(latestObjj);
				ENTITY::DELETE_ENTITY(&latestObjj);
				spwndObjectsNames[selecObjj] = NULL;
				spwndObjects[selecObjj] = NULL;
				MapModObjs.pop_back();
				Menu::MenuLevelHandler::BackMenu();
			}
			if (Menu::Toggle("Freeze", freezeObjj)) {
				ENTITY::FREEZE_ENTITY_POSITION(latestObj, freezeObjj);
			}
			if (Menu::Toggle("Collision", collisionObjj)) {
				ENTITY::SET_ENTITY_COLLISION(latestObjj, collisionObjj, true);
			}
			if (Menu::Float("X", MoveX, 0.f, 100000000.f, .5f)) {
				RequestControlOfEnt(latestObj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
				ENTITY::SET_ENTITY_COORDS(latestObj, MoveX, objCoords.y, objCoords.z, objRot.x, objRot.y, objRot.z, true);
			}
			if (Menu::Float("Y", MoveY, 0.f, 100000000.f, .5f)) {
				RequestControlOfEnt(latestObj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
				ENTITY::SET_ENTITY_COORDS(latestObj, objCoords.x, MoveY, objCoords.z, objRot.x, objRot.y, objRot.z, true);
			}
			if (Menu::Float("Z", MoveZ, 0.f, 100000000.f, .5f)) {
				RequestControlOfEnt(latestObj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
				ENTITY::SET_ENTITY_COORDS(latestObj, objCoords.x, objCoords.y, MoveZ, objRot.x, objRot.y, objRot.z, true);
			}
			if (Menu::Float("Roll", roll1, 0.f, 360, 2.f)) {
				RequestControlOfEnt(latestObjj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObjj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObjj, 0);
				ENTITY::SET_ENTITY_ROTATION(latestObjj, objRot.x, roll1, objRot.z, 1, true);
			}
			if (Menu::Float("Yaw", yaw1, 0.f, 360, 2.f)) {
				RequestControlOfEnt(latestObjj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObjj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObjj, 0);
				ENTITY::SET_ENTITY_ROTATION(latestObjj, objRot.x, objRot.y, yaw1, 1, true);
			}
			if (Menu::Float("Pitch", pitch1, 0.f, 360, 2.f)) {
				RequestControlOfEnt(latestObjj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObjj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObjj, 0);
				ENTITY::SET_ENTITY_ROTATION(latestObjj, pitch1, objRot.y, objRot.z, 1, true);
			}
		}
		break;

		case dropOnlineall:
		{
			Menu::Title("Drop Player");
			Menu::MainTitle("~c~[Shade 1.0]                             ");


			Menu::Toggle("~w~Cash Drop", Features::alldrop, [] { Features::AllDrop(Features::alldrop); });
			if (Menu::Int("Amount", Features::DropAmount, 1, 2500))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropAmount = NumberKeyboard();
				}
			}


			if (Menu::Int("Height", Features::DropHeight, 1, 50))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropHeight = NumberKeyboard();
				}
			}


			if (Menu::Int("Delay", Features::DropDelay, 50, 1000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropDelay = NumberKeyboard();
				}
			}

			Menu::Int("Bags", Features::Bags, 0, 20);

			Menu::MainTitle("~c~[Shade 1.0]                             ");

			//Menu::Break("Models");
			dropModelsSelect();
		}
		break;

		case dropOnline:
		{
			Menu::Title("Drop Player");
			Menu::MainTitle("~c~[Shade 1.0]                             ");

			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(29, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 1, 1, 1, 0, 255, 255, 200, 1, 1, 1, 0, 0, 0, 0);
			}
			Menu::Toggle("Drop", Features::cashdrop69Toggle[Features::Online::selectedPlayer]);
			if (Menu::Int("Amount", Features::DropAmount, 1, 2500))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropAmount = NumberKeyboard();
				}
			}

			if (Menu::Int("Height", Features::DropHeight, 1, 50))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropHeight = NumberKeyboard();
				}
			}


			if (Menu::Int("Delay", Features::DropDelay, 50, 1000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropDelay = NumberKeyboard();
				}
			}




			Menu::Int("Bags", Features::Bags, 0, 20);


			Menu::Break("~w~c~ SHADE Version 1.1         ~HUD_COLOUR_GOLD~GTA           ");

			Menu::Break("Models");
			dropModelsSelect();

		
		}
		}
		}
		break;
#pragma endregion

		}
		Menu::End(0);
		WAIT(0);
	}
}
void ScriptMain() {
	srand(GetTickCount());
	Features::TimePD = timeGetTime();
	Features::TimePD1 = timeGetTime();
	Features::TimePD2 = timeGetTime();
	Features::TimePD3 = timeGetTime();
	Features::TimePD4 = timeGetTime();
	Features::TimePD5 = timeGetTime();
	Features::TimePD6 = timeGetTime();
	Features::TimePD7 = timeGetTime();
	Features::TimePD8 = timeGetTime();
	main();
}


